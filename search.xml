<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Springmvc文件上传</title>
    <url>/2020/09/25/SprigMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h2 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h2><h3 id="前端页面的要求"><a href="#前端页面的要求" class="headerlink" title="前端页面的要求"></a>前端页面的要求</h3><p>为了上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制流数据发送给服务器。</p>
<a id="more"></a>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="引入fileupload和io坐标"><a href="#引入fileupload和io坐标" class="headerlink" title="引入fileupload和io坐标"></a>引入fileupload和io坐标</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>1.3.3版本</strong>会自动引入io包，所以不需要在单独引入</p>
<h3 id="配置DispatcherServlet（前端控制器）"><a href="#配置DispatcherServlet（前端控制器）" class="headerlink" title="配置DispatcherServlet（前端控制器）"></a>配置DispatcherServlet（前端控制器）</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--绑定applicationContext.xml，里面用来配置springmvc需要的一些东西--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--设置启动级别,1为服务器已启动就启动--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="配置MultipartResolver解析器"><a href="#配置MultipartResolver解析器" class="headerlink" title="配置MultipartResolver解析器"></a>配置MultipartResolver解析器</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!--开启注解扫描--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pty.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token comment">&lt;!--配置MultipartResoolver，用于文件上传--></span>
    <span class="token comment">&lt;!--注意：CommonsMultipartResolver的id是固定不变的，一定是multipartResolver，不能修改--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--阈值，低于这个的保存在内存中，高于这个的，生成硬盘上的临时文件--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxInMemorySize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40960<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment">&lt;!--上传文件大小上限，单位为字节,这是总的文件的大小--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>104857600<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment">&lt;!--设置请求的编码格式，这里设置为utf-8，默认为IOS-8859-1--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment">&lt;!--单个文件大小上限--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSizePerFile<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Upload</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>
    <span class="token comment">//@RequestParam("file)将前端表单中name=file的控件得到的文件封装成MultipartFile 对象</span>
    <span class="token comment">//如果上传的是多文件，将MutipartFile改成MutipartFile 数组即可</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//获取文件名</span>
        <span class="token class-name">String</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//判断是否上传文件(即文件名是否为空)，如果没有，返回上传页</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"上传失败"</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">/*
        除了通过判断文件名是否为空来判断是否上传文件，还可以通过以下方式来验证
        1. 判断文件的大小是否大于0：file.getSize()得到文件的大小，进行判断。
        2.判断文件是否为空： file.isEmpty()
         */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传文件名"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取文件存储路径（绝对路径）</span>
        <span class="token comment">/*session.getServletContext()拿到了一个servlet的容器
        这个path的位置是
        */</span>
        <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//可以对上传的文件的类型做限制，比如说只能够上传jpg和png的图片文件</span>
        <span class="token comment">//注意这里的逻辑问题，我一开始是用或，但是应该是既不是jpg也不是png，应该用与</span>
        <span class="token comment">//endsWith:判断字符串是否以指定的后缀结尾</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"格式不符合"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//新建文件实例</span>
        <span class="token comment">/*这里应该使用File(String parent, String child) 构造方法，从父路径和子路径字符创建新的File实例
        因为下面的transferTo（）会将上传的文件保存到一个目录文件中，即让这个目录文件变成上传的文件。
        我之前就是使用File(String pathname)构造方法，使得upload文件夹变成了upload文件*/</span>
        <span class="token class-name">File</span> upfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//判断是否有此文件，没有的话就创建一个。</span>
        <span class="token comment">//因为如果是第一次保存，就没有文件。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>upfile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/*新建文件,因为上面创建File实例的时候，创建了两层路径。
            mkdir()创建由此抽象路径名命名的目录。
            mkdirs() 创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录。
            因为创建了两层路径，用前者创建的时候只会创建最后一层目录，如果第一层路径没有，则看不到创建出来的目录
            而后者在创建最后一层的目录时，还会创建最后一层之前且不存在的目录。
            */</span>
            upfile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传路径"</span> <span class="token operator">+</span> upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//接收用户上传文件流，输出到指定文件中</span>
            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//得到上传文件的路径和名字，将其生成一个字符串，然后将这个值保存到数据库。</span>
        <span class="token comment">//比如说图片，用户上传头像，我们将图像路径保存到数据库，显示的时候直接将这个地址返回给前端</span>
        <span class="token comment">//然后就可以显示图片</span>
        <span class="token class-name">String</span> filePath <span class="token operator">=</span> path<span class="token operator">+</span>filename<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>减少了一些注释，以后可以直接拿过来用</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pty<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RestController</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> fileupload <span class="token punctuation">&#123;</span>

        <span class="token comment">//@RequestParam("file)将前端表单中name=file的控件得到的文件封装成MultipartFile 对象</span>
        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token string">"redirect:index.jsp"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名："</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//获取文件存储路径（绝对路径）</span>
            <span class="token comment">//session.getServletContext()拿到了一个servlet的容器</span>
            <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token string">"redirect:index.jsp"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">File</span> upfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>upfile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                upfile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传路径"</span> <span class="token operator">+</span> upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token string">"hahah"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h2><p>上面的操作是单文件上传，但有时候会需要上传多个文件。</p>
<p>我们的方法是将多文件上传分解成单文件上传。</p>
<p>可以通过一个方法来接收前端传过来的文件，然后我们将文件遍历，单个文件在调用保存方法。</p>
<h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><p>一次性选择多个文件上传，在input标签中添加<strong>multiple</strong>属性</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/test/upload.do<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 
  一次选择多个文件的多文件上传 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs1<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
 
  一次选择一个文件的多文件上传 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
 
  单文件上传 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Controller层-1"><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h3><p>多文件上传是，需要用MultipartFile数组来接收这些文件。</p>
<p>虽然从前端接收到了多个文件，但是springmvc只会将一个文件封装进一个MultipartFile对象，而不会将多个文件封装进一个MutipartFile数组，所以需要使用<code>@RequestParam</code>注解来校正参数，必须写。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">&#123;</span>
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/upload.do"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs1<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs2<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs3<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img <span class="token operator">:</span> imgs1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//遍历文件，单个文件在调用保存的方法，也就是上面写的controller,这里就不写了。</span>
      <span class="token function">uploadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img <span class="token operator">:</span> imgs2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">uploadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img <span class="token operator">:</span> imgs3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">uploadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token string">"/success.jsp"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="MultipartFile类常用的一些方法"><a href="#MultipartFile类常用的一些方法" class="headerlink" title="MultipartFile类常用的一些方法"></a>MultipartFile类常用的一些方法</h3><ul>
<li>String getContentType()：获取文件MIME类型</li>
<li>InputStream getInputStream()：后去文件流</li>
<li>String getName() ：获取表单中文件组件的名字</li>
<li>String getOriginalFilename() ：获取上传文件的原名</li>
<li>long getSize() ：获取文件的字节大小，单位byte</li>
<li>boolean isEmpty() ：是否为空</li>
<li>void transferTo(File dest) ：保存到一个目标文件中。</li>
</ul>
<h3 id="CommonsMultipartResolver的属性解析"><a href="#CommonsMultipartResolver的属性解析" class="headerlink" title="CommonsMultipartResolver的属性解析"></a>CommonsMultipartResolver的属性解析</h3><ul>
<li>defaultEncoding：表示用来解析request请求的默认编码格式，当没有指定的时候根据Servlet规范会使用默认值ISO-8859-1。当request自己指明了它的编码格式的时候就会忽略这里指定的defaultEncoding。</li>
<li>uploadTempDir：设置上传文件时的临时目录，默认是Servlet容器的临时目录。</li>
<li>maxUploadSize：设置允许上传的总的最大文件大小，以字节为单位计算。当设为-1时表示无限制，默认是-1。</li>
<li>maxUploadSizePerFile：跟maxUploadSize差不多，不过maxUploadSizePerFile是限制每个上传文件的大小，而maxUploadSize是限制总的上传文件大小。</li>
<li>maxInMemorySize：设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240。</li>
<li>resolveLazily：为true时，启用推迟文件解析，以便在UploadAction中捕获文件大小异常。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的多文件上传是参考一遍博客的，我自己没有打代码实现，可能会存在问题。</p>
<p>经过这次操作，发现了一些问题。</p>
<ol>
<li>要保持一个好的心态，一般问题的出现是一个接着一个的，不要太早崩溃。</li>
<li>出现错误的时候，先检查下自己的环境，很多时候并不是代码的原因而是环境的问题，比如说一些依赖没有导入，项目结构中的Artifacts中没有jar包。</li>
<li>尽量多查文档之类的。</li>
<li>没事别手贱乱删东西，说真的强迫症搞程序员太难了，看到一些没用的东西就想删，但是那个可能只是你以为没有用。</li>
<li>要熟悉新建一个模板的流程，现在用的是springmvc,需要自己配置tomcat，让项目变成web项目。虽然springboot在这些方面比较方便，但是还是要多加练习。</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot整合mybatis 和 druid</title>
    <url>/2020/09/13/Springboot%E6%95%B4%E5%90%88Mybatis%E5%92%8Cdruid/</url>
    <content><![CDATA[<p>在实际开发中，我们一般不使用springboot自带的数据池，通常会整合mybatis和druid连接池，这篇博客就是用来记录怎么整合mybatis和druid</p>
<a id="more"></a>

<h2 id="spring-boot-整合mybatis"><a href="#spring-boot-整合mybatis" class="headerlink" title="spring boot 整合mybatis"></a>spring boot 整合mybatis</h2><ol>
<li>导入相关依赖</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者在用<strong>Spring initializr</strong>创建springboot项目时直接添加mybatis maven坐标</p>
<ol start="2">
<li><p>配置数据源</p>
<p>在resource下新建一个application.yml文件</p>
<p>在里面配置数据源信息</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
  	<span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/blog<span class="token punctuation">?</span>serverTimezone=UTC  
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root   
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>username</strong> 如果使用 **data-username: **好像会出错</p>
<p>会报这个错误： <strong>Access denied for user ‘’@’localhost’ (using password: YES)</strong></p>
</li>
<li><p>添加mybatis配置</p>
</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.example.druid.bean
  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>mapper-locations</code>：mapper所在的文件夹，用来定位mapper的位置</li>
<li><code>type-aliases-package</code>：别名类所在的文件夹，用来给实体类设置别名。</li>
<li><code>config-location</code>：mabatis配置文件的地址，如果用了<code>type-aliases-package</code>,就不用这个，因为在mybatis的配置类中基本上就是设置别名，type这个更加简单，不用再去新建一个config.xml。</li>
</ul>
<ol start="4">
<li><p>创建mapper文件</p>
<p> 在resources文件夹下创建mapper文件夹，在该文件下创建xxxmapper.xml。</p>
<p>在xxxmapper.xml下添加如下内容</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">
<span class="token comment">&lt;!--mapper的约束--></span>
<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>
        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--里面写具体的sql语句，必须要写namespace,这个是用来定位到你这个sql语句是由哪一个来调用，全限定类名--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.mapper.Usermapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    
    <span class="token comment">&lt;!--id是用来定位具体是哪个方法来调用。
    resultType表示返回值类型，设置别名之后，只需要写类名就行了，不大小写--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select * from user;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>写mapper,service,controller层，不要忘记注解</p>
<ul>
<li>mapper  @Repository</li>
<li>service @Service</li>
<li>controller @RestController 或者 @Controller 推荐使用@RestController</li>
</ul>
</li>
<li><p>在启动类上面，要写上@MapperScan(“mapper层所在的文件夹的全限定名”)注解，用来定位到mapper层。</p>
</li>
</ol>
<h2 id="springboot整合druid数据库连接池"><a href="#springboot整合druid数据库连接池" class="headerlink" title="springboot整合druid数据库连接池"></a>springboot整合druid数据库连接池</h2><ol>
<li>导入相关依赖</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这两个坐标其实都是导入druid,但是上面的是可以进入到druid的监测页面(<a href="http://localhost:8080/druid)%EF%BC%8C%E6%89%80%E4%BB%A5%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%9D%90%E6%A0%87">http://localhost:8080/druid)，所以推荐使用上面的坐标</a></p>
<ol start="2">
<li>配置数据源</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/blog<span class="token punctuation">?</span>serverTimezone=UTC
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>细心的人会发现其实这个和mybatis配置数据源是差不多的，只不过druid配置时多加了一个type属性</p>
<p><strong>type</strong>：用来设置数据库连接池的种类，我们是要整合druid，所以设置成druid。</p>
<ol start="3">
<li>配置druid的其他属性</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/blog?serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource
    username: root

<span class="token comment">&lt;!--druid其它配置--></span>
    druid:
      #初始化大小
      initial-size: 5
      #最多支持多少个活动会话
      max-active: 50
      #最小连接个数
      min-idle: 1
      #配置获取连接等待超时的时间，单位是毫秒
      max-wait: 60000
      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      #配置一个连接池最小的生存时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句。
      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
      validation-query: SELECT 1 FROM DUAL
      # 建议配置为true，不影响性能，并且保证安全性。
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 通过别名的方式配置扩展插件，多个英文逗号分隔，常用的插件有：
      #监控统计用的filter:stat
      # 日志用的filter:log4j
      # 防御sql注入的filter:wall
      filters: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>filters这里配置有问题</p>
<ol start="4">
<li>其他的就和整合mybatis一样了。</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2020/09/08/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示</p>
<p>一个#是一级标题，两个#是二级标题，以此类推。支持六级标题</p>
<a id="more"></a>

<p>并且在#后面加上空格之后在添加文字</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span>
<span class="token title important"><span class="token punctuation">##</span> 二级标题</span>
<span class="token title important"><span class="token punctuation">###</span> 三级标题</span>
<span class="token title important"><span class="token punctuation">####</span> 四级标题</span>
<span class="token title important"><span class="token punctuation">#####</span> 五级标题</span>
<span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如下</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul>
<li><p>加粗</p>
<p>要加粗的文字左右分别使用两个*号包起来</p>
</li>
<li><p>斜体</p>
<p>使用一个*包起来</p>
</li>
<li><p>斜体加粗</p>
<p>使用三个*号包起来</p>
</li>
<li><p>删除线</p>
<p>使用两个~~号包起来</p>
</li>
</ul>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">加粗</span><span class="token punctuation">**</span></span>
<span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体</span><span class="token punctuation">*</span></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体加粗</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>
<span class="token strike"><span class="token punctuation">~~</span><span class="token content">删除线</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如下</p>
<p><strong>加粗</strong><br><em>斜体</em><br><strong><em>斜体加粗</em></strong><br><del>删除线</del></p>
<h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前面加&gt;即可，也可以嵌套使用，如加两个&gt;,三个&gt;,n个&gt;</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span>引用
<span class="token blockquote punctuation">>></span>引用2
<span class="token blockquote punctuation">>>></span>引用3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>效果如下</p>
<blockquote>
<p>引用</p>
<blockquote>
<p>引用2</p>
<blockquote>
<p>引用3</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或三个以上的+ - *都可以</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">+++
<span class="token title important">*****
<span class="token punctuation">----</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">![<span class="token content">图片alt</span>](图片地址 <span class="token string">"图片title"</span>)</span>
图片alt就是显示在图片下面的文字，相当于对图片内容的解释
图片title是图片的标题，当鼠标移到图片上时显示的内容，title可加可不加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;
u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;区块链&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>效果如下：</p>
<p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p>
<h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">超链接名</span>](超链接地址 <span class="token string">"超链接title"</span>)</span>
title 可加可不加
[百度] (http://www.baidu.com)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>效果如下：</p>
<p><a href="http://baidu.com/" title="百度">百度</a></p>
<p><strong>注意</strong>：markdown本身不支持超链接在新页面中打开，如果想在新页面中打开的话可以用html中的a标签来代替</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>超链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>效果如下</p>
<p><a href="http://www.baidu.com" target="_blank">百度</a>  (但是这个好像也打开不了)</p>
<h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><p><strong>无序列表</strong></p>
<p>使用 + - * 任意一种都可以</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 无序列表
<span class="token list punctuation">+</span> 无序列表
<span class="token list punctuation">*</span> 无序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>效果如下</p>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<p><strong>有序列表</strong></p>
<p>数字加点    <em>在点的后面要加空格</em></p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1. 
2. 
3. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>列表的嵌套</strong></p>
<p>只需要在字列表的选项前面添加4个空格即可</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 有序列表
    <span class="token list punctuation">-</span> 无序列表1
    <span class="token list punctuation">-</span> 无序列表2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol>
<li>有序列表<ul>
<li>无序列表1</li>
<li>无序列表2</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-markd" data-language="markd"><code class="language-markd">- 无序列表
    1. 有序列表
    2. 有序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>无序列表<ol>
<li>有序列表</li>
<li>有序列表</li>
</ol>
</li>
</ul>
<h2 id="八、代码"><a href="#八、代码" class="headerlink" title="八、代码"></a>八、代码</h2><p>代码之间分别用一个反引号包起来</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code keyword">`void main`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>效果如下</p>
<p><code>public static void main(String args[])</code></p>
<p><strong>代码块</strong></p>
<p>用四个反引号包起来，后面写语言名称(三个反引号也可以)</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">​<span class="token code keyword">````java    ``</span>`java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>效果如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​        </p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot整合日志框架</title>
    <url>/2020/09/15/springboot%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>在项目的开发中，日志是必不可少的一个记录事件的组件，所以也会相应的在项目中实现和构建我们所需要的日志框架。</p>
<p>而市面上常见的日志框架有很多，比如：JCL、SLF4J、Jboss-logging、jUL、log4j、log4j2、logback等等，我们该如何选择呢？</p>
<p>通常情况下，日志是由一个抽象层+实现层的组合来搭建的。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>日志-抽象层</th>
<th>日志-实现层</th>
</tr>
</thead>
<tbody><tr>
<td>JCL、SLF4J、jboss-logging</td>
<td>jul、log4j、log4j2、logback</td>
</tr>
</tbody></table>
<p><strong>springboot选择了SLF4J和logback</strong></p>
<h2 id="1-如何使用SLF4J"><a href="#1-如何使用SLF4J" class="headerlink" title="1.如何使用SLF4J"></a>1.如何使用SLF4J</h2><p>在以后的开发中，日志记录方法的调用，不应该来直接调用日志的实现层，而是调用日志抽象层的方法。</p>
<p>SLF4J就是日志抽象层，而logback就是日志的实现层。</p>
<p>给项目中导入slf4j和logback的实现jar</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要先生成一个log的对象</p>
<p>但在实际开发中，我们一般使用**@Slf4j**注解。</p>
<p>导入**@Slf4j**的依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后还要设置的Plugins里面安装Lombok插件。</p>
<p>在类的前面写上**@Slf4j**，就不用通过<code>LoggerFactory</code>创建Logger对象了，可以直接使用log。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="2-配置logback"><a href="#2-配置logback" class="headerlink" title="2.配置logback"></a>2.配置logback</h2><p>使用logback需要导入<strong>spring-boot-starter-logging</strong>依赖</p>
<p>但在实际开发中，我们不需要导入这个依赖，因为<strong>spring-boot-starter</strong>依赖中已经包含了<strong>spring-boot-starter-logging</strong>。因此可以不用引依赖，直接用就行了。</p>
<p>官方推荐使用的xml名字格式是：<code>logback-spring.xml</code>。</p>
<p>为什么是<code>logback-spring.xml</code> 而不是<code>logback.xml</code>呢？因为带spring后缀的可以使用<code>&lt;springProfile&gt;</code>标签</p>
<hr>
<p>在resource目录下新建一个：<code>logback-spring.xml</code>文件</p>
<p>配置如下：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--输出文件位置--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>../crm-admin-log/server-debug.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--编码--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd.HH:mm:ss&#125; [%5p] %c&#123;50&#125; %3L %M %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>immediateFlush</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>immediateFlush</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--日志级别--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>DEBUG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--滚动输出策略，归档文件名字--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>../crm-admin-log/server-debug.log.%d&#123;yyyy-MM-dd&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>../crm-admin-log/server-info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd.HH:mm:ss&#125; [%5p] %c&#123;50&#125; %3L %M %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>immediateFlush</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>immediateFlush</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>../crm-admin-log/server-info.log.%d&#123;yyyy-MM-dd&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>../crm-admin-log/server-warn.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd.HH:mm:ss&#125; [%5p] %c&#123;50&#125; %3L %M %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>../crm-admin-log/server-warn.log.%d&#123;yyyy-MM-dd&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--输出到控制台--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>consoleApp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--输出样式--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>
                %date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level[%thread]%logger&#123;56&#125;.%method:%L -%msg%n
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!--设置某个包或者类使用哪个appende name属性值定义到mapper所在的目录--></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid<span class="token punctuation">"</span></span>  <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>consoleApp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--全局日志级别--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在<strong>application.yml</strong>中配置logging config信息</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>logback<span class="token punctuation">-</span>spring.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>日志框架</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot发送邮箱验证</title>
    <url>/2020/09/15/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<p>在实际开发中，我们通常需要登录和注册用户。在登录的时候我们可以使用验证码来进行验证，但在注册的时候我们看到更多的是使用邮箱验证，即给你发送的邮箱发送一个验证码，然后你将这个验证码输在页面。</p>
<a id="more"></a>

<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ol>
<li><p>我们使用qq邮箱进行邮件发送，需要开启QQ邮箱的POP3/SMTP服务和IMAP/SMTP服务</p>
<ul>
<li>进入QQ邮箱首页，找到设置<img src="/images/blog/qqemail.png" alt="qq邮箱"></li>
<li>进入设置后点击账户，往下拉找到<strong>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</strong></li>
</ul>
<p><img src="/images/blog/pop3.png" alt="pop3"></p>
<ul>
<li>开启POP3和IMAP服务（只开启一个好像也行）</li>
<li>开始这两项服务后各自会生成一串密文密码，把这个保存起来，以后会用到。</li>
<li>我的两个密码分别是  POP3:cplcsiqntwidfgib    IMAP:zxisvqcbpucmiifb</li>
</ul>
</li>
<li><p>springboot配置邮箱服务</p>
<ul>
<li>导入支持邮箱的依赖</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>一个小插曲：</p>
<blockquote>
<p>在后面写代码的时候需要用到<code>JavaMailSenderImpl</code>这个类。</p>
</blockquote>
<blockquote>
<p>但是我导入这个包以后找不到这个类，我以为是还需要添加其他的依赖，百度了一下，导入了<code>spring-context-support</code>这个依赖。然后我点进<code>spring-boot-starter-mail</code>后发现里面已经引入了<code>spring-context-support</code>，所以应该是我最开始没有导入好。</p>
</blockquote>
<ul>
<li>在application.yml中配置邮箱信息</li>
</ul>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> 
	<span class="token key atrule">mail</span><span class="token punctuation">:</span>
		<span class="token key atrule">username</span><span class="token punctuation">:</span> 1219002685@qq.com  <span class="token comment">#发件人账号</span>
		<span class="token key atrule">password</span><span class="token punctuation">:</span> zxisvqcbpucmiifb  <span class="token comment">#这里的password不是填你的qq密码，而是你开去那两个服务后生成的密码</span>
		<span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.qq.com        	<span class="token comment">#邮箱服务器</span>
		<span class="token key atrule">default-encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>		<span class="token comment">#默认编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<p>至此，发送邮箱验证的前期准备工作都已经做完了，接下来就是写代码了！！！！</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><ol>
<li>Controller层</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Email</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">EmailService</span> emailService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/email"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAdress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>emailAdress<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token keyword">return</span> <span class="token string">"发送邮件成功"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"邮件发送失败"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>Service层</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailService</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">JavaMailSenderImpl</span> javaMailSender<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span> <span class="token comment">//验证码</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.mail.username&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sender<span class="token punctuation">;</span>   <span class="token comment">//发送邮件的地址</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        code<span class="token operator">=</span> <span class="token class-name">VerifyCode</span><span class="token punctuation">.</span><span class="token function">getVerifyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"验证码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"尊敬的用户你好：\n"</span><span class="token operator">+</span>
                <span class="token string">"\n本次请求的邮件验证码为："</span><span class="token operator">+</span>code<span class="token operator">+</span><span class="token string">",本次验证码5分钟内有效，请及时输入。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>
        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送邮件</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>@Value()注解：<code> @Value(&quot;$&#123;spring.mail.username&#125;&quot;)</code> 从配置文件中读取username的数据。</li>
<li><code> SimpleMailMessage message = new SimpleMailMessage();</code>创建一个简单的邮件对象。</li>
<li><code>message.setSubject()</code>设置邮件的标题</li>
<li><code>message.setText()</code>设置邮件的内容</li>
<li><code>message.setTo()</code>设置收件人的地址</li>
<li><code>message.setFrom()</code>设置发件人的地址</li>
</ul>
<ol start="3">
<li>随机生成6位数的验证码</li>
</ol>
<p>使用SecureRandom生成随机数。</p>
<blockquote>
<p>Math.random生成的是一般随机数，采用的是类似于统计学的随机数生成规则，其输出结果很容易预测，因此可能导致被攻击者击中。而SecureRandom是真随机数，采用的是类似于密码学的随机数生成规则，其输出结果较难预测，若想要预防被攻击者攻击，最好做到使攻击者根本无法，或不可能鉴别生成的随机值和真正的随机值</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VerifyCode</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SYMBOLS<span class="token operator">=</span><span class="token string">"0123456789"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> RANDOM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getVerifyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> verifycode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//生成一个长度为6的字符数组</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> verifycode<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//SYMBOLS.charAt()：返回目标索引下的字符</span>
            <span class="token comment">//RANDOM.nextInt(xx)：生成0~xx-1的随机数</span>
            <span class="token comment">//每次随机生成一个数x，并将SYMBOLS中的第n+1个数字返回给verifycode</span>
            verifycode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>SYMBOLS<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>RANDOM<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>SYMBOLS<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>verifycode<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将字符数组转成字符串</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>今年一定过四级</title>
    <url>/2020/10/12/%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<ol>
<li><p><strong>stability：</strong> n  稳定（性）、稳固（性）</p>
<ul>
<li>social stability          社会稳定</li>
<li>stable        adj  稳定的    n 马厩，牛棚</li>
</ul>
<a id="more"></a></li>
<li><p><strong>trace：</strong> n   痕迹、踪迹、足迹、微量、追查；v   仔细寻找、追踪、研究….的历史、探究…..的发展;  v 描绘</p>
<ul>
<li>trace back       追溯</li>
<li>a trace of   少量的，一丝的</li>
<li>without trace  了无踪迹</li>
</ul>
</li>
<li><p><strong>admission：</strong> n  允许加入，许可；入场费；承认</p>
<ul>
<li>admit   vt  承认，允许进入；vi 承认，容许</li>
<li>admission office     招生办</li>
<li>permission   n    允许，许可</li>
</ul>
</li>
<li><p><strong>arrival：</strong>  n    到达，抵达，到达者</p>
<ul>
<li>cash on arrival   货到付款</li>
<li>with the arrival of    随着…的到来</li>
<li>arrive  vi 到达</li>
</ul>
</li>
<li><p><strong>fifty：</strong>   n   五十几，五十年代；num  五十 ；adj 许多的</p>
<ul>
<li>fiftieth    第五十的，五十分之一的</li>
</ul>
</li>
<li><p><strong>pollution：</strong> n 污染，污染物，垃圾</p>
<ul>
<li>to reduce levels of environmental pollution    降低环境污染的程度</li>
<li>environmental pollution   环境污染</li>
<li>popular  n   流行</li>
<li>population  n  人口</li>
</ul>
</li>
<li><p><strong>mile：</strong> n  英里，很远的距离 </p>
<ul>
<li>meter   n  米</li>
<li>mile better  好得多  ： she’s felling mile better today.   她今天觉得好多了</li>
<li>stand out a mile 显而易见</li>
<li>kilometer  公里</li>
</ul>
</li>
<li><p><strong>glove：</strong>  n   手套 ；  v  给戴手套</p>
<ul>
<li>a pair of gloves   一副手套</li>
<li>fit…..like a glove    恰当，合身,对….来说很合适</li>
<li>as right as my glove  完全正确</li>
</ul>
</li>
<li><p><strong>romantic：</strong>  adj  浪漫的，爱情的；n 浪漫的人，耽于幻想的人</p>
<ul>
<li>I‘m not interested in a romantic relationship   我对谈情说爱不感兴趣</li>
<li>romantic notions    异想天开的念头</li>
<li>romance   浪漫史，爱情小说，恋爱关系</li>
<li>romantic movement  n  浪漫主义运动</li>
</ul>
</li>
<li><p><strong>angle：</strong> n  角，角度，观点，斜角   v.钓鱼</p>
<ul>
<li>eye angle    视野</li>
<li>angle for  谋取   angle for promotion   谋求升职</li>
<li>triangle   三角形</li>
<li>anger  生气；  angel  天使</li>
</ul>
</li>
<li><p><strong>lawn：</strong> n  草坪，草地，上等细棉布</p>
<ul>
<li>He spent a whole afternoon mowing the lawn in front of his house  他花了一下午的时间修剪门前的草坪</li>
<li>lawn mower  割草机</li>
<li>meadow  草原</li>
</ul>
</li>
<li><p><strong>bite：</strong>  v  咬，叮； n  咬，少量食物</p>
<ul>
<li>Stop biting your nails   别咬指甲了</li>
<li>bite the dust  碰瓷了</li>
</ul>
</li>
<li><p><strong>brilliant：</strong> adj  聪颖的，才华横溢的，优秀的，卓越的；  n  钻石</p>
<ul>
<li>a brilliant performance  精彩的表演</li>
<li>a brilliant culture  灿烂的文化</li>
<li>a brilliant sunshine  灿烂的阳光</li>
<li>brilliant idea 高招，绝妙的主意   He came up a brilliant idea. 他想出了一个绝妙的主意。</li>
</ul>
</li>
<li><p><strong>vital：</strong> adj  重要的，必不可少的，生机勃勃的</p>
<ul>
<li>The police play a vital role in our society   警察在我们的社会中扮演着重要的角色。</li>
<li>vitality   n  精神，活力，力量，生命力</li>
<li>vital issue  至关重要的问题</li>
</ul>
</li>
<li><p><strong>convert：</strong>  v  （使）转变，（使）改变信仰 ;   n  皈依者</p>
<ul>
<li>convert…into   将…改变成   convert stocks into cash   将股票兑换成现金</li>
<li>unconverted   adj  不改变的</li>
<li>converter  转换器</li>
<li>conversation  交谈</li>
</ul>
</li>
<li><p><strong>comprehensive：</strong> adj  综合的，全面的，有理解力的</p>
<ul>
<li>They did a comprehensive study on leanring styles  他们对学习方式做了全面的研究</li>
<li>comprehension  n  理解力，理解</li>
<li>comprehensive university  综合性大学</li>
<li>comprehensive  quality  综合素质</li>
<li>prehensive  adj  握住的，抓住的</li>
</ul>
</li>
<li><p><strong>prominent：</strong> adj 杰出的，显著的，突出的</p>
<ul>
<li>As the leader,he played a prominent part in the team’s victory.  作为队长，他在小组的胜利中发挥了重要的作用</li>
<li>prominently  显著的，明显的</li>
</ul>
</li>
<li><p><strong>load：</strong> v  装填，装载  n  负荷，负担</p>
<ul>
<li>The trucks watied at the warehouse to pick up their loads.货车在仓库等着装载货物。</li>
<li>a load of 大量，许多</li>
<li>study load 学习任务</li>
</ul>
</li>
<li><p><strong>introduction：</strong> n  引入，引进，采用，介绍，入门</p>
<ul>
<li>the introduction of new manufacturing methods 新制造方法的采用</li>
<li>recommend  vt  推荐，介绍，劝告 </li>
<li>letter of introduction   介绍信</li>
<li>brief introduction  简介，简短介绍</li>
<li>introduce  vt 提出 介绍</li>
</ul>
</li>
<li><p><strong>pretend：</strong> v 假装 佯装 自称 模拟；  adj 假装的，想象的</p>
<ul>
<li>I’m tired of having to pretend all the time  我厌倦了一直假装</li>
<li>pretend to 假装 </li>
<li>pretend anger 假装生气 </li>
<li>pretend to be   假装是</li>
<li>pretend to do sth   假装做某事</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>单词</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>开发中遇到的问题</title>
    <url>/2020/09/08/%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="springboot集成mybatis后，开始事务管理"><a href="#springboot集成mybatis后，开始事务管理" class="headerlink" title="springboot集成mybatis后，开始事务管理"></a>springboot集成mybatis后，开始事务管理</h3><ol>
<li>启用全局事务管理：在springboot的启动类上面，添加@**EnableTransactionManagement(proxyTargetClass = true)**注解</li>
<li>在service层中，在要添加的方法上面添加@Transactional注解，代表这个方法里面的操作是在同一个事务里面的，只要有一个事务有异常，就会回滚。</li>
</ol>
<a id="more"></a>



<h3 id="外键是用来干嘛的？"><a href="#外键是用来干嘛的？" class="headerlink" title="外键是用来干嘛的？"></a>外键是用来干嘛的？</h3><ul>
<li>外键是用来构建两个表的关系的，比如一张学生表和班级表，学生表里面有个字段classno，我们可以通过这个字段，查询出他是哪个班的。这个字段classno就是外键。</li>
<li>外键必须依赖于数据库中的已经存在的一张表的主键，被依赖的表叫做父表，有外键的表叫做子表。</li>
<li>在实际开发中，不设置物理外键（即不设置出真正的外键），因为设置了物理外键在进行删除，插入等操作会很麻烦还会影响性能。我们一般是设置逻辑外键（即我们知道这个字段是起外键的作用就行了）。</li>
</ul>
<h3 id="有了外键应该怎么删除数据"><a href="#有了外键应该怎么删除数据" class="headerlink" title="有了外键应该怎么删除数据"></a>有了外键应该怎么删除数据</h3><ul>
<li>设置外键以后，设置外键的表称为子表，被关联的表称为父表。</li>
<li>设置外键以后，要先删除子表再删除父表。</li>
</ul>
<h3 id="mybatis中parameterType中怎么传入多个不同类型的参数"><a href="#mybatis中parameterType中怎么传入多个不同类型的参数" class="headerlink" title="mybatis中parameterType中怎么传入多个不同类型的参数"></a>mybatis中parameterType中怎么传入多个不同类型的参数</h3><ol>
<li><p>不需要写parameterType参数</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">public List<span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span>String xxId<span class="token punctuation">,</span> String xxCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

　　select t.* from tableName where id = #&#123;0&#125; and name = #&#123;1&#125;  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于是多参数那么就不能使用parameterType， 改用#｛index｝是第几个就用第几个的索引，索引从0开始</p>
</li>
<li><p>注解</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">public List<span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span><span class="token metadata symbol">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>int id<span class="token punctuation">,</span> <span class="token metadata symbol">@Param</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>String code<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

　　select t.* from tableName where id = #&#123;id&#125; and name = #&#123;code&#125;  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于是多参数那么就不能使用parameterType， 这里用@Param来指定哪一个</p>
</li>
<li><p>Map封装</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span>HashMap map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashmap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

　　select 字段... from XXX where id=#&#123;xxId&#125; code = #&#123;xxCode&#125;  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中hashmap是mybatis自己配置好的直接使用就行。map中key的名字是那个就在#{}使用那个，map如何封装就不用了我说了吧。</p>
</li>
<li><p>List封装</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">List</span><span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span><span class="token keyword">List</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token keyword">list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
　　select 字段... from XXX where id in
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
　　　　#&#123;item&#125;  
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>总结</p>
<p>传递list和map在资源消耗上肯定远大于方法一和方法二，但是有一些特殊的情形需要传递list，比如你需要传递一个id集合并批量对id进行sql操作然后再返回等等。所以都需要了解。</p>
</li>
</ol>
<h3 id="Mybatis中传递参数时，会加上单引号吗"><a href="#Mybatis中传递参数时，会加上单引号吗" class="headerlink" title="Mybatis中传递参数时，会加上单引号吗"></a>Mybatis中传递参数时，会加上单引号吗</h3><p>使用**#{参数}**传入会加上单引号，sql语句解析是会加上‘ ’ </p>
<p>比如  select * from table where name = #{name} ,传入的name为小李，那么最后打印出来的就是</p>
<p> select * from table where name = ‘小李’，就是会当成字符串来解析</p>
<p>但是${}并不会加上单引号</p>
<h3 id="在数据库中以时间分组查询数据怎么查"><a href="#在数据库中以时间分组查询数据怎么查" class="headerlink" title="在数据库中以时间分组查询数据怎么查"></a>在数据库中以时间分组查询数据怎么查</h3><p><code>select 时间 from 表名 group by 时间</code></p>
<h3 id="在数据库中按照准确的时间应该怎么查"><a href="#在数据库中按照准确的时间应该怎么查" class="headerlink" title="在数据库中按照准确的时间应该怎么查"></a>在数据库中按照准确的时间应该怎么查</h3><p>使用DATE_FORMAT()函数将date类型的转换为字符串</p>
<p>DATE_FORMAT(date,format)用法：将时间date转换为format格式的字符串</p>
<p>format是自己定义的格式，如<code>DATE_FORMAT(date,&#39;%Y-%m-%d&#39;)</code>，就是将date转换为格式为年-月-日的字符串</p>
<p><code>select * from 表名 where DATE_FORMAT(date,&#39;%Y-%m-%d&#39;)=xxx</code></p>
<h3 id="pageHelper插件的用法"><a href="#pageHelper插件的用法" class="headerlink" title="pageHelper插件的用法"></a>pageHelper插件的用法</h3><p>pageHelper插件是用来解决分页的问题</p>
<p>使用方法</p>
<ol>
<li><p>导入依赖：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 特别注意版本问题 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在controller中直接使用</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/articles"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"得到所有的文章信息，用于在首页进行博客展示,需要传入当前pageNum,不传默认为1,每页显示3条信息"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResResult</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">int</span> pageNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
    <span class="token comment">//传入pageNum的值，defaulValue表示默认值</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置pageNum和pageSize的值</span>
       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articles <span class="token operator">=</span> articleService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>articles<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">//将查询的结果放入PageInfo类中，在里面会有查询到的接货以及分页的信息（比如总页数，总记录数等等）</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResResult</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResResult</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>PageInfo中的一些属性</p>
<pre class="line-numbers language-none"><code class="language-none">private int pageNum;   &#x2F;&#x2F;当前页码
private int pageSize;   &#x2F;&#x2F;每页显示多少条信息
private int size;      &#x2F;&#x2F;当前页有多少条信息
private int startRow;  &#x2F;&#x2F;表示当前页面第一个元素在数据库中的行号
private int endRow;    &#x2F;&#x2F;表示当前页面的最后一个元素在数据库中的行号  startRow和endRow不常用，
private long total;    &#x2F;&#x2F;表示总的记录数
private int pages;     &#x2F;&#x2F;表示总的页数
private List&lt;T&gt; list;  &#x2F;&#x2F;结果集
private int prePage;   &#x2F;&#x2F;前一页
private int nextPage;  &#x2F;&#x2F;后一页
private boolean isFirstPage;  &#x2F;&#x2F;当前页面是第一页吗
private boolean isLastPage;   &#x2F;&#x2F;当前页面是最后一页吗
private boolean hasPreviousPage;  &#x2F;&#x2F;当前页面是否有上一页
private boolean hasNextPage;   &#x2F;&#x2F;当前页面是否有下一页
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h3 id="MapperScan注解的使用"><a href="#MapperScan注解的使用" class="headerlink" title="@MapperScan注解的使用"></a>@MapperScan注解的使用</h3><p>在学习了spring之后，不在需要给dao层建立实体类，只需要写出dao的接口就行了，但是需要我们使用@Mapper注解，在dao接口类上添加@Mapper注解，在编译之后就会生成接口实现类，不在需要我们人为的去写一个实现类。</p>
<p>但是在接口类很多的情况下，就需要我们给很多接口类都添加@Mapper注解，比较麻烦。所以就出现了@MapperScan</p>
<p><strong>@MapperScan注解</strong>用于指定dao接口类所在的包，该包下的每一个接口在编译之后都会生成一个实现类，不用再在每一个接口类上添加@Mapper注解。</p>
<p><strong>@MapperScan注解在springboot启动类上添加</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.hutdsj.blog.mapper"</span><span class="token punctuation">)</span>   <span class="token comment">//指定接口类所在的包，com.hutdsj.blog.mapper下的所有接口都会在编译后生成实现类</span>
<span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token comment">//指定这是一个springboot程序</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogApplication</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">BlogApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>@MapperScan注解指定多个包</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"com.kfit.demo"</span><span class="token punctuation">,</span><span class="token string">"com.kfit.user"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//使用逗号隔开</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="Controller和RestController"><a href="#Controller和RestController" class="headerlink" title="Controller和RestController"></a>Controller和RestController</h3><p><strong>@RestController相当于@Controller和@ResponseBody合在一起的作用</strong></p>
<ol>
<li>如果是要返回到页面，则不需要添加@ResponseBody注解，只需要添加@Controller注解。</li>
<li>如果是要返回json数据，xml或者自定义的media Type内容到页面，就需要使用@RestController。</li>
<li>前后端分离，是将自己从数据库获得的数据以json数据的形式传给前端，所以前后端分离开发时使用@RESTController注解，写在Conrtroller层的最上面。</li>
</ol>
<p>可以参考这篇博客  <a href="https://www.cnblogs.com/shuaifing/p/8119664.html">@Controller注解</a></p>
<h3 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="RequestParam注解"></a>RequestParam注解</h3><p><strong>@RequestParam：</strong>将请求的参数绑定到控制器的方法的参数上，是springmvc中接收普通参数的注解</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">语法：@RequestParam(value=”参数名”,required=”true/false”,defaultValue=””)
 
value：参数名
 
required：是否包含该参数，默认为true，表示该请求路径中必须包含该参数，如果不包含就报错。
 
defaultValue：默认参数值，如果设置了该值，required=true将失效，自动为false,如果没有传该参数，就使用默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>springboot</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2020/10/14/Springboot/</url>
    <content><![CDATA[<h2 id="第一个SpringBoot程序"><a href="#第一个SpringBoot程序" class="headerlink" title="第一个SpringBoot程序"></a>第一个SpringBoot程序</h2><p>官方提供了一个快速生成的网站，idea集成了这个网站。</p>
<a id="more"></a>

<p><img src="images/blog/image-20200927194923490.png" alt="image-20200927194923490"></p>
<h3 id="Hello-SpringBoot程序"><a href="#Hello-SpringBoot程序" class="headerlink" title="Hello,SpringBoot程序"></a>Hello,SpringBoot程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span>

<span class="token comment">//程序的主入口</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloworldApplication</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HelloworldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>helloworld<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//接口：http://localhost:8080/hello</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
       <span class="token keyword">return</span> <span class="token string">"hello，SpringBoot!"</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>helloworld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>helloworld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!--web依赖：tomcat,dispatcherServlet,xml--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment">&lt;!--spring-boot-starter 所有的springboot依赖都是使用这个开头的--></span>

        <span class="token comment">&lt;!--单元测试--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--打jar包插件--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="springboot程序打包"><a href="#springboot程序打包" class="headerlink" title="springboot程序打包"></a>springboot程序打包</h3><p>首先需要引入打jar包的插件（springboot打成jar包，之前是war包）</p>
<p>在maven中的Lifecycle中点击package</p>
<p><img src="images/blog/image-20200927201339226.png" alt="image-20200927201339226"></p>
<p>当控制台出现<code>BUILD SUCCESS</code>说明打包成功</p>
<p>在该项目的target目录下会出现一个jar文件。在dos窗口中使用<code>java -jar jar包的名字.jar</code>运行这个springboot程序</p>
<p>使用dos窗口运行的时候，必须先定位到jar包所在得到目录下。</p>
<p><strong>小插曲</strong></p>
<ul>
<li><p>在dos窗口中，直接输入盘符和冒号就可以切换盘符</p>
<p><img src="images/blog/image-20200927202308137.png" alt="image-20200927202308137"></p>
</li>
<li><p>切换盘符后使用cd 目录名称可以切换工作目录</p>
<p><img src="images/blog/image-20200927202619592.png" alt="image-20200927202619592"></p>
</li>
</ul>
<h3 id="小彩蛋"><a href="#小彩蛋" class="headerlink" title="小彩蛋"></a>小彩蛋</h3><ol>
<li><p>修改端口号</p>
<p>在application.properties中配置</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">server.port=8081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>修改控制台的spring启动标志</p>
</li>
</ol>
<p><img src="images/blog/image-20200927203905671.png" alt="image-20200927203905671"></p>
<ul>
<li>百度在线搜索springbanner : <a href="https://www.bootschool.net/ascii/">springbanner</a>，然后复制自己想要的。<pre><code>- 在springboot的resource下面新建一个banner.txt,粘贴复制的内容
- 重启springboot</code></pre>
</li>
</ul>
<h2 id="SpringBoot自动装配原理"><a href="#SpringBoot自动装配原理" class="headerlink" title="SpringBoot自动装配原理"></a>SpringBoot自动装配原理</h2><h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><ul>
<li>形如<code>spring-boot-starter-xxx</code>这样的就是启动器，启动器说白了就是springboot的启动场景。</li>
<li>比如<code>spring-boot-starte-web</code>，它就会帮我们导入web环境所有的依赖！</li>
<li>springboot会将所有的功能场景都变成一个个的启动器。</li>
<li>我们要是用什么功能，就只需要找到对应的启动器就可以了。</li>
</ul>
<h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span>

<span class="token comment">//程序的主入口</span>
<span class="token comment">//@SpringBootApplication：标注这个类是一个Springboot的主配置类，Springboot就应该运行这个类的main方法来启动springboot应用。</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloworldApplication</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//将springboot应用启动</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HelloworldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>
    excludeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>
    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>
    classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>
    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>
    classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>@SpringBootConfiguration：</strong>SpringBoot的配置类；   </p>
<p>​                标注在某个类上，表示这是一个SpringBoot的配置类；</p>
<p>​                @<strong>Configuration：</strong>配置类上来标注这个注解；</p>
<p>​                            配置类——配置文件；配置类也是容器中的一个组件；@Component</p>
<p>@<strong>EnableAutoConfiguration：</strong>开启自动配置功能</p>
<p>​            以前我们需要配置的东西，SpringBoot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉springboot开启自动配置功能，这样自动配置才能生效；</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigurationPackage</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>@<strong>AutoConfigurationPackage：</strong>自动配置包</p>
<p>​        @Import(AutoConfigurationPackages.Registrar.class)：</p>
<p>​        Spring的底层注解@Import，给容器中导入一个组件。</p>
<p>​        <strong>AutoConfigurationPackage的作用：将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器</strong></p>
<p>@<strong>Import</strong>({AutoConfigurationImportSelector.class})</p>
<p>​    给容器中导入组件</p>
<p>​    AutoConfigurationImportSelector:导入哪些组件的选择器；</p>
<p>​    将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中。</p>
<p>会给容器中导入非常多的自动配置类（xxxAutoConfiguration）,就是给容器中导入这个场景需要的所有组件，并配置好这些组件。</p>
<p><img src="images/blog/image-20201005220032627.png" alt="image-20201005220032627"></p>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等工作。</p>
<p>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值。将这些值作为自动配置类导入到容器中，自动配置类就生效了，帮我们进行自动配置工作。以前我们需要自己配置的东西，自动配置类都帮我们配置好了。</p>
<p>J2EE的整体整合解决方案和自动配置都在<code>spring-boot-autoconfigure-2.3.3.RELEASE</code>  META-INF/spring.factories</p>
<p>结论：springboot所有自动配置都是在启动的时候扫描并加载：<code>spring.factories</code>所有的自动配置类都在这里面，但是不一定所有的配置都会生效，要判断条件是否成立。只要导入了相应的star，就会有对应的启动器，有了启动器，我们的自动装配就会生效，然后就配置成功。</p>
<h2 id="yaml语法讲解"><a href="#yaml语法讲解" class="headerlink" title="yaml语法讲解"></a>yaml语法讲解</h2><p>Springboot使用一个全局的配置文件，配置文件名称是固定的：application.properties或者application.yml</p>
<ul>
<li>application.properties<ul>
<li>语法结构：key=value</li>
</ul>
</li>
<li>application.yml<ul>
<li>语法结构：key:（空格）value</li>
</ul>
</li>
</ul>
<p><strong>配置文件的作用</strong>：修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了，我们可以通过写配置文件来修改默认配置。</p>
<h3 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h3><p><strong>对空格的要求十分要求，不能乱写空格！！！！</strong></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#普通的key-value</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> pty



<span class="token comment">#对象</span>
<span class="token key atrule">student</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> pty
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span>
  <span class="token key atrule">sex</span><span class="token punctuation">:</span> M

<span class="token comment">#对象的行内写法</span>
<span class="token key atrule">student</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">name</span><span class="token punctuation">:</span> pty<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token key atrule">sex</span><span class="token punctuation">:</span> M<span class="token punctuation">&#125;</span>


<span class="token comment">#数组</span>
<span class="token key atrule">pets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> dog
  <span class="token punctuation">-</span> cat
  <span class="token punctuation">-</span> pig
    
<span class="token comment">#数组的行内写法</span>
<span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="yaml给实体类赋值"><a href="#yaml给实体类赋值" class="headerlink" title="yaml给实体类赋值"></a>yaml给实体类赋值</h3><p>spring中赋值的方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将这个类注册到ioc容器里面，相当于写了个&lt;bean class="" id=""/></span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>   <span class="token comment">//使用@Value注解给参数注入值，@Value可以写在set方法上，</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"14"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用yaml赋值</p>
<ul>
<li>在application.yml中写上属性对应的值</li>
</ul>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dog</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> 胜利
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">4</span>
  <span class="token comment">#注意语法，冒号后面有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在实体类上写上<code>@ConfigurationProperties（prefix=&quot;&quot;）</code>注解。</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注册到ioc容器</span>
<span class="token annotation punctuation">@Component</span>
<span class="token comment">//prefix中写上该实体类属性在yml文件中的对象名，并且prefix中的参数不能写大写，如不能写Dog</span>
<span class="token comment">//但是在application.yml中可以可以写大写：Dog</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>@ConfigurationProperties作用：将配置文件中配置的每一个属性的值，映射到这个组件中，告诉SpringBoot将本类中的所有属性和配置文件中的相关配置进行绑定，参数<code>prefix=&quot;dog&quot;</code>：将配置文件中的dog下面的属性与实体类的属性一一对应。</p>
<p>@Value:还可以使用@Value进行赋值。</p>
<ul>
<li>语法：  ${key}  #{SpEL},从环境变量、配置文件中获取值</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;person.name&#125;"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;11*2&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token comment">#这里可以写大写，但是在prefix=""里面不能写大写</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> pty
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span>
  <span class="token key atrule">dog</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> 胜利
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">4</span>
  <span class="token key atrule">list</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>lq<span class="token punctuation">,</span>ppq<span class="token punctuation">,</span>zq<span class="token punctuation">]</span>
  <span class="token key atrule">map</span><span class="token punctuation">:</span>
    <span class="token key atrule">k1</span><span class="token punctuation">:</span> v1
    <span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>@Value和@ConfigurationProperties为属性注值对比</p>
<table>
<thead>
<tr>
<th></th>
<th>@Value</th>
<th>@ConfigurationProperties</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>一个个指定注入</td>
<td>批量注入配置文件中的属性</td>
</tr>
<tr>
<td>松散绑定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>SpEl</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>JSR-303数据校验</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<h3 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR-303"></a>JSR-303</h3><p>JSR-303是用来对数据的格式进行校验的。</p>
<p>虽然说前端可以数据进行校验，但最好是前后端都进行检验，这样会更加安全</p>
<ul>
<li>在springboot.2.3.0以后，需要导入坐标才能够使用。</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0.17.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在实体类上面写上<code>@Validata</code>注解</li>
<li>在需要检验格式的属性上面写上对应格式的注解</li>
</ul>
<p>参考这篇博客：<a href="https://blog.csdn.net/qq_28867949/article/details/78922520">JSR-303</a></p>
<h3 id="多环境配置及配置文件位置"><a href="#多环境配置及配置文件位置" class="headerlink" title="多环境配置及配置文件位置"></a>多环境配置及配置文件位置</h3><h4 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h4><p>Application属性文件，按优先级顺序排序，位置高的将覆盖位置低的</p>
<ol>
<li>当前项目目录下的一个/config子目录</li>
<li>当前项目目录</li>
<li>项目的resources即一个classpath下的/config包</li>
<li>项目的resources即classpath根路径（root）</li>
</ol>
<p><img src="images/blog/image-20200928174407131.png" alt="image-20200928174407131"></p>
<p><strong>如果在不同的目录中存在多个配置文件，它的读取顺序是：</strong></p>
<ol>
<li>config/application.properties（项目根目录中config目录下）</li>
<li>config/application.yml</li>
<li>application.properties（项目根目录下）application.yml</li>
<li>resources/config/application.properties（项目resources目录中config目录下）</li>
<li>resources/config/application.yml</li>
<li>resources/application.properties（项目的resources目录下）</li>
<li>resources/application.yml</li>
</ol>
<p>即：在同一目录下，先加载.properties文件，再加载.yml文件。</p>
<h4 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h4><p>yaml文件中通过—（3条杠）来区分多个环境配置</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span> <span class="token comment">#默认使用最上面的这个配置文件</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev    <span class="token comment">#使用名字叫dev的配置文件</span>

<span class="token punctuation">---</span>     <span class="token comment">#使用三条杠隔开，表示是另一个配置文件。这里配置了3个配置文件</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev  <span class="token comment">#给这个配置文件取名字</span>
<span class="token punctuation">---</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><ul>
<li>配置yml和配置properties都可以获取到指，强烈推荐yml</li>
<li>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用@value</li>
<li>如果我们专门编写了一个JavaBean来和配置文件进行映射，就直接使用@configurationProperties，不要犹豫。</li>
</ul>
<h2 id="SpringBoot-Web开发"><a href="#SpringBoot-Web开发" class="headerlink" title="SpringBoot Web开发"></a>SpringBoot Web开发</h2><h3 id="加载静态资源"><a href="#加载静态资源" class="headerlink" title="加载静态资源"></a>加载静态资源</h3><ol>
<li>在Springboot中，我们可以使用以下方式处理静态资源<ul>
<li>webjars   <code>localhost:8080/webjars/</code></li>
<li>public、static、/**、resources    <code>localhost:8080/</code></li>
</ul>
</li>
<li>优先级：resources&gt;static&gt;public</li>
<li>templates目录下的文件不能够直接访问，只能通过controller来跳转。</li>
</ol>
<h2 id="SpringBoot-扩展SpringMvc"><a href="#SpringBoot-扩展SpringMvc" class="headerlink" title="SpringBoot 扩展SpringMvc"></a>SpringBoot 扩展SpringMvc</h2><p>在spring boot中 MVC这部分也有默认自动配置，也就是说我们不用做任何配置，那么也是OK的，这个配置类就是 WebMvcAutoConfiguration，但是也时候我们想设置自己的springMvc配置怎么办呢 。</p>
<p>我们也可以写个自己的配置类，实现 WebMvcConfigurer接口，重写需要的配置方法 。在spring boot 早期是继承WebMvcConfigurerAdapter ，但是高版已标上注解@Deprecated，<strong>注意：在配置类中不要标注：@EnableWebMvc，否则，spring boot的配置全部失效，只留自己扩展配置。</strong></p>
<p>Springboot在自动配置的时候，先看容器中有没有用户自己配置的，如果有，就用用户自己配置的，没有才自动配置。如果有些组件可以有多个（ViewResolver)将用户配置的和springboot默认的组合起来。    </p>
<p>自定义视图跳转</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>   <span class="token comment">//标志这个类是一个spring的配置类</span>
<span class="token comment">//实现WebMvcConfigurer接口，重写里面的方法，实现功能</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfiig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//当浏览器请求/hello时，跳转到test页面</span>
        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>自定义视图解析器</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment">// 标注这个类是一个配置类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 将视图解析器配置到容器中</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ViewResolver</span> <span class="token function">myViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">// 自定义一个视图解析器</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span> <span class="token punctuation">&#123;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">resolveViewName</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>通常我们在首页使用自定义视图跳转，当用户只输入主机+ip时也能够访问到我们的项目。</p>
<p>我之前是将所有的静态文件放在static目录下，经过测试发现addviewControllers无法映射到static目录下的文件，可以映射到templates目录下。</p>
<p>其次当映射成功了以后，我发现页面的CSS样式等都无法加载。查看以后发现这些文件请求的地址是<code>localhost:8080/static/css/...</code>，但是默认访问css的地址是<code>localhost:8080/css/...</code>,所以需要在页面中修改引入css样式的地址，由<code>&quot;../static/css/login.css&quot;</code>修改为<code>&quot;/css/login.css&quot;</code>。</p>
<p>经过测试发现，上述方法需要导入thymeleaf。springboot默认static用来放静态资源，templates用来放动态资源，使用试图跳转后的页面应该属于动态的，所以访问不了static目录下的页面。</p>
<p>但是我们可以自己来设置视图解析器的前后缀来实现跳转到static目录下。</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#properties写法</span>
<span class="token attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token attr-value">/</span>
<span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.html</span>

<span class="token comment">#yaml写法</span>
<span class="token attr-name">spring</span><span class="token punctuation">:</span>
<span class="token attr-name">  mvc</span><span class="token punctuation">:</span>
<span class="token attr-name">    view</span><span class="token punctuation">:</span>
<span class="token attr-name">      prefix</span><span class="token punctuation">:</span> <span class="token attr-value">/</span>
<span class="token attr-name">      suffix</span><span class="token punctuation">:</span> <span class="token attr-value">.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于springboot会默认在static下找静态资源，所以访问static目录下的地址是<code>localhost:8080/</code>,因此我们的前缀只要是一个<code>/</code>即可，而后缀就是.html (我一开始没设置后缀跳转不成功，找不到文件)，这种方法不需要导入thymeleaf。</p>
<h2 id="SpringBoot推荐添加组件的方式"><a href="#SpringBoot推荐添加组件的方式" class="headerlink" title="SpringBoot推荐添加组件的方式"></a>SpringBoot推荐添加组件的方式</h2><p>我们可以通过使用<code>@ImportResource(locations=&#123;&quot;classpath:xxxxz&quot;&#125;)</code>来引入自己写的spring的配置文件</p>
<p>但是springboot推荐我们使用全注解的方式：</p>
<ol>
<li>配置类========Spring的配置文件</li>
<li>使用@Bean给容器添加组件</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @Configuration:  指明当前类是一个配置类，就是用来替代之前的Spring的配置文件
 *
 *
 * 在配置文件中使用&lt;bean>&lt;/bean>标签来添加组件
 * 在配置类中使用@Bean来添加组件
 */</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfiig</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//将方法的返回值添加到容器中，容器中的这个组件默认的id就是方法名。</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">HelloService</span> <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>spring</title>
    <url>/2020/09/17/spring/</url>
    <content><![CDATA[<h2 id="1-Spring"><a href="#1-Spring" class="headerlink" title="1.Spring"></a>1.Spring</h2><h3 id="1-1优点"><a href="#1-1优点" class="headerlink" title="1.1优点"></a>1.1优点</h3><ul>
<li>Spring是一个开源的免费的框架(容器)</li>
<li>Spring是一个轻量级的、非入侵式的框架</li>
<li>控制反转（IOC),面向切面编程（AOP）</li>
<li>支持事务的处理，对框架的整合的支持</li>
</ul>
<a id="more"></a>

<p>**总结：Spring是一个轻量级的控制反转（IOC) 和面向切面编程（AOP）的框架 **</p>
<h3 id="1-2组成"><a href="#1-2组成" class="headerlink" title="1.2组成"></a>1.2组成</h3><p><img src="/images/blog/image-20200915210338148.png" alt="image-20200915210338148"></p>
<h3 id="1-3拓展"><a href="#1-3拓展" class="headerlink" title="1.3拓展"></a>1.3拓展</h3><ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架</li>
<li>基于springboot可以快速的开发单个微服务</li>
<li>约定大于配置</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>Spring Cloud是基于springboot实现的</li>
</ul>
</li>
</ul>
<p>学习springboot的前提是需要完全掌握Spring及SpringMVC。承上启下</p>
<h2 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2.IOC理论推导"></a>2.IOC理论推导</h2><p>原来的步骤：</p>
<ol>
<li>UserDao的接口</li>
<li>UserDaoImpl实现类</li>
<li>UserService 业务接口</li>
<li>UserServiceImpl业务实现类</li>
</ol>
<p>在我们之前的业务中，用户的需求可能会影响到我们原来的代码，我们需要根据用户的需求去修改源代码。如果程序代码量十分大，修改一次的成本代价很昂贵。</p>
<p>IOC的思想，从本质上解决了这个问题，我们不用再去管理对象的创建。系统的耦合性大大降低，可以更加专注于业务的实现。</p>
<h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p>控制反转是一种设计思想，DI(依赖注入)是实现IOC的一种方法。在没有IOC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方。个人认为所谓的控制反转就是：获得对象的方式反转了。</p>
<p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从ioc容器取出需要的对象。</p>
<p>采用XML配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者结合在一起，Bean的定义信息直接以注解的形式定义在实现类中，从而达到零配置的目的。</p>
<p><strong>控制反转是一种通过描述(xml或注解)并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入(DI)</strong></p>
<h2 id="3-初识Spring"><a href="#3-初识Spring" class="headerlink" title="3.初识Spring"></a>3.初识Spring</h2><h3 id="3-1-配置ApplicationContext-xml"><a href="#3-1-配置ApplicationContext-xml" class="headerlink" title="3.1 配置ApplicationContext.xml"></a>3.1 配置ApplicationContext.xml</h3><p>applicationContext.xml用来配置对象信息。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--applicationContext.xml的约束--></span>
<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    
        <span class="token comment">&lt;!--使用spring来创建对象，在spring中这些都被称为Bean
		类型 变量名 = new 类型();
		Hello hello = new Hello();

		id = 变量名
		class = new 的对象
		property 相当于对象中的属性设置一个值
	--></span>
    
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--ref引用spring中创建的对象
			value是具体的值
			给name为xxx的属性赋值
			--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">publlic <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
    <span class="token comment">//获取ApplicationContext,拿到spring容器。</span>
     <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationcontext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//用来创建具体的对象，xxx为配置的bean的id或者别名。</span>
     <span class="token class-name">Obeject</span> object<span class="token operator">=</span> context <span class="token function">getBean</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可以进行强转</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="4-IOC创建对象的方式"><a href="#4-IOC创建对象的方式" class="headerlink" title="4.IOC创建对象的方式"></a>4.IOC创建对象的方式</h2><ol>
<li><p>使用无参构造创建对象，默认！</p>
</li>
<li><p>假如我们要用有参构造创建对象（需要给bean中写一个有参构造）</p>
<ol>
<li>下标赋值</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神说java1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神说java2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--给User类的第一个属性赋值为狂神说java1，给第二个属性赋值为狂神说java2--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>类型</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第二种方式：通过类型创建，不建议使用，且type必须填类型的全限定类名，不能像mybatis写别名--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>参数名</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第三种：直接通过参数名构造--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<p>总结：在spring加载配置文件的时候，配置文件中所配置的bean对象就已经被实例化了（即调用了相关的构造方法，bean被加载进了容器内），<code>getBean</code>再从容器中找到具体的bean对象。</p>
<h2 id="5-Spring配置"><a href="#5-Spring配置" class="headerlink" title="5.Spring配置"></a>5.Spring配置</h2><h3 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h3><p><code>&lt;alias name=&quot;&quot; alias=&quot;&quot;&gt;</code></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--设置别名，给bean中的id设置别名，设置别名后，使用getBean时，也可以通过别名来获取对象--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="5-2bean的配置"><a href="#5-2bean的配置" class="headerlink" title="5.2bean的配置"></a>5.2bean的配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--
       id：bean的唯一标识符，也就是相当于我们以前学的变量名，用于在getBean是找到对应的对象
       class：需要创建的bean对象的全限定类名：报名+类型
       name：也就是别名，而且name可以同时取多个别名,设置的别名都可以在getBean获取到对象       
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2,u1,u3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h3><p>这个import,一般用于团队开发，可以将多个配置文件合并为一个。</p>
<p>假设，现在项目中有多个人开发，这三个人负责不同的类的开发，不同的类需要注册不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！</p>
<ul>
<li>张三</li>
<li>李四</li>
<li>王五</li>
<li>applicationContext.xml</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans1.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans3.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用的时候，直接使用总的配置就可以了。</p>
<h2 id="6-依赖注入"><a href="#6-依赖注入" class="headerlink" title="6.依赖注入"></a>6.依赖注入</h2><h3 id="6-1-构造注入"><a href="#6-1-构造注入" class="headerlink" title="6.1 构造注入"></a>6.1 构造注入</h3><p>就是前面的有参构造</p>
<h3 id="6-2-Set注入【重点】"><a href="#6-2-Set注入【重点】" class="headerlink" title="6.2 Set注入【重点】"></a>6.2 Set注入【重点】</h3><ul>
<li>依赖注入：Set注入<ul>
<li>依赖：Bean对象的创建依赖于容器</li>
<li>注入：bean对象中的所有属性，由容器来注入！</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Adress<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adress<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>湘西州<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
     <span class="token comment">&lt;!--第一种，普通值注入，value--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
     <span class="token comment">&lt;!--第二种，Bean注入，ref--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adress<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
     <span class="token comment">&lt;!--第三种，数组注入，array--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>红楼梦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>三国演义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>水浒传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token comment">&lt;!--第四种，list注入，list--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbys<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>网球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token comment">&lt;!--第五种，map注入，map--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>身份证<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>122333<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1111111<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token comment">&lt;!--第六种，set注入，set--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>LOL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>COC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>DOD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     
     <span class="token comment">&lt;!--设置为null--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
   
     <span class="token comment">&lt;!--
     properties
     键值对 key:value  value写在两个尖括号之间
     --></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="6-3拓展注入"><a href="#6-3拓展注入" class="headerlink" title="6. 3拓展注入"></a>6. 3拓展注入</h3><p>我们可以使用p命名空间和c命名空间进行注入</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!--p命名空间注入，可以直接注入属性的值，相当于property--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

 <span class="token comment">&lt;!--c命名空间注入，通过构造器，相当于construct-args，前提是bean必须要有有参构造--></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意点</strong>：P命名和C命名不能直接使用，需要导入xml约束</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"
xmlns:c="http://www.springframework.org/schema/c"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h3 id="6-4-bean的作用域"><a href="#6-4-bean的作用域" class="headerlink" title="6.4 bean的作用域"></a>6.4 bean的作用域</h3><ol>
<li>单例模式（Spring默认机制）</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>设置 为singleton后，在getBean时生成一个对象，接下来如果再次使用getBean生成同一个id的对象，则两个对象是一样的，即一个bean只生成一个对象。</p>
<ol start="2">
<li>原型模式：每次从容器中get的时候，都会产生一个新对象！</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>其余的request、session、application这些只能在web开发中使用。</li>
</ol>
<h2 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7.Bean的自动装配"></a>7.Bean的自动装配</h2><ul>
<li>自动装配是Spring满足bean依赖的一种方式。</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性</li>
</ul>
<p>在Spring中有三种装配方式</p>
<ol>
<li>在xml中显示的配置</li>
<li>在java中显示配置</li>
<li>隐式的自动装配bean  【重要】</li>
</ol>
<p>这是我们之前学过的配置方式</p>
<p>cat和dog为两个对象，需要使用ref来引用。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-1-ByName自动装配"><a href="#7-1-ByName自动装配" class="headerlink" title="7.1 ByName自动装配"></a>7.1 ByName自动装配</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  
<span class="token comment">&lt;!--
ByName: 会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid！
不需要在自己手动的配置引用的对象。
但是如果beanid与自己对象set方法后面的值不同，就会报空指针异常。
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-2-ByType"><a href="#7-2-ByType" class="headerlink" title="7.2 ByType"></a>7.2 ByType</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token comment">&lt;!--
ByType: 会自动在容器上下文中查找，和自己对象属性类型相同的bean！
不需要在自己手动的配置引用的对象。
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>小结：</p>
<ul>
<li>byname的时候，需要保证所有bean的id唯一，并且这个beanid需要和自动注入的属性的set方法的值相同。</li>
<li>bytype的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</li>
</ul>
<h3 id="7-3使用注解实现自动装配"><a href="#7-3使用注解实现自动装配" class="headerlink" title="7.3使用注解实现自动装配"></a>7.3使用注解实现自动装配</h3><p>要使用注解须知：</p>
<ol>
<li>导入约束,context约束</li>
<li><strong>配置注解的支持：<a href="context:annotation-config/">context:annotation-config/</a></strong></li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	
    <span class="token comment">&lt;!--配置注解的支持--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>@Autowried</code></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>


        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>           <span class="token comment">//使用@Autowried注解，不需要在配置文件中手动或者Byname,Bytype的注入属性</span>
    						    <span class="token comment">//在对应的属性上面加上这个注解，可以自动注入。</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>直接在属性上使用！也可以在set方法上使用！</p>
<p>使用Autowried我们可以不用再写set方法，前提是你这个自动装配的属性在IOC容器中存在。根据Bytype查找。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//如果显示定义了Autowried的required属性为false，说明这个对象可以为null，否则不允许为null</span>
    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>科普：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@Nullable   字段标记这个注解，说明这个字段可以为null；</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cat <span class="token operator">=</span> cat<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>由于Autowried注解是根据type查找的，当配置文件中同时配置了多个类型相同的bean,那么使用Autowried注解就不能够自动注入了。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>例如这个配置文件，cat1和cat2的类型都是一样的，Autowried是根据type查找，出现了相同类型，就不知道要注入哪一个了，这个时候我们就需要使用<code>@Qualifier</code>注解和<code>@Autowried</code>注解</p>
<p>先使用Autowried定位到需要注入的属性的类型<code>@Qualifier(value=&quot;xxx&quot;)</code>会在配置文件中找到id值为xxx的bean对象，再将它注入进去。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"cat2"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>
    <span class="token keyword">private</span>  <span class="token class-name">String</span>  name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是好像最新版的idea就算没用使用Qualifier注解也不会报错。</p>
<p><strong>@Resource注解</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"cat2"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Cat</span> cat
<span class="token comment">//会在配置文件中找id为cat2的bean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>小结：</p>
<p> @Resource和@Autowried的区别</p>
<ul>
<li>都是用来自动装配的，都可以放在属性字段上。</li>
<li>@Autowried 通过ByType的方式实现，通过配合@Qualifier注解，先ByType查找，在Byname查找。</li>
<li>@Resource默认通过byname的方式实现，如果找不到名字，就通过bytype实现。</li>
</ul>
<h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证aop的包导入了。</p>
<p>使用注解需要导入context约束，增加注解的支持！</p>
<ol>
<li>bean</li>
<li>属性如何注入</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token annotation punctuation">@Component</span>   <span class="token comment">//将类注册到Spring容器内，getBean时的参数是小写的类名。</span>
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//给name属性值注入值，相当于 &lt;property name="name" value="pty"></span>
      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"pty"</span><span class="token punctuation">)</span>
      <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>衍生的注解</li>
</ol>
<p>@Component有几个衍生的注解，我们在web开发中，会按照mvc三层架构分层</p>
<ul>
<li>dao 【@Repository】</li>
<li>service 【@Service】</li>
<li>controller 【@Controller】</li>
</ul>
<p>这四个注解的功能都是一样的，都是代表将某个类注入到Spring容器中，装配Bean。</p>
<ol start="4">
<li>自动装配</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">- @Autowried ：自动装配通过类型
	如果Autowried不能唯一自动装配上属性，则需要通过@Qualifier(value="xxx")
- @Nullable  字段标记这个注解，说明这个字段可以为null
- @Resource  自动装配通过名字，类型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>作用域</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>              <span class="token comment">//将User类注入到Spring容器内</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span>    <span class="token comment">//设置bean的作用域</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"pty"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li><p>小结</p>
<p>xml与注解：</p>
<ul>
<li>xml更加万能，适用于任何场合，维护简单方便</li>
<li>注解，不是自己类是用不了，维护相对复杂。</li>
</ul>
<p>xml和注解最佳实践：</p>
<ul>
<li>xml用来管理bean</li>
<li>注解只负责完成属性的注入</li>
<li>我们在使用的过程中只需要注意一个问题：必须要注解生效。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>
<span class="token comment">&lt;!--指定扫描的包，这个包下的注解就会生效--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="9-使用Java的方式配置Spring"><a href="#9-使用Java的方式配置Spring" class="headerlink" title="9.使用Java的方式配置Spring"></a>9.使用Java的方式配置Spring</h2><p>我们现在要完全不使用Spring的xml配置了，全权交给Java来做了。</p>
<p>JavaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心功能。</p>
<p><strong>User类</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">bean</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//属性注入值</span>
        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>
                    <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                    <span class="token string">'&#125;'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>Config类</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">config</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">bean<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Import</span><span class="token punctuation">;</span>

<span class="token comment">//这个也会被Spring容器托管，注册到容器中，因为他本来就是一个Component。</span>
<span class="token comment">// @Configuration代表这是一个配置类，就和我们之前的applicationContext.xml一样</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"bean"</span><span class="token punctuation">)</span>   <span class="token comment">//扫描包，该包下的注解就会生效</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">Userconfig2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//引入另一类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Userconfig</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//注册一个Bean,就相当于我们之前写的bean标签</span>
    <span class="token comment">//这个方法的名字：getUser就相当于bean标签中的id属性</span>
    <span class="token comment">//这个方法的返回值 User 就相当于bean标签中的class属性</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回要注入到bean的对象。</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>测试类</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">bean<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">config<span class="token punctuation">.</span></span><span class="token class-name">Userconfig</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>


    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//如果完全使用了配置类方式去做，我们就只能通过AnootationConfig上下文来获取容器，通过配置类的class对象加载</span>
       <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Userconfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这种纯java的配置方式，在SpringBoot中随处可见。</p>
<h2 id="10-代理模式"><a href="#10-代理模式" class="headerlink" title="10. 代理模式"></a>10. 代理模式</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层！【SpringAOP和SpringMVC】</p>
<p>代理模式的分类：</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<h3 id="10-1静态代理"><a href="#10-1静态代理" class="headerlink" title="10.1静态代理"></a>10.1静态代理</h3><p>角色分析：</p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li>
<li>客户：访问代理对象的人！</li>
</ul>
<p>代理模式的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li>
<li>公共业务就交给代理角色，实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实角色就会产生一个代理角色，代码量会翻倍<del>开发效率变低</del></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2020/09/08/Mysql/</url>
    <content><![CDATA[<h2 id="数据库开发语言SQL"><a href="#数据库开发语言SQL" class="headerlink" title="数据库开发语言SQL"></a>数据库开发语言SQL</h2><p>SQL是一种数据库查询和设计语言，主要用于存取数据，查询数据，更新数据和管理关系数据库系统。</p>
<p>SQL语言分为3个部分，即数据定义语言（DDL），数据操作语言(DML)，和数据控制语言(DCL)</p>
<a id="more"></a>

<ul>
<li><p>DDL</p>
<p>用于定义数据库、表、视图、索引、触发器等。其中包括create语句(创建数据库、表、视图)，alter语句(修改表。视图)，drop语句(删除数据库、表、视图)</p>
</li>
<li><p>DML</p>
<p>增删改查数据，包括select，update，delete，insert</p>
</li>
<li><p>DCL</p>
<p>数据完整控制，数据安全性控制和数据库的恢复等，具体如授权(GRANT)、回滚（ROLLBACK）、提交(CONMMIT)</p>
</li>
</ul>
<h2 id="mysql在命令行操作数据库"><a href="#mysql在命令行操作数据库" class="headerlink" title="mysql在命令行操作数据库"></a>mysql在命令行操作数据库</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> database_name<span class="token punctuation">;</span>         <span class="token comment">//database_name是所要创建的数据库的名字</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>                       <span class="token comment">//查询所有的数据库</span>
<span class="token keyword">use</span> database_name<span class="token punctuation">;</span>                    <span class="token comment">//使用（选择）数据库，database_name是你要用的数据库的名字</span>
<span class="token keyword">drop</span> datebase database_name<span class="token punctuation">;</span>          <span class="token comment">//删除数据库，首先要确定这个数据库存在才能删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="数据表的设计理念"><a href="#数据表的设计理念" class="headerlink" title="数据表的设计理念"></a>数据表的设计理念</h2><h3 id="1-数据表包含列，索引和触发器"><a href="#1-数据表包含列，索引和触发器" class="headerlink" title="1.数据表包含列，索引和触发器"></a>1.数据表包含列，索引和触发器</h3><pre><code>+ 列：也称为栏位，对于属性列，创建表时必须指定列的名字和数据类型
+ 索引：根据指定的数据库表列建立起来的顺序，提供了快速访问数据的途径。
+ 触发器：用户定义的事务命令的集合。</code></pre>
<h3 id="2-数据表的设计需要遵循三范式"><a href="#2-数据表的设计需要遵循三范式" class="headerlink" title="2.数据表的设计需要遵循三范式"></a>2.数据表的设计需要遵循三范式</h3><ul>
<li><p>第一范式：确保每列保持原子性</p>
<p>数据库的每一列都是不可分割的原子数据项，而不能是集合、数组、记录等非原子数据项</p>
</li>
</ul>
<ul>
<li><p>第二范式：确保每列都和主键相关</p>
<p>满足第二范式必须先满足第一范式，第二范式要求实体的属性完全依赖主关键字。如果不存在依赖，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与元实体之间是一对多的关系。</p>
<p>多对多，三张表，关系表两个外键。（关系表用来连接另外两张表）</p>
</li>
<li><p>第三范式：确保每列都和主键列直接相关，而不是间接相关。</p>
<p>满足第三范式必须先满足第二范式，要求一个关系中不包含已在其他关系中包含的非主关键字信息</p>
<p>一对多两张表，多的表加外键 。</p>
</li>
</ul>
<p>可以参考这篇博客，我觉得写得很详细。<a href="https://blog.csdn.net/kenhins/article/details/51084815?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-51084815.nonecase&utm_term=%E5%BB%BA%E8%A1%A8%E7%9A%84%E4%B8%89%E8%8C%83%E5%BC%8F">三范式</a></p>
<h3 id="3-表和表的关系"><a href="#3-表和表的关系" class="headerlink" title="3.表和表的关系"></a>3.表和表的关系</h3><p>数据库里表和表的关系有3种：一对一，一对多，多对多。</p>
<ul>
<li>一对一：主表和相关联的表是一一对应的。比如学生信息表和学生成绩表，可以根据学生信息表中学生的id在学生成绩表中找到唯一的一个成绩。</li>
<li>一对多：比如一个班级表，每个班级有多个学生，一个学生只对应一个班级，班级和学生就是一对多的关系。</li>
<li>多对多：比如选课表，每门课有很多学生选，一个学生又可以选多门课。学生和选课就是多对多的关系。</li>
</ul>
<h3 id="4-创建表"><a href="#4-创建表" class="headerlink" title="4.创建表"></a>4.创建表</h3><ul>
<li><p>建表的语法</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> table_name<span class="token punctuation">(</span>
	属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>
    属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>
    属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//写完一个字段要加一个逗号，最后一个不要加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>表名不能为sql的关键字</p>
</li>
</ul>
<h3 id="5-操作表的约束"><a href="#5-操作表的约束" class="headerlink" title="5.操作表的约束"></a>5.操作表的约束</h3><p>完整性约束条件是对字段进行限制的，要求用户对该属性进行的操作符合特定的要求。如果不满足完整性约束条件，数据库系统就不再执行用户的操作。MySQL中基本的完整性约束条件如下表。</p>
<table>
<thead>
<tr>
<th>约束条件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>primary key</td>
<td>标识该属性为该表的主键，可以唯一的标识对应的元组</td>
</tr>
<tr>
<td>foreign key</td>
<td>标识该属性为该表的外键，是与之联系的某表的主键</td>
</tr>
<tr>
<td>not null</td>
<td>标识该属性不能为空</td>
</tr>
<tr>
<td>unique</td>
<td>标识该属性的值是唯一的</td>
</tr>
<tr>
<td>auto_increment</td>
<td>标识该属性的值自动增加，这是MySQL语句的特色</td>
</tr>
<tr>
<td>default</td>
<td>为该属性设置默认值</td>
</tr>
</tbody></table>
<h4 id="1-设置非空约束"><a href="#1-设置非空约束" class="headerlink" title="1.设置非空约束"></a>1.设置非空约束</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名  数据类型  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

直接在所要设置的字段名后面加上<span class="token operator">NOT</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-设置表的默认值"><a href="#2-设置表的默认值" class="headerlink" title="2.设置表的默认值"></a>2.设置表的默认值</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名  数据类型 <span class="token keyword">DEFAULT</span> defaultvalue<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
username  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
age  <span class="token keyword">int</span>  <span class="token keyword">DEFAULT</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>

在所要设置的属性后面加上<span class="token keyword">DEFAULT</span> defaultvalue  defaultvalue是默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-设置表字段唯一约束（UK"><a href="#3-设置表字段唯一约束（UK" class="headerlink" title="3.设置表字段唯一约束（UK)"></a>3.设置表字段唯一约束（UK)</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名  数据类型  <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
username  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
age  <span class="token keyword">int</span>  <span class="token keyword">DEFAULT</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>

直接在所要设置的字段名后面加上<span class="token keyword">UNIQUE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-设置表的主键约束（PK）"><a href="#4-设置表的主键约束（PK）" class="headerlink" title="4.设置表的主键约束（PK）"></a>4.设置表的主键约束（PK）</h4><ul>
<li>主键是表的一个特殊字段，该字段能唯一的标识该表中的每一条信息。主键和记录的关系如同身份证和人的关系。主键必须是唯一的，表中任意两条记录的主键字段的值不能相同，主键必须是非空的。</li>
</ul>
  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名  数据类型  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="5-设置表字段值自动增加"><a href="#5-设置表字段值自动增加" class="headerlink" title="5.设置表字段值自动增加"></a>5.设置表字段值自动增加</h3><ul>
<li>一个表中只能有一个字段使用AUTO_INCREMENT约束，且该字段的数据类型必须是整数类型，一般设置该约束的字段会同时设置成PK约束</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名   数据类型   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//只要这只的字段名后面加上PRIMARY KEY AUTO_INCREMENT 将该字段名同时设置成主键和自增长</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="6-设置表的外键约束-FK"><a href="#6-设置表的外键约束-FK" class="headerlink" title="6.设置表的外键约束(FK)"></a>6.设置表的外键约束(FK)</h3><ul>
<li><p>外键是表的一个特殊字段，外键约束用于保证多个表（通常是两个表）之间的参照完整性，即构建与两个表的字段之间的参照关系</p>
</li>
<li><p>设置外键约束的两个表之间具有父子关系，即子表中某个字段的取值范围由父表决定。列入一个班级和学生的关系，每个班级有多个学生。首先就应该有学生表和班级表，然后学生表有一个表示班级编号的字段classno,其依赖于班级表的主键，这样字段classno就是学生表的外键，通过该字段，班级表和学生表建立了关系</p>
</li>
<li><p>外键依赖于数据库中已经存在的父表的主键，外键可以为空。</p>
</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名a  数据类型，
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">CONSTRAINT</span> fk_class_id  <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>class_id<span class="token punctuation">)</span>  <span class="token keyword">REFERENCES</span> class<span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token comment">//fk_class_id为外键约束的名字，可以随便取， class_id为这个表中你要设置为外键的字段名</span>
    <span class="token comment">// class为你要关联的表，id为你要关联的表的字段名</span>
    <span class="token comment">//这句话的意思就是  将这个表中的class_id作为外键，并且关联class表的字段名为id的字段</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>实际开发中，一般不使用物理外键（即不设置出一个具体的外键），而使用逻辑外键，我们知道他有外键的功能即可可以参考这篇博客  <a href="https://zhuanlan.zhihu.com/p/114834741">主键和外键</a></li>
</ul>
<h3 id="7-修改表"><a href="#7-修改表" class="headerlink" title="7.修改表"></a>7.修改表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_class <span class="token keyword">rename</span> tab_class<span class="token punctuation">;</span>     <span class="token comment">//修改表的名字，使用alter和rename</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> propName proptype<span class="token punctuation">;</span> 
		<span class="token comment">//在表的最后一个位置增加字段，tablename为表的名字，propName为属性名，proptype是数据类型</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> propName proptype <span class="token keyword">first</span><span class="token punctuation">;</span>
       <span class="token comment">//在表的第一个位置增加字段，tablename为表的名字，propName为属性名，proptype是数据类型</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> propName proptype <span class="token keyword">after</span> pNameOld；
       <span class="token comment">//在pnameOld后面加一个字段名，pNameOld是已经存在的字段名</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">drop</span> propname<span class="token punctuation">;</span>
       <span class="token comment">//删除表中的某个字段，tablename为表的名字，propName为属性名</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">modify</span> propName propType<span class="token punctuation">;</span>
		<span class="token comment">//修改某个字段的数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="MySQL的数据操作"><a href="#MySQL的数据操作" class="headerlink" title="MySQL的数据操作"></a>MySQL的数据操作</h2><h3 id="1-插入语句"><a href="#1-插入语句" class="headerlink" title="1.插入语句"></a>1.插入语句</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tablename<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
		<span class="token keyword">values</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>





<ul>
<li><p>tablename是要插入的表的名字，field为要插入的字段名，value表示要插入的数值，并且field要和value一一对应。</p>
</li>
<li><p>field可以省略，这样就必须在values中写出所有字段的值，并且value对应的字段名必须与数据表中字段名的顺序相同。</p>
</li>
<li><p>在给表中所有字段赋值的时候，可以不用写field,由于主键是自增的，所以给主键赋值NULL，系统会自动为其赋值上条记录中该字段的取值加1。</p>
</li>
<li><p>field的顺序可以不和数据表中的字段名的顺序相同，但是必须保证field和value是一一对应的。</p>
</li>
<li><p>插入多条数据</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tablename<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
		<span class="token keyword">values</span><span class="token punctuation">(</span>value11<span class="token punctuation">,</span>value12<span class="token punctuation">,</span>value13<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>，
		<span class="token keyword">values</span><span class="token punctuation">(</span>value21<span class="token punctuation">,</span>value22<span class="token punctuation">,</span>value23<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">values</span><span class="token punctuation">(</span>value31<span class="token punctuation">,</span>value32<span class="token punctuation">,</span>value33<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
		<span class="token keyword">values</span><span class="token punctuation">(</span>valuen1<span class="token punctuation">,</span>valuen2<span class="token punctuation">,</span>valuen3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



</li>
</ul>
<ul>
<li><p>可以通过插入数据来实现数据的复制</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tablename<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
	<span class="token keyword">select</span> <span class="token punctuation">(</span>field1<span class="token punctuation">,</span>fidld2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
	<span class="token keyword">from</span> tablename2 <span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	
<span class="token comment">//从tablename2中查询出数据，将这些数据作为values插入到tablename中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ul>
<h3 id="2-更新数据记录"><a href="#2-更新数据记录" class="headerlink" title="2.更新数据记录"></a>2.更新数据记录</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> tablename 
		<span class="token keyword">set</span> field1<span class="token operator">=</span>value1<span class="token punctuation">,</span>field2<span class="token operator">=</span>value2<span class="token punctuation">,</span>field3<span class="token operator">=</span>value3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">//tablename是表的名字，field是字段名，value是值，where后面填特定的条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-删除数据记录"><a href="#3-删除数据记录" class="headerlink" title="3.删除数据记录"></a>3.删除数据记录</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment">//参数tablename表示所要删除的数据记录的表名，where 后面填特定的条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="MySQL的数据类型"><a href="#MySQL的数据类型" class="headerlink" title="MySQL的数据类型"></a>MySQL的数据类型</h2><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h3><table>
<thead>
<tr>
<th>整数类型</th>
<th>字节数</th>
<th>无符号数的取值范围</th>
<th>有符号数的取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1</td>
<td>0~255</td>
<td>-128~127</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>0~65535</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>0~16777215</td>
<td>-8388608~83886007</td>
</tr>
<tr>
<td>INT</td>
<td>4</td>
<td>0~4294967295</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>INTEGER</td>
<td>4</td>
<td>0~4294967295</td>
<td>2147483648~2147483647</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>0~18446744073709551615</td>
<td>-9223372036854775808~9223372036854775807</td>
</tr>
</tbody></table>
<ul>
<li>字段选择哪个整数类型取决于该字段的范围，现在最常用的整数类型是INT类型。</li>
</ul>
<h3 id="2-浮点数类型和定点数类型"><a href="#2-浮点数类型和定点数类型" class="headerlink" title="2.浮点数类型和定点数类型"></a>2.浮点数类型和定点数类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>负数的取值范围</th>
<th>非负数的取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>FLOAT</td>
<td>4</td>
<td>-3.402823466E+38~-1.175494351E-38</td>
<td>0和1.175494351E-38~3.402823466E+38</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8</td>
<td>-1.7976931348623157E+308~-202250738585072014E-308</td>
<td>0和202250738585072014E-308~1.7976931348623157E+308</td>
</tr>
<tr>
<td>DECIMAL(M,D)</td>
<td>M+2</td>
<td>同DOUBLE类型</td>
<td>同DOUBLE类型</td>
</tr>
</tbody></table>
<ul>
<li>从表中可以看出DECIMAL类型的取值范围和DOUBLE相同。FLOAT和DOUBLE类型存储数据是存储的是近似值，DECIMAL存储的是字符串，因此提供了更高的精度。在金融系统中，表示货币金额的时候优先选择DECIMAL，一般的价格题中，比如商品的价格一般选择FLOAT类型。</li>
</ul>
<h3 id="3-日期与时间类型"><a href="#3-日期与时间类型" class="headerlink" title="3.日期与时间类型"></a>3.日期与时间类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR</td>
<td>1</td>
</tr>
<tr>
<td>DATE</td>
<td>4</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
</tr>
<tr>
<td>TIMESTAP</td>
<td>4</td>
</tr>
</tbody></table>
<ul>
<li>YEAR类型表示年，DATE类型表示日期，TIME类型表示时间，DATETIME和TIMESTAMP表示日期和时间</li>
<li>根据自己的需要，选择相应的类型。</li>
<li>在实际开发中，往往需要将时间格式化以后才能插入到数据库</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生成日期对象</span>
<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置日期格式化样式为yyyy-MM-dd</span>
 <span class="token class-name">SimpleDateFormat</span>  <span class="token class-name">SimpleDateFormat</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将date转为yyyy-MM-dd的字符串</span>
<span class="token class-name">String</span> format <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Date</span> parse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      parse <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-字符串类型"><a href="#4-字符串类型" class="headerlink" title="4.字符串类型"></a>4.字符串类型</h3><ul>
<li><strong>char</strong>和<strong>varchar</strong>类型为字符串类型。</li>
<li>在建表的时候，<strong>varchar</strong>需要设置长度，不设置会报错（有些人又说不会，但是我建表的时候没加过不了）。</li>
<li>设置长度的格式 : <code>字符串类型（M)</code></li>
<li><strong>CHAR</strong>和<strong>VARCHAR</strong>没有太大的区别。CHAR的长度是固定的，而VARCHAR的长度是可变的，指定长度之后，其长度可以在0到指定长度之间。比如VARCHAR(100)的最大长度是100，但不是每条记录都会占用100字节，而是在这个最大值范围内，用多少占多少。</li>
</ul>
<h2 id="单表数据查询"><a href="#单表数据查询" class="headerlink" title="单表数据查询"></a>单表数据查询</h2><h3 id="1-查询所有的字段数据"><a href="#1-查询所有的字段数据" class="headerlink" title="1.查询所有的字段数据"></a>1.查询所有的字段数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>fieldn <span class="token keyword">from</span> tablename；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>在select后面写出所有的字段名</li>
<li>除了上面这种方法，还可以通过符号”*“来实现</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablename<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-查询指定字段数据"><a href="#2-查询指定字段数据" class="headerlink" title="2.查询指定字段数据"></a>2.查询指定字段数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//查询指定字段数据的方法和查询所有字段数据的第一种方法相同，只是查询所有是要写出所有的字段名，而查询部分只要写出自己需要的字段名即可</span>

<span class="token keyword">select</span> field1，field2，field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> tablenamea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-避免重复数据"><a href="#3-避免重复数据" class="headerlink" title="3.避免重复数据"></a>3.避免重复数据</h3><p>在MySQL查询执行简单数据查询时，有时候会显示重复数据。</p>
<p>比如说学生表中有3条数据，age字段的数据分别是16,17,16，你想查询班上的孩子是哪个岁数的，如果是简单的查询就会出现16,17,16,三个数据，而两个16是重复的，我们只要显示一个就够了。</p>
<p>这个时候就要使用DISTINCT功能来避免重复数据</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">frselect <span class="token keyword">distinct</span> age <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token comment">//用distinct修饰你想避免重复的字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="4-条件数据记录查询"><a href="#4-条件数据记录查询" class="headerlink" title="4.条件数据记录查询"></a>4.条件数据记录查询</h3><ul>
<li>条件查询的种类</li>
</ul>
<table>
<thead>
<tr>
<th>查询条件</th>
<th>符号或关键字</th>
</tr>
</thead>
<tbody><tr>
<td>比较</td>
<td>= 、&lt;、&lt;=、&gt;、&gt;=、!=、&lt;&gt;(不等于)、!&gt;(不大于)、!&lt;</td>
</tr>
<tr>
<td>指定范围</td>
<td>BETWEEN  AND、NOT BETWEEN AND</td>
</tr>
<tr>
<td>指定集合</td>
<td>IN、NOT IN</td>
</tr>
<tr>
<td>匹配字符</td>
<td>LIKE、NOT LIKE</td>
</tr>
<tr>
<td>是否为空值</td>
<td>IS NULL、IS NOT NULL</td>
</tr>
<tr>
<td>多个查询条件</td>
<td>AND、OR</td>
</tr>
</tbody></table>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> field1，field2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li><p>带IN关键字的查询</p>
<ol>
<li><p>用IN来查询在集合中的数据，NOT IN查询不在集合中的数据</p>
<p><code>select * from student where age in (15,16，17)</code>  查询年龄为15,16,17的学生数据</p>
<p><code>select * from student where age not in (15,16,17)</code> 查询年龄不是15,16,17的学生数据</p>
</li>
<li><p>在使用IN关键字的时候，查询的集合中如果存在NULL，不会影响查询；使用NOT IN时，如果查询的集合中有NULL，则不会有任何的查询结果。</p>
</li>
</ol>
</li>
<li><p>带BETWEEN AND关键字的查询</p>
<ol>
<li><p>BETWEEN AND关键字操作符只针对数字类型。</p>
</li>
<li><p>用BETWEEN AND查询符合范围的数据，NOT BETWEEN AND查询不符合范围的数据。</p>
<p><code>select * from student where age between 15 and 17;</code> 查询年龄在15  ~ 17这个范围内的数据</p>
<p><code>select * from student where age not between 15 and 17;</code>  查询年龄不在15 ~ 17这个范围内的数据。</p>
</li>
</ol>
</li>
<li><p>带LIKE关键字的查询</p>
<ol>
<li><p>LIKE关键字支持   _    和  % 这两个通配符</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>_</td>
<td>该通配符只能匹配单个字符</td>
</tr>
<tr>
<td>%</td>
<td>该通配符可以匹配任意长度的字符串，既可以是0个字符串、1个字符串，又可以是很多字符串</td>
</tr>
</tbody></table>
<p><code>select * from student where name like &#39;L%&#39;;</code>  查询名字以L开头的学生数据</p>
<p><code>select * from student where not name like &#39;L%&#39; </code>  查询名字不是以K开头的学生数据</p>
<p><code>select * from student where name like &#39;_A%&#39;</code> 查询名字的第二个字母是A的学生数据</p>
</li>
<li><p><strong>注意使用like关键字的时候，通配符位置要用单引号括起来，就算是数字类型的也需要使用单引号</strong></p>
</li>
</ol>
</li>
<li><p>带AND的多条件查询</p>
<ol>
<li><p>关键字ADN可以用来联合多个条件进行查询，使用AND时，只有同时满足所有查询条件的记录才会被查询出来。</p>
<p><code>select * from student where age = 15 and name =&#39;pty&#39;</code>  查询年龄=15岁并且名字是pty的学生的数据</p>
</li>
</ol>
</li>
<li><p>OR，IS NULL 、NOT IS NULL这三个关键字比较简单，OR和AND差不多，就不讲了</p>
</li>
<li><p>对查询的结果进行排序</p>
<ol>
<li>使用ORDER BY关键字对记录进行排序</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//对查询出来的结果根据年龄进行排序，[]中表示可选参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>ASC表示按升序排序，DESC表示按降序排序。</p>
</li>
<li><p>可以指定多个字段进行排序，比如可以先按照年龄排序再按照班级排序</p>
<p><code>select * from student order by age asc,classno desc</code> 先按照年龄升序，在按照班级降序</p>
<p>即如果两个人年龄相同，班级小的那个人排在前面。</p>
</li>
</ol>
</li>
</ol>
<h3 id="5-统计函数和分组函数"><a href="#5-统计函数和分组函数" class="headerlink" title="5.统计函数和分组函数"></a>5.统计函数和分组函数</h3><ul>
<li>COUNT()函数：实现统计表中记录的条数</li>
<li>AVG()函数：实现计算字段值的平均值</li>
<li>SUM()函数：实现计算字段值的综合</li>
<li>MAX()函数：实现查询字段值的最大值</li>
<li>MIN()函数：实现查询字段值的最小值</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数：
	<span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  对表中的记录进行统计，无论表字段中包含的是<span class="token boolean">null</span>值还是非<span class="token boolean">null</span>值
	cout<span class="token punctuation">(</span>field<span class="token punctuation">)</span>  对表中特定的字段进行统计，忽略<span class="token boolean">null</span>值。
	<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">//查询student表中一共有多少条记录</span>
	
<span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数：
	<span class="token function">avg</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  先计算特定字段值的和，在求平均值。
	<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">//查询student中学生年龄的平均值</span>


<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数:
	<span class="token function">sum</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  计算特定字段值之和，在具体使用中会忽略<span class="token boolean">null</span>值。
	<span class="token keyword">select</span>  <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">//查询student中学生年龄的总和</span>

<span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数 <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数：
	<span class="token function">max</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  计算特定字段值的最大值，在具体使用中会忽略<span class="token boolean">null</span>值
	<span class="token function">min</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  计算特定字段值的最小值，在具体使用中会忽略<span class="token boolean">null</span>值
	<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> maxval<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> minval <span class="token keyword">from</span> s_score<span class="token punctuation">;</span>  <span class="token comment">//查询student中学生年龄的最大最小值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当数据表中没有任何数据时，COUNT()函数返回数据为0，其他所有函数返回NULL。</li>
</ul>
<h4 id="简单分组函数"><a href="#简单分组函数" class="headerlink" title="简单分组函数"></a>简单分组函数</h4><ul>
<li>在现实应用中，经常会先把所有的数据记录进行分组，再对这些分组后的数据记录进行统计计算。</li>
<li>使用GROUP BY 来实现分组</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 统计函数<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> field<span class="token punctuation">;</span>
<span class="token comment">// 根据field进行分组然后在统计数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>同一组的数据只会展示一条。</li>
<li>只实现简单的分组查询是没有任何意义的，因为GROUP BY 关键字在单独使用时，默认查询出每个分组中随机一条记录。不具有确定性。因此常和统计函数一起使用</li>
<li>如果想要显示每个分组中的字段，可以使用GROUP_CONCAT()函数来实现。该函数可以显示每个分组中的指定字段。</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> subject<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span> name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> number <span class="token keyword">from</span> teacher <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> subject<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token operator">|</span> subject <span class="token operator">|</span> name       <span class="token operator">|</span> number <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token operator">|</span> 化学    <span class="token operator">|</span> snow<span class="token punctuation">,</span>ji    <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> 数学    <span class="token operator">|</span> huang<span class="token punctuation">,</span>zhou <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> 生物    <span class="token operator">|</span> peng       <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> 语文    <span class="token operator">|</span> chen       <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.34</span> sec<span class="token punctuation">)</span>
<span class="token comment">//根据subject 分类，将每组中的name都显示出来，并统计人数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Having可以对分组后的数据进行再一次过滤</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> field <span class="token keyword">having</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//根据subject 分类，将每组中的name都显示出来，并统计人数,在过滤掉人数小于等于1的mysql> select subject,group_concat(name) name,count(name) number from teacher GROUP BY subject having number>1;</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token operator">|</span> subject <span class="token operator">|</span> name       <span class="token operator">|</span> number <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token operator">|</span> 化学    <span class="token operator">|</span> snow<span class="token punctuation">,</span>ji    <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> 数学    <span class="token operator">|</span> huang<span class="token punctuation">,</span>zhou <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span class="token comment">////根据subject 分类，将每组中的name都显示出来，并统计人数,在过滤掉人数小于等于1的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Having的执行效率比where低，能用where解决的不要用where</li>
</ul>
<h3 id="6-使用LIMIT限制数据记录查询数量"><a href="#6-使用LIMIT限制数据记录查询数量" class="headerlink" title="6.使用LIMIT限制数据记录查询数量"></a>6.使用LIMIT限制数据记录查询数量</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">limit</span> offset_start<span class="token punctuation">,</span>row_count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>offset_start表示起始位置，这个可以省略不写，如果不写默认值为0，表示从第一条记录开始显示。</li>
<li>offset_start应该比起始位置小1，类似于数组的下标。比如你要显示第4条数据，则offset_start应该为3。</li>
<li>row_count表示记录条数，即显示出来的记录数，如果row_count小于查询出来的总记录数，则只显示row_count设置的记录数；如果大于总记录数，则会把所有的都显示出来。</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+------+------+---------+---------+</span>
<span class="token operator">|</span> tid  <span class="token operator">|</span> name <span class="token operator">|</span> age  <span class="token operator">|</span> subject <span class="token operator">|</span> salary  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+------+------+---------+---------+</span>
<span class="token operator">|</span> <span class="token number">2001</span> <span class="token operator">|</span> snow <span class="token operator">|</span>   <span class="token number">22</span> <span class="token operator">|</span> 化学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2002</span> <span class="token operator">|</span> peng <span class="token operator">|</span>   <span class="token number">23</span> <span class="token operator">|</span> 生物    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+------+------+---------+---------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span class="token comment">//限制了只显示2条记录数，默认从第一条记录开始</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+-------+------+---------+---------+</span>
<span class="token operator">|</span> tid  <span class="token operator">|</span> name  <span class="token operator">|</span> age  <span class="token operator">|</span> subject <span class="token operator">|</span> salary  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+-------+------+---------+---------+</span>
<span class="token operator">|</span> <span class="token number">2001</span> <span class="token operator">|</span> snow  <span class="token operator">|</span>   <span class="token number">22</span> <span class="token operator">|</span> 化学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2002</span> <span class="token operator">|</span> peng  <span class="token operator">|</span>   <span class="token number">23</span> <span class="token operator">|</span> 生物    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2003</span> <span class="token operator">|</span> huang <span class="token operator">|</span>   <span class="token number">21</span> <span class="token operator">|</span> 数学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2004</span> <span class="token operator">|</span> ji    <span class="token operator">|</span>   <span class="token number">24</span> <span class="token operator">|</span> 化学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2005</span> <span class="token operator">|</span> chen  <span class="token operator">|</span>   <span class="token number">23</span> <span class="token operator">|</span> 语文    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2006</span> <span class="token operator">|</span> zhou  <span class="token operator">|</span>   <span class="token number">21</span> <span class="token operator">|</span> 数学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+-------+------+---------+---------+</span>
<span class="token number">6</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span class="token comment">//限制显示8条记录，但由于总记录数为6，所以显示了所有记录。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="多表数据查询"><a href="#多表数据查询" class="headerlink" title="多表数据查询"></a>多表数据查询</h2><p>MySQL支持连接查询，在具体实现连接查询的操作时，首先将两个或两个以上的表按照某个条件连接起来，再查询所要求的数据记录，连接查询分为内连接查询和外连接查询。</p>
<p>在具体应用中，如果需要实现多表记录查询，一般不适合进行连接查询，因为该操作的效率比较低，所以MySQL体用了连接查询的替代操作——子查询操作。</p>
<h3 id="1-内连接查询"><a href="#1-内连接查询" class="headerlink" title="1.内连接查询"></a>1.内连接查询</h3><p>MySQL中，内连接数据查询通过“INNER JOIN…ON”语句来实现。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> tablename1 <span class="token keyword">inner</span> <span class="token keyword">join</span> tablename2  <span class="token keyword">on</span> 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>内连接查询分为以下3类：</p>
<ul>
<li>自连接     指表与其自身连接 （这个不是很懂，看起来很简单就是一张表，但是不知道怎么得到的结果）</li>
<li>等值连接   在关键字ON后的匹配条件使用等于关系运算符（=）  这个方式我之前用的比较多</li>
<li>不等连接   关键字ON后的匹配条件使用 &gt;、&lt;、&gt;=、&lt;=、!=等关系运算符</li>
</ul>
<h3 id="2-外链接查询"><a href="#2-外链接查询" class="headerlink" title="2.外链接查询"></a>2.外链接查询</h3><p>MySQL中，外连接数据查询通过“OUTER JOIN…ON”语句来实现。<strong>outer可以省略</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> tablename <span class="token keyword">left</span><span class="token operator">|</span><span class="token keyword">right</span><span class="token operator">|</span><span class="token keyword">full</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token keyword">OUTER</span><span class="token punctuation">]</span> <span class="token keyword">join</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">on</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>外链接查询分为以下3类：</p>
<ul>
<li>左外连接</li>
<li>右外连接</li>
<li>全外连接</li>
</ul>
<p>左外连接：以<code>left join</code>左边的表为参考表，左表的所有记录都会被显示出来，而右表只会显示符合搜索条件的记录，没有数据的地方用NULL来代替</p>
<p>右外连接：以right join 右边的表为参考表，右表的所有记录都会被显示出来，而左表只显示符合搜索条件的记录，没有数据的地方用NULL代替。</p>
<p>全连接：目前mysql不支持这种方式。</p>
<p>参考这篇博客 <a href="https://blog.csdn.net/plg17/article/details/78758593">图解mysql内外连接</a></p>
<h3 id="3-复合条件连接查询"><a href="#3-复合条件连接查询" class="headerlink" title="3.复合条件连接查询"></a>3.复合条件连接查询</h3><p>复合条件连接查询中，通过添加过滤条件限制查询的结果，使查询的结果更加准确。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">班级表
mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_class<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------+--------+------+---------+</span>
<span class="token operator">|</span> classno <span class="token operator">|</span> cname  <span class="token operator">|</span> loc  <span class="token operator">|</span> advisor <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+--------+------+---------+</span>
<span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span> class2 <span class="token operator">|</span> loc2 <span class="token operator">|</span> ad2     <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span> class3 <span class="token operator">|</span> loc3 <span class="token operator">|</span> ad3     <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+--------+------+---------+</span>
<span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

学生表
mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+</span>
<span class="token operator">|</span> stuid <span class="token operator">|</span> name                <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> classno <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+</span>
<span class="token operator">|</span>  <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1002</span> <span class="token operator">|</span> Kalinda Sharma      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1003</span> <span class="token operator">|</span> Cary Agos           <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1004</span> <span class="token operator">|</span> Diane Lockhart      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1005</span> <span class="token operator">|</span> Eli Gold            <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">44</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1006</span> <span class="token operator">|</span> Peter Florric       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">34</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1007</span> <span class="token operator">|</span> Will Gardner        <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1008</span> <span class="token operator">|</span> Jacquiline Florriok <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1009</span> <span class="token operator">|</span> Zach Florriok       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">14</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1010</span> <span class="token operator">|</span> Grace Florriok      <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+</span>
<span class="token number">10</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

分数表
mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_score<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+---------+---------+------+-----------+---------+</span>
<span class="token operator">|</span> stuid <span class="token operator">|</span> Chinese <span class="token operator">|</span> English <span class="token operator">|</span> Math <span class="token operator">|</span> Chemistry <span class="token operator">|</span> Physics <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------+---------+------+-----------+---------+</span>
<span class="token operator">|</span>  <span class="token number">1001</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>   <span class="token number">92</span> <span class="token operator">|</span>        <span class="token number">83</span> <span class="token operator">|</span>      <span class="token number">80</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1002</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>      <span class="token number">98</span> <span class="token operator">|</span>   <span class="token number">92</span> <span class="token operator">|</span>        <span class="token number">93</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1003</span> <span class="token operator">|</span>      <span class="token number">79</span> <span class="token operator">|</span>      <span class="token number">78</span> <span class="token operator">|</span>   <span class="token number">82</span> <span class="token operator">|</span>        <span class="token number">83</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1004</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>   <span class="token number">91</span> <span class="token operator">|</span>        <span class="token number">92</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1005</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>      <span class="token number">95</span> <span class="token operator">|</span>   <span class="token number">91</span> <span class="token operator">|</span>        <span class="token number">96</span> <span class="token operator">|</span>      <span class="token number">97</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1006</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>      <span class="token number">91</span> <span class="token operator">|</span>   <span class="token number">92</span> <span class="token operator">|</span>        <span class="token number">94</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1007</span> <span class="token operator">|</span>      <span class="token number">91</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>   <span class="token number">83</span> <span class="token operator">|</span>        <span class="token number">88</span> <span class="token operator">|</span>      <span class="token number">93</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1008</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>      <span class="token number">81</span> <span class="token operator">|</span>   <span class="token number">84</span> <span class="token operator">|</span>        <span class="token number">86</span> <span class="token operator">|</span>      <span class="token number">98</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1009</span> <span class="token operator">|</span>      <span class="token number">91</span> <span class="token operator">|</span>      <span class="token number">84</span> <span class="token operator">|</span>   <span class="token number">85</span> <span class="token operator">|</span>        <span class="token number">86</span> <span class="token operator">|</span>      <span class="token number">93</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1010</span> <span class="token operator">|</span>      <span class="token number">88</span> <span class="token operator">|</span>      <span class="token number">81</span> <span class="token operator">|</span>   <span class="token number">82</span> <span class="token operator">|</span>        <span class="token number">84</span> <span class="token operator">|</span>      <span class="token number">99</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------+---------+------+-----------+---------+</span>
<span class="token number">10</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment">//查找总成绩超过450的学生的编号，姓名，性别，年龄，班级号，班级名称，班级位置和班主任信息</span>
<span class="token keyword">SELECT</span>
	st<span class="token punctuation">.</span>stuid<span class="token punctuation">,</span>
	st<span class="token punctuation">.</span> NAME<span class="token punctuation">,</span>
	st<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>
	st<span class="token punctuation">.</span>age<span class="token punctuation">,</span>
	st<span class="token punctuation">.</span>classno<span class="token punctuation">,</span>
	c<span class="token punctuation">.</span>cname<span class="token punctuation">,</span>
	c<span class="token punctuation">.</span>loc<span class="token punctuation">,</span>
	c<span class="token punctuation">.</span>advisor<span class="token punctuation">,</span>
	sc<span class="token punctuation">.</span>Chinese <span class="token operator">+</span> sc<span class="token punctuation">.</span>English <span class="token operator">+</span> sc<span class="token punctuation">.</span>Math <span class="token operator">+</span> sc<span class="token punctuation">.</span>Chemistry <span class="token operator">+</span> sc<span class="token punctuation">.</span>Physics total
<span class="token keyword">FROM</span>
	t_student st<span class="token punctuation">,</span>
	t_class c<span class="token punctuation">,</span>
	t_score sc
<span class="token keyword">WHERE</span>
	st<span class="token punctuation">.</span>classno <span class="token operator">=</span> c<span class="token punctuation">.</span>classno
<span class="token operator">AND</span> st<span class="token punctuation">.</span>stuid <span class="token operator">=</span> sc<span class="token punctuation">.</span>stuid<span class="token punctuation">;</span>

<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+--------+------+---------+-------+</span>
<span class="token operator">|</span> stuid <span class="token operator">|</span> NAME                <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> classno <span class="token operator">|</span> cname  <span class="token operator">|</span> loc  <span class="token operator">|</span> advisor <span class="token operator">|</span> total <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+--------+------+---------+-------+</span>
<span class="token operator">|</span>  <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>   <span class="token number">434</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1002</span> <span class="token operator">|</span> Kalinda Sharma      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>   <span class="token number">465</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1003</span> <span class="token operator">|</span> Cary Agos           <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>   <span class="token number">411</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1004</span> <span class="token operator">|</span> Diane Lockhart      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span> class2 <span class="token operator">|</span> loc2 <span class="token operator">|</span> ad2     <span class="token operator">|</span>   <span class="token number">453</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1005</span> <span class="token operator">|</span> Eli Gold            <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">44</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span> class3 <span class="token operator">|</span> loc3 <span class="token operator">|</span> ad3     <span class="token operator">|</span>   <span class="token number">471</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1006</span> <span class="token operator">|</span> Peter Florric       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">34</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span> class3 <span class="token operator">|</span> loc3 <span class="token operator">|</span> ad3     <span class="token operator">|</span>   <span class="token number">459</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1007</span> <span class="token operator">|</span> Will Gardner        <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span> class2 <span class="token operator">|</span> loc2 <span class="token operator">|</span> ad2     <span class="token operator">|</span>   <span class="token number">445</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1008</span> <span class="token operator">|</span> Jacquiline Florriok <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>   <span class="token number">439</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1009</span> <span class="token operator">|</span> Zach Florriok       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">14</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>   <span class="token number">439</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1010</span> <span class="token operator">|</span> Grace Florriok      <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>   <span class="token number">434</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+--------+------+---------+-------+</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-合并查询数据记录"><a href="#4-合并查询数据记录" class="headerlink" title="4.合并查询数据记录"></a>4.合并查询数据记录</h3><p>通过UNION来实现合并查询数据记录的操作，可以将多个select语句的查询结果合并在一起组成新的关系</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span><span class="token operator">|</span><span class="token keyword">union</span> <span class="token keyword">all</span>  <span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span><span class="token operator">|</span><span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>form
			<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述语句中存在多个查询数据记录语句，每个查询数据记录语句之间使用UNION或者UNION ALL语句进行连接。</p>
<p>合并后的数据记录包含所有select语句的查询结果。union关键字会去掉重复数据，而union all则不会。</p>
<h3 id="5-子查询"><a href="#5-子查询" class="headerlink" title="5.子查询"></a>5.子查询</h3><p>什么是笛卡尔积？ </p>
<p>假如A表有4条数据，B表有3条数据，将这两张表联合起来。A表中的每一条数据都会去和B表的每一条数据匹配，也就是说将会出现12条数据，这就是笛卡尔积。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">seletct <span class="token operator">*</span> <span class="token keyword">from</span> a<span class="token punctuation">,</span>b <span class="token keyword">where</span> a<span class="token punctuation">.</span>xxx<span class="token operator">=</span>b<span class="token punctuation">.</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行上面这条语句的时候，就会先进行笛卡尔积操作，然后在选择符合条件的数据。当数据量足够大的时候，进行笛卡尔积就很容易导致死机。</p>
<p>当笛卡尔的数据记录数很大时，就通常使用子查询。</p>
<p>所谓子查询，是指在一个查询中嵌套其他若干查询。即在一个select语句的from或者where子句中包含另一个select查询语句。在查询语句中，前面的那个select被称为主查询，where子句中的select语句被称为子查询，也被称为嵌套查询。</p>
<p><strong>查询薪资水平为高级的员工的编号，名字，性别，年龄和工资</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+--------------------+--------+------+--------+--------+</span>
<span class="token operator">|</span> id   <span class="token operator">|</span> name               <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> salary <span class="token operator">|</span> deptno <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+--------------------+--------+------+--------+--------+</span>
<span class="token operator">|</span> <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric     <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>  <span class="token number">10000</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1002</span> <span class="token operator">|</span> Kalinda Sharma     <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>   <span class="token number">9000</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1003</span> <span class="token operator">|</span> Cary Agos          <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span>   <span class="token number">8000</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1004</span> <span class="token operator">|</span> Eli Gold           <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">44</span> <span class="token operator">|</span>  <span class="token number">20000</span> <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1005</span> <span class="token operator">|</span> Peter Florric      <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">34</span> <span class="token operator">|</span>  <span class="token number">30000</span> <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1006</span> <span class="token operator">|</span> Diane Lockhart     <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>  <span class="token number">50000</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1007</span> <span class="token operator">|</span> Maia Rindell       <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>   <span class="token number">9000</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1008</span> <span class="token operator">|</span> Will Gardner       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">36</span> <span class="token operator">|</span>  <span class="token number">50000</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1009</span> <span class="token operator">|</span> Jacquiline Florric <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">57</span> <span class="token operator">|</span>   <span class="token number">9000</span> <span class="token operator">|</span>      <span class="token number">4</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1010</span> <span class="token operator">|</span> Zach Florric       <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">17</span> <span class="token operator">|</span>   <span class="token number">5000</span> <span class="token operator">|</span>      <span class="token number">5</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1011</span> <span class="token operator">|</span> Grace Florric      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">14</span> <span class="token operator">|</span>   <span class="token number">4000</span> <span class="token operator">|</span>      <span class="token number">5</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+--------------------+--------+------+--------+--------+</span>
<span class="token number">11</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_slevel<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+--------+-------+-------------+</span>
<span class="token operator">|</span> id   <span class="token operator">|</span> salary <span class="token operator">|</span> <span class="token keyword">level</span> <span class="token operator">|</span> description <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+--------+-------+-------------+</span>
<span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">3000</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span> 初级        <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">7000</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span> 中级        <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">10000</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span> 高级        <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">20000</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span> 特级        <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>  <span class="token number">30000</span> <span class="token operator">|</span>     <span class="token number">5</span> <span class="token operator">|</span> 高管        <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+--------+-------+-------------+</span>
<span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span> a<span class="token punctuation">.</span> NAME<span class="token punctuation">,</span>a<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>a<span class="token punctuation">.</span>age<span class="token punctuation">,</span>a<span class="token punctuation">.</span>salary <span class="token keyword">FROM</span> t_employee a <span class="token keyword">WHERE</span>
    <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span>salary <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> t_slevel <span class="token keyword">WHERE</span> <span class="token keyword">LEVEL</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">AND</span> a<span class="token punctuation">.</span>salary <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> t_slevel <span class="token keyword">WHERE</span> <span class="token keyword">LEVEL</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+----------------+--------+------+--------+</span>
<span class="token operator">|</span> id   <span class="token operator">|</span> NAME           <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> salary <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+----------------+--------+------+--------+</span>
<span class="token operator">|</span> <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>  <span class="token number">10000</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+----------------+--------+------+--------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-1-带关键字IN的子查询"><a href="#5-1-带关键字IN的子查询" class="headerlink" title="5.1 带关键字IN的子查询"></a>5.1 带关键字IN的子查询</h3><p>一个查询语句的条件可能落在另一个查询语句的查询结果中，这可以通过关键字IN来判断。</p>
<p><strong>查询员工表t_employee的数据记录，这些记录的字段deptno的值必须在部门表t_dept中出现过</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> deptno <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> deptno <span class="token keyword">from</span> t_dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-2带关键字EXISTS的子查询"><a href="#5-2带关键字EXISTS的子查询" class="headerlink" title="5.2带关键字EXISTS的子查询"></a>5.2带关键字EXISTS的子查询</h3><p>关键字EXISTS表示存在，后面的参数是一个任意的子查询，系统对子查询进行运算以判断他是否返回行。</p>
<p>如果至少返回一行，那么EXISTS返回的结果是true,此时外层语句将进行查询；如果子查询没有任何返回行，那么EXISTS的返回结果是false,此时外层语句将不进行查询。 （前面的select语句是外层语句）</p>
<p><strong>查询t-dept表中是否存在deptno为4的部门，如果存在，再查询表t_employee的记录</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_dept <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>查询表t-dept中是否存在的deptno为4的部门，如果存在，在查询t_employee表中字段age大于40的记录</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> age<span class="token operator">></span><span class="token number">40</span> <span class="token operator">AND</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">*</span> <span class="token keyword">from</span> t_dept <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-3带关键字ANY的子查询"><a href="#5-3带关键字ANY的子查询" class="headerlink" title="5.3带关键字ANY的子查询"></a>5.3带关键字ANY的子查询</h3><p>关键字ANY表示满足其中任意一个条件。</p>
<p>使用ANY时，只要满足内层查询语句返回的结果中的任意一个，就可以通过该条件执行外层查询语句。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2020/10/12/Linux/</url>
    <content><![CDATA[<h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>使用xshell工具在windows系统上连接Linux云服务器</p>
<a id="more"></a>

<ol>
<li>新建连接</li>
</ol>
<p><img src="images/blog/image-20201008124927869.png" alt="image-20201008124927869"></p>
<ol start="2">
<li>建立连接</li>
</ol>
<p><img src="images/blog/image-20201008125328043.png" alt="image-20201008125328043"></p>
<ol start="3">
<li>然后点击会话，输入用户名密码即可连接成功。</li>
</ol>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>使用xftp工具将本地的文件上传到云服务器</p>
<p><img src="images/blog/image-20201008130105924.png" alt="image-20201008130105924"></p>
<h2 id="走进Linux"><a href="#走进Linux" class="headerlink" title="走进Linux"></a>走进Linux</h2><h3 id="开机登录"><a href="#开机登录" class="headerlink" title="开机登录"></a>开机登录</h3><p>开机会启动许多程序，它们在Windows叫做服务，在Linux中叫做守护进程</p>
<p>开机成功后，会显示一个文本登录界面，这就是我们经常看到的登录界面。</p>
<p>在Linux中最高权限账户为root，可以操作一切！</p>
<h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><p><strong>Linux中没有错误就代表操作成功</strong></p>
<p>关机指令为：shutdown</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sync</span> <span class="token comment"># 将数据由内存同步到硬盘中。</span>

<span class="token function">shutdown</span> <span class="token comment"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span>

<span class="token function">shutdown</span> –h <span class="token number">10</span> <span class="token comment"># 这个命令告诉大家，计算机将在10分钟后关机</span>

<span class="token function">shutdown</span> –h now <span class="token comment"># 立马关机</span>

<span class="token function">shutdown</span> –h <span class="token number">20</span>:25 <span class="token comment"># 系统会在今天20:25关机</span>

<span class="token function">shutdown</span> –h +10 <span class="token comment"># 十分钟后关机</span>

<span class="token function">shutdown</span> –r now <span class="token comment"># 系统立马重启</span>

<span class="token function">shutdown</span> –r +10 <span class="token comment"># 系统十分钟后重启</span>

<span class="token function">reboot</span> <span class="token comment"># 就是重启，等同于 shutdown –r now</span>

<span class="token function">halt</span> <span class="token comment"># 关闭系统，等同于shutdown –h now 和 poweroff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：<strong>不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</strong></p>
<h3 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h3><ol>
<li>一切皆文件</li>
<li>根目录 /， 所有的文件都挂载在这个节点下</li>
</ol>
<p>登录系统后，在当前命令窗口下输入命令：</p>
<p><code>ls /</code></p>
<p>就会看到如下图所示：可以查看所有的文件目录</p>
<p><img src="images/blog/image-20201008132435573.png" alt="image-20201008132435573"></p>
<p>树状目录结构：（Linux的一切资源都挂载在这个 / 根节点下）</p>
<p><img src="images/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201008132509.jpg" alt="系统结构目录"></p>
<p><strong>以下是对这些目录的解释：</strong></p>
<ul>
<li><strong>/bin</strong>：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li>
<li><strong>/boot：</strong> 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。<em>不要动</em></li>
<li><strong>/dev ：</strong> dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li>
<li>==<strong>/etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录==。</li>
<li>==<strong>/home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。==</li>
<li><strong>/lib</strong>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。<em>不要动</em></li>
<li><strong>/lost+found</strong>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。<em>存放突然关机的一些文件</em></li>
<li><strong>/media</strong>：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li>
<li><strong>/mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。<em>会把一些本地文件挂载在这个目录下</em></li>
<li>==<strong>/opt</strong>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。==</li>
<li><strong>/proc</strong>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<em>不用管</em></li>
<li>==<strong>/root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。==</li>
<li><strong>/sbin</strong>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li>
<li><strong>/srv</strong>：该目录存放一些服务启动之后需要提取的数据。</li>
<li><strong>/sys</strong>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li>
<li>==<strong>/tmp</strong>：这个目录是用来存放一些临时文件的。<em>用来存放一些临时文件的。用完即丢的文件，可以放在这个目录下，比如说安装包</em>==</li>
<li>==<strong>/usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。==</li>
<li><strong>/usr/bin：</strong> 系统用户使用的应用程序。</li>
<li><strong>/usr/sbin：</strong> 超级用户使用的比较高级的管理程序和系统守护程序。</li>
<li><strong>/usr/src：</strong> 内核源代码默认的放置目录。</li>
<li>==<strong>/var</strong>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。==</li>
<li><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li>
<li>==<strong>www：</strong>存放服务器网站相关的资源，环境，网站的项目==</li>
</ul>
<h2 id="常用的基本命令"><a href="#常用的基本命令" class="headerlink" title="常用的基本命令"></a>常用的基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote>
<p>绝对路径和相对路径</p>
</blockquote>
<p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p>
<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>
<p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p>
<p><strong>绝对路径：</strong></p>
<p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p>
<p><strong>相对路径：</strong></p>
<p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p>
<blockquote>
<p>处理目录的常用命令</p>
</blockquote>
<p>接下来我们就来看几个常见的处理目录的命令吧：</p>
<ul>
<li>ls: 列出目录</li>
<li>cd：切换目录</li>
<li>pwd：显示目前的目录</li>
<li>mkdir：创建一个新的目录</li>
<li>rmdir：删除一个空的目录</li>
<li>cp: 复制文件或目录</li>
<li>rm: 移除文件或目录</li>
<li>mv: 移动文件与目录，或修改文件与目录的名称</li>
</ul>
<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>
<blockquote>
<p>ls （列出目录）</p>
</blockquote>
<p>在Linux系统当中， ls 命令可能是最常被运行的。</p>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-a参数 ：all，查看全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-l ：列出所有的文件，包含文件的属性与权限等等数据，没有隐藏文件；(常用)</li>
</ul>
<p><strong>所有的Linux命令都可以组合使用</strong></p>
<p>将目录下的所有文件列出来(含属性与隐藏档)</p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# ls -al ~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>cd （切换目录）</p>
</blockquote>
<p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">cd 目录名[相对路径或绝对路径]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到用户目录下</span>
<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># cd home  </span>

<span class="token comment"># 使用 mkdir 命令创建 kuangstudy 目录</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir kuangstudy</span>

<span class="token comment"># 进入 kuangstudy 目录</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cd kuangstudy</span>

<span class="token comment"># 回到上一级</span>
<span class="token punctuation">[</span>root@kuangshen kuangstudy<span class="token punctuation">]</span><span class="token comment"># cd ..</span>

<span class="token comment"># 回到根目录</span>
<span class="token punctuation">[</span>root@kuangshen kuangstudy<span class="token punctuation">]</span><span class="token comment"># cd /</span>

<span class="token comment"># 表示回到自己的家目录，即回到 /root 这个目录  </span>
<span class="token punctuation">[</span>root@kuangshen kuangstudy<span class="token punctuation">]</span><span class="token comment"># cd ~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>pwd ( 显示目前所在的目录 )</p>
</blockquote>
<p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen kuangstudy]#pwd [-P]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。</p>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 单纯显示出目前的工作目录</span>
<span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># pwd</span>
/root

<span class="token comment"># 如果是链接，要显示真实地址，可以使用 -P参数</span>
<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># cd bin</span>
<span class="token punctuation">[</span>root@kuangshen bin<span class="token punctuation">]</span><span class="token comment"># pwd -P</span>
/usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>mkdir （创建新目录）</p>
</blockquote>
<p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir [-mp] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！即直接创建<code>test1/test2/test3</code>三层文件夹</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入我们用户目录下</span>
<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># cd /home</span>

<span class="token comment"># 创建一个 test 文件夹</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir test</span>

<span class="token comment"># 创建多层级目录</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir test1/test2/test3/test4</span>
mkdir: cannot create directory ‘test1/test2/test3/test4’:
No such <span class="token function">file</span> or directory  <span class="token comment"># &lt;== 没办法直接创建此目录啊！</span>

<span class="token comment"># 加了这个 -p 的选项，可以自行帮你创建多层目录！</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir -p test1/test2/test3/test4</span>

<span class="token comment"># 创建权限为 rwx--x--x 的目录。</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir -m 711 test2</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
drwxr-xr-x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:55 <span class="token builtin class-name">test</span>
drwxr-xr-x <span class="token number">3</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:56 test1
drwx--x--x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:58 test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>rmdir ( 删除空的目录 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">rmdir [-p] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 看看有多少目录存在？</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
drwxr-xr-x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:55 <span class="token builtin class-name">test</span>
drwxr-xr-x <span class="token number">3</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:56 test1
drwx--x--x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:58 test2

<span class="token comment"># 可直接删除掉，没问题</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rmdir test</span>

<span class="token comment"># 因为尚有内容，所以无法删除！</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rmdir test1</span>
rmdir: failed to remove ‘test1’: Directory not empty

<span class="token comment"># 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rmdir -p test1/test2/test3/test4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意：这个 rmdir 仅能删除空的目录，如果下面存在文件，需要先删除文件，递归删除多个目录加上 -p 参数。</strong></p>
<p><strong>可以使用 rm 命令来删除非空目录。</strong></p>
<blockquote>
<p>cp ( 复制文件或目录 )</p>
</blockquote>
<p>语法：     </p>
<p>cp 原来的地方 新的地方！ </p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)
[root@www ~]# cp [options] source1 source2 source3 .... directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>
<li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>
<li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>
<li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li>
<li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>
<li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>
<li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li>
<li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>
<li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cp install.sh  kuangstudy  #拷贝文件至目录  这里是将install.sh 由home拷贝到kuangstudy</span>

<span class="token comment">#如果文件重复，会询问是否覆盖</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cp install.sh  kuangstudy</span>
cp: overwrite ‘kuangstudy/install.sh’? y <span class="token comment"># n不覆盖，y为覆盖</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>rm ( 移除文件或目录 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">rm [-fir] 文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息，强制删除；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rm -i install.sh</span>
rm: remove regular <span class="token function">file</span> ‘install.sh’? y
<span class="token comment"># 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</span>

<span class="token comment"># 尽量不要在服务器上使用 rm -rf /  这个命令会删除系统中的所有文件（该文件夹下的所有东西都被删除），删库跑路就是这么操作的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>mv  ( 移动文件与目录，或修改名称 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># mv [-fiu] source destination</span>
<span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># mv [options] source1 source2 source3 .... directory</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>
<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>
<li>-u ：只更换比较新的文件</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 复制一个文件到当前目录</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cp /root/install.sh /home</span>

<span class="token comment"># 创建一个文件夹 test</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir test</span>

<span class="token comment"># 将复制过来的文件移动到我们创建的目录，并查看</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mv install.sh test</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls</span>
<span class="token builtin class-name">test</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cd test</span>
<span class="token punctuation">[</span>root@kuangshen test<span class="token punctuation">]</span><span class="token comment"># ls</span>
install.sh

<span class="token comment"># 将文件夹重命名，然后再次查看！</span>
<span class="token punctuation">[</span>root@kuangshen test<span class="token punctuation">]</span><span class="token comment"># cd ..</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mv test mvtest</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls</span>
mvtest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><blockquote>
<p>看懂文件属性</p>
</blockquote>
<p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>
<p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组。</p>
<p><img src="images/blog/image-20201008202333515.png" alt="image-20201008202333515"></p>
<p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p>
<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p>
<ul>
<li>==当为[ <strong>d</strong> ]则是目录==</li>
<li>==当为[ <strong>-</strong> ]则是文件；==</li>
<li>==若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；==</li>
<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li>
<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p>
<p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p>
<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>
<p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p>
<p><img src="images/blog/image-20201008203048944.png" alt="image-20201008203048944"></p>
<p>从左至右用0-9这些数字来表示。</p>
<p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>其中：</p>
<p>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>
<p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p>
<p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>
<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>
<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>
<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>
<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>
<p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。<em>第一个root位置表示属主，第二个root表示属组</em></p>
<blockquote>
<p>修改文件属性</p>
</blockquote>
<p><strong>1、chgrp：更改文件属组</strong></p>
<pre class="line-numbers language-none"><code class="language-none">chgrp [-R] 属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p>
<p>3vS_j:hG/n&lt;,</p>
<p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p>
<pre class="line-numbers language-none"><code class="language-none">chown [–R] 属主名 文件名
chown [-R] 属主名：属组	名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>==<strong>3、chmod：更改文件9个属性（必须要掌握）</strong>==</p>
<pre class="line-numbers language-none"><code class="language-none">chmod [-R] xyz 文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Linux文件属性有两种设置方法，一种是数字(常用的是数字），一种是符号。</p>
<p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p>
<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>
<pre class="line-numbers language-none"><code class="language-none">r:4     w:2         x:1

可读可写不可执行    rw- 6
可读可写可执行      rwx 7
chmod 777  文件赋予所有用户可读可写可执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p>
<ul>
<li>owner = rwx = 4+2+1 = 7</li>
<li>group = rwx = 4+2+1 = 7</li>
<li>others= — = 0+0+0 = 0</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">770</span> filename
<span class="token comment"># 把filename设置权限为rwxrwx---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote>
<p>概述</p>
</blockquote>
<p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li>==cat 由第一行开始显示文件内容 ，==</li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl  显示的时候，顺道输出行号！看代码的时候希望显示行号</li>
<li>more 一页一页的显示文件内容 ==空格表示翻页，enter代表向下看一行 :f可以看到当前的行号==</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！==空格下翻页，上下键代表翻动页面！q命令退出==</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
</ul>
<p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p>
<p>网络配置目录：<code>cd /etc/sysconfig/network-scripts</code></p>
<p><img src="images/blog/image-20201008210213118.png" alt="image-20201008210213118"></p>
<p><strong>使用ifconfig来查看网络配置</strong></p>
<blockquote>
<p>cat 由第一行开始显示文件内容</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">cat [-AbEnTv]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span>
<span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span>
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>tac</p>
</blockquote>
<p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># tac /etc/sysconfig/network-scripts/ifcfg-eth0</span>
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>nl  显示行号</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">nl [-bnw] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>
<li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>
<li>-w ：行号栏位的占用的位数。</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># nl /etc/sysconfig/network-scripts/ifcfg-eth0</span>
<span class="token assign-left variable">1DEVICE</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">2BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">3ONBOOT</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>more  一页一页翻动</p>
</blockquote>
<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter   ：代表向下翻『一行』；</li>
<li>/字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f    ：立刻显示出档名以及目前显示的行数；</li>
<li>q    ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen etc<span class="token punctuation">]</span><span class="token comment"># more /etc/csh.login</span>
<span class="token punctuation">[</span>root@iZ2ze1m5qjg1tjthcel6gcZ etc<span class="token punctuation">]</span><span class="token comment"># more csh.login</span>
<span class="token comment"># /etc/csh.login</span>

<span class="token comment"># System wide environment and startup programs, for login setup</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token variable">$&#123;?PATH&#125;</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uid</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
		setenv <span class="token environment constant">PATH</span> <span class="token string">"/usr/local/sbin:/usr/sbin:/usr/local/bin:/usr/bin"</span>
        <span class="token keyword">else</span>
		setenv <span class="token environment constant">PATH</span> <span class="token string">"/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin"</span>
        endif
<span class="token keyword">else</span>
	<span class="token comment">#add sbin directories to the path</span>
	foreach p <span class="token punctuation">(</span> /usr/local/sbin /usr/sbin <span class="token punctuation">)</span>
		switch <span class="token punctuation">(</span><span class="token string">":<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span>:"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">"*:<span class="token variable">$&#123;p&#125;</span>:*"</span><span class="token builtin class-name">:</span>
			breaksw
		default:
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uid</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
                        	<span class="token builtin class-name">set</span> path <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token variable">$&#123;p&#125;</span> <span class="token variable">$&#123;path<span class="token operator">:</span>q&#125;</span> <span class="token punctuation">)</span>
			<span class="token keyword">else</span>
--More--<span class="token punctuation">(</span><span class="token number">47</span>%<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>less  一页一页翻动，以下实例输出/etc/man.config文件的内容：</p>
</blockquote>
<p>less运行时可以输入的命令有：</p>
<ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>/字串  ：向下搜寻『字串』的功能；</li>
<li>?字串  ：向上搜寻『字串』的功能；</li>
<li>n   ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N   ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q   ：离开 less 这个程序；</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2ze1m5qjg1tjthcel6gcZ etc<span class="token punctuation">]</span><span class="token comment"># less csh.login</span>


<span class="token comment"># /etc/csh.login</span>

<span class="token comment"># System wide environment and startup programs, for login setup</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token variable">$&#123;?PATH&#125;</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uid</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
                setenv <span class="token environment constant">PATH</span> <span class="token string">"/usr/local/sbin:/usr/sbin:/usr/local/bin:/usr/bin"</span>
        <span class="token keyword">else</span>
                setenv <span class="token environment constant">PATH</span> <span class="token string">"/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin"</span>
        endif
<span class="token keyword">else</span>
        <span class="token comment">#add sbin directories to the path</span>
        foreach p <span class="token punctuation">(</span> /usr/local/sbin /usr/sbin <span class="token punctuation">)</span>
                switch <span class="token punctuation">(</span><span class="token string">":<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span>:"</span><span class="token punctuation">)</span>
                <span class="token keyword">case</span> <span class="token string">"*:<span class="token variable">$&#123;p&#125;</span>:*"</span><span class="token builtin class-name">:</span>
                        breaksw
                default:
                        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uid</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
                                <span class="token builtin class-name">set</span> path <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token variable">$&#123;p&#125;</span> <span class="token variable">$&#123;path<span class="token operator">:</span>q&#125;</span> <span class="token punctuation">)</span>
                        <span class="token keyword">else</span>
csh.login
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>head  取出文件前面几行</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">head [-n number] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>
<p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen etc]# head -n 20 &#x2F;etc&#x2F;csh.login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<blockquote>
<p>tail  取出文件后面几行</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">tail [-n number] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
</ul>
<p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen etc<span class="token punctuation">]</span><span class="token comment"># tail -n 20 /etc/csh.login</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<blockquote>
<p>拓展：Linux 链接概念</p>
</blockquote>
<p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为软链接（Symbolic Link）。</p>
<p>情况下，<strong>ln</strong> 命令产生硬链接。</p>
<p><strong>硬连接</strong></p>
<p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，<strong>即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问</strong>。</p>
<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>
<p><strong>软连接</strong> </p>
<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。<strong>软链接文件有类似于 Windows 的快捷方式，如果删除了原文件，那么快捷方式也访问不了了</strong>。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>
<p><strong>测试：</strong></p>
<ul>
<li>创建连接： ln命令 </li>
<li>touch 创建文件</li>
<li>echo 输入字符串</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># cd /home</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># touch f1 # 创建一个测试文件f1</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls</span>
f1
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ln f1 f2     # 创建f1的一个硬连接文件f2 默认是硬链接</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ln -s f1 f3   # 创建f1的一个符号连接文件f3 加个-s参数 创建的是软连接</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls -li       # -i参数显示文件的inode节点信息</span>
<span class="token number">397247</span> -rw-r--r-- <span class="token number">2</span> root root     <span class="token number">0</span> Mar <span class="token number">13</span> 00:50 f1
<span class="token number">397247</span> -rw-r--r-- <span class="token number">2</span> root root     <span class="token number">0</span> Mar <span class="token number">13</span> 00:50 f2
<span class="token number">397248</span> lrwxrwxrwx <span class="token number">1</span> root root     <span class="token number">2</span> Mar <span class="token number">13</span> 00:50 f3 -<span class="token operator">></span> f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="images/blog/image-20201008214542041.png" alt="image-20201008214542041"></p>
<p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而软连接文件的 inode 节点不同。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># echo 字符串输出 >> f1 输出到 f1文件</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># echo "I am f1 file" >>f1</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f1</span>
I am f1 <span class="token function">file</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f2</span>
I am f1 <span class="token function">file</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f3</span>
I am f1 <span class="token function">file</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rm -f f1</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f2</span>
I am f1 <span class="token function">file</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f3</span>
cat: f3: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是软连接 f1 文件无效；</p>
<p>依此您可以做一些相关的测试，可以得到以下全部结论：</p>
<ul>
<li>删除符号连接f3,对f1,f2无影响；</li>
<li>删除硬连接f2，对f1,f3也无影响；</li>
<li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li>
<li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li>
</ul>
<h3 id="vim编译器"><a href="#vim编译器" class="headerlink" title="vim编译器"></a>vim编译器</h3><blockquote>
<p>什么是Vim编辑器</p>
</blockquote>
<p>vim通过一些插件可以实现和IDE一样的查看</p>
<p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。==（查看内容，编辑内容，保存内容）==</p>
<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>
<p>vim 则可以说是程序开发者的一项很好用的工具。</p>
<p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>连 vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>
<p>vim 键盘图：</p>
<p><img src="images/blog/64116-20191222111829090-17043451.gif" alt="vim键盘图"></p>
<blockquote>
<p>三种使用模式</p>
</blockquote>
<p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p>
<p><strong>命令模式：</strong></p>
<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。如果是编辑模式，需要先退出编辑模式。使用ESC</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<p><strong>输入模式：</strong></p>
<p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<p><strong>底线命令模式</strong></p>
<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。光标移动到了最底下，就可以在这里输入一些底线命令了</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<p><img src="images/blog/image-20201008220932366.png" alt="image-20201008220932366"></p>
<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>
<p><img src="images/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201008221127.jpg" alt="vim操作流程"></p>
<blockquote>
<p>完整的演示说明</p>
</blockquote>
<ol>
<li>新建或者编辑文件  <code>vim filename</code></li>
<li>按i a o 进入输入模式，编写内容</li>
<li>编写完成后按ESC退出编辑模式</li>
<li>按:进入底线模式  输入<code>wq</code>保存退出</li>
</ol>
<blockquote>
<p>Vim 按键说明</p>
</blockquote>
<p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p>
<p><strong>第一部分：一般模式（命令模式）可用的光标移动、复制粘贴、搜索替换等</strong></p>
<table>
<thead>
<tr>
<th align="left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td align="left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td align="left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td align="left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td align="left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td align="left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td align="left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td align="left">-</td>
<td>光标移动到非空格符的上一行  配置文件中空格较多使用这个方便</td>
</tr>
<tr>
<td align="left">==n&lt; space&gt;==</td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td>
</tr>
<tr>
<td align="left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td align="left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td align="left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td align="left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td align="left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td align="left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td>
</tr>
<tr>
<td align="left">==n&lt; Enter&gt;==</td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">搜索替换</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">==/word==</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td>
</tr>
<tr>
<td align="left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td align="left">==n==</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td align="left">==N==</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">删除、复制与粘贴</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td align="left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td align="left">dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td align="left">ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td align="left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td align="left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td align="left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td align="left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td align="left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td align="left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td align="left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td>
</tr>
<tr>
<td align="left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td align="left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td align="left">==u==</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td align="left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
</tbody></table>
<p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">进入输入或取代的编辑模式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">==i, I==</td>
<td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">a, A</td>
<td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">o, O</td>
<td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td>
</tr>
<tr>
<td align="left">r, R</td>
<td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td align="left">==[Esc]==</td>
<td>退出编辑模式，回到一般模式中(常用)</td>
</tr>
</tbody></table>
<p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td align="left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td align="left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td align="left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td align="left">==:wq==</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td align="left">ZZ</td>
<td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td align="left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td align="left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td align="left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td align="left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td>
</tr>
<tr>
<td align="left">==:set nu==</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td align="left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<p>以上标红的掌握熟练即可，其余的了解，我们平时使用VIM最多的就是修改下文件内容而已！</p>
<h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><p>一般在公司中，员工用的都不是root账户</p>
<blockquote>
<p>简介</p>
</blockquote>
<p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>
<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>
<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>
<ul>
<li>用户账号的添加、删除与修改。</li>
<li>用户口令的管理。</li>
<li>用户组的管理。</li>
</ul>
<blockquote>
<p>用户账号的管理</p>
</blockquote>
<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>
<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。</p>
<blockquote>
<p>添加账号 useradd</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">useradd 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参数说明：</p>
<ul>
<li><p>选项 :</p>
</li>
<li><ul>
<li>-c comment 指定一段注释性描述。</li>
<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，给用户指定组。</li>
<li>-m　使用者目录如不存在则自动建立。</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
<li><p>用户名 :</p>
</li>
<li><ul>
<li>指定新账号的登录名。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 此命令创建了一个用户kuangshen，其中-m选项用来为登录名kuangshen产生一个主目录 /home/kuangshen</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># useradd -m kuangshen</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在Linux中一切皆文件，这里的添加用户说白了就是在<code>/etc/password</code>文件中写入用户的信息  ,同时更新其他系统文件如/etc/shadow,/etc/grou等。</p>
<blockquote>
<p>删除帐号</p>
</blockquote>
<p>如果一个用户的账号不再使用，可以从系统中删除。</p>
<p>删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>
<p>删除一个已有的用户账号使用userdel命令，其格式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">userdel 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen home]# userdel -r kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p>
<blockquote>
<p>修改用户</p>
</blockquote>
<p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p>
<p>修改已有用户的信息使用usermod命令，其格式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">usermod 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p>
<p>例如：</p>
<pre class="line-numbers language-none"><code class="language-none"># usermod -s &#x2F;bin&#x2F;ksh -d &#x2F;home&#x2F;z –g developer kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令将用户kuangshen的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p>
<p>修改完毕之后查看配置文件即可。</p>
<blockquote>
<p>Linux下如何切换用户</p>
</blockquote>
<p><img src="images/blog/image-20201009142632806.png" alt="image-20201009142632806"></p>
<p><img src="images/blog/image-20201009143240133.png" alt="image-20201009143240133"></p>
<p>1.切换用户的命令为：su username 【username是你的用户名哦】</p>
<p>2.从普通用户切换到root用户，还可以使用命令：sudo su</p>
<p>3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p>
<p>4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p>
<p>$表示普通用户    </p>
<p>#表示超级用户，也就是root用户</p>
<p><img src="images/blog/image-20201009143755163.png" alt="image-20201009143755163"></p>
<blockquote>
<p>用户的密码设置</p>
</blockquote>
<p>我们一般通过root创建用户的时候，需要配置密码</p>
<p>在Linux上输入密码是不会显示出来的，正常数据就行了，不是电脑或系统的问题 </p>
<p>超级用户设置密码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> username:
new password
re password   <span class="token comment">#确认密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="images/blog/image-20201009145025270.png" alt="image-20201009145025270"></p>
<p>普通用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Old password:
New password:
Re-enter new password:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="images/blog/image-20201009145220437.png" alt="image-20201009145220437"></p>
<blockquote>
<p>锁定账户</p>
</blockquote>
<p>冻结账户之后，这个账户就不能再登录！</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> -l pty <span class="token comment">#将pty这个用户锁定，锁定之后这个用户就不能再登录</span>
<span class="token function">passwd</span> -d pty <span class="token comment">#清楚pty这个用户的密码，没有密码无法登陆</span>
<span class="token function">passwd</span> -u pty <span class="token comment">#启用已被停止的pty这个用户，让他能再次登录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，<strong>如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建</strong>。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。==组的增加、删除和修改实际上就是对/etc/group文件的更新。==</p>
<blockquote>
<p>增加一个新的用户组使用groupadd命令</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">groupadd 选项 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以使用的选项有：</p>
<ul>
<li>-g GID 指定新用户组的组标识号（GID）。</li>
<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li>
</ul>
<p>实例1：</p>
<pre class="line-numbers language-none"><code class="language-none"># groupadd group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p>
<p>实例2：</p>
<pre class="line-numbers language-none"><code class="language-none"># groupadd -g 101 group2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p>
<p><img src="images/blog/image-20201009172752807.png" alt="image-20201009172752807"></p>
<blockquote>
<p>如果要删除一个已有的用户组，使用groupdel命令</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">groupdel 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>例如：</p>
<pre class="line-numbers language-none"><code class="language-none"># groupdel group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令从系统中删除组group1。</p>
<blockquote>
<p>修改用户组的属性使用groupmod命令</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">groupmod 选项 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用的选项有：</p>
<ul>
<li>-g GID 为用户组指定新的组标识号。</li>
<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>
<li>-n新用户组 将用户组的名字改为新名字</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none"># 此命令将组group2的组标识号修改为102。
groupmod -g 102 group2

# 将组group2的标识号改为10000，组名修改为group3。
groupmod –g 10000 -n group3 group2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>切换组</p>
</blockquote>
<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>
<p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>
<pre class="line-numbers language-none"><code class="language-none">$ newgrp root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</p>
<blockquote>
<p>/etc/passwd</p>
</blockquote>
<p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>
<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p>
<p>下面分别介绍这些文件的内容。</p>
<p><strong>/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p>
<p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>
<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>
<pre class="line-numbers language-none"><code class="language-none">＃ cat &#x2F;etc&#x2F;passwd

root:x:0:0:Superuser:&#x2F;:
daemon:x:1:1:System daemons:&#x2F;etc:
bin:x:2:2:Owner of system commands:&#x2F;bin:
sys:x:3:3:Owner of system files:&#x2F;usr&#x2F;sys:
adm:x:4:4:System accounting:&#x2F;usr&#x2F;adm:
uucp:x:5:5:UUCP administrator:&#x2F;usr&#x2F;lib&#x2F;uucp:
auth:x:7:21:Authentication administrator:&#x2F;tcb&#x2F;files&#x2F;auth:
cron:x:9:16:Cron daemon:&#x2F;usr&#x2F;spool&#x2F;cron:
listen:x:37:4:Network daemon:&#x2F;usr&#x2F;net&#x2F;nls:
lp:x:71:18:Printer administrator:&#x2F;usr&#x2F;spool&#x2F;lp:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<pre class="line-numbers language-none"><code class="language-none">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pty:x:1000:1000::/home/pty:/bin/bash

<span class="token comment">#pty: 用户名</span>
<span class="token comment">#x：口令（登录密码，我们看不见）</span>
<span class="token comment">#1000：用户标示</span>
<span class="token comment">#1000：组标示</span>
<span class="token comment">#/home/pty 主目录</span>
<span class="token comment">#/bin/bash 登录shell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>登录口令放在/etc/shadow中</p>
<p>用户组的所有信息放在/etc/group中</p>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><blockquote>
<p>概述</p>
</blockquote>
<p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p>
<p>Linux磁盘管理常用命令为 df、du。</p>
<ul>
<li>df ：列出文件系统的整体磁盘使用量</li>
<li>du：检查磁盘空间使用量</li>
</ul>
<blockquote>
<p>df</p>
</blockquote>
<p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token punctuation">[</span>-ahikHTm<span class="token punctuation">]</span> <span class="token punctuation">[</span>目录或文件名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将容量结果以易读的容量格式显示出来</span>
<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># df -h</span>
Filesystem     Size Used Avail Use% Mounted on
devtmpfs       869M     <span class="token number">0</span> 869M   <span class="token number">0</span>% /dev
tmpfs           879M 708K 878M   <span class="token number">1</span>% /dev/shm
tmpfs           879M 496K 878M   <span class="token number">1</span>% /run
tmpfs           879M     <span class="token number">0</span> 879M   <span class="token number">0</span>% /sys/fs/cgroup
/dev/vda1       40G  <span class="token number">6</span>.3G   32G  <span class="token number">17</span>% /
tmpfs           176M     <span class="token number">0</span> 176M   <span class="token number">0</span>% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span>

<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># df -h /etc</span>
Filesystem     Size Used Avail Use% Mounted on
/dev/vda1       40G  <span class="token number">6</span>.3G   32G  <span class="token number">17</span>% /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>du</p>
</blockquote>
<p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token punctuation">[</span>-ahskm<span class="token punctuation">]</span> 文件或目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>
<li>-s ：列出总量，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</span>
<span class="token comment"># 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># du</span>
<span class="token number">16</span>./redis
<span class="token number">8</span>./www/.oracle_jre_usage  <span class="token comment"># 包括隐藏文件的目录</span>
<span class="token number">24</span>./www
<span class="token number">48</span>.                        <span class="token comment"># 这个目录(.)所占用的总量</span>
<span class="token comment"># 将文件的容量也列出来</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># du -a</span>
<span class="token number">4</span>./redis/.bash_profile
<span class="token number">4</span>./redis/.bash_logout    
<span class="token punctuation">..</span><span class="token punctuation">..</span>中间省略<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">4</span>./kuangstudy.txt <span class="token comment"># 有文件的列表了</span>
<span class="token number">48</span>.
<span class="token comment"># 检查根目录底下每个目录所占用的容量</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># du -sm /*</span>
<span class="token number">0</span>/bin
<span class="token number">146</span>/boot
<span class="token punctuation">..</span><span class="token punctuation">..</span>.中间省略<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">0</span>/proc
<span class="token punctuation">..</span><span class="token punctuation">..</span>.中间省略<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>/tmp
<span class="token number">3026</span>/usr  <span class="token comment"># 系统初期最大就是他了啦！</span>
<span class="token number">513</span>/var
<span class="token number">2666</span>/www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通配符 * 来代表每个目录。</p>
<p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>对于我们开发人员来说，其实Linux更多偏向于使用即可</p>
<blockquote>
<p>什么是进程</p>
</blockquote>
<ol>
<li>在Linux中，每一个程序都是由自己的一个进程，每一个进程都有自己的id号</li>
<li>每一个进程都有一个父进程</li>
<li>进程可以有两种存在方式：前台！后台运行！</li>
<li>一般的话服务都是后台运行的，基本的程序都是前台运行的！</li>
</ol>
<blockquote>
<p>命令</p>
</blockquote>
<p><strong>ps</strong>查看当前系统中正在执行的各种进程的信息！</p>
<p>ps-xx:</p>
<ul>
<li>-a 显示当前终端运行的所有进程的信息</li>
<li>-u 以用户的信息显示进程</li>
<li>-x 显示后台运行进程的参数</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ps -aux 查看所有的进程</span>
<span class="token function">ps</span> -aux<span class="token operator">|</span>

<span class="token comment"># |  在Linux中这个叫做管道符    A|B  把A的结果作为输出操作B命令</span>
<span class="token comment"># grep 查找文件中符合条件的字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对我我们来说，这里目前只需要记住一个命令即可  ps-xxx|grep 进程名   查找该进程名的全部信息</p>
<p><strong>ps -ef:可以查看到父进程的信息</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> mysql   <span class="token comment">#看父进程我们一般可以通过目录树结构来查看！</span>

<span class="token comment">#进程树</span>
pstree -pu
	-p  显示父id
	-u  显示用户组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结束进程：杀掉进程，等价于window结束任务</p>
<p>kill-9 进程的id 表示强制结束进程</p>
<p>一般不需要结束进程，但有时候java程序进入死循环可以使用这个杀死程序</p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>安装软件一般有三种方式：rpm、解压缩、yum在线安装！</p>
<h3 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h3><ol>
<li>下载jdk rpm。去Oracle官网下载</li>
<li>使用ftp工具将文件上传到服务器</li>
<li>安装java环境</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检测当前系统是否存在java环境！ java -version</span>
<span class="token comment"># 如果有的话就需要卸载  </span>
<span class="token comment"># rpm -qa|grep jdk    #检测JDK版本信息</span>
<span class="token comment"># rpm -e --nodeps jdk_(jdk版本)</span>

<span class="token comment">#卸载完毕后即可安装jdk</span>
<span class="token comment"># rpm -ivk rpm包   安装jdk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="images/blog/image-20201009195244369.png" alt="image-20201009195244369"></p>
<p><img src="images/blog/image-20201009195752656.png" alt="image-20201009195752656"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看firewall服务状态</span>
systemctl status firewalld

<span class="token comment"># 开启、重启、关闭、firewalld.service服务</span>
<span class="token comment"># 开启</span>
<span class="token function">service</span> firewalld start
<span class="token comment"># 重启</span>
<span class="token function">service</span> firewalld restart
<span class="token comment"># 关闭</span>
<span class="token function">service</span> firewalld stop

<span class="token comment"># 查看防火墙规则</span>
firewall-cmd --list-all    <span class="token comment"># 查看全部信息</span>
firewall-cmd --list-ports  <span class="token comment"># 只看端口信息</span>

<span class="token comment"># 开启端口</span>
开端口命令：firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp --permanent  <span class="token comment">#开启80端口，如果是阿里云需要配置安全组规则</span>
重启防火墙：systemctl restart firewalld.service  <span class="token comment">#开启端口后要重启防火墙</span>

命令含义：
--zone <span class="token comment">#作用域</span>
--add-port<span class="token operator">=</span><span class="token number">80</span>/tcp  <span class="token comment">#添加端口，格式为：端口/通讯协议</span>
--permanent   <span class="token comment">#永久生效，没有此参数重启后失效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h3><ol>
<li><p>在官网下载tomcat文件</p>
</li>
<li><p>解压这个文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf apache-tomcat-9.0.22.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>启动tomcat程序  <code>./xxx.sh</code>脚本即可运行</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行  ./startup.sh</span>
<span class="token comment"># 结束  ./shoutdown.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Docker-yum安装）"><a href="#Docker-yum安装）" class="headerlink" title="Docker(yum安装）"></a>Docker(yum安装）</h3><p>我们现在是在Linux下执行，一定要联网，yum是在线安装！</p>
<blockquote>
<p>安装</p>
</blockquote>
<ol>
<li>安装我们的准备环境（安装gcc)</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> 包名    <span class="token comment">#yum install 安装命令  -y 所有的提示都为y</span>
yum -y <span class="token function">install</span> gcc
yum -y <span class="token function">install</span> gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>卸载docker旧版本</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove docker <span class="token punctuation">\</span>
          docker-client <span class="token punctuation">\</span>
          docker-client-latest <span class="token punctuation">\</span>
          docker-common <span class="token punctuation">\</span>
          docker-latest <span class="token punctuation">\</span>
          docker-latest-logrotate <span class="token punctuation">\</span>
          docker-logrotate <span class="token punctuation">\</span>
          docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>安装需要的软件包</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>设置stable镜像仓库</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  <span class="token comment">#阿里云镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="5">
<li>更新yum软件包索引</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="6">
<li>安装Docker CE</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="7">
<li>启动docker</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="8">
<li>测试</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker version    <span class="token comment">#查看docker版本号</span>
 
docker run hello-world  <span class="token comment"># 跑hello-world程序</span>
 
docker images   <span class="token comment">#查看docker镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>前端设计开发</title>
    <url>/2020/10/12/%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="1-1基本标签"><a href="#1-1基本标签" class="headerlink" title="1.1基本标签"></a>1.1基本标签</h3><ul>
<li><p>h 标签 ：标题，一共有六级，从h1到h6</p>
</li>
<li><p>p 标签： 段落</p>
</li>
<li><p>br 标签：换行</p>
</li>
<li><p>文本格式化标签</p>
<a id="more"></a>

<ul>
<li>strong：粗体</li>
<li>em： 斜体</li>
<li>ins：下划线</li>
<li>del： 删除线</li>
</ul>
</li>
<li><p>img：图像标签，用来定义一个图像，其中img标签中有一些属性：</p>
<ul>
<li>src：图片的路径，可以是本地的图片，也可以是网上的图片。本地的路径可以写相对路径也可以写绝对路径，推荐使用相对路径。</li>
<li>alt：图片的替代文本，当图片不能够显示的时候会显示出alt中的值</li>
<li>title：当图片显示的时候，把鼠标放在图片上面会显示出title中的值</li>
<li>height、width：设置图片的高度或宽度，单位是像素(px)，推荐只设置一个，如果只设置宽度（高度），那么另一个就会等比例的放大缩小；如果设置了两个，就会使图像失真。</li>
</ul>
</li>
<li><p>a 标签：超链接标签，从一个页面跳到另一个页面  </p>
<ul>
<li>href：跳转页面的url地址，可以是绝对路径也可以是相对路径</li>
<li>target：用于指定链接页面的打开方式，其中_self为默认值，在当前页面打开， _blank在新窗口中打开页面</li>
<li>在href的值中使用 # 来进行占位，表示这是一个空链接。 <code>&lt;a href=&quot;#&quot;/&gt;</code>。</li>
<li>如果在href里面的地址是一个文件湖畔这压缩包，会下载这个文件。</li>
<li>网页中的各种元素，如文本、图像、表格、音频、视频等都可以添加超链接。</li>
<li>锚点连接：当我们点击链接，可以快速定位到页面中的某个位置，可以用来做书签<ul>
<li>找到目标位置标签，为其添加一个id属性=xxx,如<code>&lt;h1 id=two&gt;第二集介绍&lt;/h1&gt;</code></li>
<li>在链接文本的href属性中，设置属性值为 **#名字 **的形式，如<code>&lt;a href=&quot;#two&quot;&gt;第二集&lt;/a&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>table 标签：表格标签，表格主要用于显示、展示数据。</p>
<ul>
<li>tr 标签用于定义表格中的行，必须嵌套在table标签中。</li>
<li>td 标签用于定义表格中的单元格，必须嵌套在tr 标签中，td中的文本就是表格的数据</li>
<li>th 标签表示html表格的表头部分，th标签的文本会加粗居中显示。一般第一行的文本会用th而不是td。</li>
<li>thead：用于定义头部，没有什么显示，只是为了更好区分表格的结构，thead内部必须拥有tr标签。</li>
<li>tbody：用于定义表格的主题，主要用于放数据本体。</li>
<li>下面是table标签的一些属性，要写在table标签内，后期会使用css来修改这些样式<ul>
<li>align：设置表格的位置：居中，靠左对齐，靠右对齐….</li>
<li>border：设置表格边框</li>
<li>cellpadding：设置文字与单元边沿的距离，可以理解为设置单元格的长度</li>
<li>cellspacing：设置单元格之前的空白</li>
<li>width、height：设置表格的宽度或高度。</li>
<li>caption: 设置表格的标题</li>
<li>rowspan:纵向合并单元格，rowspan=”xxx”，填写合并单元格的数量，同时将被合并的单元格td删掉。</li>
<li>colspan:横向合并单元格，colspan=”xxx”，填写合并单元格的数量，同时将被合并的单元格td删掉。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>pty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>刘德华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>列表标签</p>
<ul>
<li>无序列表：<code>&lt;ul&gt;</code>，一般以项目符号呈现列表项，列表项使用<code>&lt;li&gt;</code>标签定义。<ul>
<li>ul标签中只能饿嵌套 li 标签，不能直接输入文字或者使用其他标签。</li>
<li>li 标签相当于一个容器，里面可以输入文字或使用其他标签。</li>
</ul>
</li>
<li>有序列表：<code>&lt;ol&gt;</code>，有排列顺序的列表，其各个列表项会按照一定的顺序排列，列表项用<code>&lt;li&gt;</code>标签定义。<ul>
<li>ol标签中只能饿嵌套 li 标签，不能直接输入文字或者使用其他标签。</li>
<li>li 标签相当于一个容器，里面可以输入文字或使用其他标签。</li>
</ul>
</li>
<li>自定义列表：<code>&lt;dl&gt;</code>，用于定义描述列表，这个与<code>&lt;dt&gt;</code>(定义项目/名字)和<code>&lt;dd&gt;</code>(描述每一个项目/名字)一起使用<ul>
<li>dl 里面只能出现dt 和dd</li>
<li>dt和dd个数没有限制，经常是一个dt对应多个dd。</li>
</ul>
</li>
</ul>
</li>
<li><p>表单标签</p>
<ul>
<li>表单域：使用form标签来定义表单域，form会把他范围内的表单元素信息提交给服务器</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;form action="url地址：表单数据提交的服务器地址" method="提交方式：get/post" name="表单域名称"
      各种表单元素控件
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>表单元素控件：</p>
<ul>
<li>input：input包含一个type属性值，可以设置不同的type属性值来指定不同的控件类型。<ul>
<li>text：文本框，可以输入任何文字。</li>
<li>password：密码框，输入的文字会被掩盖，看不到真实内容。</li>
<li>radio：单选框，实现多选一，单选框的选项需要有相同的name属性值才能够实现多选一。</li>
<li>checkbox：复选框，实现多选效果 ，复选框也需要相同的name属性值。</li>
<li>checked：用于复选框和单选框，设置这个属性后，被设置的属性在加载的时候就会选中。<code>checked=&quot;checked&quot;</code></li>
<li>submit：提交按钮，会把表单域的信息提交给服务器，可以使用value修改按钮里面的值。</li>
<li>reset：重置按钮，还原表单元素初始的默认状态，可以使用value修改按钮里面的值。</li>
<li>button：普通按钮，后期结合js,可以作为js的启动按钮。</li>
<li>file：文件域，上传文件使用的。</li>
<li>label：用于绑定一个表单元素，当点击label标签内的文本时，浏览器会自动将焦点转到或者选择对应的表单元素上，用来增加用户体验。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token comment">&lt;!--label标签的for属性值应与input标签的id属性值相同,将本来放在外面的文本使用label标签包围--></span>

		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>select表单元素：如果有多个选项让用户选择，并且想要节约空间，我们可以使用<select>标签定义下拉列表</select></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
----------------------------------------------------------------------------------------
			籍贯：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>湖南<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>湖北<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><ul>
<li>select中至少包含一对<option></option></li>
<li>在<option>中定义selected=”selected”是，当前选项为默认选中项。</option></li>
</ul>
</li>
<li><p>textarea表单元素：当输入的文字很多的时候，文本框<input type="text">不在适用，这时候应该使用textarea标签，常用于评论，留言。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		文本内容
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
-------------------------------------------------------------------------------------
	留言板：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈
		哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>cols=”每行中输入的字符数”，row=”显示的行数”，在实际开发中使用css样式来改变大小</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-2标签属性的注意点"><a href="#1-2标签属性的注意点" class="headerlink" title="1.2标签属性的注意点"></a>1.2标签属性的注意点</h3><ol>
<li>一个标签可以有多个属性，属性必须写在标签名的后面</li>
<li>属性之间不分先后顺序，但必须使用空格间隔</li>
<li>属性采取键值对的格式，即<code>key=&quot;value&quot;</code>。</li>
</ol>
<h3 id="1-3-绝对路径和相对路径"><a href="#1-3-绝对路径和相对路径" class="headerlink" title="1.3 绝对路径和相对路径"></a>1.3 绝对路径和相对路径</h3><ul>
<li><p>相对路径：以引用文件所在的文件夹为基础，而建立出的目录路径。</p>
<table>
<thead>
<tr>
<th>../</th>
<th>上一级路径</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>下一级路径</td>
</tr>
</tbody></table>
</li>
</ul>
<ul>
<li>绝对路径：指这个文件的绝对位置，直接到达目标位置，通常是以盘符开始的路径</li>
</ul>
<h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><h3 id="css语法规范"><a href="#css语法规范" class="headerlink" title="css语法规范"></a>css语法规范</h3><p>css由两个主要的部分构成：选择器以及一条或多条声明。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">选择器 <span class="token punctuation">&#123;</span>
	样式一<span class="token punctuation">;</span>
	样式二<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token comment">#样式使用键值对的方式  key:value,选择器用于指定给哪个标签设置样式，花括号里面是该对象设置的具体样式。</span>
<span class="token comment">#多个键值对之间使用分号（;）间隔</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><h5 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h5><p>标签选择器是指用HTML标签名作为选择器，按照标签名称分类，为页面中的某一类标签指定统一的CSS样式。</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">标签名&#123;
	属性1: 属性值1;
	属性2: 属性值2;
	属性3: 属性值3;
	属性4: 属性值4;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><p>实现差异化选择，比如说只要修改p标签里面的其中几个。</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">.类名&#123;
	属性1: 属性值1;
	属性2: 属性值2;
	属性3: 属性值3;
	属性4: 属性值4;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：</p>
<ul>
<li>类选择器使用<code>.</code>进行标识，后面紧跟类名（我们自己定义的，不要使用html标签作为类名）。</li>
<li>使用<code>class</code>为标签添加类名，多个标签可以具有相同的类名，相当于给标签分了一个组。</li>
<li>不要使用纯数字、中文等命名（纯数字好像不起作用）。</li>
</ul>
<h5 id="类选择器–多类名"><a href="#类选择器–多类名" class="headerlink" title="类选择器–多类名"></a>类选择器–多类名</h5><p>一个标签具有多个类，相当于一个标签具有多个分组</p>
<p>多类名定义格式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>标签名 <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"类名1 类名2 类名3 ..."</span><span class="token operator">></span>xxx<span class="token operator">&lt;</span>/div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>在标签class属性中写多个类名。</li>
<li>多个类名之前使用空格分开。</li>
<li>这个标签就会具有两个类的样式</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
		<span class="token selector">.font12</span><span class="token punctuation">&#123;</span>
			<span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token selector">.red</span><span class="token punctuation">&#123;</span>
			<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red font12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--同时具有red类和font12两个类的样式--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h5><p>id选择器可以为标有特定id的html标签指定特有的样式。</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">#id名&#123;
		属性1: 属性值1;
		属性2: 属性值2;
		属性3: 属性值3;
		属性4: 属性值4;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>id选择器使用<code>#</code>来标识，后面紧跟id名（自定义，不要使用html标签名作为id名）</li>
<li>使用id属性为标签设置id名，id名是唯一的，两个标签是不能拥有相同的id。类似于身份证号。</li>
<li>类选择器在修改样式的时候使用的最多，id选择器一般用于页面唯一性的元素上，经常和js搭配使用。li>
</ul>
<h5 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h5><p>通配符选择器选取页面中所有标签</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">*&#123;
	属性1: 属性值1;
	属性2: 属性值2;
	属性3: 属性值3;
	属性4: 属性值4;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>通配符选择器使用<code>*</code>来标识，可以选择页面中的所有标签</li>
</ul>
<h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><p>复合选择器由两个及以上的基础选择器通过不同方式组合在一起。</p>
<h5 id="后代选择器（重要）"><a href="#后代选择器（重要）" class="headerlink" title="后代选择器（重要）"></a>后代选择器（重要）</h5><p>后代选择器可以选择父元素里面的后代元素。</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">元素1 元素2<span class="token punctuation">&#123;</span>样式声明<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>选择元素1里面的元素2进行修改</li>
<li>两个元素中间使用<strong>空格</strong>隔开</li>
<li>元素1为父元素，元素2为后代元素。</li>
<li>元素1和元素2可以为任意的基础选择器</li>
</ul>
<h5 id="子元素选择器（重要）"><a href="#子元素选择器（重要）" class="headerlink" title="子元素选择器（重要）"></a>子元素选择器（重要）</h5><p>选择父元素中的子元素（只选择子元素)</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">元素<span class="token operator"><span class="token file-descriptor important">1</span>></span>元素2<span class="token punctuation">&#123;</span>样式声明<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>只选择父元素里面的子元素，不会选择孙子元素（子元素的子元素），这是和后代选择器不同的地方。</li>
<li>两个元素之间使用&gt;隔开。</li>
<li>修改的是元素2而不是元素1。</li>
</ul>
<h5 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h5><p>并集选择器可以选择多组标签，并为他们定义相同的样式，通常用于集体声明。</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">元素1,元素2<span class="token punctuation">&#123;</span>样式声明<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>选择元素1和元素2一起进行修改。</li>
<li>两个元素之间使用逗号隔开，逗号可以理解成和的意思。</li>
<li>任何形式的选择器都可以作为并集选择器的一部分，比如上面说的子元素选择器和后代选择器。</li>
</ul>
<h3 id="css字体属性"><a href="#css字体属性" class="headerlink" title="css字体属性"></a>css字体属性</h3><p>字体属性用于定义字体、大小、粗细、文字样式…..</p>
<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>使用font-family属性定义文本的字体。</p>
<p>语法：</p>
<pre><code>        选择器&#123;
            font-family:字体1,字体2 ;
        &#125;</code></pre>
<ul>
<li>font-family后面可以填写多种字体，各种字体之间必须使用英文状态下的逗号隔开。</li>
<li>如果写了多种字体，会优先使用第一种字体，如果没有安装这种字体，就会去使用第二种，以此类推。</li>
<li>一般来说，如果有空格隔开的多个单词组成的字体名称，使用引号将其括起来，单双引号均可。</li>
<li>开发中通常是直接给body设置字体。</li>
</ul>
<h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><p>使用font-size属性定义字体大小</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	font-size: xxpx;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>px(像素)大小似乎我们网页的最常用的单位。</li>
<li>不同浏览器的默认字体大小不一致，尽量给字体设置一个准确值。</li>
<li>通常直接给body设置字体大小。</li>
</ul>
<h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><p>使用font-weight属性设置文本字体的粗细。</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	font-weight: normal/bold/直接写数字;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>常用的有三种表现形式 normal/bold/直接写数字，推荐直接写数字。</li>
<li>normal相当于直接写数字的 400，是默认的粗细。</li>
<li>bold定义粗体，相当于直接写数字的700。</li>
<li>直接写数字来设置字体的粗细，后面不用加px，如<code>font-weight: 700</code>。</li>
</ul>
<h4 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h4><p>语法</p>
<pre><code>    选择器&#123;
        font-style: normal/italic
    &#125;</code></pre>
<ul>
<li>nomal为正常样式。</li>
<li>italic为斜体。</li>
</ul>
<h4 id="字体的复合属性"><a href="#字体的复合属性" class="headerlink" title="字体的复合属性"></a>字体的复合属性</h4><p>上面我们学了css如何定义字体属性，但是如果使用上面的格式代码太冗长了，因此我们通常将上述属性写在一起。</p>
<p>语法</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	font: font-style font-weight font-size/line-height font-family;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>复合属性其实就是简写的方式。</li>
<li>使用font属性时，必须按照上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开。</li>
<li>不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性。否则font将不起作用。</li>
</ul>
<h3 id="css文本属性"><a href="#css文本属性" class="headerlink" title="css文本属性"></a>css文本属性</h3><p>css Text(文本)属性可以定义文本的外观，比如文本的颜色，对齐文本，装饰文本，文本缩进，行间距等等。</p>
<h4 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h4><p>color属性用于定义文本的颜色</p>
<p>语法</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	color: 预定义的颜色值/十六进制/RGB代码
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>预定义的颜色值 即一些颜色的英文名，如red,blue,green。</li>
<li>十六进制 #FF0000,#FF6600  使用6位十六进制的数来表示。</li>
<li>RGB代码  rgb(255,0,0)</li>
<li>这些颜色不需要记，开发中使用取色器来取色，最常用的是十六进制表示。</li>
</ul>
<h4 id="对齐文本"><a href="#对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h4><p>text-align属性用于设置元素文本内容的水平对齐方式（左对齐，居中对齐，右对齐）</p>
<pre><code>选择器&#123;
    text-align: left/center/right
&#125;</code></pre>
<ul>
<li>left 左对齐 默认</li>
<li>center 居中对齐</li>
<li>right 右对齐</li>
</ul>
<h4 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h4><p>text-decoration属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	text-decoration: none/underline/overline/line-through
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>none 没有装饰线 默认值  <em>最常用</em></p>
</li>
<li><p>underline 下划线 ，a标签自带下划线 <em>常用</em></p>
</li>
<li><p>overline 上划线 <em>几乎不用</em></p>
</li>
<li><p>line-through 删除线  <em>不常用</em></p>
<h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4></li>
</ul>
<p>text-indent属性用来指定文本的第一行的缩进，通常是将段落的首行缩进。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	text-indent: xxxem;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>em是一个相对单位，就是当前一个字体的大小。如果当前字体没有设置大小，就会按照父元素的文字大小。</li>
<li>段落首行缩进两个字，<code>text-indent: 2em</code>，不管字体有多大，都是缩进两个字符。</li>
</ul>
<h4 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h4><p>line-height属性用国语设置行间的距离（行高），可以控制文字与行之间的距离。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	line-height: xxxpx;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="css的引入方式"><a href="#css的引入方式" class="headerlink" title="css的引入方式"></a>css的引入方式</h3><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>内部样式表是写到html页面内部，将所有的css代码抽取出来，单独放到一个<style>标签中。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
	<span class="token selector">a</span><span class="token punctuation">&#123;</span>
		<span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token selector">p</span><span class="token punctuation">&#123;</span>
		<span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>可以控制整个页面的样式。</li>
</ul>
<h4 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h4><p>行内样式表是在元素标签内部的style属性中设定css样式，适合于修改简单的样式。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>style其实就是标签的属性。</li>
<li>可以控制当前的标签的样式。</li>
</ul>
<h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>样式单独写到css文件中，之后把css文件引入到HTML页面中使用。开发中使用最多的就是这种。</p>
<p>引入外部样式表分为两步：</p>
<ol>
<li>新建一个后缀名为.css的样式文件，把所有的css代码都放入从文件中。</li>
<li>在html中使用<link>标签引入css文件。</li>
</ol>
<h3 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h3><h4 id="快速生成HTML结构语法"><a href="#快速生成HTML结构语法" class="headerlink" title="快速生成HTML结构语法"></a>快速生成HTML结构语法</h4><ol>
<li>生成标签，直接输入标签名+tab键即可，比如div 然后tab键，就可以生成<div> </div>。</li>
<li>如果想要同时生成多个相同标签，加上*就可以了，如div * 3 +tab,就可以快速生成3个div。</li>
<li>如果是有父子关系的标签，可以用&gt;,比如 ul&gt;li +tab就可以了。</li>
<li>如果是有兄弟关系的标签，可以用+ 比如div+p  tab。</li>
<li>如果生成带有类名或者id名的标签，直接写 标签名.类名 或者 标签名#id名 tab键就可以了。</li>
<li>如果生成的div的类名是有顺序的，可以用自增符号$ 如.demo$*5  生成5个div标签，class为demo1-demo5。</li>
<li>如果想要在生成的标签内部写内容可以用{}。</li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--  div+tab  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--  p*5 tab  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- ul>li*5 tab--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- div+p tab--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- .demo   p#two tab--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- div.demo$*5 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- div&#123;hahah&#125;*5 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="快速生成CSS样式"><a href="#快速生成CSS样式" class="headerlink" title="快速生成CSS样式"></a>快速生成CSS样式</h4><p>采取简写形式即可。</p>
<ol>
<li>比如w200 按tab可以生成width:200px;</li>
<li>td 按 tab可以生成text-decoration: none;</li>
</ol>
</style></p>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
