<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Myblog</title>
  
  <subtitle>少年，你渴望力量吗</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-29T14:27:05.313Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JMeter压力测试</title>
    <link href="http://example.com/2022/05/29/Jemeter/"/>
    <id>http://example.com/2022/05/29/Jemeter/</id>
    <published>2022-05-29T14:06:13.704Z</published>
    <updated>2022-05-29T14:27:05.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h2><a id="more"></a><p>JMeter 依赖于JDK，所以必须确保当前计算机上已经安装了 JDK，并且配置了环境变量。</p><p>Apache Jmeter官网下载，地址：<a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182402429.png" alt="image-20220520182402429"></p><p>解压缩即可使用，目录结构如下</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182426302.png" alt="image-20220520182426302"></p><p>其中的 bin 目录就是执行的脚本，其中包含启动脚本</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182445106.png" alt="image-20220520182445106"></p><p>双击即可运行，但是有两点注意</p><ul><li>启动时速度比较慢，要耐心等待。</li><li>启动后终端（黑窗口）不能关闭，否则 JMeter 也跟着关闭。</li></ul><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182502234.png" alt="image-20220520182502234"></p><h2 id="修改中文"><a href="#修改中文" class="headerlink" title="修改中文"></a>修改中文</h2><p>默认 JMeter 的语言是英文，需要设置</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182516753.png" alt="image-20220520182516753"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182538054.png" alt="image-20220520182538054"></p><p>上面的配置只能保证本次运行是中文，如果要永久中文，需要修改 JMeter 的配置文件。</p><p>打开 JMeter 文件夹，在 bin 目录中找到 <strong>jmeter.properties</strong>，添加下面配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">language</span>=<span class="hljs-string">zh_CN</span><br></code></pre></td></tr></table></figure><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182555036.png" alt="image-20220520182555036"></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>在测试计划上点鼠标右键，选择「添加 &gt; 线程（用户） &gt; 线程组」</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182612199.png" alt="image-20220520182612199"></p><p>在新增的线程组中，填写线程信息</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182622262.png" alt="image-20220520182622262"></p><p>在线程组这里点鼠标右键，添加 http 请求</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182635810.png" alt="image-20220520182635810"></p><p>编写取样器内容</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182646501.png" alt="image-20220520182646501"></p><p>添加监听报告</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182658504.png" alt="image-20220520182658504"></p><p>汇总报告结果</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182716297.png" alt="image-20220520182716297"></p><p>添加监听结果树</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182815816.png" alt="image-20220520182815816"></p><p>察看结果树</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182731253.png" alt="image-20220520182731253"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装启动&quot;&gt;&lt;a href=&quot;#安装启动&quot; class=&quot;headerlink&quot; title=&quot;安装启动&quot;&gt;&lt;/a&gt;安装启动&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/29/%E4%BD%BF%E7%94%A8%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%AF%B9hashmap%E7%9A%84%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/05/29/%E4%BD%BF%E7%94%A8%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%AF%B9hashmap%E7%9A%84%E6%8E%92%E5%BA%8F/</id>
    <published>2022-05-29T14:05:56.672Z</published>
    <updated>2022-05-29T14:05:54.340Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title：使用优先队列实现对hashmap的排序"><a href="#title：使用优先队列实现对hashmap的排序" class="headerlink" title="title：使用优先队列实现对hashmap的排序"></a>title：使用优先队列实现对hashmap的排序</h2><a id="more"></a><h1 id="根据hashmap的value值进行排序"><a href="#根据hashmap的value值进行排序" class="headerlink" title="根据hashmap的value值进行排序"></a>根据hashmap的value值进行排序</h1><blockquote><p>在一些场景下，我们使用hashmap进行统计，然后根据hashmap中value的值进行排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        HashMap&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-comment">//模拟数据</span><br>        map.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br>        map.put(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">3</span>);<br>        map.put(<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-number">4</span>);<br>        map.put(<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-number">6</span>);<br>        map.put(<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-number">5</span>);<br>        map.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//创建优先队列并设置排序规则， </span><br>        PriorityQueue&lt;Map.Entry&lt;String,Integer&gt;&gt;  queue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((e1,e2) -&gt;  e2.getValue() - e1.getValue());<br>        <br>        <span class="hljs-comment">//将map的Entry加入到优先队列中</span><br>        queue.addAll(map.entrySet());<br><span class="hljs-comment">//获取到优先队列的长度，由于下面使用poll来拿到栈顶元素，使用poll方法后长度会减1，因此循环次数需要固定</span><br>        <span class="hljs-keyword">int</span> size = queue.size();<br>        <br>        <span class="hljs-comment">//优先队列使用堆来维护的，因此不能够直接遍历优先队列，你会发现直接遍历取出来的值不一定是按顺序</span><br>        <span class="hljs-comment">//这里需要使用取出栈顶元素，取出一个元素后，优先队列会自动维护堆</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>            System.out.println(queue.poll());<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="根据hashmap的key值进行排序"><a href="#根据hashmap的key值进行排序" class="headerlink" title="根据hashmap的key值进行排序"></a>根据hashmap的key值进行排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        HashMap&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br>        map.put(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">3</span>);<br>        map.put(<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-number">4</span>);<br>        map.put(<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-number">6</span>);<br>        map.put(<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-number">5</span>);<br>        map.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//和上面不同的是这里排序规则是比较key的</span><br>        PriorityQueue&lt;Map.Entry&lt;String,Integer&gt;&gt;  queue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((e1,e2) -&gt;  e1.getKey().compareTo(e2.getKey()));<br>        queue.addAll(map.entrySet());<br><br>        <span class="hljs-keyword">int</span> size = queue.size();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>            System.out.println(queue.poll());<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;title：使用优先队列实现对hashmap的排序&quot;&gt;&lt;a href=&quot;#title：使用优先队列实现对hashmap的排序&quot; class=&quot;headerlink&quot; title=&quot;title：使用优先队列实现对hashmap的排序&quot;&gt;&lt;/a&gt;title：使用优先队列实现对hashmap的排序&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>EasyExcel处理Excel</title>
    <link href="http://example.com/2022/05/29/EasyExcel%E5%A4%84%E7%90%86Excel/"/>
    <id>http://example.com/2022/05/29/EasyExcel%E5%A4%84%E7%90%86Excel/</id>
    <published>2022-05-29T14:05:41.457Z</published>
    <updated>2022-05-29T14:26:47.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现写操作"><a href="#实现写操作" class="headerlink" title="实现写操作"></a>实现写操作</h1><a id="more"></a><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于easyexcel是对poi的一个封装，因此低版本的还需要引入poi的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoData</span> </span>&#123;<br><br>    <span class="hljs-comment">//设置exccel表头名称，使用@ExcelProperty注解</span><br><br>    <span class="hljs-meta">@ExcelProperty(&quot;学生编号&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer sno;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;学生姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String sname;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现写操作-1"><a href="#实现写操作-1" class="headerlink" title="实现写操作"></a>实现写操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.EasyExcel;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestEasyExcel</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//实现excel写操作</span><br><br>        <span class="hljs-comment">//1.设置写入文件地址和名称</span><br>        String filename = <span class="hljs-string">&quot;F:\\write.xlsx&quot;</span>;<br><br>        <span class="hljs-comment">//2.调用easyexcal</span><br>        <span class="hljs-comment">//write方法中两个参数：第一个参数文件路径名称，第二个参数文件实体类class</span><br>        <span class="hljs-comment">//sheet是excel表格底下的分类</span><br>        <span class="hljs-comment">//dowrite需要传入一个列表</span><br>        EasyExcel.write(filename,DemoData.class).sheet(&quot;学生列表<span class="hljs-number">1</span><span class="hljs-string">&quot;).doWrite(getData());</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    private static List&lt;DemoData&gt; getData()&#123;</span><br><span class="hljs-string">        List&lt;DemoData&gt; list = new ArrayList&lt;&gt;();</span><br><span class="hljs-string">        for(int i=0;i&lt;10;i++)&#123;</span><br><span class="hljs-string">            DemoData data = new DemoData();</span><br><span class="hljs-string">            data.setSno(i);</span><br><span class="hljs-string">            data.setSname(&quot;</span>lucy<span class="hljs-string">&quot;+i);</span><br><span class="hljs-string">            list.add(data);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        return  list;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>sheet就是这个</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220422141638360.png" alt="image-20220422141638360"></p><h1 id="实现读操作"><a href="#实现读操作" class="headerlink" title="实现读操作"></a>实现读操作</h1><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoData1</span> </span>&#123;<br><br>    <span class="hljs-comment">//表示sno对应的是excel表格中的第一列</span><br>    <span class="hljs-meta">@ExcelProperty(index = 0)</span><br>    <span class="hljs-keyword">private</span> Integer sno;<br><br>    <span class="hljs-meta">@ExcelProperty(index = 1)</span><br>    <span class="hljs-keyword">private</span> String sname;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.context.AnalysisContext;<br><span class="hljs-keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//继承AnalysisEventListener类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExcelListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnalysisEventListener</span>&lt;<span class="hljs-title">DemoData1</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">//一行一行的读取excel的内容</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invoke</span><span class="hljs-params">(DemoData1 demoData1, AnalysisContext analysisContext)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;内容&quot;</span>+demoData1);<br>    &#125;<br><br>    <span class="hljs-comment">//读取表头</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeHeadMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;表头&quot;</span>+headMap);<br>    &#125;<br><br>    <span class="hljs-comment">//读取完成之后执行的操作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.EasyExcel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestEasyExcel1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">//定义读取的文件的路径</span><br>        String filename = <span class="hljs-string">&quot;F:\\write.xlsx&quot;</span>;<br><br>        <span class="hljs-comment">//第一个参数是文件路径名</span><br>        <span class="hljs-comment">//第二个是实体类的类信息</span><br>        <span class="hljs-comment">//第三个是监听器</span><br>        EasyExcel.read(filename,DemoData1.class,<span class="hljs-keyword">new</span> ExcelListener()).sheet().doRead();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;实现写操作&quot;&gt;&lt;a href=&quot;#实现写操作&quot; class=&quot;headerlink&quot; title=&quot;实现写操作&quot;&gt;&lt;/a&gt;实现写操作&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>mapperLocations属性通配符的使用</title>
    <link href="http://example.com/2022/05/29/mapperLocations%E5%B1%9E%E6%80%A7%E9%80%9A%E9%85%8D%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/05/29/mapperLocations%E5%B1%9E%E6%80%A7%E9%80%9A%E9%85%8D%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-29T14:05:06.876Z</published>
    <updated>2022-05-29T14:05:03.221Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><strong>示例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">mybatis:<br>  mapper-locations:<br>    - classpath:mapper/*.xml<br>    - classpath*:com/**/mapper/*.xml<br></code></pre></td></tr></table></figure><p>*<em>注意：在classpath后面的</em>必不可少，缺少型号的话后面的通配符不起作用。**</p><p>** 可以表示任意多级目录，如上述文件可以查到 ：[com/pty/mall/tiny/mapper/PmsBrandMapper.xml]</p><p>*表示多个任意字符</p><p>缺少classpath后面的*会报一下错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: <br>### Error querying database.  Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for framework.system.dao.UserDao.getNextUserId_MySQL<br>### Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for framework.system.dao.UserDao.getNextUserId_MySQL<br>at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:<span class="hljs-number">75</span>)<br>at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:<span class="hljs-number">371</span>)<br>at com.sun.proxy.$Proxy18.selectOne(Unknown Source)<br>at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:<span class="hljs-number">163</span>)<br>at com.huaxin.framework.core.dao.impl.BaseDaoImpl.selectOne(BaseDaoImpl.java:<span class="hljs-number">298</span>)<br>at com.huaxin.framework.system.dao.impl.UserDaoImpl.getNextUserId(UserDaoImpl.java:<span class="hljs-number">41</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis黑马</title>
    <link href="http://example.com/2022/05/29/redis%20%E9%BB%91%E9%A9%AC/"/>
    <id>http://example.com/2022/05/29/redis%20%E9%BB%91%E9%A9%AC/</id>
    <published>2022-05-29T14:02:56.038Z</published>
    <updated>2022-05-30T01:16:37.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><a id="more"></a><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="String命名方式"><a href="#String命名方式" class="headerlink" title="String命名方式"></a>String命名方式</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305145240506.png" alt="image-20220305145240506"></p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305145458174.png" alt="image-20220305145458174"></p><p><img src="/.com//blog\java复习\image-20220305150210040.png" alt="image-20220305150210040"></p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305153327413.png" alt="image-20220305153327413"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305154418649.png" alt="image-20220305154418649"></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305155510456.png" alt="image-20220305155510456"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305160246063.png" alt=" "></p><p><strong>==用于随机推送==</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305160742714.png" alt="image-20220305160742714"></p><h3 id="sorted-set-zset"><a href="#sorted-set-zset" class="headerlink" title="sorted_set(zset)"></a>sorted_set(zset)</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305162453500.png" alt="image-20220305162453500"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305162845435.png" alt="image-20220305162845435"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305163730760.png" alt="image-20220305163730760"></p><p><strong>做排行榜</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305170913560.png" alt="image-20220305170913560"></p><h2 id="高级数据类型"><a href="#高级数据类型" class="headerlink" title="高级数据类型"></a>高级数据类型</h2><h3 id="bitmaps"><a href="#bitmaps" class="headerlink" title="bitmaps"></a>bitmaps</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305215551318.png" alt="image-20220305215551318"></p><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p><strong>应用场景：在统计访问量的时候，一个人多次访问一个网站，还是算作一个人。这个时候就需要统计基数。</strong></p><p>==占用的内存是固定的，2^64个不同元素的基数，只需要12kb的内存。==</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306102643155.png" alt="image-20220306102643155"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306102839532.png" alt="image-20220306102839532"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306103049254.png" alt="image-20220306103049254"></p><h3 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h3><p><strong>只能计算水平，不能计算垂直距离，如果你在山下，他在山上，可能距离只有几百米。</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306103528145.png" alt="image-20220306103528145"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306103748591.png" alt="image-20220306103748591"></p><h2 id="服务器的配置"><a href="#服务器的配置" class="headerlink" title="服务器的配置"></a>服务器的配置</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305214048604.png" alt="image-20220305214048604"></p><p><strong>日志级别开发期设置为verbose即可，生产环境中配置为notice，简化日志输出量，降低写日志IO的频率</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305214235538.png" alt="image-20220305214235538"></p><p>单位是秒</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305214350250.png" alt="image-20220305214350250"></p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305174451622.png" alt="image-20220305174451622"></p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><h4 id="save指令"><a href="#save指令" class="headerlink" title="save指令"></a>save指令</h4><p>使用<code>save</code>命令手动执行保存操作，会生成一个叫<code>dump.rdb</code>的文件来保存快照信息</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305174849937.png" alt="image-20220305174849937"></p><p><strong><code>save</code>指令的执行会阻塞当前redis服务器，知道当前rdb过程完成为止，有可能会造成上时间阻塞，线上环境不建议使用</strong></p><h4 id="bgsave指令"><a href="#bgsave指令" class="headerlink" title="bgsave指令"></a>bgsave指令</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305175814214.png" alt="image-20220305175814214"></p><p>提交保存命令，有服务器后台决定什么时候保存，不是马上保存</p><h4 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305180017057.png" alt="image-20220305180017057"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305180026755.png" alt="image-20220305180026755"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305180600421.png" alt="image-20220305180600421"></p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305180951059.png" alt="image-20220305180951059"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305181055702.png" alt="image-20220305181055702"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305181326611.png" alt="image-20220305181326611"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305181842686.png" alt="image-20220305181842686"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305181941904.png" alt="image-20220305181941904"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305182455183.png" alt="image-20220305182455183"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305182937777.png" alt="image-20220305182937777"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305183043020.png" alt="image-20220305183043020"></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305183124698.png" alt="image-20220305183124698"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305183517150.png" alt="image-20220305183517150"></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305203544777.png" alt="image-20220305203544777"></p><p><strong>加入事务的命令暂时进入到任务队列中，并没有立即执行，只有执行exec命令才开始执行</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305203944796.png" alt="image-20220305203944796"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305204337363.png" alt="image-20220305204337363"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305204549831.png" alt="image-20220305204549831"></p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305204811840.png" alt="image-20220305204811840"></p><p><strong>在事务之前添加watch，不能在开启事务之后再添加watch</strong></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305205411064.png" alt="image-20220305205411064"></p><p><strong>必须锁同一个对象</strong></p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305205943153.png" alt="image-20220305205943153"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305210015123.png" alt="image-20220305210015123"></p><h2 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h2><p><strong>过期数据：</strong>设置了有效期但是已经超时的数据</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305211027639.png" alt="image-20220305211027639"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305211205516.png" alt="image-20220305211205516"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305212158883.png" alt="image-20220305212158883"></p><p><img src="/.com//blog\java复习\image-20220305212252768.png" alt="image-20220305212252768"></p><p><strong>redis内部使用了惰性删除和定期删除</strong></p><h3 id="逐出算法"><a href="#逐出算法" class="headerlink" title="逐出算法"></a>逐出算法</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305212527850.png" alt="image-20220305212527850"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305212626026.png" alt="image-20220305212626026"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305212931160.png" alt="image-20220305212931160"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305213138141.png" alt=" "></p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306104858862.png" alt="image-20220306104858862"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306105058615.png" alt="image-20220306105058615"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306105153719.png" alt="image-20220306105153719"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306105912646.png" alt="image-20220306105912646"></p><h3 id="主从复制的工作流程"><a href="#主从复制的工作流程" class="headerlink" title="主从复制的工作流程"></a>主从复制的工作流程</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306110202558.png" alt="image-20220306110202558"></p><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306110504327.png" alt="image-20220306110504327"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306111313162.png" alt="image-20220306111313162"></p><h4 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306111841231.png" alt="image-20220306111841231"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306112310778.png" alt="image-20220306112310778"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306112547878.png" alt="image-20220306112547878"></p><h4 id="命令传播阶段"><a href="#命令传播阶段" class="headerlink" title="命令传播阶段"></a>命令传播阶段</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306112817915.png" alt="image-20220306112817915"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306113039939.png" alt="image-20220306113039939"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306113445015.png" alt="image-20220306113445015"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306113621935.png" alt="image-20220306113621935"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306113656411.png" alt="image-20220306113656411"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306114227118.png" alt="image-20220306114227118"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306114520969.png" alt="image-20220306114520969"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306114806850.png" alt="image-20220306114806850"></p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306120410301.png" alt="image-20220306120410301"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306120502893.png" alt="image-20220306120502893"></p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306153648226.png" alt="image-20220306153648226"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306154156940.png" alt="image-20220306154156940"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306154218457.png" alt="image-20220306154218457"></p><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><ul><li>请求数量较高</li><li>主从之间数据吞吐量较大，数据同步操作频度较高</li></ul><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306155730705.png" alt="image-20220306155730705"></p><p><strong>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统，避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题，用户直接查询事先被预热的缓存数据。</strong></p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306160005562.png" alt="image-20220306160005562"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306160056409.png" alt="image-20220306160056409"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306160221880.png" alt="image-20220306160221880"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306160330647.png" alt="image-20220306160330466"></p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306160852994.png" alt="image-20220306160852994"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306160922045.png" alt="image-20220306160922045"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306160958459.png" alt="image-20220306160958459"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306161158132.png" alt="image-20220306161158132"></p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306161223740.png" alt="image-20220306161223740"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306161306116.png" alt="image-20220306161306116"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306161347227.png" alt="image-20220306161347227"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306161425855.png" alt="image-20220306161425855"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306161809827.png" alt="image-20220306161809827"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基础数据类型&quot;&gt;&lt;a href=&quot;#基础数据类型&quot; class=&quot;headerlink&quot; title=&quot;基础数据类型&quot;&gt;&lt;/a&gt;基础数据类型&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>redis配置</title>
    <link href="http://example.com/2022/05/29/redis%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/05/29/redis%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-29T14:02:19.133Z</published>
    <updated>2022-05-30T07:59:43.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 修改触发生成RDB文件的条件,表示900s内有一个key被就修改，就执行bgsave，如果是save &quot;&quot; 表示禁用RDB<br>save 900 1<br>save 300 10<br>save 60 10000<br><br>#RDB文件名称<br>dbfilename dump.rdb<br><br>#rdb文件保存的目录,默认当前目录<br>dir ./<br><br>#是否压缩，建议不开启，压缩会消耗cpu<br>rdbcompression yes<br></code></pre></td></tr></table></figure><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml">#是否开启AOF功能，默认是no<br>appendonly yes<br><br>#AOF文件的名称<br>appendfilename &quot;appendonly.aof&quot;<br><br>#表示每执行一次写命令，立即记录到AOF文件<br>appendfsync always<br><br># 写命令执行完先放入aof缓冲区，每隔一秒将缓冲区文件写入到aof文件，默认方案<br>appendfsync everysec<br><br>#写命令执行完先放入aof缓冲区，由系统决定何时将缓冲区内容写回磁盘<br>appendfsync no<br><br>#AOF文件比上次文件增长超过多少百分比则触发重写<br>auto-aof-rewrite-percentage 100<br><br>#aof文件体积最小多大以上才触发重写<br>auto-aof-rewrite-min-size 64mb<br></code></pre></td></tr></table></figure><h1 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h1><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><blockquote><p>本次实验准备3个实例，1主2从,主从需要开启rdb</p></blockquote><p>先创建3个文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入/tmp目录</span><br>cd /tmp<br><span class="hljs-meta">#</span><span class="bash"> 创建目录</span><br>mkdir 7001 7002 7003<br></code></pre></td></tr></table></figure><p>将redis.conf文件复制到这三个目录,前提是先将redis-6.2.4也放到当前目录，否则需要修改下redis的路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 方式一：逐个拷贝</span><br>cp redis-6.2.4/redis.conf 7001<br>cp redis-6.2.4/redis.conf 7002<br>cp redis-6.2.4/redis.conf 7003<br><br><span class="hljs-meta">#</span><span class="bash"> 方式二：管道组合命令，一键拷贝</span><br>echo 7001 7002 7003 | xargs -t -n 1 cp redis-6.2.4/redis.conf<br></code></pre></td></tr></table></figure><p>修改3个实例的端口号和RDB文件保存的地址,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i -e &#x27;s/6379/7001/g&#x27; -e &#x27;s/dir .\//dir \/tmp\/7001\//g&#x27; 7001/redis.conf<br>sed -i -e &#x27;s/6379/7002/g&#x27; -e &#x27;s/dir .\//dir \/tmp\/7002\//g&#x27; 7002/redis.conf<br>sed -i -e &#x27;s/6379/7003/g&#x27; -e &#x27;s/dir .\//dir \/tmp\/7003\//g&#x27; 7003/redis.conf<br></code></pre></td></tr></table></figure><p>修改每个实例的ip信息，如果不是虚拟机，可以不做这个操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 逐一执行</span><br>sed -i &#x27;1a replica-announce-ip 192.168.150.101&#x27; 7001/redis.conf<br>sed -i &#x27;1a replica-announce-ip 192.168.150.101&#x27; 7002/redis.conf<br>sed -i &#x27;1a replica-announce-ip 192.168.150.101&#x27; 7003/redis.conf<br><span class="hljs-meta">#</span><span class="bash"> 或者一键修改</span><br>printf &#x27;%s\n&#x27; 7001 7002 7003 | xargs -I&#123;&#125; -t sed -i &#x27;1a replica-announce-ip 192.168.150.101&#x27; &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 第1个</span><br>redis-server 7001/redis.conf<br><span class="hljs-meta">#</span><span class="bash"> 第2个</span><br>redis-server 7002/redis.conf<br><span class="hljs-meta">#</span><span class="bash"> 第3个</span><br>redis-server 7003/redis.conf<br></code></pre></td></tr></table></figure><h2 id="开启主从"><a href="#开启主从" class="headerlink" title="开启主从"></a>开启主从</h2><p>在三个实例还没有任何关系，要配置主从可以使用replicaof 或者slaveof（5.0以前）命令。</p><p>有临时和永久两种模式：</p><ul><li><p>修改配置文件（永久生效）</p><ul><li>在redis.conf中添加一行配置：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li></ul></li><li><p>使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">slaveof &lt;masterip&gt; &lt;masterport&gt;<br></code></pre></td></tr></table></figure></li></ul><p><strong><font color="red">注意</font></strong>：在5.0以后新增命令replicaof，与salveof效果一致。</p><p>通过redis-cli命令连接7002，执行下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 连接 7002</span><br>redis-cli -p 7002<br><span class="hljs-meta">#</span><span class="bash"> 执行slaveof</span><br>slaveof 192.168.150.101 7001<br></code></pre></td></tr></table></figure><p>其他结点操作一样。</p><p><strong>在主节点中使用info replication 可以查看从节点的状态</strong></p><h1 id="哨兵集群"><a href="#哨兵集群" class="headerlink" title="哨兵集群"></a>哨兵集群</h1><blockquote><p>哨兵可以实现监控、故障转移、通知等功能</p><p>配置3个哨兵结点</p></blockquote><h2 id="创建实例-1"><a href="#创建实例-1" class="headerlink" title="创建实例"></a>创建实例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入/tmp目录</span><br>cd /tmp<br><span class="hljs-meta">#</span><span class="bash"> 创建目录</span><br>mkdir s1 s2 s3<br></code></pre></td></tr></table></figure><p>在s1 s2 s3目录里面创建sentinel.conf文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini">port 27001<br>sentinel announce-ip 192.168.217.4<br>sentinel monitor mymaster 192.168.217.4 2<br>sentinel down-after-milliseconds mymaster 5000<br>sentinel failover-timeout mymaster 60000<br>dir &quot;/tmp/s1&quot;<br></code></pre></td></tr></table></figure><p>解读：</p><ul><li><p><code>port 27001</code>：是当前sentinel实例的端口</p></li><li><pre><code class="hljs">sentinel monitor mymaster 192.168.150.101 7001 2<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><br>  ：指定主节点信息<br><br>  - `mymaster`：主节点名称，自定义，任意写<br>  - `<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">150</span>.<span class="hljs-number">101</span> <span class="hljs-number">7001</span>`：主节点的<span class="hljs-built_in">ip</span>和端口<br>  - `<span class="hljs-number">2</span>`：选举master时的quorum值<br><br>然后将<span class="hljs-built_in">s1</span>/sentinel.conf文件拷贝到<span class="hljs-built_in">s2</span>、<span class="hljs-built_in">s3</span>两个目录中（在/tmp目录执行下列命令）：<br><br>```sh<br><span class="hljs-comment"># 方式一：逐个拷贝</span><br><span class="hljs-symbol">cp</span> <span class="hljs-built_in">s1</span>/sentinel.conf <span class="hljs-built_in">s2</span><br><span class="hljs-symbol">cp</span> <span class="hljs-built_in">s1</span>/sentinel.conf <span class="hljs-built_in">s3</span><br><span class="hljs-comment"># 方式二：管道组合命令，一键拷贝</span><br><span class="hljs-symbol">echo</span> <span class="hljs-built_in">s2</span> <span class="hljs-built_in">s3</span> <span class="hljs-title">| xargs -t -n 1 cp s1/sentinel.conf</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed -i -e <span class="hljs-string">&#x27;s/27001/27002/g&#x27;</span> -e <span class="hljs-string">&#x27;s/s1/s2/g&#x27;</span> s2/sentinel.conf<br>sed -i -e <span class="hljs-string">&#x27;s/27001/27003/g&#x27;</span> -e <span class="hljs-string">&#x27;s/s1/s3/g&#x27;</span> s3/sentinel.conf<br></code></pre></td></tr></table></figure><h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 第1个</span><br>redis-sentinel s1/sentinel.conf<br><span class="hljs-meta">#</span><span class="bash"> 第2个</span><br>redis-sentinel s2/sentinel.conf<br><span class="hljs-meta">#</span><span class="bash"> 第3个</span><br>redis-sentinel s3/sentinel.conf<br></code></pre></td></tr></table></figure><h2 id="springboot整合哨兵集群"><a href="#springboot整合哨兵集群" class="headerlink" title="springboot整合哨兵集群"></a>springboot整合哨兵集群</h2><p>引入redis的starter依赖</p><p>配置yml文件，<strong>只需要配置哨兵集群的信息，不需要配置redis实例的信息，因为客户端是通过找哨兵结点，然后获取实例的地址，这样当发生故障转移的时候，客户端仍然知道需要去哪里获取数据</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">master:</span> <span class="hljs-string">mymaster</span>   <span class="hljs-comment"># 指定master名称</span><br>      <span class="hljs-attr">nodes:</span>   <span class="hljs-comment">#指定redis-sentinel集群信息</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.217</span><span class="hljs-number">.4</span><span class="hljs-string">:27001</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.217</span><span class="hljs-number">.4</span><span class="hljs-string">:27002</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.217</span><span class="hljs-number">.4</span><span class="hljs-string">:27003</span><br></code></pre></td></tr></table></figure><p>配置读写分离</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220518161857091.png" alt="image-20220518161857091"></p><h1 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h1><blockquote><p>主从和哨兵可以解决高可用、高并发读的问题，但是仍然有两个问题没有解决：</p><ul><li>海量数据存储问题</li><li>高并发写的问题</li></ul></blockquote><p>分片集群特征：</p><ul><li>集群中有多个master，每个master保存不同数据</li><li>每个master都可以有多个slave结点</li><li>master之前通过ping监测彼此健康状态</li><li>客户端请求可以访问集群任意节点，最终都会被转发到正确结点</li></ul><h2 id="创建实例-2"><a href="#创建实例-2" class="headerlink" title="创建实例"></a>创建实例</h2><blockquote><p>此处创建6个实例，7001 7002 7003为master，8001 8002 8003为slave</p></blockquote><p>创建目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建目录</span><br>mkdir 7001 7002 7003 8001 8002 8003<br></code></pre></td></tr></table></figure><p>自己创建一个新的redis.conf文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini">port 6379<br><span class="hljs-comment"># 开启集群功能</span><br>cluster-enabled yes<br><span class="hljs-comment"># 集群的配置文件名称，不需要我们创建，由redis自己维护</span><br>cluster-config-file /tmp/6379/nodes.conf<br><span class="hljs-comment"># 节点心跳失败的超时时间</span><br>cluster-node-timeout 5000<br><span class="hljs-comment"># 持久化文件存放目录</span><br>dir /tmp/6379<br><span class="hljs-comment"># 绑定地址</span><br>bind 0.0.0.0<br><span class="hljs-comment"># 让redis后台运行</span><br>daemonize yes<br><span class="hljs-comment"># 注册的实例ip</span><br>replica-announce-ip 192.168.217.4<br><span class="hljs-comment"># 保护模式</span><br>protected-mode no<br><span class="hljs-comment"># 数据库数量</span><br>databases 1<br><span class="hljs-comment"># 日志</span><br>logfile /tmp/6379/run.log<br></code></pre></td></tr></table></figure><p>将文件拷贝到每个目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 执行拷贝</span><br><span class="hljs-built_in">echo</span> 7001 7002 7003 8001 8002 8003 | xargs -t -n 1 cp redis.conf<br></code></pre></td></tr></table></figure><p>修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 修改配置文件</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t sed -i <span class="hljs-string">&#x27;s/6379/&#123;&#125;/g&#x27;</span> &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure><h2 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h2><p>因为配置了后台启动，所以可以直接启动服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 一键启动所有服务</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-server &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure><p>如果要关闭所有进程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown<br></code></pre></td></tr></table></figure><h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><blockquote><p>虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联,我们需要执行命令来创建集群.</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli --cluster create --cluster-replicas 1 192.168.217.4:7001 192.168.217.4:7002 192.168.217.4:7003 192.168.217.4:8001 192.168.217.4:8002 192.168.217.4:8003<br></code></pre></td></tr></table></figure><p>命令说明：</p><ul><li><code>redis-cli --cluster</code>或者<code>./redis-trib.rb</code>：代表集群操作命令</li><li><code>create</code>：代表是创建集群</li><li><code>--replicas 1</code>或者<code>--cluster-replicas 1</code> ：指定集群中每个master的副本个数为1，此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master</li></ul><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220518165636805.png" alt="image-20220518165636805"></p><p>通过命令可以查看集群状态：<code>redis-cli -p 7001 cluster nodes</code>,端口可以是集群中的任意一个结点</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220518165535210.png" alt="image-20220518165535210"></p><h2 id="给集群添加一个结点"><a href="#给集群添加一个结点" class="headerlink" title="给集群添加一个结点"></a>给集群添加一个结点</h2><p>重新创建一个实例，然后将集群的配置文件放到目录下，修改好路径，启动实例。</p><p>使用<code>redis-cli --cluster add-node 要添加结点的ip端口号  集群中任意一个结点ip端口号</code>将结点添加到集群中。</p><h2 id="分配插槽"><a href="#分配插槽" class="headerlink" title="分配插槽"></a>分配插槽</h2><p>使用<code>redis-cli --cluster reshard 集群任意一个ip端口</code>分配插槽，根据提示信息即可完成</p><h2 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h2><p>master宕机后，会自动完成故障转移。</p><p>在一个slave结点中，使用<code>cluster failover</code>命令可以实现手动故障转移，他的master会变成slave，他自己变成master</p><h2 id="springboot整合分片集群"><a href="#springboot整合分片集群" class="headerlink" title="springboot整合分片集群"></a>springboot整合分片集群</h2><blockquote><p>1.引入redis的starter依赖</p><p>2.配置yml文件</p><p>3.配置读写分离</p></blockquote><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">cluster:</span><br>      <span class="hljs-attr">nodes:</span>   <br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.217</span><span class="hljs-number">.4</span><span class="hljs-string">:2:7001</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.217</span><span class="hljs-number">.4</span><span class="hljs-string">:2:7002</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.217</span><span class="hljs-number">.4</span><span class="hljs-string">:2:7003</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.217</span><span class="hljs-number">.4</span><span class="hljs-string">:2:8001</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.217</span><span class="hljs-number">.4</span><span class="hljs-string">:2:8002</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.217</span><span class="hljs-number">.4</span><span class="hljs-string">:2:8003</span><br></code></pre></td></tr></table></figure><p>配置读写分离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> LettuceClientConfigurationBuilderCustomizer <span class="hljs-title">clientConfigurationBuilderCustomizer</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> clientConfigurationBuilder -&gt; clientConfigurationBuilder.readFrom(ReadFrom.REPLICA_PREFERRED);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;持久化&quot;&gt;&lt;a href=&quot;#持久化&quot; class=&quot;headerlink&quot; title=&quot;持久化&quot;&gt;&lt;/a&gt;持久化&lt;/h1&gt;&lt;h2 id=&quot;RDB&quot;&gt;&lt;a href=&quot;#RDB&quot; class=&quot;headerlink&quot; title=&quot;RDB&quot;&gt;&lt;/a&gt;RDB&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker安装Rabbitmq</title>
    <link href="http://example.com/2022/05/29/docker%E5%AE%89%E8%A3%85rabbitmq/"/>
    <id>http://example.com/2022/05/29/docker%E5%AE%89%E8%A3%85rabbitmq/</id>
    <published>2022-05-29T14:01:33.471Z</published>
    <updated>2022-05-29T14:25:51.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><a id="more"></a><p><code>docker pull rabbitmq:3.8.8</code>   后面不选择版本默认是最新版</p><p><img src="/.com//desktop\blog\图片\image-20220412175244314.png" alt="image-20220412175244314"></p><h1 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name=rabbitmq -p 15672:15672 -p 5672:5672 rabbitmq:3.8.8<br>-d 表示后台启动<br>--name 给容器起个名字，这样后面可以根据名字操作容器<br>-p 映射端口<br>rabbitmq:3.8.8 如果没写后面的版本号，会默认启动最新版，没有最新版会下载<br></code></pre></td></tr></table></figure><h1 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --permanent -add-p=15672/tcp<br>filewall-cmd --permanent -add-p=5672/tcp<br></code></pre></td></tr></table></figure><p><strong>开放服务器5672、15672两个端口</strong></p><h1 id="安装web管理页面"><a href="#安装web管理页面" class="headerlink" title="安装web管理页面"></a>安装web管理页面</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">进入rabbitmq容器</span><br>docker exec -it rabbitmq /bin/bash<br><span class="hljs-meta">#</span><span class="bash">启动插件</span><br>rabbitmq-plugins enable rabbitmq_management<br></code></pre></td></tr></table></figure><p><strong>此时可以使用服务器ip:15672 进行访问，默认用户名密码都为guest</strong></p><h1 id="安装延时插件"><a href="#安装延时插件" class="headerlink" title="安装延时插件"></a>安装延时插件</h1><ol><li><p>下载插件：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases">下载地址</a></p></li><li><p>将插件传输到linux系统中，我是使用xftp上传到 /opt目录下</p></li><li><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将插件拷贝到容器</span><br>docker cp /opt/rabbitmq_delayed_message_exchange-3.8.0.ez  rabbitmq:/plugins   #前面是插件在linux中的地址，后面的rabbitmq是容器的名字<br><span class="hljs-meta">#</span><span class="bash"> 进入容器内部</span><br>docker exec -it rabbitmq /bin/bash  #rabbimq是容器名字<br><span class="hljs-meta">#</span><span class="bash"> 进入plugins</span><br>cd plugins<br><span class="hljs-meta">#</span><span class="bash"> 安装插件</span><br>rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br></code></pre></td></tr></table></figure></li><li><p>进入管理页面，看到type有<code>x-delayed-message</code>则成功安装延时插件</p></li></ol><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220412180709472.png" alt="image-20220412180709472"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker安装elasticsearch</title>
    <link href="http://example.com/2022/05/29/docker%E5%AE%89%E8%A3%85elasticsearch/"/>
    <id>http://example.com/2022/05/29/docker%E5%AE%89%E8%A3%85elasticsearch/</id>
    <published>2022-05-29T14:01:02.282Z</published>
    <updated>2022-05-29T14:25:39.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h1><a id="more"></a><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>我安装的是7.6.2版本，可以到<code>hub.docker.com</code>上查看支持的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull elasticsearch:7.6.2<br></code></pre></td></tr></table></figure><h2 id="启动Elasticsearch"><a href="#启动Elasticsearch" class="headerlink" title="启动Elasticsearch"></a>启动Elasticsearch</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name elascticsearch -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; -e &quot;discover.type=single-node&quot; elasticsearch:7.6.2<br></code></pre></td></tr></table></figure><ul><li>9300端口是使用tcp客户端连接使用的端口；9200端口是通过http协议连接es使用的端口；</li><li>-e ES_JAVA_OPTS=”-Xms64m -Xmx512m” 是配置内存大小，如果不配置，我的虚拟机因为内存小，会变得很卡</li><li>-e “discover.type=single-node” 单节点启动</li></ul><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --permanent --add-port=9200/tcp<br></code></pre></td></tr></table></figure><h1 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h1><h2 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>kibana和Elasticsearch的关系类似于navicat和mysql的关系。kibana可以查看Elasticsearch中的数据，并且提供一些语法提示。</p><p><strong>安装的kibana版本需要和Elasticsearch的版本一致</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull kibana:7.6.2<br></code></pre></td></tr></table></figure><h2 id="启动kibana"><a href="#启动kibana" class="headerlink" title="启动kibana"></a>启动kibana</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name kibana -p 5601:5601 kibana:7.6.2<br></code></pre></td></tr></table></figure><h2 id="将kibana和Elasticsearch进行关联"><a href="#将kibana和Elasticsearch进行关联" class="headerlink" title="将kibana和Elasticsearch进行关联"></a>将kibana和Elasticsearch进行关联</h2><p>由于kibana和elasticsearch是运行在docker中的，因此两个之间是相互独立的，没有关联，由于Elasticsearch的9200端口和宿主机的9200端口进行了映射，因此我们可以通过宿主机的9200找到Elasticsearch。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">进入kibana</span><br>docker exec -it kibana:7.6.2<br><br><span class="hljs-meta">#</span><span class="bash">进入config文件夹</span><br>cd config<br><br><span class="hljs-meta">#</span><span class="bash">修改kibana.yml,注意没有vim指令</span><br>vi kibana.yml<br><span class="hljs-meta">#</span><span class="bash">将elasticsearch.hosts 修改为当前的主机号和端口号</span><br>elasticsearch.hosts: [ &quot;http://192.168.217.4:9200&quot; ]<br></code></pre></td></tr></table></figure><h2 id="重启kibana"><a href="#重启kibana" class="headerlink" title="重启kibana"></a>重启kibana</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart kibana<br></code></pre></td></tr></table></figure><h2 id="开放端口-1"><a href="#开放端口-1" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --permanent --add-port=5601/tcp<br></code></pre></td></tr></table></figure><h1 id="一键启动kibana和Elasticsearch"><a href="#一键启动kibana和Elasticsearch" class="headerlink" title="一键启动kibana和Elasticsearch"></a>一键启动kibana和Elasticsearch</h1><h2 id="编写composs"><a href="#编写composs" class="headerlink" title="编写composs"></a>编写composs</h2><p>当我们重新启动一个kibana的容器，都需要重新将他与elasticsearch关联起来。</p><p>同时两个服务也是需要一同启动的因此我们编写一个compose，同时启动两个服务，并且写好配置，将kibana的kibana.yml与宿主机的配置文件进行关联，这样就不需要每次都修改kibana内部的文件。</p><h3 id="复制kibana配置文件"><a href="#复制kibana配置文件" class="headerlink" title="复制kibana配置文件"></a>复制kibana配置文件</h3><p>将配置文件复制到宿主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">创建文件夹</span><br>mkdir /opt/es-kibana<br>cd /opt/es-kibana<br><span class="hljs-meta">#</span><span class="bash">复制文件</span><br>docker cp kibana:/usr/share/kibana/config/kibana.yml /opt/es-kibana<br><span class="hljs-meta">#</span><span class="bash">修改文件内容，因为下面配置了compose，所以可以直接写网络名称</span><br>elasticsearch.hosts: [ &quot;http://elasticsearch:9200&quot; ]<br></code></pre></td></tr></table></figure><h3 id="编写Compose文件"><a href="#编写Compose文件" class="headerlink" title="编写Compose文件"></a>编写Compose文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">编写文件</span><br>vim docker-compose.yml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><span class="hljs-comment">#指定语法的版本格式</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">data:</span><br>  <span class="hljs-attr">config:</span><br>  <span class="hljs-attr">plugin:</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">es:</span><br><span class="hljs-attr">services:</span><span class="hljs-comment">#定义服务</span><br>   <span class="hljs-attr">elasticsearch:</span><span class="hljs-comment">#服务名称</span><br>     <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.6.2</span><span class="hljs-comment">#镜像</span><br>     <span class="hljs-attr">ports:</span><span class="hljs-comment">#端口映射</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9200:9200&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9300:9300&quot;</span><br>     <span class="hljs-attr">networks:</span>                                                  <span class="hljs-comment">#网络</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es&quot;</span><br>     <span class="hljs-attr">environment:</span><span class="hljs-comment">#容器内部环境变量</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;discovery.type=single-node&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms64m -Xmx512m&quot;</span><br>     <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">data:/usr/share/elasticsearch/data</span>                    <span class="hljs-comment">#挂载数据卷</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">config:/usr/share/elasticsearch/config</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">plugin:/usr/share/elasticsearch/plugins</span><br><br>   <span class="hljs-attr">kibana:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">kibana:7.6.2</span><br>    <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5601:5601&quot;</span> <br>    <span class="hljs-attr">networks:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es&quot;</span> <br>    <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/kibana_config/kibana.yml</span><br><br></code></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose<br><br>chmod +x /usr/local/bin/docker-compose<br><br>docker-compose -v <br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在 docker-compose.yml的当前路径下</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;安装Elasticsearch&quot;&gt;&lt;a href=&quot;#安装Elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;安装Elasticsearch&quot;&gt;&lt;/a&gt;安装Elasticsearch&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker启动mysql</title>
    <link href="http://example.com/2022/05/29/docker%E5%90%AF%E5%8A%A8mysql/"/>
    <id>http://example.com/2022/05/29/docker%E5%90%AF%E5%8A%A8mysql/</id>
    <published>2022-05-29T13:59:15.105Z</published>
    <updated>2022-05-29T14:26:41.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker启动mysql"><a href="#docker启动mysql" class="headerlink" title="docker启动mysql"></a>docker启动mysql</h1><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>docker run -d mysql:latest             以后台的方式运行 mysql 版本的镜像，生成一个容器。<br>    --name mysql                           容器名为 mysql<br>    -e MYSQL_ROOT_PASSWORD=123456          设置登陆密码为 123456，登陆用户为 root<br>    -p 3306:3306                           将容器内部 3306 端口映射到 主机的 3306 端口，即通过 主机的 3306 可以访问容器的 3306 端口<br>    -v /usr/mydata/mysql/log:/var/log/mysql    将容器的 日志文件夹 挂载到 主机的相应位置<br>    -v /usr/mydata/mysql/data:/var/lib/mysql   将容器的 数据文件夹 挂载到 主机的相应位置<br>    -v /usr/mydata/mysql/conf:/etc/mysql/conf.d   将容器的 自定义配置文件夹 挂载到主机的相应位置<br>    <br>【查看容器是否启动：】<br>docker ps -a<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/mydata/mysql/log:/var/log/mysql -v /usr/mydata/mysql/data:/var/lib/mysql -v /usr/mydata/mysql/conf:/etc/mysql/conf.d mysql:8.0.2<br></code></pre></td></tr></table></figure><p><strong>在启动mysql的时候需要挂载数据卷，否则如果容器被删除，那么数据库中的数据将全部丢失，这是一个很严重的问题，可以使用 -v 挂载数据卷到宿主机。其次由于没有配置数据库，因此数据库的默认编码是<code>latin1</code>，这时如果插入中文数据会报错，因此我们需要修改配置。使用<code> SHOW VARIABLES LIKE &#39;character%&#39;</code>可以查看编码设置。</strong></p><p><strong>上面的命令已经挂载了数据卷，-v  ：前面的是宿主机的路径，后面是容器的路径。我们在宿主机的conf目录下创建my.cnf文件，然后将下面代码复制到my.cnf文件即可</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[client]<br>default_character_set=utf8<br>[mysqld]<br>collation_server = utf8_general_ci<br>character_set_server = utf8<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;docker启动mysql&quot;&gt;&lt;a href=&quot;#docker启动mysql&quot; class=&quot;headerlink&quot; title=&quot;docker启动mysql&quot;&gt;&lt;/a&gt;docker启动mysql&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker安装redis</title>
    <link href="http://example.com/2022/05/29/docker%E5%AE%89%E8%A3%85redis/"/>
    <id>http://example.com/2022/05/29/docker%E5%AE%89%E8%A3%85redis/</id>
    <published>2022-05-29T13:59:10.616Z</published>
    <updated>2022-05-29T14:26:01.168Z</updated>
    
    <content type="html"><![CDATA[<p><strong>首先在宿主机创建一个redis目录，然后将默认的redis.conf文件复制到该目录下。如果没有，可以使用下面提供的配置。然后修改redis.conf目录下的配置，主要修改：<code>bind</code>，注释或者改为允许连接的ip地址，一般设置为0.0.0.0；<code>requirepass</code> 设置密码；·<code>daemonize</code>修改为no，不是后台启动，否则与docker run -d 冲突。</strong></p><a id="more"></a><p><strong>然后使用下面的命令启动redis</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -p6379:6379 --name redis -v /usr/mydata/redis/redis.conf:/etc/redis/redis.conf -v /us<br>r/mydata/redis/data:/data -d redis:6.2.6 redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><p><code>redis-server /etc/redis/redis.conf</code>表示读取redis.conf文件启动redis，由于容器内的redis.conf文件和宿主机的关联起来，因此读取的是宿主机的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br><span class="line">2567</span><br><span class="line">2568</span><br><span class="line">2569</span><br><span class="line">2570</span><br><span class="line">2571</span><br><span class="line">2572</span><br><span class="line">2573</span><br><span class="line">2574</span><br><span class="line">2575</span><br><span class="line">2576</span><br><span class="line">2577</span><br><span class="line">2578</span><br><span class="line">2579</span><br><span class="line">2580</span><br><span class="line">2581</span><br><span class="line">2582</span><br><span class="line">2583</span><br><span class="line">2584</span><br><span class="line">2585</span><br><span class="line">2586</span><br><span class="line">2587</span><br><span class="line">2588</span><br><span class="line">2589</span><br><span class="line">2590</span><br><span class="line">2591</span><br><span class="line">2592</span><br><span class="line">2593</span><br><span class="line">2594</span><br><span class="line">2595</span><br><span class="line">2596</span><br><span class="line">2597</span><br><span class="line">2598</span><br><span class="line">2599</span><br><span class="line">2600</span><br><span class="line">2601</span><br><span class="line">2602</span><br><span class="line">2603</span><br><span class="line">2604</span><br><span class="line">2605</span><br><span class="line">2606</span><br><span class="line">2607</span><br><span class="line">2608</span><br><span class="line">2609</span><br><span class="line">2610</span><br><span class="line">2611</span><br><span class="line">2612</span><br><span class="line">2613</span><br><span class="line">2614</span><br><span class="line">2615</span><br><span class="line">2616</span><br><span class="line">2617</span><br><span class="line">2618</span><br><span class="line">2619</span><br><span class="line">2620</span><br><span class="line">2621</span><br><span class="line">2622</span><br><span class="line">2623</span><br><span class="line">2624</span><br><span class="line">2625</span><br><span class="line">2626</span><br><span class="line">2627</span><br><span class="line">2628</span><br><span class="line">2629</span><br><span class="line">2630</span><br><span class="line">2631</span><br><span class="line">2632</span><br><span class="line">2633</span><br><span class="line">2634</span><br><span class="line">2635</span><br><span class="line">2636</span><br><span class="line">2637</span><br><span class="line">2638</span><br><span class="line">2639</span><br><span class="line">2640</span><br><span class="line">2641</span><br><span class="line">2642</span><br><span class="line">2643</span><br><span class="line">2644</span><br><span class="line">2645</span><br><span class="line">2646</span><br><span class="line">2647</span><br><span class="line">2648</span><br><span class="line">2649</span><br><span class="line">2650</span><br><span class="line">2651</span><br><span class="line">2652</span><br><span class="line">2653</span><br><span class="line">2654</span><br><span class="line">2655</span><br><span class="line">2656</span><br><span class="line">2657</span><br><span class="line">2658</span><br><span class="line">2659</span><br><span class="line">2660</span><br><span class="line">2661</span><br><span class="line">2662</span><br><span class="line">2663</span><br><span class="line">2664</span><br><span class="line">2665</span><br><span class="line">2666</span><br><span class="line">2667</span><br><span class="line">2668</span><br><span class="line">2669</span><br><span class="line">2670</span><br><span class="line">2671</span><br><span class="line">2672</span><br><span class="line">2673</span><br><span class="line">2674</span><br><span class="line">2675</span><br><span class="line">2676</span><br><span class="line">2677</span><br><span class="line">2678</span><br><span class="line">2679</span><br><span class="line">2680</span><br><span class="line">2681</span><br><span class="line">2682</span><br><span class="line">2683</span><br><span class="line">2684</span><br><span class="line">2685</span><br><span class="line">2686</span><br><span class="line">2687</span><br><span class="line">2688</span><br><span class="line">2689</span><br><span class="line">2690</span><br><span class="line">2691</span><br><span class="line">2692</span><br><span class="line">2693</span><br><span class="line">2694</span><br><span class="line">2695</span><br><span class="line">2696</span><br><span class="line">2697</span><br><span class="line">2698</span><br><span class="line">2699</span><br><span class="line">2700</span><br><span class="line">2701</span><br><span class="line">2702</span><br><span class="line">2703</span><br><span class="line">2704</span><br><span class="line">2705</span><br><span class="line">2706</span><br><span class="line">2707</span><br><span class="line">2708</span><br><span class="line">2709</span><br><span class="line">2710</span><br><span class="line">2711</span><br><span class="line">2712</span><br><span class="line">2713</span><br><span class="line">2714</span><br><span class="line">2715</span><br><span class="line">2716</span><br><span class="line">2717</span><br><span class="line">2718</span><br><span class="line">2719</span><br><span class="line">2720</span><br><span class="line">2721</span><br><span class="line">2722</span><br><span class="line">2723</span><br><span class="line">2724</span><br><span class="line">2725</span><br><span class="line">2726</span><br><span class="line">2727</span><br><span class="line">2728</span><br><span class="line">2729</span><br><span class="line">2730</span><br><span class="line">2731</span><br><span class="line">2732</span><br><span class="line">2733</span><br><span class="line">2734</span><br><span class="line">2735</span><br><span class="line">2736</span><br><span class="line">2737</span><br><span class="line">2738</span><br><span class="line">2739</span><br><span class="line">2740</span><br><span class="line">2741</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Redis configuration file example.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note that <span class="hljs-keyword">in</span> order to <span class="hljs-built_in">read</span> the configuration file, Redis must be</span><br><br><span class="hljs-meta">#</span><span class="bash"> started with the file path as first argument:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> ./redis-server /path/to/redis.conf</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Note on units: when memory size is needed, it is possible to specify</span><br><br><span class="hljs-meta">#</span><span class="bash"> it <span class="hljs-keyword">in</span> the usual form of 1k 5GB 4M and so forth:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1k =&gt; 1000 bytes</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1kb =&gt; 1024 bytes</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1m =&gt; 1000000 bytes</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1mb =&gt; 1024*1024 bytes</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1g =&gt; 1000000000 bytes</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1gb =&gt; 1024*1024*1024 bytes</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> units are <span class="hljs-keyword">case</span> insensitive so 1GB 1Gb 1gB are all the same.</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">################################# INCLUDES ###################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Include one or more other config files here.  This is useful <span class="hljs-keyword">if</span> you</span><br><br><span class="hljs-meta">#</span><span class="bash"> have a standard template that goes to all Redis servers but also need</span><br><br><span class="hljs-meta">#</span><span class="bash"> to customize a few per-server settings.  Include files can include</span><br><br><span class="hljs-meta">#</span><span class="bash"> other files, so use this wisely.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Notice option <span class="hljs-string">&quot;include&quot;</span> won<span class="hljs-string">&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> from admin or Redis Sentinel. Since Redis always uses the last processed</span><br><br><span class="hljs-meta">#</span><span class="bash"> line as value of a configuration directive, you<span class="hljs-string">&#x27;d better put includes</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> at the beginning of this file to avoid overwriting config change at runtime.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If instead you are interested <span class="hljs-keyword">in</span> using includes to override configuration</span><br><br><span class="hljs-meta">#</span><span class="bash"> options, it is better to use include as the last line.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> include /path/to/local.conf</span><br><br><span class="hljs-meta">#</span><span class="bash"> include /path/to/other.conf</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">################################# MODULES #####################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Load modules at startup. If the server is not able to load modules</span><br><br><span class="hljs-meta">#</span><span class="bash"> it will abort. It is possible to use multiple loadmodule directives.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> loadmodule /path/to/my_module.so</span><br><br><span class="hljs-meta">#</span><span class="bash"> loadmodule /path/to/other_module.so</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">################################# NETWORK #####################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> By default, <span class="hljs-keyword">if</span> no <span class="hljs-string">&quot;bind&quot;</span> configuration directive is specified, Redis listens</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> connections from all the network interfaces available on the server.</span><br><br><span class="hljs-meta">#</span><span class="bash"> It is possible to listen to just one or multiple selected interfaces using</span><br><br><span class="hljs-meta">#</span><span class="bash"> the <span class="hljs-string">&quot;bind&quot;</span> configuration directive, followed by one or more IP addresses.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Examples:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">bind</span> 192.168.1.100 10.0.0.1</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">bind</span> 127.0.0.1 ::1</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span><br><br><span class="hljs-meta">#</span><span class="bash"> internet, binding to all the interfaces is dangerous and will expose the</span><br><br><span class="hljs-meta">#</span><span class="bash"> instance to everybody on the internet. So by default we uncomment the</span><br><br><span class="hljs-meta">#</span><span class="bash"> following <span class="hljs-built_in">bind</span> directive, that will force Redis to listen only into</span><br><br><span class="hljs-meta">#</span><span class="bash"> the IPv4 loopback interface address (this means Redis will be able to</span><br><br><span class="hljs-meta">#</span><span class="bash"> accept connections only from clients running into the same computer it</span><br><br><span class="hljs-meta">#</span><span class="bash"> is running).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><br><span class="hljs-meta">#</span><span class="bash"> JUST COMMENT THE FOLLOWING LINE.</span><br><br><span class="hljs-meta">#</span><span class="bash"> ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">bind</span> 127.0.0.1</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Protected mode is a layer of security protection, <span class="hljs-keyword">in</span> order to avoid that</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis instances left open on the internet are accessed and exploited.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> When protected mode is on and <span class="hljs-keyword">if</span>:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1) The server is not binding explicitly to a <span class="hljs-built_in">set</span> of addresses using the</span><br><br><span class="hljs-meta">#</span><span class="bash">    <span class="hljs-string">&quot;bind&quot;</span> directive.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2) No password is configured.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The server only accepts connections from clients connecting from the</span><br><br><span class="hljs-meta">#</span><span class="bash"> IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><br><span class="hljs-meta">#</span><span class="bash"> sockets.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> By default protected mode is enabled. You should <span class="hljs-built_in">disable</span> it only <span class="hljs-keyword">if</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> you are sure you want clients from other hosts to connect to Redis</span><br><br><span class="hljs-meta">#</span><span class="bash"> even <span class="hljs-keyword">if</span> no authentication is configured, nor a specific <span class="hljs-built_in">set</span> of interfaces</span><br><br><span class="hljs-meta">#</span><span class="bash"> are explicitly listed using the <span class="hljs-string">&quot;bind&quot;</span> directive.</span><br><br>protected-mode no<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Accept connections on the specified port, default is 6379 (IANA <span class="hljs-comment">#815344).</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> If port 0 is specified Redis will not listen on a TCP socket.</span><br><br>port 6379<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> TCP listen() backlog.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> In high requests-per-second environments you need an high backlog <span class="hljs-keyword">in</span> order</span><br><br><span class="hljs-meta">#</span><span class="bash"> to avoid slow clients connections issues. Note that the Linux kernel</span><br><br><span class="hljs-meta">#</span><span class="bash"> will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span><br><br><span class="hljs-meta">#</span><span class="bash"> make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> order to get the desired effect.</span><br><br>tcp-backlog 511<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Unix socket.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Specify the path <span class="hljs-keyword">for</span> the Unix socket that will be used to listen <span class="hljs-keyword">for</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> incoming connections. There is no default, so Redis will not listen</span><br><br><span class="hljs-meta">#</span><span class="bash"> on a unix socket when not specified.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> unixsocket /tmp/redis.sock</span><br><br><span class="hljs-meta">#</span><span class="bash"> unixsocketperm 700</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Close the connection after a client is idle <span class="hljs-keyword">for</span> N seconds (0 to <span class="hljs-built_in">disable</span>)</span><br><br>timeout 0<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> TCP keepalive.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients <span class="hljs-keyword">in</span> absence</span><br><br><span class="hljs-meta">#</span><span class="bash"> of communication. This is useful <span class="hljs-keyword">for</span> two reasons:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1) Detect dead peers.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2) Take the connection alive from the point of view of network</span><br><br><span class="hljs-meta">#</span><span class="bash">    equipment <span class="hljs-keyword">in</span> the middle.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> On Linux, the specified value (<span class="hljs-keyword">in</span> seconds) is the period used to send ACKs.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note that to close the connection the double of the time is needed.</span><br><br><span class="hljs-meta">#</span><span class="bash"> On other kernels the period depends on the kernel configuration.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> A reasonable value <span class="hljs-keyword">for</span> this option is 300 seconds, <span class="hljs-built_in">which</span> is the new</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis default starting with Redis 3.2.1.</span><br><br>tcp-keepalive 300<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">################################ GENERAL #####################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> By default Redis does not run as a daemon. Use <span class="hljs-string">&#x27;yes&#x27;</span> <span class="hljs-keyword">if</span> you need it.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note that Redis will write a pid file <span class="hljs-keyword">in</span> /var/run/redis.pid when daemonized.</span><br><br>daemonize no<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> If you run Redis from upstart or systemd, Redis can interact with your</span><br><br><span class="hljs-meta">#</span><span class="bash"> supervision tree. Options:</span><br><br><span class="hljs-meta">#</span><span class="bash">   supervised no      - no supervision interaction</span><br><br><span class="hljs-meta">#</span><span class="bash">   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span><br><br><span class="hljs-meta">#</span><span class="bash">   supervised systemd - signal systemd by writing READY=1 to <span class="hljs-variable">$NOTIFY_SOCKET</span></span><br><br><span class="hljs-meta">#</span><span class="bash">   supervised auto    - detect upstart or systemd method based on</span><br><br><span class="hljs-meta">#</span><span class="bash">                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note: these supervision methods only signal <span class="hljs-string">&quot;process is ready.&quot;</span></span><br><br><span class="hljs-meta">#</span><span class="bash">       They <span class="hljs-keyword">do</span> not <span class="hljs-built_in">enable</span> continuous liveness pings back to your supervisor.</span><br><br>supervised no<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> If a pid file is specified, Redis writes it <span class="hljs-built_in">where</span> specified at startup</span><br><br><span class="hljs-meta">#</span><span class="bash"> and removes it at <span class="hljs-built_in">exit</span>.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> When the server runs non daemonized, no pid file is created <span class="hljs-keyword">if</span> none is</span><br><br><span class="hljs-meta">#</span><span class="bash"> specified <span class="hljs-keyword">in</span> the configuration. When the server is daemonized, the pid file</span><br><br><span class="hljs-meta">#</span><span class="bash"> is used even <span class="hljs-keyword">if</span> not specified, defaulting to <span class="hljs-string">&quot;/var/run/redis.pid&quot;</span>.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Creating a pid file is best effort: <span class="hljs-keyword">if</span> Redis is not able to create it</span><br><br><span class="hljs-meta">#</span><span class="bash"> nothing bad happens, the server will start and run normally.</span><br><br>pidfile /var/run/redis_6379.pid<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Specify the server verbosity level.</span><br><br><span class="hljs-meta">#</span><span class="bash"> This can be one of:</span><br><br><span class="hljs-meta">#</span><span class="bash"> debug (a lot of information, useful <span class="hljs-keyword">for</span> development/testing)</span><br><br><span class="hljs-meta">#</span><span class="bash"> verbose (many rarely useful info, but not a mess like the debug level)</span><br><br><span class="hljs-meta">#</span><span class="bash"> notice (moderately verbose, what you want <span class="hljs-keyword">in</span> production probably)</span><br><br><span class="hljs-meta">#</span><span class="bash"> warning (only very important / critical messages are logged)</span><br><br>loglevel notice<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Specify the <span class="hljs-built_in">log</span> file name. Also the empty string can be used to force</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis to <span class="hljs-built_in">log</span> on the standard output. Note that <span class="hljs-keyword">if</span> you use standard</span><br><br><span class="hljs-meta">#</span><span class="bash"> output <span class="hljs-keyword">for</span> logging but daemonize, logs will be sent to /dev/null</span><br><br>logfile &quot;&quot;<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> To <span class="hljs-built_in">enable</span> logging to the system logger, just <span class="hljs-built_in">set</span> <span class="hljs-string">&#x27;syslog-enabled&#x27;</span> to yes,</span><br><br><span class="hljs-meta">#</span><span class="bash"> and optionally update the other syslog parameters to suit your needs.</span><br><br><span class="hljs-meta">#</span><span class="bash"> syslog-enabled no</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Specify the syslog identity.</span><br><br><span class="hljs-meta">#</span><span class="bash"> syslog-ident redis</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span><br><br><span class="hljs-meta">#</span><span class="bash"> syslog-facility local0</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Set the number of databases. The default database is DB 0, you can select</span><br><br><span class="hljs-meta">#</span><span class="bash"> a different one on a per-connection basis using SELECT &lt;dbid&gt; <span class="hljs-built_in">where</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> dbid is a number between 0 and <span class="hljs-string">&#x27;databases&#x27;</span>-1</span><br><br>databases 16<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> By default Redis shows an ASCII art logo only when started to <span class="hljs-built_in">log</span> to the</span><br><br><span class="hljs-meta">#</span><span class="bash"> standard output and <span class="hljs-keyword">if</span> the standard output is a TTY. Basically this means</span><br><br><span class="hljs-meta">#</span><span class="bash"> that normally a logo is displayed only <span class="hljs-keyword">in</span> interactive sessions.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> However it is possible to force the pre-4.0 behavior and always show a</span><br><br><span class="hljs-meta">#</span><span class="bash"> ASCII art logo <span class="hljs-keyword">in</span> startup logs by setting the following option to yes.</span><br><br>always-show-logo yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################### SNAPSHOTTING  ################################</span></span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Save the DB on disk:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   save &lt;seconds&gt; &lt;changes&gt;</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   Will save the DB <span class="hljs-keyword">if</span> both the given number of seconds and the given</span><br><br><span class="hljs-meta">#</span><span class="bash">   number of write operations against the DB occurred.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   In the example below the behaviour will be to save:</span><br><br><span class="hljs-meta">#</span><span class="bash">   after 900 sec (15 min) <span class="hljs-keyword">if</span> at least 1 key changed</span><br><br><span class="hljs-meta">#</span><span class="bash">   after 300 sec (5 min) <span class="hljs-keyword">if</span> at least 10 keys changed</span><br><br><span class="hljs-meta">#</span><span class="bash">   after 60 sec <span class="hljs-keyword">if</span> at least 10000 keys changed</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   Note: you can <span class="hljs-built_in">disable</span> saving completely by commenting out all <span class="hljs-string">&quot;save&quot;</span> lines.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   It is also possible to remove all the previously configured save</span><br><br><span class="hljs-meta">#</span><span class="bash">   points by adding a save directive with a single empty string argument</span><br><br><span class="hljs-meta">#</span><span class="bash">   like <span class="hljs-keyword">in</span> the following example:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   save <span class="hljs-string">&quot;&quot;</span></span><br><br> <br><br>save 900 1<br><br>save 300 10<br><br>save 60 10000<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> By default Redis will stop accepting writes <span class="hljs-keyword">if</span> RDB snapshots are enabled</span><br><br><span class="hljs-meta">#</span><span class="bash"> (at least one save point) and the latest background save failed.</span><br><br><span class="hljs-meta">#</span><span class="bash"> This will make the user aware (<span class="hljs-keyword">in</span> a hard way) that data is not persisting</span><br><br><span class="hljs-meta">#</span><span class="bash"> on disk properly, otherwise chances are that no one will notice and some</span><br><br><span class="hljs-meta">#</span><span class="bash"> disaster will happen.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If the background saving process will start working again Redis will</span><br><br><span class="hljs-meta">#</span><span class="bash"> automatically allow writes again.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> However <span class="hljs-keyword">if</span> you have setup your proper monitoring of the Redis server</span><br><br><span class="hljs-meta">#</span><span class="bash"> and persistence, you may want to <span class="hljs-built_in">disable</span> this feature so that Redis will</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">continue</span> to work as usual even <span class="hljs-keyword">if</span> there are problems with disk,</span><br><br><span class="hljs-meta">#</span><span class="bash"> permissions, and so forth.</span><br><br>stop-writes-on-bgsave-error yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Compress string objects using LZF when dump .rdb databases?</span><br><br><span class="hljs-meta">#</span><span class="bash"> For default that<span class="hljs-string">&#x27;s set to &#x27;</span>yes<span class="hljs-string">&#x27; as it&#x27;</span>s almost always a win.</span><br><br><span class="hljs-meta">#</span><span class="bash"> If you want to save some CPU <span class="hljs-keyword">in</span> the saving child <span class="hljs-built_in">set</span> it to <span class="hljs-string">&#x27;no&#x27;</span> but</span><br><br><span class="hljs-meta">#</span><span class="bash"> the dataset will likely be bigger <span class="hljs-keyword">if</span> you have compressible values or keys.</span><br><br>rdbcompression yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span><br><br><span class="hljs-meta">#</span><span class="bash"> This makes the format more resistant to corruption but there is a performance</span><br><br><span class="hljs-meta">#</span><span class="bash"> hit to pay (around 10%) when saving and loading RDB files, so you can <span class="hljs-built_in">disable</span> it</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> maximum performances.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> RDB files created with checksum disabled have a checksum of zero that will</span><br><br><span class="hljs-meta">#</span><span class="bash"> tell the loading code to skip the check.</span><br><br>rdbchecksum yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The filename <span class="hljs-built_in">where</span> to dump the DB</span><br><br>dbfilename dump.rdb<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The working directory.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The DB will be written inside this directory, with the filename specified</span><br><br><span class="hljs-meta">#</span><span class="bash"> above using the <span class="hljs-string">&#x27;dbfilename&#x27;</span> configuration directive.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The Append Only File will also be created inside this directory.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note that you must specify a directory here, not a file name.</span><br><br>dir ./<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">################################ REPLICATION #################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Master-Replica replication. Use replicaof to make a Redis instance a copy of</span><br><br><span class="hljs-meta">#</span><span class="bash"> another Redis server. A few things to understand ASAP about Redis replication.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   +------------------+      +---------------+</span><br><br><span class="hljs-meta">#</span><span class="bash">   |      Master      | ---&gt; |    Replica    |</span><br><br><span class="hljs-meta">#</span><span class="bash">   | (receive writes) |      |  (exact copy) |</span><br><br><span class="hljs-meta">#</span><span class="bash">   +------------------+      +---------------+</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1) Redis replication is asynchronous, but you can configure a master to</span><br><br><span class="hljs-meta">#</span><span class="bash">    stop accepting writes <span class="hljs-keyword">if</span> it appears to be not connected with at least</span><br><br><span class="hljs-meta">#</span><span class="bash">    a given number of replicas.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2) Redis replicas are able to perform a partial resynchronization with the</span><br><br><span class="hljs-meta">#</span><span class="bash">    master <span class="hljs-keyword">if</span> the replication link is lost <span class="hljs-keyword">for</span> a relatively small amount of</span><br><br><span class="hljs-meta">#</span><span class="bash">    time. You may want to configure the replication backlog size (see the next</span><br><br><span class="hljs-meta">#</span><span class="bash">    sections of this file) with a sensible value depending on your needs.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 3) Replication is automatic and does not need user intervention. After a</span><br><br><span class="hljs-meta">#</span><span class="bash">    network partition replicas automatically try to reconnect to masters</span><br><br><span class="hljs-meta">#</span><span class="bash">    and resynchronize with them.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> If the master is password protected (using the <span class="hljs-string">&quot;requirepass&quot;</span> configuration</span><br><br><span class="hljs-meta">#</span><span class="bash"> directive below) it is possible to tell the replica to authenticate before</span><br><br><span class="hljs-meta">#</span><span class="bash"> starting the replication synchronization process, otherwise the master will</span><br><br><span class="hljs-meta">#</span><span class="bash"> refuse the replica request.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> masterauth &lt;master-password&gt;</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> When a replica loses its connection with the master, or when the replication</span><br><br><span class="hljs-meta">#</span><span class="bash"> is still <span class="hljs-keyword">in</span> progress, the replica can act <span class="hljs-keyword">in</span> two different ways:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1) <span class="hljs-keyword">if</span> replica-serve-stale-data is <span class="hljs-built_in">set</span> to <span class="hljs-string">&#x27;yes&#x27;</span> (the default) the replica will</span><br><br><span class="hljs-meta">#</span><span class="bash">    still reply to client requests, possibly with out of date data, or the</span><br><br><span class="hljs-meta">#</span><span class="bash">    data <span class="hljs-built_in">set</span> may just be empty <span class="hljs-keyword">if</span> this is the first synchronization.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2) <span class="hljs-keyword">if</span> replica-serve-stale-data is <span class="hljs-built_in">set</span> to <span class="hljs-string">&#x27;no&#x27;</span> the replica will reply with</span><br><br><span class="hljs-meta">#</span><span class="bash">    an error <span class="hljs-string">&quot;SYNC with master in progress&quot;</span> to all the kind of commands</span><br><br><span class="hljs-meta">#</span><span class="bash">    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,</span><br><br><span class="hljs-meta">#</span><span class="bash">    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,</span><br><br><span class="hljs-meta">#</span><span class="bash">    COMMAND, POST, HOST: and LATENCY.</span><br><br><span class="hljs-meta">#</span><br><br>replica-serve-stale-data yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> You can configure a replica instance to accept writes or not. Writing against</span><br><br><span class="hljs-meta">#</span><span class="bash"> a replica instance may be useful to store some ephemeral data (because data</span><br><br><span class="hljs-meta">#</span><span class="bash"> written on a replica will be easily deleted after resync with the master) but</span><br><br><span class="hljs-meta">#</span><span class="bash"> may also cause problems <span class="hljs-keyword">if</span> clients are writing to it because of a</span><br><br><span class="hljs-meta">#</span><span class="bash"> misconfiguration.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Since Redis 2.6 by default replicas are <span class="hljs-built_in">read</span>-only.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note: <span class="hljs-built_in">read</span> only replicas are not designed to be exposed to untrusted clients</span><br><br><span class="hljs-meta">#</span><span class="bash"> on the internet. It<span class="hljs-string">&#x27;s just a protection layer against misuse of the instance.</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> Still a <span class="hljs-built_in">read</span> only replica exports by default all the administrative commands</span><br><br><span class="hljs-meta">#</span><span class="bash"> such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span><br><br><span class="hljs-meta">#</span><span class="bash"> security of <span class="hljs-built_in">read</span> only replicas using <span class="hljs-string">&#x27;rename-command&#x27;</span> to shadow all the</span><br><br><span class="hljs-meta">#</span><span class="bash"> administrative / dangerous commands.</span><br><br>replica-read-only yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Replication SYNC strategy: disk or socket.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> -------------------------------------------------------</span><br><br><span class="hljs-meta">#</span><span class="bash"> WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</span><br><br><span class="hljs-meta">#</span><span class="bash"> -------------------------------------------------------</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> New replicas and reconnecting replicas that are not able to <span class="hljs-built_in">continue</span> the replication</span><br><br><span class="hljs-meta">#</span><span class="bash"> process just receiving differences, need to <span class="hljs-keyword">do</span> what is called a <span class="hljs-string">&quot;full</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> synchronization<span class="hljs-string">&quot;. An RDB file is transmitted from the master to the replicas.</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> The transmission can happen <span class="hljs-keyword">in</span> two different ways:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1) Disk-backed: The Redis master creates a new process that writes the RDB</span><br><br><span class="hljs-meta">#</span><span class="bash">                 file on disk. Later the file is transferred by the parent</span><br><br><span class="hljs-meta">#</span><span class="bash">                 process to the replicas incrementally.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2) Diskless: The Redis master creates a new process that directly writes the</span><br><br><span class="hljs-meta">#</span><span class="bash">              RDB file to replica sockets, without touching the disk at all.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> With disk-backed replication, <span class="hljs-keyword">while</span> the RDB file is generated, more replicas</span><br><br><span class="hljs-meta">#</span><span class="bash"> can be queued and served with the RDB file as soon as the current child producing</span><br><br><span class="hljs-meta">#</span><span class="bash"> the RDB file finishes its work. With diskless replication instead once</span><br><br><span class="hljs-meta">#</span><span class="bash"> the transfer starts, new replicas arriving will be queued and a new transfer</span><br><br><span class="hljs-meta">#</span><span class="bash"> will start when the current one terminates.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> When diskless replication is used, the master waits a configurable amount of</span><br><br><span class="hljs-meta">#</span><span class="bash"> time (<span class="hljs-keyword">in</span> seconds) before starting the transfer <span class="hljs-keyword">in</span> the hope that multiple replicas</span><br><br><span class="hljs-meta">#</span><span class="bash"> will arrive and the transfer can be parallelized.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> With slow disks and fast (large bandwidth) networks, diskless replication</span><br><br><span class="hljs-meta">#</span><span class="bash"> works better.</span><br><br>repl-diskless-sync no<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> When diskless replication is enabled, it is possible to configure the delay</span><br><br><span class="hljs-meta">#</span><span class="bash"> the server waits <span class="hljs-keyword">in</span> order to spawn the child that transfers the RDB via socket</span><br><br><span class="hljs-meta">#</span><span class="bash"> to the replicas.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> This is important since once the transfer starts, it is not possible to serve</span><br><br><span class="hljs-meta">#</span><span class="bash"> new replicas arriving, that will be queued <span class="hljs-keyword">for</span> the next RDB transfer, so the server</span><br><br><span class="hljs-meta">#</span><span class="bash"> waits a delay <span class="hljs-keyword">in</span> order to <span class="hljs-built_in">let</span> more replicas arrive.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The delay is specified <span class="hljs-keyword">in</span> seconds, and by default is 5 seconds. To <span class="hljs-built_in">disable</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> it entirely just <span class="hljs-built_in">set</span> it to 0 seconds and the transfer will start ASAP.</span><br><br>repl-diskless-sync-delay 5<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Replicas send PINGs to server <span class="hljs-keyword">in</span> a predefined interval. It<span class="hljs-string">&#x27;s possible to change</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> this interval with the repl_ping_replica_period option. The default value is 10</span><br><br><span class="hljs-meta">#</span><span class="bash"> seconds.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> repl-ping-replica-period 10</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The following option sets the replication timeout <span class="hljs-keyword">for</span>:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2) Master timeout from the point of view of replicas (data, pings).</span><br><br><span class="hljs-meta">#</span><span class="bash"> 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> It is important to make sure that this value is greater than the value</span><br><br><span class="hljs-meta">#</span><span class="bash"> specified <span class="hljs-keyword">for</span> repl-ping-replica-period otherwise a timeout will be detected</span><br><br><span class="hljs-meta">#</span><span class="bash"> every time there is low traffic between the master and the replica.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> repl-timeout 60</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Disable TCP_NODELAY on the replica socket after SYNC?</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If you select <span class="hljs-string">&quot;yes&quot;</span> Redis will use a smaller number of TCP packets and</span><br><br><span class="hljs-meta">#</span><span class="bash"> less bandwidth to send data to replicas. But this can add a delay <span class="hljs-keyword">for</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> the data to appear on the replica side, up to 40 milliseconds with</span><br><br><span class="hljs-meta">#</span><span class="bash"> Linux kernels using a default configuration.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If you select <span class="hljs-string">&quot;no&quot;</span> the delay <span class="hljs-keyword">for</span> data to appear on the replica side will</span><br><br><span class="hljs-meta">#</span><span class="bash"> be reduced but more bandwidth will be used <span class="hljs-keyword">for</span> replication.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> By default we optimize <span class="hljs-keyword">for</span> low latency, but <span class="hljs-keyword">in</span> very high traffic conditions</span><br><br><span class="hljs-meta">#</span><span class="bash"> or when the master and replicas are many hops away, turning this to <span class="hljs-string">&quot;yes&quot;</span> may</span><br><br><span class="hljs-meta">#</span><span class="bash"> be a good idea.</span><br><br>repl-disable-tcp-nodelay no<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Set the replication backlog size. The backlog is a buffer that accumulates</span><br><br><span class="hljs-meta">#</span><span class="bash"> replica data when replicas are disconnected <span class="hljs-keyword">for</span> some time, so that when a replica</span><br><br><span class="hljs-meta">#</span><span class="bash"> wants to reconnect again, often a full resync is not needed, but a partial</span><br><br><span class="hljs-meta">#</span><span class="bash"> resync is enough, just passing the portion of data the replica missed <span class="hljs-keyword">while</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> disconnected.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The bigger the replication backlog, the longer the time the replica can be</span><br><br><span class="hljs-meta">#</span><span class="bash"> disconnected and later be able to perform a partial resynchronization.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The backlog is only allocated once there is at least a replica connected.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> repl-backlog-size 1mb</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> After a master has no longer connected replicas <span class="hljs-keyword">for</span> some time, the backlog</span><br><br><span class="hljs-meta">#</span><span class="bash"> will be freed. The following option configures the amount of seconds that</span><br><br><span class="hljs-meta">#</span><span class="bash"> need to elapse, starting from the time the last replica disconnected, <span class="hljs-keyword">for</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> the backlog buffer to be freed.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note that replicas never free the backlog <span class="hljs-keyword">for</span> timeout, since they may be</span><br><br><span class="hljs-meta">#</span><span class="bash"> promoted to masters later, and should be able to correctly <span class="hljs-string">&quot;partially</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> resynchronize<span class="hljs-string">&quot; with the replicas: hence they should always accumulate backlog.</span></span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> A value of 0 means to never release the backlog.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> repl-backlog-ttl 3600</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The replica priority is an <span class="hljs-built_in">integer</span> number published by Redis <span class="hljs-keyword">in</span> the INFO output.</span><br><br><span class="hljs-meta">#</span><span class="bash"> It is used by Redis Sentinel <span class="hljs-keyword">in</span> order to select a replica to promote into a</span><br><br><span class="hljs-meta">#</span><span class="bash"> master <span class="hljs-keyword">if</span> the master is no longer working correctly.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> A replica with a low priority number is considered better <span class="hljs-keyword">for</span> promotion, so</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> instance <span class="hljs-keyword">if</span> there are three replicas with priority 10, 100, 25 Sentinel will</span><br><br><span class="hljs-meta">#</span><span class="bash"> pick the one with priority 10, that is the lowest.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> However a special priority of 0 marks the replica as not able to perform the</span><br><br><span class="hljs-meta">#</span><span class="bash"> role of master, so a replica with priority of 0 will never be selected by</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis Sentinel <span class="hljs-keyword">for</span> promotion.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> By default the priority is 100.</span><br><br>replica-priority 100<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> It is possible <span class="hljs-keyword">for</span> a master to stop accepting writes <span class="hljs-keyword">if</span> there are less than</span><br><br><span class="hljs-meta">#</span><span class="bash"> N replicas connected, having a lag less or equal than M seconds.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The N replicas need to be <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;online&quot;</span> state.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The lag <span class="hljs-keyword">in</span> seconds, that must be &lt;= the specified value, is calculated from</span><br><br><span class="hljs-meta">#</span><span class="bash"> the last ping received from the replica, that is usually sent every second.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> This option does not GUARANTEE that N replicas will accept the write, but</span><br><br><span class="hljs-meta">#</span><span class="bash"> will <span class="hljs-built_in">limit</span> the window of exposure <span class="hljs-keyword">for</span> lost writes <span class="hljs-keyword">in</span> <span class="hljs-keyword">case</span> not enough replicas</span><br><br><span class="hljs-meta">#</span><span class="bash"> are available, to the specified number of seconds.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> min-replicas-to-write 3</span><br><br><span class="hljs-meta">#</span><span class="bash"> min-replicas-max-lag 10</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Setting one or the other to 0 disables the feature.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> By default min-replicas-to-write is <span class="hljs-built_in">set</span> to 0 (feature disabled) and</span><br><br><span class="hljs-meta">#</span><span class="bash"> min-replicas-max-lag is <span class="hljs-built_in">set</span> to 10.</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> A Redis master is able to list the address and port of the attached</span><br><br><span class="hljs-meta">#</span><span class="bash"> replicas <span class="hljs-keyword">in</span> different ways. For example the <span class="hljs-string">&quot;INFO replication&quot;</span> section</span><br><br><span class="hljs-meta">#</span><span class="bash"> offers this information, <span class="hljs-built_in">which</span> is used, among other tools, by</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis Sentinel <span class="hljs-keyword">in</span> order to discover replica instances.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Another place <span class="hljs-built_in">where</span> this info is available is <span class="hljs-keyword">in</span> the output of the</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-string">&quot;ROLE&quot;</span> <span class="hljs-built_in">command</span> of a master.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The listed IP and address normally reported by a replica is obtained</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> the following way:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   IP: The address is auto detected by checking the peer address</span><br><br><span class="hljs-meta">#</span><span class="bash">   of the socket used by the replica to connect with the master.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   Port: The port is communicated by the replica during the replication</span><br><br><span class="hljs-meta">#</span><span class="bash">   handshake, and is normally the port that the replica is using to</span><br><br><span class="hljs-meta">#</span><span class="bash">   listen <span class="hljs-keyword">for</span> connections.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> However when port forwarding or Network Address Translation (NAT) is</span><br><br><span class="hljs-meta">#</span><span class="bash"> used, the replica may be actually reachable via different IP and port</span><br><br><span class="hljs-meta">#</span><span class="bash"> pairs. The following two options can be used by a replica <span class="hljs-keyword">in</span> order to</span><br><br><span class="hljs-meta">#</span><span class="bash"> report to its master a specific <span class="hljs-built_in">set</span> of IP and port, so that both INFO</span><br><br><span class="hljs-meta">#</span><span class="bash"> and ROLE will report those values.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> There is no need to use both the options <span class="hljs-keyword">if</span> you need to override just</span><br><br><span class="hljs-meta">#</span><span class="bash"> the port or the IP address.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> replica-announce-ip 5.5.5.5</span><br><br><span class="hljs-meta">#</span><span class="bash"> replica-announce-port 1234</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">################################# SECURITY ###################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span><br><br><span class="hljs-meta">#</span><span class="bash"> commands.  This might be useful <span class="hljs-keyword">in</span> environments <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> you <span class="hljs-keyword">do</span> not trust</span><br><br><span class="hljs-meta">#</span><span class="bash"> others with access to the host running redis-server.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> This should stay commented out <span class="hljs-keyword">for</span> backward compatibility and because most</span><br><br><span class="hljs-meta">#</span><span class="bash"> people <span class="hljs-keyword">do</span> not need auth (e.g. they run their own servers).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Warning: since Redis is pretty fast an outside user can try up to</span><br><br><span class="hljs-meta">#</span><span class="bash"> 150k passwords per second against a good box. This means that you should</span><br><br><span class="hljs-meta">#</span><span class="bash"> use a very strong password otherwise it will be very easy to <span class="hljs-built_in">break</span>.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> requirepass foobared</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Command renaming.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> It is possible to change the name of dangerous commands <span class="hljs-keyword">in</span> a shared</span><br><br><span class="hljs-meta">#</span><span class="bash"> environment. For instance the CONFIG <span class="hljs-built_in">command</span> may be renamed into something</span><br><br><span class="hljs-meta">#</span><span class="bash"> hard to guess so that it will still be available <span class="hljs-keyword">for</span> internal-use tools</span><br><br><span class="hljs-meta">#</span><span class="bash"> but not available <span class="hljs-keyword">for</span> general clients.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Example:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> It is also possible to completely <span class="hljs-built_in">kill</span> a <span class="hljs-built_in">command</span> by renaming it into</span><br><br><span class="hljs-meta">#</span><span class="bash"> an empty string:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> rename-command CONFIG <span class="hljs-string">&quot;&quot;</span></span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Please note that changing the name of commands that are logged into the</span><br><br><span class="hljs-meta">#</span><span class="bash"> AOF file or transmitted to replicas may cause problems.</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">################################## CLIENTS ####################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Set the max number of connected clients at the same time. By default</span><br><br><span class="hljs-meta">#</span><span class="bash"> this <span class="hljs-built_in">limit</span> is <span class="hljs-built_in">set</span> to 10000 clients, however <span class="hljs-keyword">if</span> the Redis server is not</span><br><br><span class="hljs-meta">#</span><span class="bash"> able to configure the process file <span class="hljs-built_in">limit</span> to allow <span class="hljs-keyword">for</span> the specified <span class="hljs-built_in">limit</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> the max number of allowed clients is <span class="hljs-built_in">set</span> to the current file <span class="hljs-built_in">limit</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> minus 32 (as Redis reserves a few file descriptors <span class="hljs-keyword">for</span> internal uses).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Once the <span class="hljs-built_in">limit</span> is reached Redis will close all the new connections sending</span><br><br><span class="hljs-meta">#</span><span class="bash"> an error <span class="hljs-string">&#x27;max number of clients reached&#x27;</span>.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> maxclients 10000</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################# MEMORY MANAGEMENT ################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Set a memory usage <span class="hljs-built_in">limit</span> to the specified amount of bytes.</span><br><br><span class="hljs-meta">#</span><span class="bash"> When the memory <span class="hljs-built_in">limit</span> is reached Redis will try to remove keys</span><br><br><span class="hljs-meta">#</span><span class="bash"> according to the eviction policy selected (see maxmemory-policy).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If Redis can<span class="hljs-string">&#x27;t remove keys according to the policy, or if the policy is</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">set</span> to <span class="hljs-string">&#x27;noeviction&#x27;</span>, Redis will start to reply with errors to commands</span><br><br><span class="hljs-meta">#</span><span class="bash"> that would use more memory, like SET, LPUSH, and so on, and will <span class="hljs-built_in">continue</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> to reply to <span class="hljs-built_in">read</span>-only commands like GET.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> This option is usually useful when using Redis as an LRU or LFU cache, or to</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">set</span> a hard memory <span class="hljs-built_in">limit</span> <span class="hljs-keyword">for</span> an instance (using the <span class="hljs-string">&#x27;noeviction&#x27;</span> policy).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> WARNING: If you have replicas attached to an instance with maxmemory on,</span><br><br><span class="hljs-meta">#</span><span class="bash"> the size of the output buffers needed to feed the replicas are subtracted</span><br><br><span class="hljs-meta">#</span><span class="bash"> from the used memory count, so that network problems / resyncs will</span><br><br><span class="hljs-meta">#</span><span class="bash"> not trigger a loop <span class="hljs-built_in">where</span> keys are evicted, and <span class="hljs-keyword">in</span> turn the output</span><br><br><span class="hljs-meta">#</span><span class="bash"> buffer of replicas is full with DELs of keys evicted triggering the deletion</span><br><br><span class="hljs-meta">#</span><span class="bash"> of more keys, and so forth until the database is completely emptied.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> In short... <span class="hljs-keyword">if</span> you have replicas attached it is suggested that you <span class="hljs-built_in">set</span> a lower</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">limit</span> <span class="hljs-keyword">for</span> maxmemory so that there is some free RAM on the system <span class="hljs-keyword">for</span> replica</span><br><br><span class="hljs-meta">#</span><span class="bash"> output buffers (but this is not needed <span class="hljs-keyword">if</span> the policy is <span class="hljs-string">&#x27;noeviction&#x27;</span>).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> maxmemory &lt;bytes&gt;</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><br><span class="hljs-meta">#</span><span class="bash"> is reached. You can select among five behaviors:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> volatile-lru -&gt; Evict using approximated LRU among the keys with an expire <span class="hljs-built_in">set</span>.</span><br><br><span class="hljs-meta">#</span><span class="bash"> allkeys-lru -&gt; Evict any key using approximated LRU.</span><br><br><span class="hljs-meta">#</span><span class="bash"> volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire <span class="hljs-built_in">set</span>.</span><br><br><span class="hljs-meta">#</span><span class="bash"> allkeys-lfu -&gt; Evict any key using approximated LFU.</span><br><br><span class="hljs-meta">#</span><span class="bash"> volatile-random -&gt; Remove a random key among the ones with an expire <span class="hljs-built_in">set</span>.</span><br><br><span class="hljs-meta">#</span><span class="bash"> allkeys-random -&gt; Remove a random key, any key.</span><br><br><span class="hljs-meta">#</span><span class="bash"> volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span><br><br><span class="hljs-meta">#</span><span class="bash"> noeviction -&gt; Don<span class="hljs-string">&#x27;t evict anything, just return an error on write operations.</span></span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> LRU means Least Recently Used</span><br><br><span class="hljs-meta">#</span><span class="bash"> LFU means Least Frequently Used</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Both LRU, LFU and volatile-ttl are implemented using approximated</span><br><br><span class="hljs-meta">#</span><span class="bash"> randomized algorithms.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note: with any of the above policies, Redis will <span class="hljs-built_in">return</span> an error on write</span><br><br><span class="hljs-meta">#</span><span class="bash">       operations, when there are no suitable keys <span class="hljs-keyword">for</span> eviction.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">       At the date of writing these commands are: <span class="hljs-built_in">set</span> setnx setex append</span><br><br><span class="hljs-meta">#</span><span class="bash">       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><br><span class="hljs-meta">#</span><span class="bash">       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><br><span class="hljs-meta">#</span><span class="bash">       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><br><span class="hljs-meta">#</span><span class="bash">       getset mset msetnx <span class="hljs-built_in">exec</span> sort</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The default is:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> maxmemory-policy noeviction</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span><br><br><span class="hljs-meta">#</span><span class="bash"> algorithms (<span class="hljs-keyword">in</span> order to save memory), so you can tune it <span class="hljs-keyword">for</span> speed or</span><br><br><span class="hljs-meta">#</span><span class="bash"> accuracy. For default Redis will check five keys and pick the one that was</span><br><br><span class="hljs-meta">#</span><span class="bash"> used less recently, you can change the sample size using the following</span><br><br><span class="hljs-meta">#</span><span class="bash"> configuration directive.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The default of 5 produces good enough results. 10 Approximates very closely</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-literal">true</span> LRU but costs more CPU. 3 is faster but not very accurate.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> maxmemory-samples 5</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Starting from Redis 5, by default a replica will ignore its maxmemory setting</span><br><br><span class="hljs-meta">#</span><span class="bash"> (unless it is promoted to master after a failover or manually). It means</span><br><br><span class="hljs-meta">#</span><span class="bash"> that the eviction of keys will be just handled by the master, sending the</span><br><br><span class="hljs-meta">#</span><span class="bash"> DEL commands to the replica as keys evict <span class="hljs-keyword">in</span> the master side.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> This behavior ensures that masters and replicas stay consistent, and is usually</span><br><br><span class="hljs-meta">#</span><span class="bash"> what you want, however <span class="hljs-keyword">if</span> your replica is writable, or you want the replica to have</span><br><br><span class="hljs-meta">#</span><span class="bash"> a different memory setting, and you are sure all the writes performed to the</span><br><br><span class="hljs-meta">#</span><span class="bash"> replica are idempotent, <span class="hljs-keyword">then</span> you may change this default (but be sure to understand</span><br><br><span class="hljs-meta">#</span><span class="bash"> what you are doing).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note that since the replica by default does not evict, it may end using more</span><br><br><span class="hljs-meta">#</span><span class="bash"> memory than the one <span class="hljs-built_in">set</span> via maxmemory (there are certain buffers that may</span><br><br><span class="hljs-meta">#</span><span class="bash"> be larger on the replica, or data structures may sometimes take more memory and so</span><br><br><span class="hljs-meta">#</span><span class="bash"> forth). So make sure you monitor your replicas and make sure they have enough</span><br><br><span class="hljs-meta">#</span><span class="bash"> memory to never hit a real out-of-memory condition before the master hits</span><br><br><span class="hljs-meta">#</span><span class="bash"> the configured maxmemory setting.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> replica-ignore-maxmemory yes</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################ LAZY FREEING ####################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Redis has two primitives to delete keys. One is called DEL and is a blocking</span><br><br><span class="hljs-meta">#</span><span class="bash"> deletion of the object. It means that the server stops processing new commands</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> order to reclaim all the memory associated with an object <span class="hljs-keyword">in</span> a synchronous</span><br><br><span class="hljs-meta">#</span><span class="bash"> way. If the key deleted is associated with a small object, the time needed</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> order to execute the DEL <span class="hljs-built_in">command</span> is very small and comparable to most other</span><br><br><span class="hljs-meta">#</span><span class="bash"> O(1) or O(log_N) commands <span class="hljs-keyword">in</span> Redis. However <span class="hljs-keyword">if</span> the key is associated with an</span><br><br><span class="hljs-meta">#</span><span class="bash"> aggregated value containing millions of elements, the server can block <span class="hljs-keyword">for</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> a long time (even seconds) <span class="hljs-keyword">in</span> order to complete the operation.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> For the above reasons Redis also offers non blocking deletion primitives</span><br><br><span class="hljs-meta">#</span><span class="bash"> such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span><br><br><span class="hljs-meta">#</span><span class="bash"> FLUSHDB commands, <span class="hljs-keyword">in</span> order to reclaim memory <span class="hljs-keyword">in</span> background. Those commands</span><br><br><span class="hljs-meta">#</span><span class="bash"> are executed <span class="hljs-keyword">in</span> constant time. Another thread will incrementally free the</span><br><br><span class="hljs-meta">#</span><span class="bash"> object <span class="hljs-keyword">in</span> the background as fast as possible.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span><br><br><span class="hljs-meta">#</span><span class="bash"> It<span class="hljs-string">&#x27;s up to the design of the application to understand when it is a good</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> idea to use one or the other. However the Redis server sometimes has to</span><br><br><span class="hljs-meta">#</span><span class="bash"> delete keys or flush the whole database as a side effect of other operations.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Specifically Redis deletes objects independently of a user call <span class="hljs-keyword">in</span> the</span><br><br><span class="hljs-meta">#</span><span class="bash"> following scenarios:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span><br><br><span class="hljs-meta">#</span><span class="bash">    <span class="hljs-keyword">in</span> order to make room <span class="hljs-keyword">for</span> new data, without going over the specified</span><br><br><span class="hljs-meta">#</span><span class="bash">    memory <span class="hljs-built_in">limit</span>.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2) Because of expire: when a key with an associated time to live (see the</span><br><br><span class="hljs-meta">#</span><span class="bash">    EXPIRE <span class="hljs-built_in">command</span>) must be deleted from memory.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 3) Because of a side effect of a <span class="hljs-built_in">command</span> that stores data on a key that may</span><br><br><span class="hljs-meta">#</span><span class="bash">    already exist. For example the RENAME <span class="hljs-built_in">command</span> may delete the old key</span><br><br><span class="hljs-meta">#</span><span class="bash">    content when it is replaced with another one. Similarly SUNIONSTORE</span><br><br><span class="hljs-meta">#</span><span class="bash">    or SORT with STORE option may delete existing keys. The SET <span class="hljs-built_in">command</span></span><br><br><span class="hljs-meta">#</span><span class="bash">    itself removes any old content of the specified key <span class="hljs-keyword">in</span> order to replace</span><br><br><span class="hljs-meta">#</span><span class="bash">    it with the specified string.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 4) During replication, when a replica performs a full resynchronization with</span><br><br><span class="hljs-meta">#</span><span class="bash">    its master, the content of the whole database is removed <span class="hljs-keyword">in</span> order to</span><br><br><span class="hljs-meta">#</span><span class="bash">    load the RDB file just transferred.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> In all the above cases the default is to delete objects <span class="hljs-keyword">in</span> a blocking way,</span><br><br><span class="hljs-meta">#</span><span class="bash"> like <span class="hljs-keyword">if</span> DEL was called. However you can configure each <span class="hljs-keyword">case</span> specifically</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> order to instead release memory <span class="hljs-keyword">in</span> a non-blocking way like <span class="hljs-keyword">if</span> UNLINK</span><br><br><span class="hljs-meta">#</span><span class="bash"> was called, using the following configuration directives:</span><br><br> <br><br>lazyfree-lazy-eviction no<br><br>lazyfree-lazy-expire no<br><br>lazyfree-lazy-server-del no<br><br>replica-lazy-flush no<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################# APPEND ONLY MODE ###############################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> By default Redis asynchronously dumps the dataset on disk. This mode is</span><br><br><span class="hljs-meta">#</span><span class="bash"> good enough <span class="hljs-keyword">in</span> many applications, but an issue with the Redis process or</span><br><br><span class="hljs-meta">#</span><span class="bash"> a power outage may result into a few minutes of writes lost (depending on</span><br><br><span class="hljs-meta">#</span><span class="bash"> the configured save points).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The Append Only File is an alternative persistence mode that provides</span><br><br><span class="hljs-meta">#</span><span class="bash"> much better durability. For instance using the default data fsync policy</span><br><br><span class="hljs-meta">#</span><span class="bash"> (see later <span class="hljs-keyword">in</span> the config file) Redis can lose just one second of writes <span class="hljs-keyword">in</span> a</span><br><br><span class="hljs-meta">#</span><span class="bash"> dramatic event like a server power outage, or a single write <span class="hljs-keyword">if</span> something</span><br><br><span class="hljs-meta">#</span><span class="bash"> wrong with the Redis process itself happens, but the operating system is</span><br><br><span class="hljs-meta">#</span><span class="bash"> still running correctly.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> AOF and RDB persistence can be enabled at the same time without problems.</span><br><br><span class="hljs-meta">#</span><span class="bash"> If the AOF is enabled on startup Redis will load the AOF, that is the file</span><br><br><span class="hljs-meta">#</span><span class="bash"> with the better durability guarantees.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Please check http://redis.io/topics/persistence <span class="hljs-keyword">for</span> more information.</span><br><br> <br><br>appendonly no<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The name of the append only file (default: <span class="hljs-string">&quot;appendonly.aof&quot;</span>)</span><br><br> <br><br>appendfilename &quot;appendonly.aof&quot;<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The fsync() call tells the Operating System to actually write data on disk</span><br><br><span class="hljs-meta">#</span><span class="bash"> instead of waiting <span class="hljs-keyword">for</span> more data <span class="hljs-keyword">in</span> the output buffer. Some OS will really flush</span><br><br><span class="hljs-meta">#</span><span class="bash"> data on disk, some other OS will just try to <span class="hljs-keyword">do</span> it ASAP.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis supports three different modes:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> no: don<span class="hljs-string">&#x27;t fsync, just let the OS flush the data when it wants. Faster.</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> always: fsync after every write to the append only <span class="hljs-built_in">log</span>. Slow, Safest.</span><br><br><span class="hljs-meta">#</span><span class="bash"> everysec: fsync only one time every second. Compromise.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The default is <span class="hljs-string">&quot;everysec&quot;</span>, as that<span class="hljs-string">&#x27;s usually the right compromise between</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> speed and data safety. It<span class="hljs-string">&#x27;s up to you to understand if you can relax this to</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-string">&quot;no&quot;</span> that will <span class="hljs-built_in">let</span> the operating system flush the output buffer when</span><br><br><span class="hljs-meta">#</span><span class="bash"> it wants, <span class="hljs-keyword">for</span> better performances (but <span class="hljs-keyword">if</span> you can live with the idea of</span><br><br><span class="hljs-meta">#</span><span class="bash"> some data loss consider the default persistence mode that<span class="hljs-string">&#x27;s snapshotting),</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> or on the contrary, use <span class="hljs-string">&quot;always&quot;</span> that<span class="hljs-string">&#x27;s very slow but a bit safer than</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> everysec.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> More details please check the following article:</span><br><br><span class="hljs-meta">#</span><span class="bash"> http://antirez.com/post/redis-persistence-demystified.html</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If unsure, use <span class="hljs-string">&quot;everysec&quot;</span>.</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> appendfsync always</span><br><br>appendfsync everysec<br><br><span class="hljs-meta">#</span><span class="bash"> appendfsync no</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> When the AOF fsync policy is <span class="hljs-built_in">set</span> to always or everysec, and a background</span><br><br><span class="hljs-meta">#</span><span class="bash"> saving process (a background save or AOF <span class="hljs-built_in">log</span> background rewriting) is</span><br><br><span class="hljs-meta">#</span><span class="bash"> performing a lot of I/O against the disk, <span class="hljs-keyword">in</span> some Linux configurations</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis may block too long on the fsync() call. Note that there is no fix <span class="hljs-keyword">for</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> this currently, as even performing fsync <span class="hljs-keyword">in</span> a different thread will block</span><br><br><span class="hljs-meta">#</span><span class="bash"> our synchronous write(2) call.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> In order to mitigate this problem it<span class="hljs-string">&#x27;s possible to use the following option</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> that will prevent fsync() from being called <span class="hljs-keyword">in</span> the main process <span class="hljs-keyword">while</span> a</span><br><br><span class="hljs-meta">#</span><span class="bash"> BGSAVE or BGREWRITEAOF is <span class="hljs-keyword">in</span> progress.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> This means that <span class="hljs-keyword">while</span> another child is saving, the durability of Redis is</span><br><br><span class="hljs-meta">#</span><span class="bash"> the same as <span class="hljs-string">&quot;appendfsync none&quot;</span>. In practical terms, this means that it is</span><br><br><span class="hljs-meta">#</span><span class="bash"> possible to lose up to 30 seconds of <span class="hljs-built_in">log</span> <span class="hljs-keyword">in</span> the worst scenario (with the</span><br><br><span class="hljs-meta">#</span><span class="bash"> default Linux settings).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If you have latency problems turn this to <span class="hljs-string">&quot;yes&quot;</span>. Otherwise leave it as</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-string">&quot;no&quot;</span> that is the safest pick from the point of view of durability.</span><br><br> <br><br>no-appendfsync-on-rewrite no<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Automatic rewrite of the append only file.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis is able to automatically rewrite the <span class="hljs-built_in">log</span> file implicitly calling</span><br><br><span class="hljs-meta">#</span><span class="bash"> BGREWRITEAOF when the AOF <span class="hljs-built_in">log</span> size grows by the specified percentage.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> This is how it works: Redis remembers the size of the AOF file after the</span><br><br><span class="hljs-meta">#</span><span class="bash"> latest rewrite (<span class="hljs-keyword">if</span> no rewrite has happened since the restart, the size of</span><br><br><span class="hljs-meta">#</span><span class="bash"> the AOF at startup is used).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> This base size is compared to the current size. If the current size is</span><br><br><span class="hljs-meta">#</span><span class="bash"> bigger than the specified percentage, the rewrite is triggered. Also</span><br><br><span class="hljs-meta">#</span><span class="bash"> you need to specify a minimal size <span class="hljs-keyword">for</span> the AOF file to be rewritten, this</span><br><br><span class="hljs-meta">#</span><span class="bash"> is useful to avoid rewriting the AOF file even <span class="hljs-keyword">if</span> the percentage increase</span><br><br><span class="hljs-meta">#</span><span class="bash"> is reached but it is still pretty small.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Specify a percentage of zero <span class="hljs-keyword">in</span> order to <span class="hljs-built_in">disable</span> the automatic AOF</span><br><br><span class="hljs-meta">#</span><span class="bash"> rewrite feature.</span><br><br> <br><br>auto-aof-rewrite-percentage 100<br><br>auto-aof-rewrite-min-size 64mb<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> An AOF file may be found to be truncated at the end during the Redis</span><br><br><span class="hljs-meta">#</span><span class="bash"> startup process, when the AOF data gets loaded back into memory.</span><br><br><span class="hljs-meta">#</span><span class="bash"> This may happen when the system <span class="hljs-built_in">where</span> Redis is running</span><br><br><span class="hljs-meta">#</span><span class="bash"> crashes, especially when an ext4 filesystem is mounted without the</span><br><br><span class="hljs-meta">#</span><span class="bash"> data=ordered option (however this can<span class="hljs-string">&#x27;t happen when Redis itself</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> crashes or aborts but the operating system still works correctly).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis can either <span class="hljs-built_in">exit</span> with an error when this happens, or load as much</span><br><br><span class="hljs-meta">#</span><span class="bash"> data as possible (the default now) and start <span class="hljs-keyword">if</span> the AOF file is found</span><br><br><span class="hljs-meta">#</span><span class="bash"> to be truncated at the end. The following option controls this behavior.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If aof-load-truncated is <span class="hljs-built_in">set</span> to yes, a truncated AOF file is loaded and</span><br><br><span class="hljs-meta">#</span><span class="bash"> the Redis server starts emitting a <span class="hljs-built_in">log</span> to inform the user of the event.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Otherwise <span class="hljs-keyword">if</span> the option is <span class="hljs-built_in">set</span> to no, the server aborts with an error</span><br><br><span class="hljs-meta">#</span><span class="bash"> and refuses to start. When the option is <span class="hljs-built_in">set</span> to no, the user requires</span><br><br><span class="hljs-meta">#</span><span class="bash"> to fix the AOF file using the <span class="hljs-string">&quot;redis-check-aof&quot;</span> utility before to restart</span><br><br><span class="hljs-meta">#</span><span class="bash"> the server.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note that <span class="hljs-keyword">if</span> the AOF file will be found to be corrupted <span class="hljs-keyword">in</span> the middle</span><br><br><span class="hljs-meta">#</span><span class="bash"> the server will still <span class="hljs-built_in">exit</span> with an error. This option only applies when</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis will try to <span class="hljs-built_in">read</span> more data from the AOF file but not enough bytes</span><br><br><span class="hljs-meta">#</span><span class="bash"> will be found.</span><br><br>aof-load-truncated yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> When rewriting the AOF file, Redis is able to use an RDB preamble <span class="hljs-keyword">in</span> the</span><br><br><span class="hljs-meta">#</span><span class="bash"> AOF file <span class="hljs-keyword">for</span> faster rewrites and recoveries. When this option is turned</span><br><br><span class="hljs-meta">#</span><span class="bash"> on the rewritten AOF file is composed of two different stanzas:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   [RDB file][AOF tail]</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> When loading Redis recognizes that the AOF file starts with the <span class="hljs-string">&quot;REDIS&quot;</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> string and loads the prefixed RDB file, and continues loading the AOF</span><br><br><span class="hljs-meta">#</span><span class="bash"> tail.</span><br><br>aof-use-rdb-preamble yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################### LUA SCRIPTING  ###############################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Max execution time of a Lua script <span class="hljs-keyword">in</span> milliseconds.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If the maximum execution time is reached Redis will <span class="hljs-built_in">log</span> that a script is</span><br><br><span class="hljs-meta">#</span><span class="bash"> still <span class="hljs-keyword">in</span> execution after the maximum allowed time and will start to</span><br><br><span class="hljs-meta">#</span><span class="bash"> reply to queries with an error.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> When a long running script exceeds the maximum execution time only the</span><br><br><span class="hljs-meta">#</span><span class="bash"> SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span><br><br><span class="hljs-meta">#</span><span class="bash"> used to stop a script that did not yet called write commands. The second</span><br><br><span class="hljs-meta">#</span><span class="bash"> is the only way to shut down the server <span class="hljs-keyword">in</span> the <span class="hljs-keyword">case</span> a write <span class="hljs-built_in">command</span> was</span><br><br><span class="hljs-meta">#</span><span class="bash"> already issued by the script but the user doesn<span class="hljs-string">&#x27;t want to wait for the natural</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> termination of the script.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Set it to 0 or a negative value <span class="hljs-keyword">for</span> unlimited execution without warnings.</span><br><br>lua-time-limit 5000<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################### REDIS CLUSTER  ###############################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Normal Redis instances can<span class="hljs-string">&#x27;t be part of a Redis Cluster; only nodes that are</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> started as cluster nodes can. In order to start a Redis instance as a</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster node <span class="hljs-built_in">enable</span> the cluster support uncommenting the following:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-enabled yes</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Every cluster node has a cluster configuration file. This file is not</span><br><br><span class="hljs-meta">#</span><span class="bash"> intended to be edited by hand. It is created and updated by Redis nodes.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Every Redis Cluster node requires a different cluster configuration file.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Make sure that instances running <span class="hljs-keyword">in</span> the same system <span class="hljs-keyword">do</span> not have</span><br><br><span class="hljs-meta">#</span><span class="bash"> overlapping cluster configuration file names.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-config-file nodes-6379.conf</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Cluster node timeout is the amount of milliseconds a node must be unreachable</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> it to be considered <span class="hljs-keyword">in</span> failure state.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Most other internal time limits are multiple of the node timeout.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-node-timeout 15000</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> A replica of a failing master will avoid to start a failover <span class="hljs-keyword">if</span> its data</span><br><br><span class="hljs-meta">#</span><span class="bash"> looks too old.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> There is no simple way <span class="hljs-keyword">for</span> a replica to actually have an exact measure of</span><br><br><span class="hljs-meta">#</span><span class="bash"> its <span class="hljs-string">&quot;data age&quot;</span>, so the following two checks are performed:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1) If there are multiple replicas able to failover, they exchange messages</span><br><br><span class="hljs-meta">#</span><span class="bash">    <span class="hljs-keyword">in</span> order to try to give an advantage to the replica with the best</span><br><br><span class="hljs-meta">#</span><span class="bash">    replication offset (more data from the master processed).</span><br><br><span class="hljs-meta">#</span><span class="bash">    Replicas will try to get their rank by offset, and apply to the start</span><br><br><span class="hljs-meta">#</span><span class="bash">    of the failover a delay proportional to their rank.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2) Every single replica computes the time of the last interaction with</span><br><br><span class="hljs-meta">#</span><span class="bash">    its master. This can be the last ping or <span class="hljs-built_in">command</span> received (<span class="hljs-keyword">if</span> the master</span><br><br><span class="hljs-meta">#</span><span class="bash">    is still <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;connected&quot;</span> state), or the time that elapsed since the</span><br><br><span class="hljs-meta">#</span><span class="bash">    disconnection with the master (<span class="hljs-keyword">if</span> the replication link is currently down).</span><br><br><span class="hljs-meta">#</span><span class="bash">    If the last interaction is too old, the replica will not try to failover</span><br><br><span class="hljs-meta">#</span><span class="bash">    at all.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The point <span class="hljs-string">&quot;2&quot;</span> can be tuned by user. Specifically a replica will not perform</span><br><br><span class="hljs-meta">#</span><span class="bash"> the failover <span class="hljs-keyword">if</span>, since the last interaction with the master, the time</span><br><br><span class="hljs-meta">#</span><span class="bash"> elapsed is greater than:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   (node-timeout * replica-validity-factor) + repl-ping-replica-period</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> So <span class="hljs-keyword">for</span> example <span class="hljs-keyword">if</span> node-timeout is 30 seconds, and the replica-validity-factor</span><br><br><span class="hljs-meta">#</span><span class="bash"> is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span><br><br><span class="hljs-meta">#</span><span class="bash"> replica will not try to failover <span class="hljs-keyword">if</span> it was not able to talk with the master</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> longer than 310 seconds.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> A large replica-validity-factor may allow replicas with too old data to failover</span><br><br><span class="hljs-meta">#</span><span class="bash"> a master, <span class="hljs-keyword">while</span> a too small value may prevent the cluster from being able to</span><br><br><span class="hljs-meta">#</span><span class="bash"> elect a replica at all.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> For maximum availability, it is possible to <span class="hljs-built_in">set</span> the replica-validity-factor</span><br><br><span class="hljs-meta">#</span><span class="bash"> to a value of 0, <span class="hljs-built_in">which</span> means, that replicas will always try to failover the</span><br><br><span class="hljs-meta">#</span><span class="bash"> master regardless of the last time they interacted with the master.</span><br><br><span class="hljs-meta">#</span><span class="bash"> (However they<span class="hljs-string">&#x27;ll always try to apply a delay proportional to their</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> offset rank).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Zero is the only value able to guarantee that when all the partitions heal</span><br><br><span class="hljs-meta">#</span><span class="bash"> the cluster will always be able to <span class="hljs-built_in">continue</span>.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-replica-validity-factor 10</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Cluster replicas are able to migrate to orphaned masters, that are masters</span><br><br><span class="hljs-meta">#</span><span class="bash"> that are left without working replicas. This improves the cluster ability</span><br><br><span class="hljs-meta">#</span><span class="bash"> to resist to failures as otherwise an orphaned master can<span class="hljs-string">&#x27;t be failed over</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> <span class="hljs-keyword">case</span> of failure <span class="hljs-keyword">if</span> it has no working replicas.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Replicas migrate to orphaned masters only <span class="hljs-keyword">if</span> there are still at least a</span><br><br><span class="hljs-meta">#</span><span class="bash"> given number of other working replicas <span class="hljs-keyword">for</span> their old master. This number</span><br><br><span class="hljs-meta">#</span><span class="bash"> is the <span class="hljs-string">&quot;migration barrier&quot;</span>. A migration barrier of 1 means that a replica</span><br><br><span class="hljs-meta">#</span><span class="bash"> will migrate only <span class="hljs-keyword">if</span> there is at least 1 other working replica <span class="hljs-keyword">for</span> its master</span><br><br><span class="hljs-meta">#</span><span class="bash"> and so forth. It usually reflects the number of replicas you want <span class="hljs-keyword">for</span> every</span><br><br><span class="hljs-meta">#</span><span class="bash"> master <span class="hljs-keyword">in</span> your cluster.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Default is 1 (replicas migrate only <span class="hljs-keyword">if</span> their masters remain with at least</span><br><br><span class="hljs-meta">#</span><span class="bash"> one replica). To <span class="hljs-built_in">disable</span> migration just <span class="hljs-built_in">set</span> it to a very large value.</span><br><br><span class="hljs-meta">#</span><span class="bash"> A value of 0 can be <span class="hljs-built_in">set</span> but is useful only <span class="hljs-keyword">for</span> debugging and dangerous</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> production.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-migration-barrier 1</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> By default Redis Cluster nodes stop accepting queries <span class="hljs-keyword">if</span> they detect there</span><br><br><span class="hljs-meta">#</span><span class="bash"> is at least an <span class="hljs-built_in">hash</span> slot uncovered (no available node is serving it).</span><br><br><span class="hljs-meta">#</span><span class="bash"> This way <span class="hljs-keyword">if</span> the cluster is partially down (<span class="hljs-keyword">for</span> example a range of <span class="hljs-built_in">hash</span> slots</span><br><br><span class="hljs-meta">#</span><span class="bash"> are no longer covered) all the cluster becomes, eventually, unavailable.</span><br><br><span class="hljs-meta">#</span><span class="bash"> It automatically returns available as soon as all the slots are covered again.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> However sometimes you want the subset of the cluster <span class="hljs-built_in">which</span> is working,</span><br><br><span class="hljs-meta">#</span><span class="bash"> to <span class="hljs-built_in">continue</span> to accept queries <span class="hljs-keyword">for</span> the part of the key space that is still</span><br><br><span class="hljs-meta">#</span><span class="bash"> covered. In order to <span class="hljs-keyword">do</span> so, just <span class="hljs-built_in">set</span> the cluster-require-full-coverage</span><br><br><span class="hljs-meta">#</span><span class="bash"> option to no.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-require-full-coverage yes</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> This option, when <span class="hljs-built_in">set</span> to yes, prevents replicas from trying to failover its</span><br><br><span class="hljs-meta">#</span><span class="bash"> master during master failures. However the master can still perform a</span><br><br><span class="hljs-meta">#</span><span class="bash"> manual failover, <span class="hljs-keyword">if</span> forced to <span class="hljs-keyword">do</span> so.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> This is useful <span class="hljs-keyword">in</span> different scenarios, especially <span class="hljs-keyword">in</span> the <span class="hljs-keyword">case</span> of multiple</span><br><br><span class="hljs-meta">#</span><span class="bash"> data center operations, <span class="hljs-built_in">where</span> we want one side to never be promoted <span class="hljs-keyword">if</span> not</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> the <span class="hljs-keyword">case</span> of a total DC failure.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-replica-no-failover no</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> In order to setup your cluster make sure to <span class="hljs-built_in">read</span> the documentation</span><br><br><span class="hljs-meta">#</span><span class="bash"> available at http://redis.io web site.</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">######################### CLUSTER DOCKER/NAT support  ########################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> In certain deployments, Redis Cluster nodes address discovery fails, because</span><br><br><span class="hljs-meta">#</span><span class="bash"> addresses are NAT-ted or because ports are forwarded (the typical <span class="hljs-keyword">case</span> is</span><br><br><span class="hljs-meta">#</span><span class="bash"> Docker and other containers).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> In order to make Redis Cluster working <span class="hljs-keyword">in</span> such environments, a static</span><br><br><span class="hljs-meta">#</span><span class="bash"> configuration <span class="hljs-built_in">where</span> each node knows its public address is needed. The</span><br><br><span class="hljs-meta">#</span><span class="bash"> following two options are used <span class="hljs-keyword">for</span> this scope, and are:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> * cluster-announce-ip</span><br><br><span class="hljs-meta">#</span><span class="bash"> * cluster-announce-port</span><br><br><span class="hljs-meta">#</span><span class="bash"> * cluster-announce-bus-port</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Each instruct the node about its address, client port, and cluster message</span><br><br><span class="hljs-meta">#</span><span class="bash"> bus port. The information is <span class="hljs-keyword">then</span> published <span class="hljs-keyword">in</span> the header of the bus packets</span><br><br><span class="hljs-meta">#</span><span class="bash"> so that other nodes will be able to correctly map the address of the node</span><br><br><span class="hljs-meta">#</span><span class="bash"> publishing the information.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If the above options are not used, the normal Redis Cluster auto-detection</span><br><br><span class="hljs-meta">#</span><span class="bash"> will be used instead.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Note that when remapped, the bus port may not be at the fixed offset of</span><br><br><span class="hljs-meta">#</span><span class="bash"> clients port + 10000, so you can specify any port and bus-port depending</span><br><br><span class="hljs-meta">#</span><span class="bash"> on how they get remapped. If the bus-port is not <span class="hljs-built_in">set</span>, a fixed offset of</span><br><br><span class="hljs-meta">#</span><span class="bash"> 10000 will be used as usually.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Example:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-announce-ip 10.1.1.5</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-announce-port 6379</span><br><br><span class="hljs-meta">#</span><span class="bash"> cluster-announce-bus-port 6380</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">################################# SLOW LOG ###################################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The Redis Slow Log is a system to <span class="hljs-built_in">log</span> queries that exceeded a specified</span><br><br><span class="hljs-meta">#</span><span class="bash"> execution time. The execution time does not include the I/O operations</span><br><br><span class="hljs-meta">#</span><span class="bash"> like talking with the client, sending the reply and so forth,</span><br><br><span class="hljs-meta">#</span><span class="bash"> but just the time needed to actually execute the <span class="hljs-built_in">command</span> (this is the only</span><br><br><span class="hljs-meta">#</span><span class="bash"> stage of <span class="hljs-built_in">command</span> execution <span class="hljs-built_in">where</span> the thread is blocked and can not serve</span><br><br><span class="hljs-meta">#</span><span class="bash"> other requests <span class="hljs-keyword">in</span> the meantime).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> You can configure the slow <span class="hljs-built_in">log</span> with two parameters: one tells Redis</span><br><br><span class="hljs-meta">#</span><span class="bash"> what is the execution time, <span class="hljs-keyword">in</span> microseconds, to exceed <span class="hljs-keyword">in</span> order <span class="hljs-keyword">for</span> the</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">command</span> to get logged, and the other parameter is the length of the</span><br><br><span class="hljs-meta">#</span><span class="bash"> slow <span class="hljs-built_in">log</span>. When a new <span class="hljs-built_in">command</span> is logged the oldest one is removed from the</span><br><br><span class="hljs-meta">#</span><span class="bash"> queue of logged commands.</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The following time is expressed <span class="hljs-keyword">in</span> microseconds, so 1000000 is equivalent</span><br><br><span class="hljs-meta">#</span><span class="bash"> to one second. Note that a negative number disables the slow <span class="hljs-built_in">log</span>, <span class="hljs-keyword">while</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> a value of zero forces the logging of every <span class="hljs-built_in">command</span>.</span><br><br>slowlog-log-slower-than 10000<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> There is no <span class="hljs-built_in">limit</span> to this length. Just be aware that it will consume memory.</span><br><br><span class="hljs-meta">#</span><span class="bash"> You can reclaim memory used by the slow <span class="hljs-built_in">log</span> with SLOWLOG RESET.</span><br><br>slowlog-max-len 128<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################### LATENCY MONITOR ##############################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The Redis latency monitoring subsystem samples different operations</span><br><br><span class="hljs-meta">#</span><span class="bash"> at runtime <span class="hljs-keyword">in</span> order to collect data related to possible sources of</span><br><br><span class="hljs-meta">#</span><span class="bash"> latency of a Redis instance.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Via the LATENCY <span class="hljs-built_in">command</span> this information is available to the user that can</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">print</span> graphs and obtain reports.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The system only logs operations that were performed <span class="hljs-keyword">in</span> a time equal or</span><br><br><span class="hljs-meta">#</span><span class="bash"> greater than the amount of milliseconds specified via the</span><br><br><span class="hljs-meta">#</span><span class="bash"> latency-monitor-threshold configuration directive. When its value is <span class="hljs-built_in">set</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> to zero, the latency monitor is turned off.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> By default latency monitoring is disabled since it is mostly not needed</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">if</span> you don<span class="hljs-string">&#x27;t have latency issues, and collecting data has a performance</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> impact, that <span class="hljs-keyword">while</span> very small, can be measured under big load. Latency</span><br><br><span class="hljs-meta">#</span><span class="bash"> monitoring can easily be enabled at runtime using the <span class="hljs-built_in">command</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-string">&quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot;</span> <span class="hljs-keyword">if</span> needed.</span><br><br>latency-monitor-threshold 0<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################ EVENT NOTIFICATION ##############################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Redis can notify Pub/Sub clients about events happening <span class="hljs-keyword">in</span> the key space.</span><br><br><span class="hljs-meta">#</span><span class="bash"> This feature is documented at http://redis.io/topics/notifications</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> For instance <span class="hljs-keyword">if</span> keyspace events notification is enabled, and a client</span><br><br><span class="hljs-meta">#</span><span class="bash"> performs a DEL operation on key <span class="hljs-string">&quot;foo&quot;</span> stored <span class="hljs-keyword">in</span> the Database 0, two</span><br><br><span class="hljs-meta">#</span><span class="bash"> messages will be published via Pub/Sub:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> PUBLISH __keyspace@0__:foo del</span><br><br><span class="hljs-meta">#</span><span class="bash"> PUBLISH __keyevent@0__:del foo</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> It is possible to select the events that Redis will notify among a <span class="hljs-built_in">set</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> of classes. Every class is identified by a single character:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span><br><br><span class="hljs-meta">#</span><span class="bash">  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span><br><br><span class="hljs-meta">#</span><span class="bash">  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span><br><br><span class="hljs-meta">#</span><span class="bash">  $     String commands</span><br><br><span class="hljs-meta">#</span><span class="bash">  l     List commands</span><br><br><span class="hljs-meta">#</span><span class="bash">  s     Set commands</span><br><br><span class="hljs-meta">#</span><span class="bash">  h     Hash commands</span><br><br><span class="hljs-meta">#</span><span class="bash">  z     Sorted <span class="hljs-built_in">set</span> commands</span><br><br><span class="hljs-meta">#</span><span class="bash">  x     Expired events (events generated every time a key expires)</span><br><br><span class="hljs-meta">#</span><span class="bash">  e     Evicted events (events generated when a key is evicted <span class="hljs-keyword">for</span> maxmemory)</span><br><br><span class="hljs-meta">#</span><span class="bash">  A     Alias <span class="hljs-keyword">for</span> g<span class="hljs-variable">$lshzxe</span>, so that the <span class="hljs-string">&quot;AKE&quot;</span> string means all the events.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">  The <span class="hljs-string">&quot;notify-keyspace-events&quot;</span> takes as argument a string that is composed</span><br><br><span class="hljs-meta">#</span><span class="bash">  of zero or multiple characters. The empty string means that notifications</span><br><br><span class="hljs-meta">#</span><span class="bash">  are disabled.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">  Example: to <span class="hljs-built_in">enable</span> list and generic events, from the point of view of the</span><br><br><span class="hljs-meta">#</span><span class="bash">           event name, use:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">  notify-keyspace-events Elg</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">  Example 2: to get the stream of the expired keys subscribing to channel</span><br><br><span class="hljs-meta">#</span><span class="bash">             name __keyevent@0__:expired use:</span><br><br><span class="hljs-meta">#</span><br><br>  notify-keyspace-events Ex<br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">  By default all notifications are disabled because most users don<span class="hljs-string">&#x27;t need</span></span><br><br><span class="hljs-meta">#</span><span class="bash">  this feature and the feature has some overhead. Note that <span class="hljs-keyword">if</span> you don<span class="hljs-string">&#x27;t</span></span><br><br><span class="hljs-meta">#</span><span class="bash">  specify at least one of K or E, no events will be delivered.</span><br><br><span class="hljs-meta">#</span><span class="bash">notify-keyspace-events <span class="hljs-string">&quot;&quot;</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">############################## ADVANCED CONFIG ###############################</span></span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Hashes are encoded using a memory efficient data structure when they have a</span><br><br><span class="hljs-meta">#</span><span class="bash"> small number of entries, and the biggest entry does not exceed a given</span><br><br><span class="hljs-meta">#</span><span class="bash"> threshold. These thresholds can be configured using the following directives.</span><br><br>hash-max-ziplist-entries 512<br><br>hash-max-ziplist-value 64<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Lists are also encoded <span class="hljs-keyword">in</span> a special way to save a lot of space.</span><br><br><span class="hljs-meta">#</span><span class="bash"> The number of entries allowed per internal list node can be specified</span><br><br><span class="hljs-meta">#</span><span class="bash"> as a fixed maximum size or a maximum number of elements.</span><br><br><span class="hljs-meta">#</span><span class="bash"> For a fixed maximum size, use -5 through -1, meaning:</span><br><br><span class="hljs-meta">#</span><span class="bash"> -5: max size: 64 Kb  &lt;-- not recommended <span class="hljs-keyword">for</span> normal workloads</span><br><br><span class="hljs-meta">#</span><span class="bash"> -4: max size: 32 Kb  &lt;-- not recommended</span><br><br><span class="hljs-meta">#</span><span class="bash"> -3: max size: 16 Kb  &lt;-- probably not recommended</span><br><br><span class="hljs-meta">#</span><span class="bash"> -2: max size: 8 Kb   &lt;-- good</span><br><br><span class="hljs-meta">#</span><span class="bash"> -1: max size: 4 Kb   &lt;-- good</span><br><br><span class="hljs-meta">#</span><span class="bash"> Positive numbers mean store up to _exactly_ that number of elements</span><br><br><span class="hljs-meta">#</span><span class="bash"> per list node.</span><br><br><span class="hljs-meta">#</span><span class="bash"> The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span><br><br><span class="hljs-meta">#</span><span class="bash"> but <span class="hljs-keyword">if</span> your use <span class="hljs-keyword">case</span> is unique, adjust the settings as necessary.</span><br><br>list-max-ziplist-size -2<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Lists may also be compressed.</span><br><br><span class="hljs-meta">#</span><span class="bash"> Compress depth is the number of quicklist ziplist nodes from *each* side of</span><br><br><span class="hljs-meta">#</span><span class="bash"> the list to *exclude* from compression.  The head and tail of the list</span><br><br><span class="hljs-meta">#</span><span class="bash"> are always uncompressed <span class="hljs-keyword">for</span> fast push/pop operations.  Settings are:</span><br><br><span class="hljs-meta">#</span><span class="bash"> 0: <span class="hljs-built_in">disable</span> all list compression</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1: depth 1 means <span class="hljs-string">&quot;don&#x27;t start compressing until after 1 node into the list,</span></span><br><br><span class="hljs-meta">#</span><span class="bash">    going from either the head or tail<span class="hljs-string">&quot;</span></span><br><br><span class="hljs-meta">#</span><span class="bash">    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span><br><br><span class="hljs-meta">#</span><span class="bash">    [head], [tail] will always be uncompressed; inner nodes will compress.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span><br><br><span class="hljs-meta">#</span><span class="bash">    2 here means: don<span class="hljs-string">&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail,</span></span><br><br><span class="hljs-meta">#</span><span class="bash">    but compress all nodes between them.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span><br><br><span class="hljs-meta">#</span><span class="bash"> etc.</span><br><br>list-compress-depth 0<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Sets have a special encoding <span class="hljs-keyword">in</span> just one <span class="hljs-keyword">case</span>: when a <span class="hljs-built_in">set</span> is composed</span><br><br><span class="hljs-meta">#</span><span class="bash"> of just strings that happen to be integers <span class="hljs-keyword">in</span> radix 10 <span class="hljs-keyword">in</span> the range</span><br><br><span class="hljs-meta">#</span><span class="bash"> of 64 bit signed integers.</span><br><br><span class="hljs-meta">#</span><span class="bash"> The following configuration setting sets the <span class="hljs-built_in">limit</span> <span class="hljs-keyword">in</span> the size of the</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">set</span> <span class="hljs-keyword">in</span> order to use this special memory saving encoding.</span><br><br>set-max-intset-entries 512<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Similarly to hashes and lists, sorted sets are also specially encoded <span class="hljs-keyword">in</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> order to save a lot of space. This encoding is only used when the length and</span><br><br><span class="hljs-meta">#</span><span class="bash"> elements of a sorted <span class="hljs-built_in">set</span> are below the following limits:</span><br><br>zset-max-ziplist-entries 128<br><br>zset-max-ziplist-value 64<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> HyperLogLog sparse representation bytes <span class="hljs-built_in">limit</span>. The <span class="hljs-built_in">limit</span> includes the</span><br><br><span class="hljs-meta">#</span><span class="bash"> 16 bytes header. When an HyperLogLog using the sparse representation crosses</span><br><br><span class="hljs-meta">#</span><span class="bash"> this <span class="hljs-built_in">limit</span>, it is converted into the dense representation.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> A value greater than 16000 is totally useless, since at that point the</span><br><br><span class="hljs-meta">#</span><span class="bash"> dense representation is more memory efficient.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The suggested value is ~ 3000 <span class="hljs-keyword">in</span> order to have the benefits of</span><br><br><span class="hljs-meta">#</span><span class="bash"> the space efficient encoding without slowing down too much PFADD,</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">which</span> is O(N) with the sparse encoding. The value can be raised to</span><br><br><span class="hljs-meta">#</span><span class="bash"> ~ 10000 when CPU is not a concern, but space is, and the data <span class="hljs-built_in">set</span> is</span><br><br><span class="hljs-meta">#</span><span class="bash"> composed of many HyperLogLogs with cardinality <span class="hljs-keyword">in</span> the 0 - 15000 range.</span><br><br>hll-sparse-max-bytes 3000<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Streams macro node max size / items. The stream data structure is a radix</span><br><br><span class="hljs-meta">#</span><span class="bash"> tree of big nodes that encode multiple items inside. Using this configuration</span><br><br><span class="hljs-meta">#</span><span class="bash"> it is possible to configure how big a single node can be <span class="hljs-keyword">in</span> bytes, and the</span><br><br><span class="hljs-meta">#</span><span class="bash"> maximum number of items it may contain before switching to a new node when</span><br><br><span class="hljs-meta">#</span><span class="bash"> appending new stream entries. If any of the following settings are <span class="hljs-built_in">set</span> to</span><br><br><span class="hljs-meta">#</span><span class="bash"> zero, the <span class="hljs-built_in">limit</span> is ignored, so <span class="hljs-keyword">for</span> instance it is possible to <span class="hljs-built_in">set</span> just a</span><br><br><span class="hljs-meta">#</span><span class="bash"> max entires <span class="hljs-built_in">limit</span> by setting max-bytes to 0 and max-entries to the desired</span><br><br><span class="hljs-meta">#</span><span class="bash"> value.</span><br><br>stream-node-max-bytes 4096<br><br>stream-node-max-entries 100<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Active rehashing uses 1 millisecond every 100 milliseconds of CPU time <span class="hljs-keyword">in</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> order to <span class="hljs-built_in">help</span> rehashing the main Redis <span class="hljs-built_in">hash</span> table (the one mapping top-level</span><br><br><span class="hljs-meta">#</span><span class="bash"> keys to values). The <span class="hljs-built_in">hash</span> table implementation Redis uses (see dict.c)</span><br><br><span class="hljs-meta">#</span><span class="bash"> performs a lazy rehashing: the more operation you run into a <span class="hljs-built_in">hash</span> table</span><br><br><span class="hljs-meta">#</span><span class="bash"> that is rehashing, the more rehashing <span class="hljs-string">&quot;steps&quot;</span> are performed, so <span class="hljs-keyword">if</span> the</span><br><br><span class="hljs-meta">#</span><span class="bash"> server is idle the rehashing is never complete and some more memory is used</span><br><br><span class="hljs-meta">#</span><span class="bash"> by the <span class="hljs-built_in">hash</span> table.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The default is to use this millisecond 10 <span class="hljs-built_in">times</span> every second <span class="hljs-keyword">in</span> order to</span><br><br><span class="hljs-meta">#</span><span class="bash"> actively <span class="hljs-built_in">rehash</span> the main dictionaries, freeing memory when possible.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> If unsure:</span><br><br><span class="hljs-meta">#</span><span class="bash"> use <span class="hljs-string">&quot;activerehashing no&quot;</span> <span class="hljs-keyword">if</span> you have hard latency requirements and it is</span><br><br><span class="hljs-meta">#</span><span class="bash"> not a good thing <span class="hljs-keyword">in</span> your environment that Redis can reply from time to time</span><br><br><span class="hljs-meta">#</span><span class="bash"> to queries with 2 milliseconds delay.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> use <span class="hljs-string">&quot;activerehashing yes&quot;</span> <span class="hljs-keyword">if</span> you don<span class="hljs-string">&#x27;t have such hard requirements but</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> want to free memory asap when possible.</span><br><br>activerehashing yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> The client output buffer limits can be used to force disconnection of clients</span><br><br><span class="hljs-meta">#</span><span class="bash"> that are not reading data from the server fast enough <span class="hljs-keyword">for</span> some reason (a</span><br><br><span class="hljs-meta">#</span><span class="bash"> common reason is that a Pub/Sub client can<span class="hljs-string">&#x27;t consume messages as fast as the</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> publisher can produce them).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The <span class="hljs-built_in">limit</span> can be <span class="hljs-built_in">set</span> differently <span class="hljs-keyword">for</span> the three different classes of clients:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> normal -&gt; normal clients including MONITOR clients</span><br><br><span class="hljs-meta">#</span><span class="bash"> replica  -&gt; replica clients</span><br><br><span class="hljs-meta">#</span><span class="bash"> pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The syntax of every client-output-buffer-limit directive is the following:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> client-output-buffer-limit &lt;class&gt; &lt;hard <span class="hljs-built_in">limit</span>&gt; &lt;soft <span class="hljs-built_in">limit</span>&gt; &lt;soft seconds&gt;</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> A client is immediately disconnected once the hard <span class="hljs-built_in">limit</span> is reached, or <span class="hljs-keyword">if</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> the soft <span class="hljs-built_in">limit</span> is reached and remains reached <span class="hljs-keyword">for</span> the specified number of</span><br><br><span class="hljs-meta">#</span><span class="bash"> seconds (continuously).</span><br><br><span class="hljs-meta">#</span><span class="bash"> So <span class="hljs-keyword">for</span> instance <span class="hljs-keyword">if</span> the hard <span class="hljs-built_in">limit</span> is 32 megabytes and the soft <span class="hljs-built_in">limit</span> is</span><br><br><span class="hljs-meta">#</span><span class="bash"> 16 megabytes / 10 seconds, the client will get disconnected immediately</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">if</span> the size of the output buffers reach 32 megabytes, but will also get</span><br><br><span class="hljs-meta">#</span><span class="bash"> disconnected <span class="hljs-keyword">if</span> the client reaches 16 megabytes and continuously overcomes</span><br><br><span class="hljs-meta">#</span><span class="bash"> the <span class="hljs-built_in">limit</span> <span class="hljs-keyword">for</span> 10 seconds.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> By default normal clients are not limited because they don<span class="hljs-string">&#x27;t receive data</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> without asking (<span class="hljs-keyword">in</span> a push way), but just after a request, so only</span><br><br><span class="hljs-meta">#</span><span class="bash"> asynchronous clients may create a scenario <span class="hljs-built_in">where</span> data is requested faster</span><br><br><span class="hljs-meta">#</span><span class="bash"> than it can <span class="hljs-built_in">read</span>.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Instead there is a default <span class="hljs-built_in">limit</span> <span class="hljs-keyword">for</span> pubsub and replica clients, since</span><br><br><span class="hljs-meta">#</span><span class="bash"> subscribers and replicas receive data <span class="hljs-keyword">in</span> a push fashion.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Both the hard or the soft <span class="hljs-built_in">limit</span> can be disabled by setting them to zero.</span><br><br>client-output-buffer-limit normal 0 0 0<br><br>client-output-buffer-limit replica 256mb 64mb 60<br><br>client-output-buffer-limit pubsub 32mb 8mb 60<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Client query buffers accumulate new commands. They are limited to a fixed</span><br><br><span class="hljs-meta">#</span><span class="bash"> amount by default <span class="hljs-keyword">in</span> order to avoid that a protocol desynchronization (<span class="hljs-keyword">for</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> instance due to a bug <span class="hljs-keyword">in</span> the client) will lead to unbound memory usage <span class="hljs-keyword">in</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> the query buffer. However you can configure it here <span class="hljs-keyword">if</span> you have very special</span><br><br><span class="hljs-meta">#</span><span class="bash"> needs, such us huge multi/<span class="hljs-built_in">exec</span> requests or alike.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> client-query-buffer-limit 1gb</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> In the Redis protocol, bulk requests, that are, elements representing single</span><br><br><span class="hljs-meta">#</span><span class="bash"> strings, are normally limited ot 512 mb. However you can change this <span class="hljs-built_in">limit</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> here.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> proto-max-bulk-len 512mb</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Redis calls an internal <span class="hljs-keyword">function</span> to perform many background tasks, like</span><br><br><span class="hljs-meta">#</span><span class="bash"> closing connections of clients <span class="hljs-keyword">in</span> timeout, purging expired keys that are</span><br><br><span class="hljs-meta">#</span><span class="bash"> never requested, and so forth.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Not all tasks are performed with the same frequency, but Redis checks <span class="hljs-keyword">for</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> tasks to perform according to the specified <span class="hljs-string">&quot;hz&quot;</span> value.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> By default <span class="hljs-string">&quot;hz&quot;</span> is <span class="hljs-built_in">set</span> to 10. Raising the value will use more CPU when</span><br><br><span class="hljs-meta">#</span><span class="bash"> Redis is idle, but at the same time will make Redis more responsive when</span><br><br><span class="hljs-meta">#</span><span class="bash"> there are many keys expiring at the same time, and timeouts may be</span><br><br><span class="hljs-meta">#</span><span class="bash"> handled with more precision.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The range is between 1 and 500, however a value over 100 is usually not</span><br><br><span class="hljs-meta">#</span><span class="bash"> a good idea. Most users should use the default of 10 and raise this up to</span><br><br><span class="hljs-meta">#</span><span class="bash"> 100 only <span class="hljs-keyword">in</span> environments <span class="hljs-built_in">where</span> very low latency is required.</span><br><br>hz 10<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Normally it is useful to have an HZ value <span class="hljs-built_in">which</span> is proportional to the</span><br><br><span class="hljs-meta">#</span><span class="bash"> number of clients connected. This is useful <span class="hljs-keyword">in</span> order, <span class="hljs-keyword">for</span> instance, to</span><br><br><span class="hljs-meta">#</span><span class="bash"> avoid too many clients are processed <span class="hljs-keyword">for</span> each background task invocation</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> order to avoid latency spikes.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Since the default HZ value by default is conservatively <span class="hljs-built_in">set</span> to 10, Redis</span><br><br><span class="hljs-meta">#</span><span class="bash"> offers, and enables by default, the ability to use an adaptive HZ value</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">which</span> will temporary raise when there are many connected clients.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> When dynamic HZ is enabled, the actual configured HZ will be used as</span><br><br><span class="hljs-meta">#</span><span class="bash"> as a baseline, but multiples of the configured HZ value will be actually</span><br><br><span class="hljs-meta">#</span><span class="bash"> used as needed once more clients are connected. In this way an idle</span><br><br><span class="hljs-meta">#</span><span class="bash"> instance will use very little CPU time <span class="hljs-keyword">while</span> a busy instance will be</span><br><br><span class="hljs-meta">#</span><span class="bash"> more responsive.</span><br><br>dynamic-hz yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> When a child rewrites the AOF file, <span class="hljs-keyword">if</span> the following option is enabled</span><br><br><span class="hljs-meta">#</span><span class="bash"> the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> order to commit the file to the disk more incrementally and avoid</span><br><br><span class="hljs-meta">#</span><span class="bash"> big latency spikes.</span><br><br>aof-rewrite-incremental-fsync yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> When redis saves RDB file, <span class="hljs-keyword">if</span> the following option is enabled</span><br><br><span class="hljs-meta">#</span><span class="bash"> the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> order to commit the file to the disk more incrementally and avoid</span><br><br><span class="hljs-meta">#</span><span class="bash"> big latency spikes.</span><br><br>rdb-save-incremental-fsync yes<br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span><br><br><span class="hljs-meta">#</span><span class="bash"> idea to start with the default settings and only change them after investigating</span><br><br><span class="hljs-meta">#</span><span class="bash"> how to improve the performances and how the keys LFU change over time, <span class="hljs-built_in">which</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> is possible to inspect via the OBJECT FREQ <span class="hljs-built_in">command</span>.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> There are two tunable parameters <span class="hljs-keyword">in</span> the Redis LFU implementation: the</span><br><br><span class="hljs-meta">#</span><span class="bash"> counter logarithm factor and the counter decay time. It is important to</span><br><br><span class="hljs-meta">#</span><span class="bash"> understand what the two parameters mean before changing them.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The LFU counter is just 8 bits per key, it<span class="hljs-string">&#x27;s maximum value is 255, so Redis</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> uses a probabilistic increment with logarithmic behavior. Given the value</span><br><br><span class="hljs-meta">#</span><span class="bash"> of the old counter, when a key is accessed, the counter is incremented <span class="hljs-keyword">in</span></span><br><br><span class="hljs-meta">#</span><span class="bash"> this way:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1. A random number R between 0 and 1 is extracted.</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span><br><br><span class="hljs-meta">#</span><span class="bash"> 3. The counter is incremented only <span class="hljs-keyword">if</span> R &lt; P.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The default lfu-log-factor is 10. This is a table of how the frequency</span><br><br><span class="hljs-meta">#</span><span class="bash"> counter changes with a different number of accesses with different</span><br><br><span class="hljs-meta">#</span><span class="bash"> logarithmic factors:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> +--------+------------+------------+------------+------------+------------+</span><br><br><span class="hljs-meta">#</span><span class="bash"> | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span><br><br><span class="hljs-meta">#</span><span class="bash"> +--------+------------+------------+------------+------------+------------+</span><br><br><span class="hljs-meta">#</span><span class="bash"> | 0      | 104        | 255        | 255        | 255        | 255        |</span><br><br><span class="hljs-meta">#</span><span class="bash"> +--------+------------+------------+------------+------------+------------+</span><br><br><span class="hljs-meta">#</span><span class="bash"> | 1      | 18         | 49         | 255        | 255        | 255        |</span><br><br><span class="hljs-meta">#</span><span class="bash"> +--------+------------+------------+------------+------------+------------+</span><br><br><span class="hljs-meta">#</span><span class="bash"> | 10     | 10         | 18         | 142        | 255        | 255        |</span><br><br><span class="hljs-meta">#</span><span class="bash"> +--------+------------+------------+------------+------------+------------+</span><br><br><span class="hljs-meta">#</span><span class="bash"> | 100    | 8          | 11         | 49         | 143        | 255        |</span><br><br><span class="hljs-meta">#</span><span class="bash"> +--------+------------+------------+------------+------------+------------+</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> NOTE: The above table was obtained by running the following commands:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash">   redis-benchmark -n 1000000 incr foo</span><br><br><span class="hljs-meta">#</span><span class="bash">   redis-cli object freq foo</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> NOTE 2: The counter initial value is 5 <span class="hljs-keyword">in</span> order to give new objects a chance</span><br><br><span class="hljs-meta">#</span><span class="bash"> to accumulate hits.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The counter decay time is the time, <span class="hljs-keyword">in</span> minutes, that must elapse <span class="hljs-keyword">in</span> order</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">for</span> the key counter to be divided by two (or decremented <span class="hljs-keyword">if</span> it has a value</span><br><br><span class="hljs-meta">#</span><span class="bash"> less &lt;= 10).</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The default value <span class="hljs-keyword">for</span> the lfu-decay-time is 1. A Special value of 0 means to</span><br><br><span class="hljs-meta">#</span><span class="bash"> decay the counter every time it happens to be scanned.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> lfu-log-factor 10</span><br><br><span class="hljs-meta">#</span><span class="bash"> lfu-decay-time 1</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">########################## ACTIVE DEFRAGMENTATION #######################</span></span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested</span><br><br><span class="hljs-meta">#</span><span class="bash"> even <span class="hljs-keyword">in</span> production and manually tested by multiple engineers <span class="hljs-keyword">for</span> some</span><br><br><span class="hljs-meta">#</span><span class="bash"> time.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> What is active defragmentation?</span><br><br><span class="hljs-meta">#</span><span class="bash"> -------------------------------</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Active (online) defragmentation allows a Redis server to compact the</span><br><br><span class="hljs-meta">#</span><span class="bash"> spaces left between small allocations and deallocations of data <span class="hljs-keyword">in</span> memory,</span><br><br><span class="hljs-meta">#</span><span class="bash"> thus allowing to reclaim back memory.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Fragmentation is a natural process that happens with every allocator (but</span><br><br><span class="hljs-meta">#</span><span class="bash"> less so with Jemalloc, fortunately) and certain workloads. Normally a server</span><br><br><span class="hljs-meta">#</span><span class="bash"> restart is needed <span class="hljs-keyword">in</span> order to lower the fragmentation, or at least to flush</span><br><br><span class="hljs-meta">#</span><span class="bash"> away all the data and create it again. However thanks to this feature</span><br><br><span class="hljs-meta">#</span><span class="bash"> implemented by Oran Agra <span class="hljs-keyword">for</span> Redis 4.0 this process can happen at runtime</span><br><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">in</span> an <span class="hljs-string">&quot;hot&quot;</span> way, <span class="hljs-keyword">while</span> the server is running.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Basically when the fragmentation is over a certain level (see the</span><br><br><span class="hljs-meta">#</span><span class="bash"> configuration options below) Redis will start to create new copies of the</span><br><br><span class="hljs-meta">#</span><span class="bash"> values <span class="hljs-keyword">in</span> contiguous memory regions by exploiting certain specific Jemalloc</span><br><br><span class="hljs-meta">#</span><span class="bash"> features (<span class="hljs-keyword">in</span> order to understand <span class="hljs-keyword">if</span> an allocation is causing fragmentation</span><br><br><span class="hljs-meta">#</span><span class="bash"> and to allocate it <span class="hljs-keyword">in</span> a better place), and at the same time, will release the</span><br><br><span class="hljs-meta">#</span><span class="bash"> old copies of the data. This process, repeated incrementally <span class="hljs-keyword">for</span> all the keys</span><br><br><span class="hljs-meta">#</span><span class="bash"> will cause the fragmentation to drop back to normal values.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> Important things to understand:</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 1. This feature is disabled by default, and only works <span class="hljs-keyword">if</span> you compiled Redis</span><br><br><span class="hljs-meta">#</span><span class="bash">    to use the copy of Jemalloc we ship with the <span class="hljs-built_in">source</span> code of Redis.</span><br><br><span class="hljs-meta">#</span><span class="bash">    This is the default with Linux builds.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 2. You never need to <span class="hljs-built_in">enable</span> this feature <span class="hljs-keyword">if</span> you don<span class="hljs-string">&#x27;t have fragmentation</span></span><br><br><span class="hljs-meta">#</span><span class="bash">    issues.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> 3. Once you experience fragmentation, you can <span class="hljs-built_in">enable</span> this feature when</span><br><br><span class="hljs-meta">#</span><span class="bash">    needed with the <span class="hljs-built_in">command</span> <span class="hljs-string">&quot;CONFIG SET activedefrag yes&quot;</span>.</span><br><br><span class="hljs-meta">#</span><br><br><span class="hljs-meta">#</span><span class="bash"> The configuration parameters are able to fine tune the behavior of the</span><br><br><span class="hljs-meta">#</span><span class="bash"> defragmentation process. If you are not sure about what they mean it is</span><br><br><span class="hljs-meta">#</span><span class="bash"> a good idea to leave the defaults untouched.</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Enabled active defragmentation</span><br><br><span class="hljs-meta">#</span><span class="bash"> activedefrag yes</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Minimum amount of fragmentation waste to start active defrag</span><br><br><span class="hljs-meta">#</span><span class="bash"> active-defrag-ignore-bytes 100mb</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Minimum percentage of fragmentation to start active defrag</span><br><br><span class="hljs-meta">#</span><span class="bash"> active-defrag-threshold-lower 10</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Maximum percentage of fragmentation at <span class="hljs-built_in">which</span> we use maximum effort</span><br><br><span class="hljs-meta">#</span><span class="bash"> active-defrag-threshold-upper 100</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Minimal effort <span class="hljs-keyword">for</span> defrag <span class="hljs-keyword">in</span> CPU percentage</span><br><br><span class="hljs-meta">#</span><span class="bash"> active-defrag-cycle-min 5</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Maximal effort <span class="hljs-keyword">for</span> defrag <span class="hljs-keyword">in</span> CPU percentage</span><br><br><span class="hljs-meta">#</span><span class="bash"> active-defrag-cycle-max 75</span><br><br> <br><br><span class="hljs-meta">#</span><span class="bash"> Maximum number of <span class="hljs-built_in">set</span>/<span class="hljs-built_in">hash</span>/zset/list fields that will be processed from</span><br><br><span class="hljs-meta">#</span><span class="bash"> the main dictionary scan</span><br><br><span class="hljs-meta">#</span><span class="bash"> active-defrag-max-scan-fields 1000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;首先在宿主机创建一个redis目录，然后将默认的redis.conf文件复制到该目录下。如果没有，可以使用下面提供的配置。然后修改redis.conf目录下的配置，主要修改：&lt;code&gt;bind&lt;/code&gt;，注释或者改为允许连接的ip地址，一般设置为0.0.0.0；&lt;code&gt;requirepass&lt;/code&gt; 设置密码；·&lt;code&gt;daemonize&lt;/code&gt;修改为no，不是后台启动，否则与docker run -d 冲突。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker基本命令</title>
    <link href="http://example.com/2022/05/29/docker%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/05/29/docker%E5%91%BD%E4%BB%A4/</id>
    <published>2022-05-29T13:57:52.350Z</published>
    <updated>2022-05-29T14:26:13.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h1><a id="more"></a><ul><li>docker pull：拉取镜像</li><li>docker images：查看安装的镜像</li><li>docker rmi：删除镜像</li><li>docker push：推送镜像到远程服务器</li><li>docker save ：将镜像导出到磁盘    <code>docker save -o nginx.tar nginx:latest</code>   将nginx:latest 镜像导出到磁盘,文件名叫nginx.tar</li><li>docker load：将本地文件加载进docker <code>docker load -i nginx.tar</code>   将nginx.tar 加载进docker</li></ul><h1 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h1><ul><li>docker run：创建并运行容器<ul><li><code>docker run --name mn-p 80:80 -d nginx</code></li><li>– name：给容器起一个名字</li><li>-p 端口映射，左边是宿主机端口，右边是容器端口</li><li>-d 后台运行容器</li><li>nginx 镜像名称</li></ul></li><li>docker pause: 让容器从运行到暂停</li><li>docker unpause： 从暂停到运行</li><li>docker start：从停止到运行</li><li>docker stop：容器从运行到停止</li><li>docker ps：查看所有运行的容器及状态<ul><li>-a：可以看到被停止的容器信息</li></ul></li><li>docker logs：查看容器运行的日志<ul><li>-f  持续查看日志，和linux中的tail一样，会显示最新的日志</li></ul></li><li>docker exec：进入容器执行命令<ul><li><code>docker exec -it mn bash</code></li><li>-it：给当前进入的容器创建一个标准输入输出端，允许我们与容器交互</li><li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul></li><li>docker rm：删除指定容器<ul><li>-f：强制删除容器</li></ul></li><li>docker cp 容器名称 容器内路径 宿主机路径 ：复制容器内的文件到宿主机上</li><li>docker export 容器名称 &gt; 名称.tar：将容器导出为一个tar归档文件</li><li>cat 名称.tar | docker import -镜像用户/镜像名:镜像版本号: 从tar包中的内容创建一个新的文件系统再导入为镜像</li></ul><h1 id="数据卷命令"><a href="#数据卷命令" class="headerlink" title="数据卷命令"></a>数据卷命令</h1><ul><li>docker volume create： 创建数据卷</li><li>docker volume ls： 查看所有数据卷</li><li>docker volume inspact：查看某个数据卷具体信息，mountpoint为挂载点</li><li>docker volume rm：删除某个指定的数据卷</li><li>docker volume prune：删除没使用的数据卷</li></ul><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220504221503531.png" alt="image-20220504221503531"></p><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><blockquote><p>docker compose 可以基于compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容易</p><p>compose文件是一个文本文件，通过指定定义集群中的每个容器如何运行</p></blockquote><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220505210454160.png" alt="image-20220505210454160"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;镜像命令&quot;&gt;&lt;a href=&quot;#镜像命令&quot; class=&quot;headerlink&quot; title=&quot;镜像命令&quot;&gt;&lt;/a&gt;镜像命令&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2022/05/29/git/"/>
    <id>http://example.com/2022/05/29/git/</id>
    <published>2022-05-29T13:57:12.875Z</published>
    <updated>2022-05-29T14:26:56.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><a id="more"></a><blockquote><p>Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点， 将文档的状态作为更新记录保存起来，也可以在任何时间点， 将更新记录恢复回来。</p></blockquote><h1 id="Git工作机制"><a href="#Git工作机制" class="headerlink" title="Git工作机制"></a>Git工作机制</h1><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423163817744.png" alt="image-20220423163817744"></p><p><strong>代码托管中心是基于网络服务器的远程代码仓库，我们一般简单称为远程库，如gitee，github</strong></p><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><table><thead><tr><th><strong>命令名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td><strong>git init</strong></td><td><strong>初始化本地库</strong></td></tr><tr><td><strong>git status</strong></td><td><strong>查看本地库状态</strong></td></tr><tr><td><strong>git add 文件名</strong></td><td><strong>添加到暂存区</strong></td></tr><tr><td><strong>git commit m “ 日志信息 “ 文件名</strong></td><td><strong>提交到本地库</strong></td></tr><tr><td><strong>git reflog</strong></td><td><strong>查看历史记录</strong></td></tr><tr><td><strong>git log</strong></td><td><strong>查看历史记录，详细信息</strong></td></tr><tr><td><strong>git reset hard 版本号</strong></td><td><strong>版本穿梭</strong></td></tr></tbody></table><h1 id="Git使用前配置"><a href="#Git使用前配置" class="headerlink" title="Git使用前配置"></a>Git使用前配置</h1><blockquote><p>在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p><ol><li><p>配置提交人姓名：git config –global user.name “提交人姓名” # (对当前系统用户有效)</p></li><li><p>配置提交人邮箱：git config –global user.email  “提交人邮箱” # (对当前系统用户有效)</p><p>作用：识别开发人员，与登良github的账户无关</p></li><li><p>查看git配置信息：git config –list</p></li></ol><p>注意<br>1.如果要对配置信息进行修改，重复上述命令即可。</p><ol start="2"><li>配置只需要执行一次。</li></ol><p><strong>自己 <code>C:\Users\Augenestern</code> 下有个 <code>.gitconfig</code> 文件，打开里面就是我们设置的用户签名</strong></p></blockquote><h1 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h1><ul><li>初始化本地库：<code>git init</code><ul><li>git定位到要操作的文件目录，输入<code>git init</code>,生成一个.git的隐藏文件夹</li></ul></li><li>查看本地库状态：<code>git status</code><ul><li><code>git status</code>后有红色的表示该文件未被添加到暂存区</li></ul></li><li>添加暂存区：<code>git add 文件名</code><ul><li>添加成功后，<code>git status</code>会用绿色显示文件名</li><li>使用<code>git rm --cached 文件名</code>删除暂存区文件，只是删除暂存区，工作区文件还在</li><li>使用<code>git rm -r --cached .</code>清空暂存区文件</li></ul></li><li>提交本地库：<code>git commit -m &quot;日志信息&quot; 文件名</code><ul><li>提交之后，<code>git status</code>无文件显示</li></ul></li><li>查看历史版本：<code>git reflog</code>  查看版本信息  <code>git log</code>  查看版本详细信息</li><li>版本穿梭：<code>git reset --hard 版本号</code><ul><li>可以将版本恢复到指定版本号的版本</li></ul></li></ul><h2 id="图文讲解"><a href="#图文讲解" class="headerlink" title="图文讲解"></a>图文讲解</h2><p><strong>设置用户签名</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423165805821.png" alt="image-20220423165805821"></p><p><strong>初始化本地库</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423165848541.png" alt="image-20220423165848541"></p><p><strong>查看本地库状态</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423165926361.png" alt="image-20220423165926361"></p><p><strong>新增文件后查看状态</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423165958038.png" alt="image-20220423165958038"></p><p><strong>添加暂存区</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170017367.png" alt="image-20220423170017367"></p><p><strong>提交本地库</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170032291.png" alt="image-20220423170032291"></p><p><strong>修改文件</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170116877.png" alt="image-20220423170116877"></p><p><strong>查看历史版本</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170213186.png" alt="image-20220423170213186"></p><p><strong>版本穿梭</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170235756.png" alt="image-20220423170235756"></p><p><strong>版本切换原理</strong></p><p>Git 切换版本，底层其实是移动的HEAD 指针</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170324500.png" alt="image-20220423170324500"></p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><blockquote><ul><li>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支</li><li>使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行</li><li>对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本</li></ul><p>分支的好处是同时并行推进多个功能开发，提高开发效率。</p><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</p></blockquote><h1 id="分支常用命令"><a href="#分支常用命令" class="headerlink" title="分支常用命令"></a>分支常用命令</h1><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><ul><li><p>查看分支：<code>git branch -v</code></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423171330263.png" alt="image-20220423171330263"></p></li><li><p>创建分支：<code>git branch 分支名</code></p></li></ul><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423171405996.png" alt="image-20220423171405996"></p><ul><li><p>切换分支：<code>git checkout 分支名</code></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423171442859.png" alt="image-20220423171442859"></p></li><li><p>修改分支</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423171507205.png" alt="image-20220423171507205"></p></li><li><p>合并分支：<code>git merge 分支名</code></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423173526151.png" alt="image-20220423173526151"></p></li><li><blockquote><p>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。</p><p>有两套完全不同的修改。 Git无法替我们决定使用哪一个。必须 人为决定新代码内容。</p></blockquote><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/4e603c5ffb3f4383a1082cade9b10a4d.png" alt="在这里插入图片描述"></p></li></ul><p>head 到 == 之前是主分支的代码，== 到 hot-fix 之前是hot-fix的代码，删除掉不需要保留的代码即可，同时删除三个标志位</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/0db79fb0322441b8bbed5c0434e07066.png" alt="在这里插入图片描述"></p><h1 id="Git团队协作"><a href="#Git团队协作" class="headerlink" title="Git团队协作"></a>Git团队协作</h1><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183055973.png" alt="image-20220423183055973"></p><h1 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h1><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183132491.png" alt="image-20220423183132491"></p><h1 id="Git和github"><a href="#Git和github" class="headerlink" title="Git和github"></a>Git和github</h1><h2 id="远程库操作"><a href="#远程库操作" class="headerlink" title="远程库操作"></a>远程库操作</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容克隆到本地</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td></tr></tbody></table><h2 id="推送到github步骤"><a href="#推送到github步骤" class="headerlink" title="推送到github步骤"></a>推送到github步骤</h2><p><strong>创建远程库</strong></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183208786.png" alt="image-20220423183208786"></p><p><strong>起别名</strong>：<code>git remote add 别名 远程地址</code></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183629968.png" alt="image-20220423183629968"></p><p><strong>推送到远程库</strong>：<code>git push 别名 分支</code></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183701561.png" alt="image-20220423183701561"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux无法ping通外网的问题</title>
    <link href="http://example.com/2022/05/29/Linux%E6%97%A0%E6%B3%95ping%E9%80%9A%E5%A4%96%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/05/29/Linux%E6%97%A0%E6%B3%95ping%E9%80%9A%E5%A4%96%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-05-29T13:56:56.955Z</published>
    <updated>2022-05-29T13:55:56.193Z</updated>
    
    <content type="html"><![CDATA[<p>今天重新装了一个Linux系统，下载东西的时候报出如下错误:</p><p><code>Cannot find a valid baseurl for repo: base/7/x86_64</code></p><a id="more"></a><p>然后使用ping命令发现无法ping通外网</p><p>需要设置一下DNS信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">vim /etc/resolv.conf<br><br>在里面加入如下配置<br>nameserver=8.8.8.8<br>nameserver=8.8.4.4<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天重新装了一个Linux系统，下载东西的时候报出如下错误:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cannot find a valid baseurl for repo: base/7/x86_64&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>windows端口命令</title>
    <link href="http://example.com/2022/05/29/window%E7%AB%AF%E5%8F%A3%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/05/29/window%E7%AB%AF%E5%8F%A3%E5%91%BD%E4%BB%A4/</id>
    <published>2022-05-29T13:56:53.473Z</published>
    <updated>2022-05-30T01:09:43.180Z</updated>
    
    <content type="html"><![CDATA[<p>在控制台输入<code>netstat</code> 可以查看所有端口占用情况</p><a id="more"></a><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503110733768.png" alt="image-20220503110733768"></p><p>输入<code>netstat -ano</code>可以查看所有端口占用详细信息，包括父进程的pid</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503110720513.png" alt="image-20220503110720513"></p><p>输入<code>netstat -ano|findstr &quot;端口号&quot;</code>可以查看到具体的端口占用情况，有点类似于linux的 <code>grep</code></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503110919357.png" alt="image-20220503110919357"></p><p>使用<code>tasklist</code>可以查看所有进程的情况</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503111010735.png" alt="image-20220503111010735"></p><p>使用<code>tasklist|findstr &quot;进程号&quot;</code>可以查看具体进程的情况</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503111115078.png" alt="image-20220503111115078"></p><p>使用<code>taskkill /pid 进程号</code>可以杀死一个进程</p><p>使用<code>taskkill /F /pid 进程号</code>可以强制杀死一个进程</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在控制台输入&lt;code&gt;netstat&lt;/code&gt; 可以查看所有端口占用情况&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="http://example.com/2022/05/29/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/05/29/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-05-29T13:17:45.495Z</published>
    <updated>2022-05-29T13:31:37.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h2><h3 id="三种常见模式："><a href="#三种常见模式：" class="headerlink" title="三种常见模式："></a>三种常见模式：</h3><ul><li><p>正常模式</p><p>在正常模式下，我们可以使用快捷键。</p></li><li><p>插入模式/编辑模式</p><p>在这个模式下，程序猿可以输入内容。</p></li><li><p>命令行模式</p><p>在这个模式中，可以提供相关指令。</p><a id="more"></a></li></ul><h3 id="快捷键使用练习："><a href="#快捷键使用练习：" class="headerlink" title="快捷键使用练习："></a>快捷键使用练习：</h3><ul><li>yy：拷贝当前行</li><li>5yy：拷贝当前5行</li><li>dd：删除当前行</li><li>5dd：删除当前行向下的5行</li><li>在文件中查找某个单词：命令行输入 /（查找内容），按n查找下一个,N向上查找</li><li>设置文件行号：set nu，取消文件行号：set nonu</li><li>编辑文件，正常模式下使用快捷键到达文档最末行：G，最首行：gg</li><li>撤销输入：在正常模式下输入u</li><li>编辑文件，光标移动到某行：shift+g<ul><li>显示行号：set nu</li><li>输入行号这个数</li><li>输入shift+g</li></ul></li></ul><h2 id="关机、重启和用户登录注销"><a href="#关机、重启和用户登录注销" class="headerlink" title="关机、重启和用户登录注销"></a>关机、重启和用户登录注销</h2><ul><li>shutdown -h now：表示立即关机</li><li>shutdown -h 1：表示1分钟后关机</li><li>shutdown -r now：立即重启</li><li>halt：直接使用，关机</li><li>reboot：重启</li><li>sync：把内存的数据同步到磁盘上，<strong>当我们关机或者重启时，都应该先执行一下sync，防止数据丢失</strong>。</li><li>logout：注销用户，<strong>在图形运行级别无效，在运行级别3有效</strong>。</li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>用户，组，家目录。</p><ol><li>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</li><li>Linux的用户需要至少要属于一个组。</li></ol><ul><li>添加用户：useradd [选项] 用户名。</li><li>cd：表示change directory，切换目录。</li><li>当创建用户成功后，会自动的创建和用户同名的家目录。</li><li>也可以通过useradd -d 指定目录 新的用户名。</li><li>指定/修改密码：passwd 用户名</li><li>删除用户，保留家目录：userdel 用户名，<strong>一般保留家目录，因为干过的活要留着</strong>。</li><li>删除用户以及家目录：userdel -r 用户名</li><li>查询用户信息：id 用户名</li><li>切换用户：su - 切换用户名，<strong>从权限高切换到权限低的用户不需要输密码</strong>。</li><li>返回切换前的用户：exit</li><li>查看当前用户/登录用户：who am i</li><li>用户组：类似于角色，系统可以对有共性的多个用户进行统一的管理。</li><li>增加组：groupadd 组名</li><li>删除组：groupdel 组名</li><li>增加用户时直接加上组：useradd -g 用户组 用户名</li><li>修改用户组：usermod -g 用户组 用户名</li></ul><ol start="3"><li>/etc/passwd 文件</li></ol><ul><li>用户（user）的配置文件，记录用户的各种信息。</li><li>每行的含义：用户名：口令：用户标识号：注释性描述：主目录：登录shell</li></ul><ol start="4"><li>/etc/shadow 文件</li></ol><ul><li>口令配置文件</li><li>每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</li></ul><ol start="5"><li>/etc/group 文件</li></ol><ul><li>组（group）的配置文件，记录Linux包含的组的信息。</li><li>每行含义：组名：口令：组标识号：组内用户列表</li></ul><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><ul><li><p>pwd：Print Working Directory，显示当前工作目录的绝对路径。</p></li><li><p>ls：-a：显示当前目录所有的文件和目录，包括隐藏的；-l：以列表的方式显示信息。</p></li><li><p>cd：cd ~：回到自己的家目录；cd ..：回到当前目录的上一级目录。</p></li><li><p>mkdir：创建目录；-p：创建多级目录。</p></li><li><p>rmdir：删除空目录。rmdir不能删除非空的目录。如果需要删除非空的目录，需要使用rm -rf。</p></li><li><p>touch：创建空文件。可以一次性创建多个文件</p></li><li><p>cp：拷贝文件到指定目录；-r：递归复制整个文件夹。强制覆盖不提示的方法：cp命令改为\cp</p></li><li><p>rm：移除文件或目录；-r：递归删除整个文件夹；-f：强制删除不提示。</p></li><li><p>mv：移动文件与目录或重命名，两种功能！</p></li><li><p>cat：查看文件内容。只能浏览文件，而不能修改文件。-n：显示行号。结尾加上 | more：分页显示，不会全部一下显示完。</p></li><li><p>more：是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more还内置了很多快捷键：</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键（Space）</td><td>向下翻一页</td></tr><tr><td>Enter</td><td>向下翻一行</td></tr><tr><td>q</td><td>立刻离开more，不再显示该文件内容</td></tr><tr><td>Ctrl + F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl + B</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>：f</td><td>输出文件名和当前行的行号</td></tr></tbody></table></li><li><p>less：用来分屏查看文件内容，与more相似，但是更强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容。<strong>对于显示大型文件具有较高的效率。</strong></p></li></ul><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键（Space）</td><td>向下翻一页</td></tr><tr><td>[pagedown]</td><td>向下翻一行</td></tr><tr><td>[pageup]</td><td>向上翻动一页</td></tr><tr><td>/字串</td><td>向下搜寻字串的功能；n向下找，N向上找</td></tr><tr><td>？子串</td><td>向上搜寻字串的功能；n向上找，N向下找   （n正向）</td></tr><tr><td>q</td><td>离开less这个程序</td></tr></tbody></table><ul><li><code>&gt;</code>指令：输出重定向。如果不存在会创建文件，否则会将原来的文件内容覆盖。</li><li><code>&gt;&gt;</code>指令：追加。如果不存在会创建文件，否则不会覆盖原来的文件内容，而是追加到文件的尾部。</li><li>cat是查看，echo是写入，echo （内容） &gt;&gt; 文件</li><li>cal：显示当前月日历。</li><li>echo：输出内容到控制台。</li><li>head：显示文件的开头部分。-n 5：看前面5行内容。</li><li>tail：输出文件中尾部的内容。-n 5：看后面5行内容。-f：时事追踪该文档的所有更新</li><li>ln -s :建立软连接 </li><li>history: 查看历史指令</li></ul><h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><ul><li>date：显示当前日期和时间</li><li>date “+%Y”：显示当前年份</li><li>date “+%d”：显示当前月份</li><li>date “+%Y-%m-%d %H:%M:%S”：显示年-月-日 时：分：秒</li><li>设置日期：date -s 字符串时间</li><li>cal：查看日历指令；cal 年份：显示某一年一整年的日历</li></ul><h2 id="搜索查找"><a href="#搜索查找" class="headerlink" title="搜索查找"></a>搜索查找</h2><ul><li>find：从指定目录向下递归的遍历其各个子目录，将满足条件的文件或者目录显示在终端。<ul><li>find (搜索范围) -name (文件名)：按照指定的文件名查找模式查找文件。</li><li>find (搜索范围) -user (用户名)：按照指定的用户名查找模式查找文件。</li><li>find (搜索范围) -size (+多少/-多少/多少)：按照指定的文件大小查找模式查找文件（大于多少/小于多少/等于多少）</li><li><strong>查询 /目录下所有.txt的文件</strong>：find / -name *.txt</li><li>根据文件名删除文件：<code>find . -name 文件名 | xargs rm -rf</code></li></ul></li><li>locate： locate (搜索文件)<ul><li>可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</li><li>在第一次运行之前，<strong>必须使用updatedb指令创建locate数据库</strong>。</li></ul></li><li>grep：过滤查找，表示将前一个命令的处理结果输出传递给后面的命令处理。经常跟管道一起使用。<ul><li>grep [选项] 查找内容 源文件</li><li>-n：显示匹配行及行号。</li><li>-i：忽略大小写字母。</li><li><code>cat hello.txt | grep &quot;yes&quot;</code></li></ul></li></ul><h2 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h2><ul><li>gzip/gunzip：压缩文件/解压<ul><li>gzip (文件)：压缩为.gz文件，原来文件不保留。</li><li>gunzip (文件)：解压缩，同样也不保留源文件。</li></ul></li><li>zip/unzip：压缩文件/解压<ul><li>zip [选项] (压缩后文件xxx.zip) (将要压缩的文件)</li><li>unzip [选项] (要解压的文件xxx.zip)</li><li>zip -r：递归压缩，即压缩目录</li><li>unzip -d (目录)：指定解压后的文件的存放目录</li></ul></li><li>tar：打包指令，最后打包后的文件是.tar.gz的文件<ul><li>tar [选项] xxx.tar.gz (打包的内容)</li><li>-c：产生.tar打包文件</li><li>-v：显示详细信息</li><li>-f：指定压缩后的文件名</li><li>-z：打包同时压缩</li><li>-x：解压.tar文件</li><li>压缩：tar -zcvf (压缩后文件名) (要压缩的文件)</li><li>解压：tar -zxvf (要解压的文件)</li><li>解压到指定目录：tar -zxvf (要解压的文件) -C (指定目录)，指定解压到的目录要存在。</li></ul></li></ul><h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><p>在Linux中每个用户必须属于一个组，不能独立于组外。每个文件有所有者、所在组、其他组概念</p><ol><li>所有者</li><li>所在组</li><li>其他组</li><li>改变用户所在组</li></ol><ul><li>文件/目录所有者：<ul><li>一般为文件的创建者，谁创建了该文件，就自然的称为该文件的所有者。</li><li>查看文件所有者：ls -ahl</li><li>修改文件所有者：chown (用户名) (文件名)</li><li>文件所在组不一定是文件所有者。</li></ul></li><li>组的创建<ul><li>groupadd (组名)</li></ul></li><li>文件/目录所在组<ul><li>修改文件所在组：chgrp (组名) (文件名)</li></ul></li><li>其他组<ul><li>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</li></ul></li><li>改变用户所在组<ul><li>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在的组</li><li>改变用户所在组：usermod -g 组名 用户名</li><li>改变用户登录的初始目录：usermod -d 目录名 用户名</li></ul></li></ul><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-rw-r--r--.  1 zwj  root       0 4月   5 18:20 apple.txt<br></code></pre></td></tr></table></figure><p>第0位是符号类型</p><ul><li><p>文件类型：</p><ul><li>-：普通类型</li><li>d：目录</li><li>l：软连接  相当于快捷方式</li><li>c：字符设备【键盘、鼠标等】</li><li>b：块文件【硬盘】</li></ul></li><li><p>rw-：表示文件所有者权限（rw，读写）(第1-3位)</p></li><li><p>r–：表示文件所在组的用户的权限（r，只有读的权限）（第4-6位）</p></li><li><p>r–：表示文件其他组的用户的权限（r，只有读的权限）（第7-9位）</p></li><li><p>1：如果是文件，表示硬连接的数；如果是目录则表示该目录的子目录个数</p></li><li><p>zwj：文件所有者</p></li><li><p>root：文件所在组</p></li><li><p>0：文件的大小，0个字节；如果是目录，则统一为4096</p></li><li><p>July 1 13：40：文件最后的修改时间</p></li><li><p>apple.txt：文件名</p></li></ul><ul><li><p>rwx作用到文件：</p><ul><li>r：read，可读。读取查看。</li><li>w：write，可以修改。但不代表可以删除该文件。删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件。</li><li>x：execute，可执行。可以被执行。</li></ul></li><li><p>rwx作用到目录：</p><ul><li>r：可以读取，ls查看目录内容。</li><li>w：可以修改，目录内创建+删除+重命名目录。</li><li>x：可执行，可以进入该目录。</li></ul></li><li><p>修改权限 chmod</p><ul><li>修改文件或者目录的权限</li><li>u：所有者；g：所在组；o：其他人；a：所有人（u、g、o的总和）</li><li>chmod u=rwx，g=rx，o=x 文件目录名：分别权限</li><li>chmod o+w 文件目录名：给其他人都增加写的权限</li><li>chmod a-x 文件目录名：给所有的用户都减掉执行权限</li></ul></li><li><p>通过数字变更权限</p><ul><li>规则：r=4 w=2 x=1 rwx=4+2+1=7</li><li>chmod u=rwx，g=rx，o=x 文件目录名 <strong>等价于</strong> chmod 751 文件目录名</li></ul></li><li><p>修改文件所有者 chown</p><ul><li>chown newowner file：改变文件的所有者</li><li>chown newowner：newgroup file：改变文件的所有者和所在组</li><li>-R：如果是目录，则使其下所有子文件或目录递归生效</li></ul></li><li><p>修改文件所在组 chgrp</p><ul><li>chgrp newgroup file：改变文件的所有组</li><li>-R：如果是目录，则使其下所</li></ul></li></ul><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><ul><li><p>rond任务调度：crontab进行定时任务调度</p><ul><li>crontab [选项]</li><li>-e：编辑crontab定时任务</li><li>-l：查询crontab任务</li><li>-r：删除当前用户所有的crontab任务</li><li>service crond restart：重启任务调度</li><li>当保存退出后就生效了</li></ul><p><strong>快速入门</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 设置任务调度文件： <br>/etc/crontab<br><br>#设置个人任务调度,执行crontab -e命令，接着输入任务到调度文件，如：<br>*/1 * * * * ls -l /etc/ &gt; /tmp/to.txt     #每个* 之前有空格<br>意思是每小时的每分钟执行 ls -l /etc/ &gt; /tmp/to.txt 命令<br></code></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个“*”</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个“*”</td><td>一天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个“*”</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个“*”</td><td>一年当中的第几月</td><td>1-12</td></tr><tr><td>第五个“*”</td><td>一周当中的星期几</td><td>0-7（0和7都代表星期日）</td></tr></tbody></table></li><li><p>特殊符号说明</p><ul><li><code>*</code>：代表任何时间。比如第一个<code>*</code>就代表一小时中每分钟都执行一次的意思。</li><li><code>,</code>：代表不连续的时间。比如“0 8,12,16 * * *命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令。</li><li><code>-</code>：代表连续的时间范围。比如“0 5 * * 1-6命令”，代表在周一到周六的凌晨5点0分执行命令。</li><li><code>*/n</code>：代表每隔多久执行一次。比如“*/10 * * * * 命令”，代表每隔10分钟就执行一遍命令。</li></ul><p>** 特定时间执行任务案例</p></li></ul><table><thead><tr><th>时间</th><th>含义</th></tr></thead><tbody><tr><td>45 22 * * * 命令</td><td>22点45分执行命令</td></tr><tr><td>0 17 * * 1 命令</td><td>每周一的17点执行</td></tr><tr><td>0 5 1,15 * * 命令</td><td>每月的1号和15号的5点执行</td></tr><tr><td>40 4 * * 1-5 命令</td><td>每周一到周五的4点40执行</td></tr><tr><td>*/10 4 * * * 命令</td><td>每天的4点每隔10分钟执行</td></tr><tr><td>0 0 1,15 * 1 命令</td><td>每月1号和15号、周一的零点执行，星期和几号最好不要同时出现</td></tr></tbody></table><h3 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h3><blockquote><ol><li>at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行。</li><li>默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</li><li>at命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</li><li>在使用at命令的时候，一定要保证atd进程的启动，可以使用相关指令来查看</li><li>ps -ef | grep atd //可以检测atd是否在运行    ps - ef 可以查看所有运行的进程</li></ol></blockquote><ul><li>atq：查看当前任务</li><li>atrm: 删除已经设置的任务，atrm 任务编号</li></ul><p><strong>案例</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 两分钟后把时间写到xx.log<br>at now + 2 minutes  回车<br>at&gt; date &gt; /home/xx.log   输入完按两次 Ctrl+D<br><br>#两天后的下午5点执行 /bin/li/home<br>at 5pm + 2 days   回车<br>at&gt; /bin/ls/home  输入完按两次 Ctrl+D<br></code></pre></td></tr></table></figure><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><blockquote><p>Linux来说无论有几个分区，分给哪一个目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>Linux采用了一种叫做“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p></blockquote><ul><li><p>硬盘说明</p><ul><li>Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</li><li>lsblk -f：查看当前系统的分区和挂载情况。（list block）</li><li>lsblk: 查看系统分区情况</li></ul></li><li><p>新增硬盘的操作</p><ul><li>虚拟机添加硬盘</li><li>分区：fdsk  /dev/sdb（sdb是新增加的硬盘的名字)</li><li>格式化：mkfs -t ext4 /dev/sdb1  (sdb1是刚才分区的名字)</li><li>挂载：新建目录：mkdir /home/newdisk；挂载：mount /dev/sdb1 /home/newdisk , ==将sdb1挂载到 /home/newdisk目录下，这样保存到 /home/newdisk目录下的文件就保存到 sdb1硬盘中==</li><li>设置可以自动挂载（永久挂载）：重启系统后，仍然可以挂载。vim etc/fstab 增加挂载信息。mount -a：生效</li><li>取消挂载：unmount /dev/sdb1</li></ul></li><li><p>磁盘情况查询：</p><ul><li>查询系统整体磁盘使用情况：df -h 、  df -l</li><li>查询指定目录的磁盘占用情况：du -h /目录，默认为当前目录<ul><li>-s：指定目录占用大小汇总</li><li>-h：带计量单位</li><li>-a：含文件</li><li>–max-depth=1：子目录深度</li><li>-c：列出明细的同时，增加汇总值</li></ul></li></ul></li><li><p>磁盘情况-工作实用指令</p><ol><li>统计/home文件夹下文件的个数：<code>ls -l /home | grep &quot;^-&quot; | wc -l</code>  <strong>wc的功能是进行统计，“^-” 是正则表达式，以-开头的</strong></li><li>统计/home文件夹下目录的个数：<code>ls -l /home | grep &quot;^d&quot; | wc -l</code></li><li>统计/home文件夹下文件的个数，包括子文件夹里的：<code>ls -lR /home | grep &quot;^-&quot; | wc -l</code></li><li>统计文件夹下目录的个数，包括子文件夹里的：<code>ls -lR /home | grep &quot;^d&quot; | wc -l</code></li><li>以树状显示目录结构：首先安装tree指令：yum install tree，tree</li></ol></li></ul><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><ul><li>指定固定IP：直接修改配置文件来指定IP，并可以连接到外网，编辑：vim /etc/sysconfig/network-scripts/ifcfg-eth33。修改如下只<ul><li>BOOTPROTO=static  <em>静态分配</em></li><li>IPADDR= 192.168.200.139  <em>ip地址</em></li><li>GETWAY=192.168.200.2<em>网关</em></li><li>DNS1=192.168.200.2 <em>域名解析器</em></li><li>重启网络服务 （service network restart)  或重启系统生效(reboot)</li></ul></li><li>设置主机名 : vim/etc/hostname</li><li>查看主机名:hostname</li><li>设置ip和主机名的映射关系<ul><li>windows:  C:\windows\System2\drivers\etc\hosts，添加映射关系</li><li>linux：在etc/hosts 文件中添加</li></ul></li></ul><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul><li><p>在Linux中，每个执行的<strong>程序（代码）</strong>都称为一个进程。每个进程都分配一个ID号</p></li><li><p>每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器。</p></li><li><p>每个进程都可能以两种方式存在：前台和后台</p><ul><li>前台进程：用户目前的屏幕上可以进行操作的。</li><li>后台进程：实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</li></ul></li><li><p>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中，直到关机才结束。</p></li><li><p>显示系统执行的进程</p><ul><li>ps：查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数。PID：进程识别号；TTY：终端机号；TIME：此进程所消耗的CPU时间；CMD：正在执行的命令或进程名</li><li>ps -a：显示当前终端的所有进程信息。</li><li>ps -u：以用户的格式显示进程信息。</li><li>ps -x：显示后台进程运行的参数。</li><li>ps -axu | grep xxx：过滤得到xxx的信息。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">System V展示风格<br><br>USER:用户名称<br><br>PID:进程号<br><br>%CPU:进程占用CPU的百分比<br><br>%MEM:进程占用物理内存的百分比<br><br>VSZ:进程占用的虚拟内存大小（单位:KB)<br><br>RSS:进程占用的物理内存大小(单位:KB)<br><br>TT:终端名称,缩写<br><br>STAT:进程状态，其中S-睡眠,s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等<br><br>STARTED:进程的启动时间<br><br>TIME:CPU时间，即进程使用CPU的总时间<br><br>COMMAND:启动进程所用的命令和参数，如果过长会被截断显示<br></code></pre></td></tr></table></figure><ul><li>ps -ef：以全格式显示当前所有的进程，查看进程的父进程。</li><li>-e：显示所有进程。</li><li>-f：全格式。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">UID:用户ID<br><br>PID:进程ID<br><br>PPID:父进程ID<br><br>C: CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低;数值越小，表明进程是IO密集型运算，执行优先级会提高<br><br>STIME:进程启动的时间<br><br>TTY:完整的终端名称<br><br>TIME:CPU时间<br><br>CMD:启动进程所用的命令和参数<br></code></pre></td></tr></table></figure></li><li><p>终止进程</p><ul><li>kill [选项] 进程号：通过进程号杀死进程</li><li>killall 进程名称：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</li><li>-9：表示强迫进程立刻停止</li><li>案例1：踢掉非法用户：kill 进程号</li><li>案例2：终止远程登录服务sshd，在适当时候再次重启sshd服务  :kill sshd对应的进程号， 重启： /bin/systemctl start sshd.service</li><li>案例3：终止多个gedit编辑器：killall 进程名称</li><li>案例4：强制杀掉一个终端：kill -9 进程号</li></ul></li><li><p>查看进程树：pstree [选项]</p><ul><li>-p：显示进程的PID</li><li>-u：显示进程的所属用户</li></ul></li></ul><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><ul><li><p>service管理指令：service 服务名 [start | stop | restart | reload | status]</p></li><li><p>在CentOS7.0之后，不再使用service，而是systemctl</p></li><li><p>查看防火墙情况：</p><ul><li>service iptables status</li><li>systemctl status firewalld（7.0之后的版本）</li></ul></li><li><p>运行级别：通常使用3和5，3是无图形界面，5有图形化界面</p><ul><li>查看或修改默认级别：vim /etc/inittab</li><li>systemctl get-default 查看当前的运行级别</li><li>systemctl set-default TARGENT.target 设置当前运行级别为3</li></ul></li><li><p>chkconfig：可以给每个服务的各个运行级别设置自启动/关闭</p><ul><li>查看xxx服务：chkconfig –list | grep xxx</li><li>查看服务的状态：chkconfig 服务名 –list</li><li>给服务的运行级别设置自启动：chkconfig –level 5 服务名 on/off</li><li>要所有运行级别关闭或开启：chkconfig 服务名 on/off</li></ul></li><li><p>systemctl管理指令</p><ul><li>基本语法:systemctl [start | stop | restart | status]服务名</li><li>systemctl指令管理的服务在/usr/lib/systemd/system查看</li><li>systemctl设置服务的自启动状态</li><li>systemctl list-unit-files [l grep 服务名](查看服务开机启动状态, grep可以进行过滤)</li><li>systemctl enable服务名(设置服务开机启动)</li><li>systemctl disable 服务名(关闭服务开机启动)</li><li>systemctl is-enabled服务名(查询某个服务是否是自启动的)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">systemctl status firewalld   #查看firewalld的状况<br>systemctl stop firewalld   #关闭防火墙<br>systemctl start firewalld #重启防火墙<br><br>#以上命令指示临时生效，当系统重启后还是回归以前的配置<br>#如果需要永久生效，使用systemctl [enable|disable] 服务名   进行修改 <br></code></pre></td></tr></table></figure><ul><li>windows 在 cmd下使用 telnet ip  端口号 可以连接端口</li></ul></li><li><p>端口设置</p><ul><li>打开端口：<code>firewall-cmd --permanent --add-port=端口号/协议</code>  如：<code>firewall-cmd --permanent --add-port=111/tcp</code></li><li>关闭端口：<code>firewall-cmd --permanent --remove-port-端口号/协议</code>   如：<code>frewall-cmd --permanent --remove-port=111/tcp</code></li><li>重新载入之后上面的操作才能够生效：<code>firewall-cmd --reload</code></li><li>查询端口是否开放： <code>firewall-cmd --query-port=端口号/协议</code></li><li>查看开放的所有端口：<code>firewall-cmd --zone=public --list-ports</code></li></ul></li></ul><h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><blockquote><p>top和ps命令很相似。它们都用来显示正在执行的进程。top和ps最大的不同之处在于top在执行一段时间可以更新正在运行的进程。</p></blockquote><ul><li>top [选项]<ul><li>-d 秒数：指定top命令每隔几秒更新。默认是3秒。</li><li>-i：使top不显示任何闲置或者僵死进程。</li><li>-p：通过指定监控进程ID来仅仅监控某个进程的状态。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">PID：进程号 <br><br>USER：进程所有者的用户名 ( 该 process 所属的使用者 )<br><br>PR：进程的优先级别 ( Priority 的简写，程序的优先执行顺序，越小越早被执行 )<br><br>NI：进程的优先级别数值 ( Nice 的简写，与 Priority 有关，也是越小越早被执行 )<br><br>VIRT：进程占用的虚拟内存值。<br><br>RES：进程占用的物理内存值。<br><br>SHR：进程使用的共享内存值。<br><br>S：进程的状态，其中S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值是负数。<br><br>%CPU：该进程占用的CPU使用率。<br><br>%MEM：该进程占用的物理内存和总内存的百分比。<br><br>TIME＋：该进程启动后占用的总的CPU时间 ( CPU 使用时间的累加 )<br><br>Command：进程启动的启动命令名称，如果这一行显示不下，进程会有一个完整的命令行。<br></code></pre></td></tr></table></figure><ul><li>交互操作说明：(在top界面按下对应的选型)<ul><li>P：以CPU使用率排序，默认就是此项</li><li>M：以内存的使用率排序</li><li>N：以PID排序</li><li>q：退出top</li></ul></li><li>案例1：监控特定用户：==top查看进程；u输入用户名。==</li><li>案例2：终止指定的进程：==top查看进程；k输入要结束的进程号。==</li><li>案例3：指定系统状态更新的时间（每隔10秒自动更新，默认是3秒）：top -d 10</li></ul><h2 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h2><ul><li>netstat [选项]<ul><li>-an：按一定顺序排列输出</li><li>-p：显示哪个进程在调用</li></ul></li></ul><h2 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h2><blockquote><p>rpm用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成只有.RPM扩展名的文件。RPM是RedHat Package Manager( RedHat软件包管理工具)的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。</p><p>Linux的分发版本都有采用(suse,redhat, centos等等），可以算是公认的行业标准了.</p></blockquote><ul><li>rpm包的查询指令：<ul><li>rpm -qa：查询所安装的所有rpm软件包</li><li>rpm -qa | more</li><li>rpm -qa | grep xx</li><li>rpm -q xx：查询xx软件包是否安装</li><li>rpm -qi xx：查询软件包信息</li><li>rpm -ql xx：查询软件包中的文件</li><li>rpm -qf 文件全路径名：查询文件所属的软件包</li></ul></li><li>卸载rpm包：rpm -e 软件包名称<ul><li>删除时可能会发生依赖错误，忽视依赖强制删除的方法：rpm -e –nodeps 软件包名称</li></ul></li><li>安装rpm包：rpm -ivh 软件包全路径名称<ul><li>i=install：安装</li><li>v=verbose：提示</li><li>h=hash：进度条</li></ul></li></ul><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><blockquote><p>Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p></blockquote><ul><li>yum list | grep xx：查询yum服务器是否有需要安装的软件</li><li>yum install xx：安装指定的yum包</li><li>yum -y remove xx：卸载指定的yum包</li></ul><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><ol><li><p>使用windows下载jdk1.8的压缩包，使用xftp传输给linux  <em>通常保存到/opt/xxx下</em></p></li><li><p>使用 <code>tar -zxvf xxx</code>解压文件</p></li><li><p>将压缩文件移动到<code>/usr/local/xxx</code>文件夹下,<em>最好先在usr/local下创建文件夹，再使用mv移动文件夹</em></p></li><li><p>配置环境变量 ：<code>vim /etc/profile</code>,添加如下命令:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">export JAVA_HOME=/usr/local/java/jdk1.8.0_321    #jdk1.8.0_321为你自己的文件夹名字<br>export PATH=$JAVA_HOME/bin:$PATH<br></code></pre></td></tr></table></figure></li><li><p>使用<code>source /etc/profile</code>让刚才配置的环境变量生效</p></li><li><p>使用<code>echo $PATH</code>可以查看配置的环境变量是否生效</p></li></ol><h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><blockquote><p>Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便裕兴程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。</p></blockquote><h3 id="Shell脚本的执行方式："><a href="#Shell脚本的执行方式：" class="headerlink" title="Shell脚本的执行方式："></a>Shell脚本的执行方式：</h3><ul><li>脚本格式要求：<ul><li>脚本以#!/bin/bash 开头</li><li>脚本需要有可执行权限</li></ul></li><li>脚本的常用执行方式：<ul><li>方式1（输入脚本的绝对路径或相对路径）<ul><li>首先要赋予xx.sh脚本的+x权限：chmod 744 myShell.sh</li><li>执行脚本：./myShell.sh</li></ul></li><li>方式2（sh+脚本）：<ul><li>说明：不用赋予+x权限，直接执行即可</li><li>sh ./myShell.sh</li></ul></li></ul></li></ul><h3 id="shell的变量"><a href="#shell的变量" class="headerlink" title="shell的变量"></a>shell的变量</h3><ul><li><p>shell变量的介绍</p><ul><li>Linux Shell的变量分为，系统变量和用户自定义变量</li><li>系统变量：<code>$HOME</code>、<code>$PWD</code>、<code>$SHELL</code>、<code>$USER</code>等等</li><li>显示当前shell中所有变量：set</li></ul></li><li><p>shell变量的定义</p><ul><li><p>基本语法</p><p>定义变量：变量名=值，**=两边不能有空格**</p><p>撤销变量：unset 变量名</p><p>声明静态变量：readonly 变量，注意：不能unset</p><p>输出变量： $变量名</p></li></ul></li><li><p>定义变量的规则</p><ul><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头</li><li>等号两侧不能有空格</li><li>变量名称一般习惯为大写</li></ul></li><li><p>将命令的返回值赋给变量</p><ul><li>A=`date`，使用反引号，运行里面的命令，并把结果返回给变量A</li><li>A=$(date)等价于上面</li></ul></li></ul><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ul><li><p>基本语法</p><ul><li><p>export 变量名=变量值：将shell变量输出为环境变量/全局变量</p></li><li><p>source 配置文件：让修改后的配置文件信息立即生效</p></li><li><p>echo $变量名：查询环境变量的值</p></li><li><p>多行注释：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">:&lt;&lt;!<br>需要注释的内容<br>!<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><blockquote><p>当我们执行一个shell脚本时，如果希望获取到命令行的参数信息就可以使用到位置参数变量。比如： ./myshell.sh 100 200，这个就是一个执行shell的命令行，可以在myshell脚本中传参100，200。</p></blockquote><ul><li>基本语法：<ul><li><code>$n</code>：n为数字，<code>$0</code>代表命令本身，<code>$1-$9</code>代表第一到第九个参数，10以上的参数需要用大括号包含，如<code>$&#123;10&#125;</code></li><li><code>$*</code>：这个变量代表命令行中所有的参数，<code>$*</code>把所有的参数看成一个整体</li><li><code>$@</code>：这个变量也代表命令行中所有的参数，不过<code>$@</code>把每个参数区分对待</li><li><code>$#</code>：这个变量代表命令行中所有参数的个数</li></ul></li></ul><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><ul><li>shell设计者事先已经定义好的变量，可以直接在shell脚本中使用</li><li>基本语法：<ul><li><code>$$</code>：当前进程的进程号（PID）</li><li><code>$!</code>：后台运行的最后一个进程的进程号（PID）</li><li><code>$?</code>：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确。</li><li>后台运行：./myShell.sh &amp;</li></ul></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>在Shell中进行各种运算操作</li><li>“<code>$</code>((运算式))”或“<code>$</code>[运算时]”</li><li>expr m + n，注意expr运算符间要有空格</li><li>expr m - n</li><li>expr <code>\*</code> / %，乘，除，取余</li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ul><li>基本语法：[ condition ]，<strong>注意condition前后有空格！</strong></li><li>非空返回true，可使用$?验证（0为true，&gt;1为false）</li><li>两个整数比较<ul><li>=：字符串比较</li><li>-lt：小于</li><li>-le：小于等于</li><li>-eq：等于</li><li>-gt：大于</li><li>-ge：大于等于</li><li>-ne：不等于</li></ul></li><li>按照文件权限进行判断<ul><li>-r：有读的权限</li><li>-w：有写的权限</li><li>-x：有执行的权限</li></ul></li><li>按照文件类型进行判断<ul><li>-f：文件存在并且是一个常规的文件</li><li>-e：文件存在</li><li>-d：文件存在并且是一个目录</li></ul></li></ul><h3 id="流程控制if语句"><a href="#流程控制if语句" class="headerlink" title="流程控制if语句"></a>流程控制if语句</h3><ul><li><p>if判断基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [ 条件判断式 ]<br>then<br>代码<br>fi<br></code></pre></td></tr></table></figure></li><li><p>或者：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [ 条件判断式 ]<br><br> then<br>程序<br>elif [ 条件判断式 ]<br>then<br>程序<br>fi<br></code></pre></td></tr></table></figure></li></ul><h3 id="流程控制case语句"><a href="#流程控制case语句" class="headerlink" title="流程控制case语句"></a>流程控制case语句</h3><ul><li><p>case语句基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">case $变量名 in<br><br>“值1”)<br><br>如果变量的值等于值1，则执行程序1<br><br>;;<br><br>“值2”)<br><br>如果变量的值等于值2，则执行程序2<br><br>;;<br><br>…省略其他分支…<br><br>*)<br><br>如果变量的值都不是以上的值，则执行此程序<br><br>;;<br><br>esac<br></code></pre></td></tr></table></figure></li></ul><h3 id="流程控制for循环"><a href="#流程控制for循环" class="headerlink" title="流程控制for循环"></a>流程控制for循环</h3><ul><li><p>for循环基本语法1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">for 变量 in 值1 值2 值3…<br><br> do<br><br> 程序<br><br> done<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>for循环基本语法2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shel">for ((初始值;循环控制条件;变量变化))<br><br> do<br><br> 程序<br><br> done<br></code></pre></td></tr></table></figure></li></ul><h3 id="流程控制while循环"><a href="#流程控制while循环" class="headerlink" title="流程控制while循环"></a>流程控制while循环</h3><ul><li><p>while循环基本语法1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">while [ 条件判断式 ]     #条件判断和括号之间有空格<br><br> do<br><br> 程序<br><br> done<br></code></pre></td></tr></table></figure></li></ul><h3 id="read读取控制台的输入"><a href="#read读取控制台的输入" class="headerlink" title="read读取控制台的输入"></a>read读取控制台的输入</h3><ul><li>read [选项] (参数)</li><li>-p：指定读取值时的提示符</li><li>-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了。</li><li>参数：变量：指定读取值的变量名</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>系统函数</p><ul><li>basename：<strong>返回完整路径最后/的部分，常用于获取文件名</strong><ul><li>basename [pathname] [suffix]</li><li>basename [string] [suffix]</li><li>basename命令会删掉所有的前缀包括最后一个/</li><li>选项：suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉</li></ul></li><li>dirname：返回完整路径最后/的前面的部分，常用于返回路径部分<ul><li>dirname 文件绝对路径：从给定的包含绝对路径的文件名中出去文件名（非目录部分），然后返回剩下的路径（目录部分）</li></ul></li><li><strong>反正两个系统函数都不要最后一个/</strong></li></ul></li><li><p>自定义函数</p><ul><li><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">function funname()<br><br>&#123;<br><br> Action;<br><br> [return int;]<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用直接写函数名：funname（不用写括号），然后在后面写参数</p></li></ul></li></ul><h1 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h1><blockquote><p>日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件相关信息、各种服务相关信息等。这些信息有些非常敏感，所以在 Linux 中这些日志文件只有 root 用户可以读取。<br>日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击时攻击者留下的痕迹。<br>可以这样理解日志是用来记录重大事件的工具。</p></blockquote><ul><li><blockquote><ul><li>基本介绍<br>日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件相关信息、各种服务相关信息等。这些信息有些非常敏感，所以在 Linux 中这些日志文件只有 root 用户可以读取。<br>日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击时攻击者留下的痕迹。<br>可以这样理解日志是用来记录重大事件的工具。</li><li>系统常用的日志<br>/var/log/ 目录就是系统日志文件的保存位置</li></ul><table><thead><tr><th align="center">日志文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">/var/log/boot.log</td><td align="center">系统启动日志</td></tr><tr><td align="center">/var/log/cron</td><td align="center">记录与系统定时任务相关的日志</td></tr><tr><td align="center">/var/log/cups/</td><td align="center">记录打印信息的曰志</td></tr><tr><td align="center">/var/log/dmesg</td><td align="center">记录了系统在开机时内核自检的信总。也可以使用 dmesg 命令直接查看内核自检信息</td></tr><tr><td align="center">/var/log/btmp</td><td align="center">记录错误登陆的日志。这个文件是二进制文件，不能直接用Vi查看，而要使用 lastb 命令查看</td></tr><tr><td align="center">/var/log/lasllog</td><td align="center">记录系统中所有用户最后一次的登录时间的曰志。这个文件也是二进制文件。不能直接用Vi查看，而要使用lastlog命令查看</td></tr><tr><td align="center">/var/log/mailog</td><td align="center">记录邮件信息的日志</td></tr><tr><td align="center">/var/log/message</td><td align="center">记录系统里要佶息的日志.这个日志文件中会记录 Linux 系统的绝大多数重要信息。如果系统出现问题，首先要检查的应该就是这个日志文件</td></tr><tr><td align="center">/var/log/secure</td><td align="center">记录验证和授权方面的倍息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh 的登录、su 切换用户，sudo 授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr><tr><td align="center">/var/log/wtmp</td><td align="center">永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件。同样，这个文件也是二进制文件.不能直接用Vi查看，而要使用 last 命令查看</td></tr><tr><td align="center">/var/tun/ulmp</td><td align="center">记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。同样，这个文件不能直接用Vi查看，而要使用 w、who、users 等命令查看</td></tr><tr><td align="center">除系统默认的日志之外，采用 RPM 包方式安装的系统服务也会默认把日志记录在 /var/log/ 目录中（源码包安装的服务日志存放在源码包指定的目录中）。不过这些日志不是由 rsyslogd 服务来记录和管理的，而是各个服务使用自己的日志管理文档来记录自身的日志。以下介绍的日志目录在你的 Linux 上不一定存在，只有安装了相应的服务，日志才会出现。</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">日志文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">/var/log/httpd/</td><td align="center">RPM 包安装的apache取务的默认日志目录</td></tr><tr><td align="center">/var/log/mail/</td><td align="center">RPM 包安装的邮件服务的额外日志因录</td></tr><tr><td align="center">/var/log/samba/</td><td align="center">RPM色安装的Samba服务的日志目录</td></tr><tr><td align="center">/var/log/sssd/</td><td align="center">守护进程安全服务目录</td></tr></tbody></table></blockquote><ul><li><strong>日志管理服务 rsyslogd</strong></li></ul><blockquote><p>CentOS 7.6日志服务是 rsyslogd，CentOS 6.x 日志服务是 syslogd，rsyslogd 功能更强大。rsyslogd 的使用、日志文件的格式，和 syslogd 服务兼容的。</p><ul><li>查询 Linux 中的 rsyslogd 服务是否启动<ul><li>ps aux | grep “rsyslog” | grep -v “grep”</li></ul></li><li>查询 rsyslogd 服务的自启动状态<ul><li>systemctl list-unit-files | grep rsyslog</li></ul></li><li>配置文件：/etc/rsyslog.conf<ul><li>编辑文件时的格式：*.*，其中第一个 * 代表日志类型，第二个 * 代表日志类别</li></ul></li></ul><blockquote><blockquote><table><thead><tr><th align="center">日志类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">auth</td><td align="center">安全和认证相关消息，pam 产生的日志（不推荐使用 authpriv 替代）</td></tr><tr><td align="center">authpirv</td><td align="center">安全和认证相关信息，ssh、ftp 等登录信息的验证信息（私有的）</td></tr><tr><td align="center">cron</td><td align="center">系统定时任务 crond 和 at 产生的日志</td></tr><tr><td align="center">daemon</td><td align="center">和各个守护进程相关的日志</td></tr><tr><td align="center">ftp</td><td align="center">ftp 守护进程产生的日志</td></tr><tr><td align="center">kern</td><td align="center">内核产生的日志（不是用户进程产生的）</td></tr><tr><td align="center">lpr</td><td align="center">打印产生的日志</td></tr><tr><td align="center">mail</td><td align="center">邮件收发信息</td></tr><tr><td align="center">news</td><td align="center">与新闻服务器相关的日志</td></tr><tr><td align="center">syslog</td><td align="center">有syslogd服务产生的日志信息（虽然服务名称已经改了 rsyslogd 服务，但是很多配置都还是沿用了 syslogd 的，这里并没有修改服务名）</td></tr><tr><td align="center">user</td><td align="center">用户等级类别的日志信息</td></tr><tr><td align="center">uucp</td><td align="center">uucp 子系统的日志信息，uucp 时早期 Linux 系统进行数据传递的协议，后来也经常用在新闻组服务中</td></tr><tr><td align="center">local0-local7</td><td align="center">为本地使用预留的服务</td></tr></tbody></table></blockquote></blockquote><blockquote><blockquote><table><thead><tr><th align="center">日志级别</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">debug</td><td align="center">一般的调试信息说明，日志通信最多</td></tr><tr><td align="center">info</td><td align="center">基本的通知信息</td></tr><tr><td align="center">notice</td><td align="center">普通信息，但是有一定的重要性</td></tr><tr><td align="center">warning</td><td align="center">警告信息，但是还不会影响到服务或系统的运行</td></tr><tr><td align="center">err</td><td align="center">错误信息，一般达到 err 等级的信息已经可以影响到服务或系统的运行了</td></tr><tr><td align="center">crit</td><td align="center">严重错误信息，比 err 等级还要严重，系统或整个软件不能正常工作</td></tr><tr><td align="center">alert</td><td align="center">需要立刻修改的信息，比 crit 还要严重，必须立即采取行动</td></tr><tr><td align="center">emerg</td><td align="center">内核崩溃等重要信息，系统已经无法使用了</td></tr><tr><td align="center">none</td><td align="center">什么都不记录</td></tr><tr><td align="center">注意：日志级别从上到下，级别从低到高，记录信息越来越少，优先处理的等级就越高，危害就越大。</td><td align="center"></td></tr></tbody></table></blockquote></blockquote><ul><li><p>由日志服务 rsyslogd 记录的日志文件，日志文件的格式包含以下4列：</p><ul><li>事件产生的时间</li><li>发生事件的服务器的主机名</li><li>产生事件的服务名或程序名</li><li>事件的具体信息</li></ul></li><li><p>日志管理服务应用实例</p><p>在 /etc/rsyslog.conf 中添加一个日志文件 /var/log/hsp.log，当有事件发送时，该文件会接收到信息并保存。</p><ul><li>在 /etc/rsyslog.conf 文件中增加如下命令</li></ul></li></ul><blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">*.*                         <span class="hljs-regexp">/var/</span>log/hsp.log<br></code></pre></td></tr></table></figure></blockquote></blockquote><ul><li>新建 /var/log/hsp.log 文件，重启系统，再查看该文件内容。</li></ul></blockquote><ul><li><strong>日志轮替</strong></li></ul><blockquote><ul><li><p>基本介绍</p><ul><li>日志是重要的系统文件，记录和保存了系统中所有的重要事件。但是日志文件也需要进行定期的维护，因为日志文件是不断增长的，如果完全不进行日志维护，而任由其随意递增，那么用不了多久，我们的硬盘就会被写满。</li><li>日志维护的最主要的工作就是把旧的日志文件删除，从而腾出空间保存新的日志文件。这项工作如果靠管理员手工来完成，那其实是非常烦琐的，而且也容易忘记。那么 Linux 系统是否可以自动完成日志的轮替工作呢？</li><li>logrotate 就是用来进行日志轮替（也叫日志转储）的，也就是把旧的日志文件移动并改名，同时创建一个新的空日志文件用来记录新日志，当旧日志文件超出保存的范围时就删除。</li></ul></li><li><p>日志轮替文件的命名规则</p><ul><li>日志轮替最主要的作用就是把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存的范围时就删除。那么，旧的日志文件改名之后，如何命名呢？主要依靠 /etc/logrotate.conf 配置文件中的“dateext”参数。</li><li>如果配置文件中有“dateext”参数，那么日志会用日期来作为日志文件的后缀，如“secure-20130605”。这样日志文件名不会重叠，也就不需要对日志文件进行改名，只需要保存指定的日志个数，删除多余的日志文件即可。</li><li>如果配置文件中没有“dateext”参数，那么日志文件就需要进行改名了。当第一次进行日志轮替时，当前的“secure”日志会自动改名为“secure.1”，然后新建“secure”日志，用来保存新的日志；当第二次进行日志轮替时，“secure.1”会自动改名为“secure.2”，当前的“secure”日志会自动改名为“secure.1”，然后也会新建“secure”日志，用来保存新的日志；以此类推。</li></ul></li><li><p>配置文件：/etc/logrotate.conf</p><p>可以设置全局的日志轮替规则，当然也可以单独给某个日志文件指定策略。</p><p>在这个配置文件中，主要分为三部分：</p><ul><li>第一部分是默认设置，如果需要转储的日志文件没有特殊配置，则遵循默认设置的参数；</li><li>第二部分是读取 /etc/logrotate.d/ 目录中的日志轮替的子配置文件，也就是说，在 /etc/logrotate.d/ 目录中的所有符合语法规则的子配置文件也会进行日志轮替；</li><li>第三部分是对 wtmp 和 btmp 日志文件的轮替进行设定，如果此设定和默认参数冲突，则当前设定生效（如 wtmp 的当前参数设定的轮替时间是每月，而默认参数的轮替时间是每周，则对 wtmp 这个日志文件来说，轮替时间是每月，当前的设定参数生效）。</li></ul></li><li><p>logrotate 配置文件的主要参数</p></li></ul><table><thead><tr><th align="center">参数</th><th align="center">参数说明</th></tr></thead><tbody><tr><td align="center">daily</td><td align="center">日志的轮替周期是毎天</td></tr><tr><td align="center">weekly</td><td align="center">日志的轮替周期是每周</td></tr><tr><td align="center">monthly</td><td align="center">日志的轮控周期是每月</td></tr><tr><td align="center">rotate 数宇</td><td align="center">保留的日志文件的个数。0指没有备份</td></tr><tr><td align="center">compress</td><td align="center">当进行日志轮替时，对旧的日志进行压缩</td></tr><tr><td align="center">create mode owner group</td><td align="center">建立新日志，同时指定新日志的权限与所有者和所属组。如 create 0600 root utmp</td></tr><tr><td align="center">mail address</td><td align="center">当进行日志轮替时.输出内存通过邮件发送到指定的邮件地址</td></tr><tr><td align="center">missingok</td><td align="center">如果日志不存在，则忽略该日志的警告信息</td></tr><tr><td align="center">nolifempty</td><td align="center">如果曰志为空文件，則不进行日志轮替</td></tr><tr><td align="center">minsize 大小</td><td align="center">日志轮替的最小值。也就是日志一定要达到这个最小值才会进行轮持，否则就算时间达到也不进行轮替</td></tr><tr><td align="center">size 大小</td><td align="center">日志只有大于指定大小才进行日志轮替，而不是按照时间轮替，如 size 100k</td></tr><tr><td align="center">dateext</td><td align="center">使用日期作为日志轮替文件的后缀，如 secure-20130605</td></tr><tr><td align="center">sharedscripts</td><td align="center">在此关键宇之后的脚本只执行一次</td></tr><tr><td align="center">prerotate/cndscript</td><td align="center">在日志轮替之前执行脚本命令。endscript 标识 prerotate 脚本结束</td></tr><tr><td align="center">postrolaie/endscripl</td><td align="center">在日志轮替之后执行脚本命令。endscripi 标识 postrotate 脚本结束</td></tr></tbody></table><ul><li><p>把自己的日志加入日志轮替</p><p>如果有些日志默认没有加入日志轮替（比如源码包安装的服务的日志，或者自己添加的日志），那么这些日志默认是不会进行日志轮替的，这样当然不符合我们对日志的管理要求。如果需要把这些日志也加入日志轮替，那该如何操作呢？</p><p>这里有两种方法：</p><ul><li>第一种方法是直接在 /etc/logrotate.conf 配置文件中写入该日志的轮替策略，从而把日志加入轮替；</li><li>第二种方法是在 /etc/logrotate.d/ 目录中新建立该日志的轮替文件，在该轮替文件中写入正确的轮替策略，因为该目录中的文件都会被包含到主配置文件中，所以也可以把日志加入轮替。<br>推荐第二种方法，因为系统中需要轮替的日志非常多，如果全部直接写入 /etc/logrotate.conf 配置文件，那么这个文件的可管理性就会非常差，不利于此文件的维护。</li></ul></li><li><p>日志轮替服务应用实例</p><p>对于自己设置的 /var/log/hsp.log 日志，不是系统默认日志，而是通过 /etc/rsyslog.conf 配置文件自己生成的日志，所以默认这个日志是不会进行轮替的。如果需要把这个日志加入。就采用第二种方法，在 /etc/logrotate.d/ 目录中建立此日志的轮替文件。</p><ul><li>先创建 /etc/logrotate.d/hsplog 轮替文件</li><li>在文件中写入命令，即事先约定好的日志轮替规则</li></ul></li></ul><blockquote><blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">/var/<span class="hljs-built_in">log</span>/hsp.<span class="hljs-built_in">log</span> &#123;<br>     missingok<br>     daily<br>     copytruncate<br>     rotate <span class="hljs-number">7</span><br>     nolifempty<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></blockquote><ul><li>日志轮替机制原理<ul><li>logrotate 在很多 Linux 发行版上都是默认安装的。系统会定时运行 logrotate，一般是每天一次。系统是这么实现按天执行的。crond 会每天定时执行 /etc/cron.daily 目录下的脚本，而这个目录下有个文件叫 logrotate。logrotate 通过这个文件依赖定时任务执行的。</li></ul></li></ul></blockquote><ul><li><strong>查看内存日志</strong></li></ul><blockquote><ul><li>基本介绍<br>日志管理工具 journalctl 是CentOS 7上专有的日志管理工具，该工具是从 message 这个文件里读取信息。Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用 journalctl 一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是 /etc/systemd/journald.conf</li><li>journalctl 用法<ul><li>查看所有日志（默认情况下 ，只保存本次启动的日志）：journalctl</li><li>查看内核日志（不显示应用日志）：journalctl -k</li><li>查看系统本次启动的日志：journalctl -b</li><li>实时滚动显示最新日志：journalctl -f</li><li>显示尾部的最新10行日志：journalctl -n </li></ul></li></ul></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;vi和vim编辑器&quot;&gt;&lt;a href=&quot;#vi和vim编辑器&quot; class=&quot;headerlink&quot; title=&quot;vi和vim编辑器&quot;&gt;&lt;/a&gt;vi和vim编辑器&lt;/h2&gt;&lt;h3 id=&quot;三种常见模式：&quot;&gt;&lt;a href=&quot;#三种常见模式：&quot; class=&quot;headerlink&quot; title=&quot;三种常见模式：&quot;&gt;&lt;/a&gt;三种常见模式：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正常模式&lt;/p&gt;
&lt;p&gt;在正常模式下，我们可以使用快捷键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入模式/编辑模式&lt;/p&gt;
&lt;p&gt;在这个模式下，程序猿可以输入内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令行模式&lt;/p&gt;
&lt;p&gt;在这个模式中，可以提供相关指令。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="http://example.com/2021/12/07/java%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    <id>http://example.com/2021/12/07/java%E5%9F%BA%E7%A1%80%E9%A2%98/</id>
    <published>2021-12-07T14:37:16.649Z</published>
    <updated>2022-05-30T01:09:59.186Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<br>1、列举出四种及以上Java的容器类（即集合类）？<br>Set、List、Queue、Map、ArrayList、HashSet、HashMap</p><a id="more"></a><p>2、简单说说Java事件处理由哪四部分组成？<br>Java事件由四部分组成：<br>事件源：产生事件的对象，例如：各个组件<br>事件对象：事件类<br>监听器：监听器接口(里面定义了响应事件的抽象方法)<br>“注册”：产生事件的对象，通过调用一个方法，通知“监听器”。</p><p>3、Java网络编程主要基于两个协议，是哪两个协议，其作用各是什么？（7分）<br>答：是TCP协议和UDP协议（1分）<br>    TCP协议：是面向连接的传输层协议。 进程（应用程序）在使用TCP协议之前，必须先建立连接，在数据传输完毕后要释放已建立的连接。（3分）<br>    UDP协议：是无连接的传输层协议。进程（应用程序）使用UDP无须建立连接，当然，数据传输结束时也没有连接需要释放。因此，用UDP能减少开销和发送数据之前的时延。（3分）</p><p>4、X公司承接了一个软件项目，目前正在做可行性分析。项目经理偏向于采用Java语言开发此项目，但有少数员工提出也可以用其他语言开发如C++或C#等，为统一思想。项目经理委托小张收集数据，并给大家分析下Java的特点或优势。（请列举Java的特点至少6点，并简单进行分析说明）<br>答：简单、面向对象、支持分布式(即网络功能)、健壮性（少出低级错误）、安全（被破解的可能性）、体系结构中立（跨平台）、可移植性、解释执行、高性能、多线程、动态</p><p>5、Java相对于C、C++语言，更适合应用型软件的开发，这主要是Java语言本身就相对C++语言作出了一些变化，请分析出至少Java相对C++语言在语法上6个及更多的不同点。<br>答：1）全局变量：Java中没有全局变量。2）指针：Java不支持指针，但对象变量实际上都是指针。3）数据类型的支持：Java在不同平台上数据类型都统一。4）类型转换：Java有类型相容性检查。5）结构和联合：Java只支持类。6）多重继承：Java用接口实现类似多重继承的功能。7）内存管理：Java自动回收无用内存。8）头文件：Java支持包引入import。9）宏定义和预处理：Java不支持宏定义。</p><p>6、什么是JDBC，在什么时候会用到它？<br>答、JDBC的全称是Java DataBase Connection，也就是Java数据库连接，我们可以用它来操作关系型数据库。JDBC接口及相关类在java.sql包和javax.sql包里。我们可以用它来连接数据库，执行SQL查询，存储过程，并处理返回的结果。JDBC接口让Java程序和JDBC驱动实现了松耦合，使得切换不同的数据库变得更加简单。</p><p>7、列举出任意四个JDBC连接数据库相关的Java类？<br>答：DriverManager、Connection、Statement、ResultSet、PreparedStatement、SQLException、Types、ClassNotFoundException等</p><p>8、JDBC操作数据库的步骤？<br>答：注册数据库驱动。<br>建立数据库连接。<br>操作数据库：包括创建一个Statement，执行SQL语句，处理结果集等。<br>关闭数据库连接</p><p>9、有哪些不同类型的JDBC驱动，每种驱动的特点是什么？<br>答：有四类JDBC驱动。<br>1） JDBC-ODBC Bridge plus ODBC Driver（类型1）：它使用ODBC驱动连接数据库。需要安装ODBC以便连接数据库，正因为这样，这种方式现在已经基本淘汰了。<br>2） Native API partly Java technology-enabled driver（类型2）：这种驱动把JDBC调用适配成数据库的本地接口的调用。<br>3） Pure Java Driver for Database Middleware（类型3）：这个驱动把JDBC调用转发给中间件服务器，由它去和不同的数据库进行连接。用这种类型的驱动需要部署中间件服务器。这种方式增加了额外的网络调用，导致性能变差，因此很少使用。<br>4） Direct-to-Database Pure Java Driver（类型4）：这个驱动把JDBC转化成数据库使用的网络协议。这种方案最简单，也适合通过网络连接数据库。不过使用这种方式的话，需要根据不同数据库选用特定的驱动程序，比如OJDBC是Oracle开发的Oracle数据库的驱动，而MySQL Connector/J是MySQL数据库的驱动。</p><p>10、JDBC是如何实现Java程序和JDBC驱动的松耦合的？<br>答：JDBC API使用Java的反射机制来实现Java程序和JDBC驱动的松耦合。随便看一个简单的JDBC示例，你会发现所有操作都是通过JDBC接口完成的，而驱动只有在通过Class.forName反射机制来加载的时候才会出现，它使得应用程序和驱动程序之间进行了隔离，让迁移数据库的工作变得更简单。在这里可以看到更多JDBC的使用示例。</p><p>11、JDBC的DriverManager是用来做什么的？<br>答：JDBC的DriverManager是一个工厂类，我们通过它来创建数据库连接。当JDBC的Driver类被加载进来时，它会自己注册到DriverManager类里面，然后我们会把数据库配置信息传成DriverManager.getConnection()方法，DriverManager会使用注册到它里面的驱动来获取数据库连接，并返回给调用的程序。</p><p>=======================================================<br>论述题：</p><p>对Java中JDBC的分析和理解？<br>   （1、可以从JDBC的含义；JDBC连接数据库相关的常用Java类；当前主要使用哪种类型的JDBC驱动；JDBC是如何实现Java程序和JDBC驱动的松耦合的；JDBC的DriverManager是用来做什么的；JDBC的DriverManager的理解等等角度进行分析（但不限于这些角度）<br>     2、能正确答出3个及以上点，且字数超过200字，则得满分<br>    ）。<br>答：<br>  1、JDBC的含义<br>  JDBC的全称是Java DataBase Connection，也就是Java数据库连接，我们可以用它来操作关系型数据库。JDBC接口及相关类在java.sql包和javax.sql包里。我们可以用它来连接数据库，执行SQL查询，存储过程，并处理返回的结果。JDBC接口让Java程序和JDBC驱动实现了松耦合，使得切换不同的数据库变得更加简单。</p><p>  2、JDBC连接数据库相关的常用Java类包括（列举4个及以上，并可以简单说说列举的类的作用或含义）：<br>  DriverManager、Connection、Statement、ResultSet、PreparedStatement、SQLException、Types、ClassNotFoundException等  </p><p>  3、主要使用的JDBC驱动类型<br>  Direct-to-Database Pure Java Driver：这个驱动把JDBC转化成数据库使用的网络协议。这种方案最简单，也适合通过网络连接数据库。需要根据不同数据库选用特定的驱动程序，比如OJDBC是Oracle开发的Oracle数据库的驱动，而MySQLConnector/J是MySQL数据库的驱动。</p><p>  4、JDBC如何实现Java程序和JDBC驱动的松耦合的<br>JDBC API使用Java的反射机制来实现Java程序和JDBC驱动的松耦合。随便看一个简单的JDBC示例，你会发现所有操作都是通过JDBC接口完成的，而驱动只有在通过Class.forName反射机制来加载的时候才会出现，它使得应用程序和驱动程序之间进行了隔离，让迁移数据库的工作变得更简单。</p><p>  5、JDBC的DriverManager<br>JDBC的DriverManager是一个工厂类，我们通过它来创建数据库连接。当JDBC的Driver类被加载进来时，它会自己注册到DriverManager类里面，然后我们会把数据库配置信息传成DriverManager. getConnection()方法，DriverManager会使用注册到它里面的驱动来获取数据库连接，并返回给调用的程序。</p><p>=======================================================</p><p>12、在Java程序中，如何获取数据库服务器的相关信息？<br>答：使用DatabaseMetaData可以获取到服务器的信息。当和数据库的连接成功建立了之后，可以通过调用getMetaData()方法来获取数据库的元信息。DatabaseMetaData里面有很多方法，通过它们可以获取到数据库的产品名称，版本号，配置信息等。相关代码为：<br>DatabaseMetaData metaData = con.getMetaData();<br>String dbProduct = metaData.getDatabaseProductName();</p><p>13、JDBC的Statement是什么？<br>答：Statement是JDBC中用来执行数据库SQL查询语句的接口。通过调用连接对象的getStatement()方法我们可以生成一个Statement对象。我们可以通过调用它的execute()，executeQuery()，executeUpdate()方法来执行静态SQL查询。由于SQL语句是程序中传入的，如果没有对用户输入进行校验的话可能会引起SQL注入的问题。<br>另外，默认情况下，一个Statement同时只能打开一个ResultSet。如果想操作多个ResultSet对象的话，需要创建多个Statement。Statement接口的所有execute方法开始执行时都默认会关闭当前打开的ResultSet。</p><p>14、execute，executeQuery，executeUpdate的区别是什么？<br>答：1）execute方法用来执行任意的SQL查询，如果查询的结果是一个ResultSet，这个方法就返回true。如果结果不是ResultSet，比如insert或者update查询，它就会返回false。我们可以通过它的getResultSet方法来获取ResultSet，或者通过getUpdateCount()方法来获取更新的记录条数。<br>2）executeQuery方法用来执行查询(select)，并且返回ResultSet。即使查询不到记录返回的ResultSet也不会为null。我们通常使用executeQuery来执行查询语句，这样的话如果传进来的是insert或者update语句的话，它会抛出错误信息为 “executeQuery method can not be used for update”的java.util.SQLException。<br>3）executeUpdate方法用来执行添删改操作，即insert或者update/delete（DML）语句，或者 什么也不返回DDL语句。返回值是int类型，如果是DML语句的话，它就是更新的条数，如果是DDL的话，就返回0。<br>4）只有当你不确定是什么语句的时候才应该使用execute()方法，否则应该使用executeQuery或者executeUpdate方法。</p><p>15、JDBC的PreparedStatement是什么？<br>答：PreparedStatement对象代表的是一个预编译的SQL语句。用它提供的setter方法可以传入查询的变量。<br>由于PreparedStatement是预编译的，通过它可以将对应的SQL语句高效的执行多次。由于PreparedStatement自动对特殊字符转义，避免了SQL注入攻击，因此应当尽量的使用它。</p><p>16、PreparedStatement中如何注入NULL值？<br>答：可以使用它的setNull方法来把null值绑定到指定的变量上。setNull方法需要传入参数的索引以及SQL字段的类型，像这样：<br>ps.setNull(10, java.sql.Types.INTEGER);.</p><p>17、Statement中的getGeneratedKeys方法有什么用？<br>答：有的时候表会生成主键，这时候就可以用Statement的getGeneratedKeys()方法来获取这个自动生成的主键的值了。</p><p>18、相对于Statement，PreparedStatement的优点是什么？<br>答：它和Statement相比优点在于：<br>1）PreparedStatement有助于防止SQL注入，因为它会自动对特殊字符转义。<br>2）PreparedStatement可以用来进行动态查询。<br>3）PreparedStatement执行更快。尤其当你重用它或者使用它的拼量查询接口执行多条语句时。<br>4）使用PreparedStatement的setter方法更容易写出面向对象的代码，而Statement的话，我们得拼接字符串来生成查询语句。如果参数太多了，字符串拼接看起来会非常难看并且容易出错。</p><p>19、JDBC中大数据量的分页解决方法?<br>答：最好的办法是利用sql语句进行分页，这样每次查询出的结果集中就只包含某页的数据内容。<br>mysql语法：<br>    SELECT *<br>    FROM 表名<br>    LIMIT [START], length;<br>oracle语法：<br>    SELECT *FROM (<br>        SELECT 列名,列名,ROWNUM rn<br>        FROM 表名<br>        WHERE ROWNUM&lt;=(currentPage*lineSize)) temp<br>    WHERE temp.rn&gt;(currentPage-1)*lineSize;</p><p>简答和分析题集</p><p>20 java中有几种类型的流?JDK为每种类型的流提供了一些抽象类以提供继承，请说出他们分别是哪些类？<br>答：<br>（1）字节流，字符流。<br>（2）字节流继承于InputStream，OutputStream。<br>（3）字符流继承于Reader Writer。</p><p>21 使用处理流的优势有哪些？如何识别所使用的流是处理流还是节点流？<br>答：<br>优势：对开发人员来说，使用处理流进行输入/输出操作更简单。使用处理流的执行效率更高。<br>识别：处理流的构造器的参数不是一个物理节点，而是已经存在的流。而节点流都是直接以物理 IO 及节点作为构造器参数的。</p><p>22 什么是标准的IO流？<br>答：在java语言中用stdin表示键盘，用stdout表示监视器。它们被封装在System类的类变量 in 和 out 中，对应系统调用System,in 和 System,out。这样的两个流加上System.err统称为标准流。<br>System类中声明的3个类变量：<br>（1）public static InputStream in;<br>（2）public static PrinStream out;<br>（3）public static PriStram err;</p><p>23  什么能被序列化？什么不能被序列化？<br>答：<br>能被序列化：<br>（1）属性<br>（2）类型；<br>不能被序列化：<br>（1）static的属性；<br>（2）方法，<br>（3）加了transient修饰符的属性。</p><p>24 什么是java序列化，如何实现java序列化？<br>答：<br>（1）序列化而就是一种处理对象流的机制，所谓对象流也就是对象的内容进行流化。<br>（2）实现：将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，implements Serializable只是为了标注该对象是可被序列化的，然后使用一个输出流（如：FileOutputStream）来构造一个ObjectOutputSream对象，接着使用ObjectOutputSream对象的writeObject方法就可以将参数obj对象写出，要恢复的话则使用输入流。</p><p>1.抽象：<br>　答：<br>  抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。</p><p>2.继承：<br>　答：<br>  继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。</p><p>3.封装：<br>　答：<br>   封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。</p><ol start="4"><li>多态性：<br> 答：<br> 　多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</li></ol><p>5、String是最基本的数据类型吗?<br>　答：<br>  基本数据类型有8个，包括byte、short、int、long、char、float、double和boolean。<br>　java.lang.String是类，不属于基本数据类型。</p><p>6、int 和 Integer 有什么区别<br>　Java 提供两种不同的类型：引用类型和原始类型（或内置类型）。Int是java的原始数据类型，Integer是java为int提供的封装类。</p><p>小张到X软件公司实习，第一天程序员老李为摸底，问了他一个问题：Java中的有8个基本数据类型，这破坏了面向对象的思想，为此Java提供了封装类，那么这些封装类具体有哪些？请代小张回答（至少回答出其中六个即可得满分）</p><p>Java为每个原始类型提供了封装类。<br>原始类型       封装类<br>boolean      Boolean<br>char          Character<br>byte          Byte<br>short          Short<br>int          Integer<br>long          Long<br>float          Float<br>double      Double<br>　引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。</p><p>7、实习程序员小张，接到X项目组经理命令完成某模块代码开发。在设计中，该模块算法中特别提到将有大量字符串的拼接。编码过程中，小张准备使用自己熟悉的String对象类完成这段代码，并向程序员老王征求意见，谁知老王否定了小张用String类型的方案，并建议他此处使用StringBuffer对象更合适，这令小张有些困惑。请帮小张分析下为何此处要用StringBuffer？<br>  即回答：String 和StringBuffer的区别<br>　答：<br>  JAVA平台提供了两个类：String和StringBuffer。<br>  String不是简单类型，而是一个类，它被用来表示字符序列。String的特点是一旦赋值，便不能更改其指向的字符对象，如果更改，则会生成一个新的字符串对象。<br>  StringBuffer是一个具有对象引用传递特点的字符串对象。StringBuffer对象可以调用其方法动态的进行增加、插入、修改和删除操作，从而实现多次插入字符，而不用担心像String类那样不断产生新对象而消耗内存，因而在字符串变化较多的操作中，效率更高。</p><p>9、&amp;和&amp;&amp;的区别。<br>   答： &amp;是位运算符，表示按位与运算，&amp;&amp;是逻辑运算符，表示逻辑与（and）。</p><p>10、final, finally的区别。<br>　　答：final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改（相当于常量）。被声明为final的方法也同样只能使用，不能覆盖。<br>    finally是异常处理语句结构的一部分，表示总是执行。一般在异常处理时提供 finally 块来执行任何清除操作。</p><p>11、Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?<br>　  答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被”屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型。</p><p>12、error和exception有什么区别?<br>　 答：error 表示恢复不是不可能但很困难的情况下的一种严重问题，是一种系统性的错误，程序本身不能处理这样的情况，比如说内存溢出。<br>      exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，是不会发生这种错误的。</p><p>13、abstract class和interface有什么区别?<br>　  答：声明方法的存在而不去实现它的类被叫做抽象类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract 类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例。不能有抽象构造函数或抽象静态方法。     Abstract 类的子类为它们父类中的所有抽象方法提供实现，否则它们也是抽象类为。取而代之，在子类中实现该方法。知道其行为的其它类可以在类中实现这些方法。<br>　   接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。接口只可以定义static final成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口。</p><p>14、GC是什么? 为什么要有GC?<br>　　答：1）GC是垃圾收集的意思（Gabage Collection）,内存处理是编程人员容易出现问题的地方，忘记或错误的内存回收会导致程序或系统的不稳定，甚至崩溃；2）Java提供的垃圾回收机制（GC）可以自动监测对象是否超过作用域从而达到自动回收内存的目的；3）Java不提供显示释放已分配内存的操作方法。</p><p>15、分析题<br>    1）short s1 = 1; s1 = s1 + 1;有什么错?<br>    答：short s1 = 1; s1 = s1 + 1; （s1+1运算结果是int型，int数据1给short型变量s1，需要强制转换类型）<br>    2）short s1 = 1; s1 += 1;有什么错?<br>    答：本题无措short s1 = 1; s1 += 1;（可以正确编译）</p><p>16、分析题：Math.round(11.5)等於多少? Math.round(-11.5)等於多少?<br>    答：Math.round(11.5)==12<br>        Math.round(-11.5)==-11<br>        round方法返回与参数最接近的长整数，参数加1/2后求其floor.</p><p>17、String s = new String(“xyz”);创建了几个String Object?<br>    答：两个对象，一个是在字符串池中的对象“xyx”,引用对象s指向的堆空间的对象“xyx”。其中，堆空间的对象“xyz”是字符串池中字符串“xyz”的副本。    </p><p>18、接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承实体类(concrete class)?<br>　  答：接口可以继承接口。抽象类可以实现(implements)接口，抽象类是否可继承实体类，但前提是实体类必须有明确的构造函数。</p><p>19、数组有没有length()这个方法? String有没有length()这个方法？<br>　  答：数组没有length()这个方法，只有length的属性，用来得到数组元素个数。<br>        String有length()这个方法，用来得到字符串长度。</p><p>20、构造器Constructor是否可被override?<br>　  答：构造器Constructor不能被继承，因此不能重写Overriding，但可以被重载Overloading。</p><p>21、是否可以继承String类?<br>　  答：String类是final类，故不可以继承。</p><p>22、swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上?<br>　  答：switch（expr1）中，expr1是一个整数表达式。因此传递给 switch 和 case 语句的参数应该是 int、 short、 char 或者 byte。<br>       long,string 都不能作用于swtich。</p><p>23、try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?<br>　  答：会执行，在return前执行。</p><p>24、编程题: 用最有效率的方法算出2乘以8等於几?<br>    答：用位运算符“&lt;&lt;”，语句写为：2 &lt;&lt; 3;</p><p>25、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递?<br>　  答：<br>    是值传递。Java 编程语言只有值传递参数。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的。</p><p>26、Java中的异常处理机制的简单原理和应用。<br>　   答：<br>     当JAVA 程序违反了JAVA的语义规则时，JAVA虚拟机就会将发生的错误表示为一个异常。违反语义规则包括2种情况。一种是JAVA类库内置的语义检查。例如数组下标越界,会引发IndexOutOfBoundsException;访问null的对象时会引发NullPointerException。另一种情况就是JAVA允许程序员扩展这种语义检查，程序员可以创建自己的异常，并自由选择在何时用throw关键字引发异常。所有的异常都是 java.lang.Thowable的子类。</p><p>27、描述一下JVM加载class文件的原理机制?<br>　  答：JVM中类的装载是由ClassLoader和它的子类来实现的,Java ClassLoader 是一个重要的Java运行时系统组件。它负责在运行时查找和装入类文件的类。</p><p>28、char型变量中能不能存贮一个中文汉字?为什么?<br>　  答：能够定义成为一个中文的，因为java中以unicode编码，一个char占16个字节，所以放一个中文是没问题的</p><p>29、多线程有几种实现方法,都是什么?同步有几种实现方法,都是什么?<br>    答：多线程有两种实现方法，分别是继承Thread类与实现Runnable接口<br>    同步的实现方面有两种，分别是synchronized,wait与notify</p><p>30、线程的基本概念、线程的基本状态以及状态之间的关系<br>　 答：<br>   线程指在程序执行过程中，能够执行程序代码的一个执行单位，每个程序至少都有一个线程，也就是程序本身。<br>   Java中的线程有四种状态分别是：运行、就绪、挂起、结束。 </p><p>=============================================<br>论述题<br>31、谈谈对Java语言中异常处理的理解？（<br>    1）可以从异常处理包含哪些关键字；每个关键字的含义或作用；引用异常处理后对开发有哪些帮助；异常处理机制的类体系结构；异常处理实现的底层机制等角度进行分析（但不限于这些角度）；<br>    2）能正确答出3个及以上点，且字数超过200字，则得满分。答案仅供参考，不唯一<br>   ）<br>    答：<br>    1、基本概念<br>    Java的异常处理是通过5个关键词来实现的：try、catch、throw、throws和finally。一般情况下是用try来执行一段程序，如果出现异常，系统会抛出（throws）一个异常，这时候你可以通过它的类型来捕捉（catch）它，或最后（finally）由缺省处理器来处理。</p><pre><code class="hljs">2、5个主要关键字的作用用try来指定一块预防所有&quot;异常&quot;的程序。紧跟在try程序后面，应包含一个catch子句来指定你想要捕捉的&quot;异常&quot;的类型。finally为确保一段代码不管发生什么&quot;异常&quot;都被执行一段代码。throw语句用来明确地抛出一个&quot;异常&quot;。throws用来标明一个成员函数可能抛出的各种&quot;异常&quot;。3、实现的机制Java 通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在Java中，每个异常都是一个对象，它是Throwable类或其它子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并进行处理。4、采用异常处理机制的好处可以提高Java语言的处理错误能力；可以帮助程序员调试程序，发现开发中的问题，提高开发效率；可以让Java程序有健壮性，程序不容易崩溃；</code></pre><p>===========================================================</p><p>32、一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？<br>   答：1）可以。<br>       2）只有一个类的类名能与Java程序的该源文件名相同。</p><p>33、java中实现多态的机制是什么（Java借助什么实现多态性）？<br>　 答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。<br>      重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。</p><p>34、在JAVA中，如何跳出当前的多重嵌套循环？<br>    答：用break; return 方法。</p><p>35、Java是从（  B  ）语言改进重新设计而发展来的？<br>A. Ada    B. C++    C.Pascal  D.BASIC<br>分析：Java是从C、C++发展过来的</p><p>36、研究下面Java代码<br>public class TestException{<br>    public static void main(String args[]){<br>        try{<br>            System.out.println(“hello,jr”);<br>            System.exit(0);<br>        }finally{<br>            System.out.println(“88”);<br>        }<br>    }<br>}<br>输出结果为：（  A  ）<br>A. hello,jr<br>B. 88<br>C. hello,jr后是88<br>D. 不能编译<br>分析：System.exit(0);会中断程序，即使是finally都无法被执行</p><p>37、下面说法正确的有（  C   ）<br>A. class中的contructor不可省略<br>B. contructor必须与class同名，但方法不能与class同名<br>C. contructor在一个对象被new时执行<br>D. 一个class只能定义一个contructor</p><p>分析：contructor就是指的构造方法，普通方法也可以和类同名</p><p>38、在java中，已定义两个接口B和C，要定义一个实现这两个接口的类，以下语句正确的是（  C  ）<br>A. interface A extends B,C<br>B. interface A implements B,C<br>C. class A implements B,C<br>D. class A implements B,implements C</p><p>分析：类实现接口的基本语法</p><p>39、当编译并允许下面程序时，会发生什么结果？（   D   ）<br>public class Demo{<br>    protected Demo(){<br>        for(int i=0;i&lt;10;i++){<br>            System.out.println(i);<br>        }<br>    }</p><pre><code class="hljs">public static void main(String args[])&#123;    Demo d=new Demo();&#125;</code></pre><p>}<br>A. 编译错误，构造方法不能被声明为protected<br>B. 允许错误，构造方法不能被声明为protected<br>C. 编译并运行输出0到10<br>D. 编译并运行输出0到9</p><p>分析：本题程序无错误可正常运行，构造方法是可以定义为protected的。</p><p>40、当编译和运行下面程序时，哪项描述可以最准确的表达发生了什么事情（   B    ）<br>public class MyAr{</p><pre><code class="hljs">public void amethod()&#123;    int i;    System.out.println(i);    &#125;public static void main(String args[])&#123;    MyAr m=new MyAr();    m.amethod();&#125;</code></pre><p>}<br>A. 编译并输出0<br>B. 编译错误<br>C. 编译并输出null<br>D. 运行错误</p><p>分析： 方法amethod()中定义的变量：int i; 是一个方法级别的变量，必须手动赋予初值，否则编译错误。<br>       注意：成员变量系统给默认值，如果不显示手动赋值，依然是正确的。</p><p>41、给定java代码如下，关于super的用法，以下描述正确的是（    C   ）<br>class C extends B{<br>    public C(){<br>        super();<br>    }<br>}<br>A. 用来调用类B中定义的super()方法<br>B. 用来调用类C中定义的super()方法<br>C. 用来调用类B中的无参构造方法<br>D. 用来调用类B中第一个出现的构造方法</p><p>分析：super()的含义是用来调用父类（B）中不带参数的构造方法。super()的用法，一般出现在子类构造方法中第一行。</p><p>42、下列语句正确的是（   A  ）<br>A) 形式参数可被视为local variable<br>B) 形式参数可被字段修饰符修饰<br>C) 形式参数为方法被调用时，真正被传递的参数<br>D) 形式参数不可以是对象</p><p>分析：B项无此说法，C中被真正传递的是实参，D中形参可以使对象</p><p>43、以下代码输出结果为（  C    ）<br>public class Test{<br>    public static String output=””;</p><pre><code class="hljs">public static void foo(int i)&#123;    try&#123;        if(i==1)            throw new Exception();        output+=&quot;1&quot;;                &#125;catch(Exception e)&#123;        output+=&quot;2&quot;;        return ;    &#125;finally&#123;        output+=&quot;3&quot;;        output+=&quot;4&quot;;    &#125;&#125;public static void main(String args[])&#123;    foo(0);    foo(1);    System.out.println(output);&#125;</code></pre><p>}<br>A. 1342        B. 123        C. 134234    D. 13423</p><p>分析：本题中，foo(0)时，if语句if(i==1)throw new Exception();不满足条件，不会抛出异常，因此此时output值为“134”；<br>      紧接着执行foo(1)时，if语句if(i==1)throw new Exception();满足条件，抛出异常，执行catch语句，output值变成“1342”；<br>      最难点在于此时碰到了return，是否还会执行finally语句，答案是会执行，因此最后output值变成“134234”；答案为C。</p><p>44、在Java中，下列（  D    ）类不能派生出子类？<br>A) public class MyClass{ … }<br>B) class MyClass{ … }<br>C) abstract class MyClass{ … }<br>D) final class MyClass{    … }</p><p>分析：类前面可以有public和默认两种权限，一般都能被子类继承，因此A、B答案可以派生子类<br>      C答案是抽象类，也可以被继承<br>      D答案是final修饰的类，是最终类，不允许被继承。</p><p>45、编译和运行下面代码时显示结果是（     ）<br>public class Conv{<br>    public static void main(String argv[]){<br>            Conv c=new Conv();<br>            String s=new String(“ello”);<br>            c.amethod(s);<br>    }<br>    public void amethod(String s){<br>            char c=’H’;<br>            c+=s;<br>            System.out.println(c);<br>    }<br>}<br>A、Hello<br>B、ello<br>C、elloH<br>D、编译错误<br>解答：D<br>分析：c是字符类型，s是字符串类型，字符型无法自动转换成字符串类型，因此语句c+=s;类型不兼容，有语法错误，故答案是D<br>修改方案：将char c=’H’;语句变为String c=”H”;</p><p>46、当下列程序执行时，其输出结果是（     ）。<br>int i=9;<br>switch (i) {<br> default:<br> System.out.println(“default”);<br> case 0:<br> System.out.println(“zero”);<br> break;<br> case 1:<br> System.out.println(“one”);<br> case 2:<br> System.out.println(“two”);<br>}<br>A、default<br>B、default, zero<br>C、错误： default 子句没有定义<br>D、没有输出结果<br>解答：Ｂ<br>原因：程序开始遇到default关键字，会执行其语句块中语句，输出“default”；<br>由于default语句块中没有结束switch语句的关键字break;<br>所以程序会继续执行其他case块中语句，并且无需验证case的值匹配；运行到case 0语句块时，首先输出“zero”，最后碰到break语句，结束整个switch语句块。<br>故最后输出结果：<br>default<br>zero</p><p>47、阅读下列代码，其正确的结果是（     ）。<br>publicclass Test2 {<br>    static boolean foo(char c) {<br>       System.out.print(c);<br>       return true;<br>    }<br>    Public static void main(String[] argv) {<br>       int i = 0;<br>       //for(65;88&amp;&amp;(i&lt;2);67)<br>       for (foo(‘A’); foo(‘B’) &amp;&amp; (i &lt; 2); foo(‘C’)) {<br>           i++;<br>           foo(‘D’);<br>       }<br>    }<br>}<br>A. ABDCBDCB<br>B. ABCDABCD<br>C. Compilation fails.<br>D. An exception is thrown at runtimeB、1<br>解答：A</p><p>48、有以下程序段：<br>class MyThread extends Thread {<br>    public static void main(String args[]) {<br>        MyThread t = new MyThread();<br>        MyThread s = new MyThread();<br>        t.start();<br>        System.out.print(“one.”);<br>        s.start();<br>        System.out.print(“two.”);<br>    }<br>    public void run() {<br>        System.out.print(“Thread”);<br>    }<br>}<br>则下列选项说法正确的是（     ）。<br>A、编译失败<br>B、程序运行结果为：one.Threadtwo.Thread<br>C、程序运行结果是：one.two.ThreaThread<br>D、程序运行结果不确定<br>解答：D<br>分析：线程是并行运行，故结果输出顺序是不确定。<br>部分同学计算机运行几次时，可能会发现结果确定，<br>是因计算机速度太快导致，可以多次运行十几次或几十次，可以发现结果有变化</p><p>49、仔细分析下面程序，其正确的输出结果是（     ）。<br>publicclass Test1 {<br>    public static void changeStr(String str){   //②str<br>        str=”welcome”;<br>    }<br>    public staticvoid main(String[] args) {<br>        String str=”1234”;               //①str<br>        changeStr(str);<br>        System.out.println(str);<br>    }<br>}<br>A、welcome<br>B、welcome1234<br>C、1234<br>D、1234welcome<br>解答：C</p><p>分析：<br>1）主方法中的①号变量str是实际参数，changeStr(String str)中的②号str是形式参数，虽然是两个同名字变量，但实际是两个变量。</p><p>2）Java字符串基于字符串池实现，虽然①号str传值给了②号str，并且传的是引用，<br>   但②号str中执行语句str=”welcome”;后，并没有修改”1234”这个值本身，而是在字符串池中，新增加了一个字符串常量”welcome”，<br>   ②号str的引用指向了新的”welcome”值，但①号str指向的值”1234”没有被修改，因此主方法中打印输出的①号str的值还是1234</p><p>3）这里要注意，正常情况下，给方法的参数传值，当值是对象类型时，是引用传递。（若是基本数据类型，则是值传递）<br>   引用传递的确是可以利用方法来修改引用指向对的成员变量值的，字符串类（String）因其实现的机制是基于字符串池，故情况特殊<br>   参见下面代码对比：</p><p>class Stu{<br>    int stuAge;<br>}<br>public class Test1 {<br>    public static void changeStu(Stu stu){<br>        stu.stuAge=100;<br>    }<br>    public static void changeStr(String str){<br>        str=”welcome”;<br>    }<br>    public static void main(String[] args) {<br>        String str=”1234”;<br>        changeStr(str);               //Java字符串基于字符串池实现，因此不是简单的传递引用<br>        System.out.println(str);<br>//        Stu s=new Stu();<br>//        s.stuAge=20;<br>//        changeStu(s);                //对象类型传的是引用<br>//        System.out.println(s.stuAge);//输出100<br>    }<br>}  </p><p>50、下面2个文件位于相同目录下，编译运行后会出现的情况是（      ）。<br>//File P1.java<br>package MyPackage;<br>class P1{<br>void afancymethod(){<br>        System.out.println(“What a fancy method”);<br>        }<br>}<br>//File P2.java<br>public class P2 extends P1{<br>    public static void main(String argv[]){<br>    P2 p2 = new P2();<br>    p2.afancymethod();<br>    }<br>}<br>A、2个文件都可以编译，P2运行输出“What a fancy method”<br>B、2个文件都不能编译<br>C、2个文件都可以编译，P2运行时报错误<br>D、P1编译成功，P2编译时报错误<br>解答：D</p><p>51、编译和运行下面代码时显示的结果是（     ）。<br>public class MyClass{<br> static int i;<br> public static void main(String argv[]){<br>     System.out.println(i);<br> }<br>}<br>A、Error Variable i may not have been initializenull<br>C、1<br>D、0<br>解答：D<br>分析：本题能正常运行，static int i;中定义的i是静态成员变量，Java中成员变量默认给了初值，整型的初值是0，故此题正确</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目：&lt;br&gt;1、列举出四种及以上Java的容器类（即集合类）？&lt;br&gt;Set、List、Queue、Map、ArrayList、HashSet、HashMap&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>fastapi多文件</title>
    <link href="http://example.com/2021/07/22/fastapi%E5%A4%9A%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2021/07/22/fastapi%E5%A4%9A%E6%96%87%E4%BB%B6/</id>
    <published>2021-07-22T04:04:43.122Z</published>
    <updated>2021-07-22T04:04:22.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><a id="more"></a><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">├── app<br>│   ├── __init__.<span class="hljs-keyword">py</span><br>│   ├── main.<span class="hljs-keyword">py</span><br>│   ├── dependencies.<span class="hljs-keyword">py</span><br>│   └── routers<br>│   │   ├── __init__.<span class="hljs-keyword">py</span><br>│   │   ├── <span class="hljs-built_in">items</span>.<span class="hljs-keyword">py</span><br>│   │   └── users.<span class="hljs-keyword">py</span><br>│   └── internal<br>│       ├── __init__.<span class="hljs-keyword">py</span><br>│       └── admin.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><ul><li><code>app</code> 目录包含了所有内容。并且它有一个空文件 <code>app/__init__.py</code>，因此它是一个「Python 包」（「Python 模块」的集合）：<code>app</code>。</li><li>它包含一个 <code>app/main.py</code> 文件。由于它位于一个 Python 包（一个包含 <code>__init__.py</code> 文件的目录）中，因此它是该包的一个「模块」：<code>app.main</code>。</li><li>还有一个 <code>app/dependencies.py</code> 文件，就像 <code>app/main.py</code> 一样，它是一个「模块」：<code>app.dependencies</code>。</li><li>有一个子目录 <code>app/routers/</code> 包含另一个 <code>__init__.py</code> 文件，因此它是一个「Python 子包」：<code>app.routers</code>。</li><li>文件 <code>app/routers/items.py</code> 位于 <code>app/routers/</code> 包中，因此它是一个子模块：<code>app.routers.items</code>。</li><li>同样适用于 <code>app/routers/users.py</code>，它是另一个子模块：<code>app.routers.users</code>。</li><li>还有一个子目录 <code>app/internal/</code> 包含另一个 <code>__init__.py</code> 文件，因此它是又一个「Python 子包」：<code>app.internal</code>。</li><li><code>app/internal/admin.py</code> 是另一个子模块：<code>app.internal.admin</code>。</li></ul><h2 id="APIRouter"><a href="#APIRouter" class="headerlink" title="APIRouter"></a>APIRouter</h2><p>可以使用<code>APIRouter</code>为模块创建路径操作，可以与<code>FastAPI</code>类相同的方式创建一个实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入APIRouter</span><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> APIRouter<br><span class="hljs-comment">#创建一个实例</span><br>router = APIRouter()<br><br><span class="hljs-comment">#像FastAPI一样创建路径操作，相当于一个迷你的FastAPI类</span><br><span class="hljs-meta">@router.get(&quot;/users/&quot;, tags=[&quot;users&quot;])</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_users</span>():</span><br>    <span class="hljs-keyword">return</span> [&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Rick&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Morty&quot;</span>&#125;]<br><br><br><span class="hljs-meta">@router.get(&quot;/users/me&quot;, tags=[&quot;users&quot;])</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_user_me</span>():</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;fakecurrentuser&quot;</span>&#125;<br><br><br><span class="hljs-meta">@router.get(&quot;/users/&#123;username&#125;&quot;, tags=[&quot;users&quot;])</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_user</span>(<span class="hljs-params">username: str</span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;username&quot;</span>: username&#125;<br></code></pre></td></tr></table></figure><h2 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h2><p><code>dependencies</code> 模块（<code>app/dependencies.py</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> Header, HTTPException<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_token_header</span>(<span class="hljs-params">x_token: str = Header(<span class="hljs-params">...</span>)</span>):</span><br><br>    <span class="hljs-keyword">if</span> x_token != <span class="hljs-string">&quot;fake-super-secret-token&quot;</span>:<br><br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">400</span>, detail=<span class="hljs-string">&quot;X-Token header invalid&quot;</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_query_token</span>(<span class="hljs-params">token: str</span>):</span><br>    <span class="hljs-keyword">if</span> token != <span class="hljs-string">&quot;jessica&quot;</span>:<br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">400</span>, detail=<span class="hljs-string">&quot;No Jessica token provided&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="其他使用APIRouter的模块"><a href="#其他使用APIRouter的模块" class="headerlink" title="其他使用APIRouter的模块"></a>其他使用APIRouter的模块</h2><p><code>app/routers/items.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> APIRouter, Depends, HTTPException<br><br><span class="hljs-keyword">from</span> ..dependencies <span class="hljs-keyword">import</span> get_token_header<br><br><span class="hljs-comment">#给该模块下的所有路径操作进行统一的设置</span><br>router = APIRouter(<br>    prefix=<span class="hljs-string">&quot;/items&quot;</span>,  <span class="hljs-comment">#设置了路径， 地址都变成了 /items/xxxx</span><br>    tags=[<span class="hljs-string">&quot;items&quot;</span>],   <span class="hljs-comment">#设置了标签</span><br>    dependencies=[Depends(get_token_header)],  <span class="hljs-comment">#设置了依赖</span><br>    responses=&#123;<span class="hljs-number">400</span>:&#123;<span class="hljs-string">&quot;description&quot;</span>:<span class="hljs-string">&quot;NOT found&quot;</span>&#125;&#125;  <span class="hljs-comment">#设置了response</span><br>)<br><br>fake_items_db = &#123;<span class="hljs-string">&quot;plumbus&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;pty&quot;</span>&#125;,<span class="hljs-string">&quot;gun&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;gun&quot;</span>&#125;&#125;<br><br><br><span class="hljs-meta">@router.get(&quot;/&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_items</span>():</span><br>    <span class="hljs-keyword">return</span> fake_items_db<br><br><span class="hljs-meta">@router.get(&quot;/&#123;item_id&quot;)  #路径变为：/items/&#123;item_id&#125;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_item</span>(<span class="hljs-params">item_id:str</span>):</span><br>    <span class="hljs-keyword">if</span> item_id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> fake_items_db:<br>        <span class="hljs-keyword">raise</span>  HTTPException(status_code=<span class="hljs-number">400</span>,detail=<span class="hljs-string">&quot;not found&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;name&quot;</span>:fake_items_db[item_id][<span class="hljs-string">&quot;name&quot;</span>],<span class="hljs-string">&quot;item_id&quot;</span>:item_id&#125;<br><br><span class="hljs-comment">#还可以再为某个路径操作单独设置，这样会和之前统一设置的进行叠加</span><br><span class="hljs-meta">@router.put(</span><br>    <span class="hljs-string">&quot;/&#123;item_id&#125;&quot;</span>,<br>    tags=[<span class="hljs-string">&quot;custom&quot;</span>],  <span class="hljs-comment">#有两个tags，items和custom</span><br>    responses=&#123;<span class="hljs-number">403</span>:&#123;<span class="hljs-string">&quot;description&quot;</span>:<span class="hljs-string">&quot;operation&quot;</span>&#125;&#125; <span class="hljs-comment">#有两个response：404和403</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_item</span>(<span class="hljs-params">item_id:str</span>):</span><br>    <span class="hljs-keyword">if</span> item_id!=<span class="hljs-string">&quot;plumbus&quot;</span>:<br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">403</span>,detail=<span class="hljs-string">&quot;you can only update plumbus&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;item_id&quot;</span>:item_id,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;the great&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>需要设置<code>dependencies</code>的时候的格式，<code>dependencies=[Depends(get_token_header)]</code>      <code>Depends</code>要用[]括起来了，我之前没括起来，报错</strong></p><h2 id="FastAPI主体"><a href="#FastAPI主体" class="headerlink" title="FastAPI主体"></a>FastAPI主体</h2><p>位于 <code>app/main.py</code> 的模块，在这里导入并使用<code>FastAPI</code>类，这将是你的应用程序中将所有内容联结在一起的主文件。</p><p>由于大部分逻辑都存在于自己的特定模块中，所以主文件的内容将非常简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Depends<br><br><span class="hljs-keyword">from</span> .dependencies <span class="hljs-keyword">import</span> get_token_header, get_query_token<br><span class="hljs-keyword">from</span> .internal <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> .routers <span class="hljs-keyword">import</span> items, users<br><br><span class="hljs-comment">#需要注意这里的格式，Depends用[]括起来了，我之前没括起来，报错</span><br>app=FastAPI(dependencies=[Depends(get_query_token)])<br><br><span class="hljs-comment">#</span><br>app.include_router(items.router)<br>app.include_router(users.router)<br><br><span class="hljs-comment">#可以在主文件中对其他文件的router进行设置</span><br><span class="hljs-comment">#对interal/admin.py进行router设置</span><br>app.include_router(<br>    admin.router,<br>    prefix=<span class="hljs-string">&quot;/admin&quot;</span>,<br>    tags=[<span class="hljs-string">&quot;admin&quot;</span>],<br>    dependencies=[Depends(get_token_header)],<br>    responses=&#123;<span class="hljs-number">418</span>:&#123;<span class="hljs-string">&quot;description&quot;</span>:<span class="hljs-string">&quot;i&#x27;m a teapot&quot;</span>&#125;&#125;<br>)<br><br>app.get(<span class="hljs-string">&quot;/&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">root</span>():</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;hello&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="避免名称冲突"><a href="#避免名称冲突" class="headerlink" title="避免名称冲突"></a>避免名称冲突</h3><p>我们将直接导入 <code>items</code> 子模块，而不是仅导入其 <code>router</code> 变量。</p><p>这是因为我们在 <code>users</code> 子模块中也有另一个名为 <code>router</code> 的变量。</p><p>如果我们一个接一个地导入，例如：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> .routers.items <span class="hljs-keyword">import</span> router<br><span class="hljs-keyword">from</span> .routers.users <span class="hljs-keyword">import</span> router<br></code></pre></td></tr></table></figure><p>来自 <code>users</code> 的 <code>router</code> 将覆盖来自 <code>items</code> 中的 <code>router</code>，我们将无法同时使用它们。</p><h2 id="相对导入"><a href="#相对导入" class="headerlink" title="相对导入"></a>相对导入</h2><p>在上面我们会看到这样的代码，这些是从我们的文件中导入的模块，他们是怎么工作的呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .dependencies <span class="hljs-keyword">import</span> get_token_header, get_query_token<br><span class="hljs-keyword">from</span> .internal <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> .routers <span class="hljs-keyword">import</span> items, users<br></code></pre></td></tr></table></figure><p>一个单点 <code>.</code>，例如：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">from</span> .<span class="hljs-keyword">dependencies</span> <span class="hljs-keyword">import</span> get_token_header<br></code></pre></td></tr></table></figure><p>表示：</p><ul><li>从该模块（<code>app/routers/items.py</code> 文件）所在的同一个包（<code>app/routers/</code> 目录）开始…</li><li>找到 <code>dependencies</code> 模块（一个位于 <code>app/routers/dependencies.py</code> 的虚构文件）…</li><li>然后从中导入函数 <code>get_token_header</code>。</li></ul><p>两个点 <code>..</code>，例如：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">from</span> ..<span class="hljs-keyword">dependencies</span> <span class="hljs-keyword">import</span> get_token_header<br></code></pre></td></tr></table></figure><p>表示：</p><ul><li>从该模块（<code>app/routers/items.py</code> 文件）所在的同一个包（<code>app/routers/</code> 目录）开始…</li><li>跳转到其父包（<code>app/</code> 目录）…</li><li>在该父包中，找到 <code>dependencies</code> 模块（位于 <code>app/dependencies.py</code> 的文件）…</li><li>然后从中导入函数 <code>get_token_header</code>。</li></ul><p>同样，如果我们使用了三个点 <code>...</code>，例如：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">from</span> ...<span class="hljs-keyword">dependencies</span> <span class="hljs-keyword">import</span> get_token_header<br></code></pre></td></tr></table></figure><p>那将意味着：</p><ul><li>从该模块（<code>app/routers/items.py</code> 文件）所在的同一个包（<code>app/routers/</code> 目录）开始…</li><li>跳转到其父包（<code>app/</code> 目录）…</li><li>然后跳转到该包的父包（该父包并不存在，<code>app</code> 已经是最顶层的包 😱）…</li><li>在该父包中，找到 <code>dependencies</code> 模块（位于 <code>app/</code> 更上一级目录中的 <code>dependencies.py</code> 文件）…</li><li>然后从中导入函数 <code>get_token_header</code>。</li></ul><p><code>from .routers import items, users</code></p><p>表示：</p><ul><li>从该模块（<code>app/main.py</code> 文件）所在的同一个包（<code>app/</code> 目录）开始…</li><li>寻找 <code>routers</code> 子包（位于 <code>app/routers/</code> 的目录）…</li><li>从该包中，导入子模块 <code>items</code> (位于 <code>app/routers/items.py</code> 的文件) 以及 <code>users</code> (位于 <code>app/routers/users.py</code> 的文件)…</li></ul><p><code>items</code> 模块将具有一个 <code>router</code> 变量（<code>items.router</code>）。这与我们在 <code>app/routers/items.py</code> 文件中创建的变量相同，它是一个 <code>APIRouter</code> 对象。</p><p>然后我们对 <code>users</code> 模块进行相同的操作。</p><h3 id="绝对引入"><a href="#绝对引入" class="headerlink" title="绝对引入"></a>绝对引入</h3><p><code>from app.routers import items, users</code>    如果是这种样子的话，就是绝对引入</p><h2 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h2><p><img src="/.com//Users\彭天怡\AppData\Roaming\Typora\typora-user-images\image-20210721180819459.png" alt="image-20210721180819459"></p><p><strong>API文档界面如上，可以看到因为给每个模块设置了tags，所以分成了不同的类，而<code>/items/&#123;item_id&#125;</code>因为设置了两个tags(统一设置了一个items，自己单独设置了custom)，所以显示出了两个。</strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;文件结构&quot;&gt;&lt;a href=&quot;#文件结构&quot; class=&quot;headerlink&quot; title=&quot;文件结构&quot;&gt;&lt;/a&gt;文件结构&lt;/h2&gt;</summary>
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python连接mysql</title>
    <link href="http://example.com/2021/07/22/python%20%E8%BF%9E%E6%8E%A5mysql/"/>
    <id>http://example.com/2021/07/22/python%20%E8%BF%9E%E6%8E%A5mysql/</id>
    <published>2021-07-22T04:04:40.972Z</published>
    <updated>2021-07-22T06:36:30.951Z</updated>
    
    <content type="html"><![CDATA[<p>在看fastapi的官方文档，然后感觉sql部分挺难的，于是写下一篇博客来记录下。</p><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p>首先要安装两个东西</p><p><code>pip install sqlalchemy</code></p><p><code>pip install pymysql</code></p><p>前者是一个ORM框架，在ORM中，你创建一个类就会通过SQLAlchemy将其自动转成一张表，在类中的每一个属性就会转成表中的字段。</p><p>后者是用来连接数据库的</p><a id="more"></a><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><br>└── <span class="hljs-selector-tag">sql_app</span><br>    ├── __<span class="hljs-selector-tag">init__</span><span class="hljs-selector-class">.py</span><br>    ├── <span class="hljs-selector-tag">crud</span><span class="hljs-selector-class">.py</span><br>    ├── <span class="hljs-selector-tag">database</span><span class="hljs-selector-class">.py</span><br>    ├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><br>    ├── <span class="hljs-selector-tag">models</span><span class="hljs-selector-class">.py</span><br>    └── <span class="hljs-selector-tag">schemas</span><span class="hljs-selector-class">.py</span><br></code></pre></td></tr></table></figure><ul><li>sql_app是包名，注意是创建一个包，而不是创建一个目录</li><li><code>_init_.py</code>是一个空文件，创建sql_app会自动创建这个文件</li><li><code>crud.py</code>是用来进行crud操作的文件</li><li><code>database.py</code>是用来连接数据库的</li><li><code>main.py</code>是用来接受前端请求，类似于controller层</li><li><code>models.py</code>是用来创建SQLAlchemy模型的，也就是创建表</li><li><code>schemas.py</code>是用来创建Pydentic模型的</li></ul><h2 id="database-py"><a href="#database-py" class="headerlink" title="database.py"></a>database.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker, declarative_base<br><br><span class="hljs-comment">#连接数据库的url</span><br>SQLALCHEMY_DATABASES_URL =<span class="hljs-string">&quot;mysql+pymysql://root:123456@localhost:3306/python&quot;</span><br><br><span class="hljs-comment">#echo=True表示引擎将用repr()函数记录所有语句及其参数列表到日志</span><br>engine = create_engine(SQLALCHEMY_DATABASES_URL,encoding=<span class="hljs-string">&quot;utf8&quot;</span>,echo=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#SQLAlchemy中，CRUD是通会话进行管理的，所以需要先创建会话</span><br><span class="hljs-comment">#每一个SessionLocal实例就是一个数据库会话</span><br><span class="hljs-comment">#commit是指提交事务，将变更保存到数据库</span><br><span class="hljs-comment">#flush是指发送到数据库语句到数据库，但数据库不一定执行写入磁盘</span><br><span class="hljs-comment">#autocommit和autoflush是可以不写的</span><br>SessionLocal = sessionmaker(autocommit=<span class="hljs-literal">False</span>,autoflush=<span class="hljs-literal">False</span>,bind=engine)<br><br><span class="hljs-comment">#创建基本映射类</span><br>Base = declarative_base()<br></code></pre></td></tr></table></figure><p><strong>在数据库相关的配置文件中，首先创建一个SQLAlchemy的”engine”，然后创建SessionLocal实例进行会话，最后创建模型类的基类。</strong></p><h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Column, Integer, String, Boolean, ForeignKey<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> relationship<br><br><span class="hljs-keyword">from</span> .database <span class="hljs-keyword">import</span> Base<br><br><span class="hljs-comment">#使用database.py创建的Base类创建SQLAlchemy模型</span><br><span class="hljs-comment">#可以理解为这个是与真正的数据库相关联的类</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">Base</span>):</span><br>    <span class="hljs-comment">#对应的是数据库中的表名</span><br>    __tablename__ = <span class="hljs-string">&quot;users&quot;</span><br><br>    <span class="hljs-comment">#设置表的属性名，使用Column设置，定义了属性的类型</span><br>    id = Column(Integer,primary_key=<span class="hljs-literal">True</span>,index=<span class="hljs-literal">True</span>)<br>    email = Column(String(<span class="hljs-number">32</span>),unique=<span class="hljs-literal">True</span>,index=<span class="hljs-literal">True</span>)<br>    hashed_password = Column(String(<span class="hljs-number">32</span>))<br>    is_active = Column(Boolean,default=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment">#设置关系，通过relationship设置，这个不是属性，在数据库中不需要有这一个字段</span><br>    <span class="hljs-comment">#当访问users.items时，会直接关联到Item表，可以直接获取到Item的字段数据</span><br>    <span class="hljs-comment">#后面的back_populates是反向查询，有这个Item表可以通过items.owner访问到User表的字段数据</span><br>    <span class="hljs-comment">#使用了back_populates,那么被关联的数据库也要显示的使用relationship</span><br>    <span class="hljs-comment">#这个其实我也还不是太懂</span><br>    items = relationship(<span class="hljs-string">&quot;Item&quot;</span>,back_populates=<span class="hljs-string">&quot;owner&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span>(<span class="hljs-params">Base</span>):</span><br>    __tablename__ = <span class="hljs-string">&quot;items&quot;</span><br><br>    id=Column(Integer,primary_key=<span class="hljs-literal">True</span>,index=<span class="hljs-literal">True</span>)<br>    title = Column(String(<span class="hljs-number">32</span>),index=<span class="hljs-literal">True</span>)<br>    description = Column(String(<span class="hljs-number">32</span>) , index=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment">#设置了外键，使用ForeignKey参数设置，里面填写关联的表和具体的属性</span><br>    <span class="hljs-comment">#注意这里是表名而不是上面的类名</span><br>    owner_id  = Column(Integer,ForeignKey(<span class="hljs-string">&quot;users.id&quot;</span>))<br><br>    owner = relationship(<span class="hljs-string">&quot;User&quot;</span>,back_populates=<span class="hljs-string">&quot;items&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>通过数据库配置文件中的基类来创建模型类。</strong></p><h2 id="schemas-py"><a href="#schemas-py" class="headerlink" title="schemas.py"></a>schemas.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Optional, List<br><br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ItemBase</span>(<span class="hljs-params">BaseModel</span>):</span><br>    title:str<br>    description:Optional[str]=<span class="hljs-literal">None</span><br><br><br><span class="hljs-comment">#这个是用来创建Item的类，可以理解为前端传过来的要新增的数据</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ItemCreate</span>(<span class="hljs-params">ItemBase</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment">#继承自ItemBase</span><br><span class="hljs-comment">#Pydantic风格是声明类型，所以用的是:</span><br><span class="hljs-comment">#SQLAlchemy风格是定义属性，所以用的是=</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span>(<span class="hljs-params">ItemBase</span>):</span><br>    id: int<br>    owner_id: int<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span>:</span><br>        orm_mode=<span class="hljs-literal">True</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserBase</span>(<span class="hljs-params">BaseModel</span>):</span><br>    email:str<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserCreate</span>(<span class="hljs-params">UserBase</span>):</span><br>    password:str<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">UserBase</span>):</span><br>    id: int<br>    is_active: bool<br>    items: List[Item]=[]<br><br>    <span class="hljs-comment">#Config类用来给Pydantic提供配置信息</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span>:</span><br>        <span class="hljs-comment">#orm_mode出了可以让Pydantic读取字典类型的数据，还支持Pydantic读取属性数据，比如SQLAlchemy模型的数据</span><br>        <span class="hljs-comment">#这样我们就可以在路径操作函数中直接返回SQLAlchemy数据模型，没有这个配置项是不支持的</span><br>        orm_mode = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><strong>定义请求参数模型验证与响应模型验证的Pydantic模型，其中响应模型中设置orm_mode=True参数，表示与ORM模型兼容，因为后续中返回的数据库查询是orm模型，通过设置这个参数可以将orm模型通过pydantic模型进行验证。</strong></p><h2 id="crud-py"><a href="#crud-py" class="headerlink" title="crud.py"></a>crud.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> Session<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> models, schemas<br><br><br><span class="hljs-comment">#通过id查询用户</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_user</span>(<span class="hljs-params">db:Session,user_id: int</span>):</span><br>    <span class="hljs-comment">#返回的是models.User(其实就是users表)中的全部属性，并且条件是user_id = users中的id</span><br>    <span class="hljs-keyword">return</span> db.query(models.User).filter(models.User.id==user_id).first()<br><br><span class="hljs-comment">#通过email查询用户</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_user_by_email</span>(<span class="hljs-params">db:Session,email:str</span>):</span><br>    <span class="hljs-comment">#条件是邮箱相等</span><br>    <span class="hljs-keyword">return</span>  db.query(models.User).filter(models.User.email == email).first()<br><br><span class="hljs-comment">#查询多个用户</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_users</span>(<span class="hljs-params">db:Session,skip:int = <span class="hljs-number">0</span>,limit:int =<span class="hljs-number">100</span></span>):</span><br>    <span class="hljs-comment">#offset表示偏移量，0表示不偏移,1表示偏移1条数据，即从第二条开始</span><br>    <span class="hljs-comment">#limit表示表示限定数量</span><br>    <span class="hljs-comment">#从第一条开始,查询100条数据，返回的是个列表</span><br>    <span class="hljs-keyword">return</span> db.query(models.User).offset(skip).limit(limit).all()<br><br><span class="hljs-comment">#增加数据</span><br><span class="hljs-comment">#将前端传过来的数据保存到数据库</span><br><span class="hljs-comment">#传过来的数据是Pydantic模型，需要先转换为SQLAlchemy模型</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_user</span>(<span class="hljs-params">db:Session,user:schemas.UserCreate</span>):</span><br>    <span class="hljs-comment">#密码哈希化(伪造)</span><br>    fake_hashed_password = user.password+<span class="hljs-string">&quot;pty123&quot;</span><br>    <span class="hljs-comment">#user是Pydantic模型的，重新创建db_user,db_user是SQLALchemy类型的</span><br>    db_user = models.User(email=user.email,hashed_password=fake_hashed_password)<br>    <span class="hljs-comment">#添加到数据库</span><br>    db.add(db_user)<br>    <span class="hljs-comment">#提交</span><br>    db.commit()<br>    <span class="hljs-comment">#刷新</span><br>    db.refresh(db_user)<br>    <span class="hljs-keyword">return</span> db_user<br><br><span class="hljs-comment">#查询多个项目</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_items</span>(<span class="hljs-params">db:Session,skip:int = <span class="hljs-number">0</span>,limit :int=<span class="hljs-number">100</span></span>):</span><br>    <span class="hljs-keyword">return</span> db.query(models.Item).offset(skip).limit(limit).all()<br><br><br><span class="hljs-comment">#增加数据</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_user_item</span>(<span class="hljs-params">db:Session,item:schemas.ItemCreate,user_id:int</span>):</span><br>    db_item = models.Item(**item.dict(),owner_id = user_id)<br>    db.add(db_item)<br>    db.commit()<br>    db.refresh(db_item)<br>    <span class="hljs-keyword">return</span> db_item<br></code></pre></td></tr></table></figure><p><strong>通过传入数据库连接以及参数等进行数据库操作，包括创建用户、查询用户等，返回的是orm模型对象。</strong></p><h2 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> List<br><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Depends,HTTPException<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> Session<br><br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> schemas, crud, models<br><span class="hljs-keyword">from</span> .database <span class="hljs-keyword">import</span> SessionLocal, engine<br><br><span class="hljs-comment">#创建数据库，就算你没有自己创建表，orm会根据models中的类自动创建表</span><br>models.Base.metadata.create_all(bind=engine)<br><br>app=FastAPI()<br><br><span class="hljs-comment">#Dependency</span><br><span class="hljs-comment">#每一个请求完毕后都需要关闭当前的数据库会话，不同请求使用不同的数据库会话</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_db</span>():</span><br>    db=SessionLocal()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> db<br>    <span class="hljs-keyword">finally</span>:<br>        db.close()<br><br><span class="hljs-meta">@app.post(&quot;/users/&quot;,response_model=schemas.User)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_user</span>(<span class="hljs-params">user:schemas.UserCreate,db:Session=Depends(<span class="hljs-params">get_db</span>)</span>):</span><br>    <span class="hljs-keyword">return</span> crud.create_user(db,user)<br><br><span class="hljs-meta">@app.get(&quot;/user/&#123;user_id&#125;&quot;,response_model=schemas.User)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_user</span>(<span class="hljs-params">user_id: int,db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):</span><br>    db_user =crud.get_user(db,user_id)<br>    <span class="hljs-keyword">if</span> db_user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span>  HTTPException(status_code=<span class="hljs-number">404</span>,detail=<span class="hljs-string">&quot;User not found&quot;</span>)<br>    <span class="hljs-keyword">return</span> db_user<br><br><span class="hljs-comment">#这里返回多个对象，需要使用List，一开始没用，报错了</span><br><span class="hljs-meta">@app.get(&quot;/users/&quot;,response_model=List[schemas.User])</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_usres</span>(<span class="hljs-params">skip: int=<span class="hljs-number">0</span>,limit :int=<span class="hljs-number">100</span>,db:Session = Depends(<span class="hljs-params">get_db</span>)</span>):</span><br>  <span class="hljs-keyword">return</span>  crud.get_users(db,skip,limit)<br></code></pre></td></tr></table></figure><p><strong>主文件进行数据库初始化、FastAPI实例创建以及处理各种请求。</strong></p><h2 id="SQLAlchemy的查询语句"><a href="#SQLAlchemy的查询语句" class="headerlink" title="SQLAlchemy的查询语句"></a>SQLAlchemy的查询语句</h2><h3 id="查询执行器"><a href="#查询执行器" class="headerlink" title="查询执行器"></a>查询执行器</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">all()</td><td align="center">返回一个元素为查询结果的列表</td></tr><tr><td align="center">count()</td><td align="center">返回查询结果的数量</td></tr><tr><td align="center">first()</td><td align="center">返回第一个结果或None</td></tr><tr><td align="center">first_or_404()</td><td align="center">返回第一个结果或404</td></tr><tr><td align="center">get(主键)</td><td align="center">返回主键对应的对象或None</td></tr><tr><td align="center">get_or_404(主键)</td><td align="center">返回主键对应的对象或404</td></tr><tr><td align="center">paginate(页码，每页条数)</td><td align="center">返回一个分页查询结果</td></tr></tbody></table><h3 id="查询过滤器"><a href="#查询过滤器" class="headerlink" title="查询过滤器"></a>查询过滤器</h3><table><thead><tr><th align="center">过滤器</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">filter_by(字段名=值)</td><td align="center">等值查询</td></tr><tr><td align="center">filter(函数引用/比较运算)</td><td align="center">函数或比较查询</td></tr><tr><td align="center">limit(限定条数)</td><td align="center">限定返回结果数量</td></tr><tr><td align="center">offset(偏移条数)</td><td align="center">偏移1即从第二条开始查询</td></tr><tr><td align="center">order_by(排序字段)</td><td align="center">对查询结果根据字段进行排序</td></tr><tr><td align="center">options()</td><td align="center">针对原查询限定查询的字段</td></tr></tbody></table><h2 id="relationship"><a href="#relationship" class="headerlink" title="relationship"></a>relationship</h2><p>在构建SQLAlchemy模型的时候，relationship我觉得有点难，可以看一下这篇博客，感觉讲的比较详细。</p><p><a href="https://www.cnblogs.com/goldsunshine/p/9269880.html">sqlalchemy外键和relationship查询</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在看fastapi的官方文档，然后感觉sql部分挺难的，于是写下一篇博客来记录下。&lt;/p&gt;
&lt;h2 id=&quot;安装工具&quot;&gt;&lt;a href=&quot;#安装工具&quot; class=&quot;headerlink&quot; title=&quot;安装工具&quot;&gt;&lt;/a&gt;安装工具&lt;/h2&gt;&lt;p&gt;首先要安装两个东西&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install sqlalchemy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install pymysql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;前者是一个ORM框架，在ORM中，你创建一个类就会通过SQLAlchemy将其自动转成一张表，在类中的每一个属性就会转成表中的字段。&lt;/p&gt;
&lt;p&gt;后者是用来连接数据库的&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 整合 mybatis generator 逆向生成工程</title>
    <link href="http://example.com/2021/07/22/springboot%E6%95%B4%E5%90%88mybatis%20generator%20/"/>
    <id>http://example.com/2021/07/22/springboot%E6%95%B4%E5%90%88mybatis%20generator%20/</id>
    <published>2021-07-22T03:53:38.755Z</published>
    <updated>2021-07-22T07:03:16.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Springboot-整合-mybatis-generator-逆向生成工程"><a href="#Springboot-整合-mybatis-generator-逆向生成工程" class="headerlink" title="Springboot 整合 mybatis generator 逆向生成工程"></a>Springboot 整合 mybatis generator 逆向生成工程</h3><h4 id="1-先新创建一个springboot项目，引入相关的骨架"><a href="#1-先新创建一个springboot项目，引入相关的骨架" class="headerlink" title="1.先新创建一个springboot项目，引入相关的骨架"></a>1.先新创建一个springboot项目，引入相关的骨架</h4><h4 id="2-在pom-xml文件中引入相关依赖"><a href="#2-在pom-xml文件中引入相关依赖" class="headerlink" title="2.在pom.xml文件中引入相关依赖"></a>2.在pom.xml文件中引入相关依赖</h4><ol><li><p>引入sqlserver的依赖</p><a id="more"></a></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.microsoft.sqlserver<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mssql-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.4.1.jre8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者引入mysql的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>引入mybatis-generator依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>添加插件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                   <span class="hljs-comment">&lt;!--configurationFile对应着generator配置文件的路径--&gt;</span><br>             <span class="hljs-comment">&lt;!--需要在src/main/resources创建generator/generatorConfig.xml文件--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>               <span class="hljs-comment">&lt;!--数据库驱动好像是要在这里引入，在上面引入可能会出现问题，没有试过--&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.microsoft.sqlserver<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mssql-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.4.1.jre8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>配置generatorConfig.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Tables&quot;</span>  <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否去除自动生成的注释 true：是,false:否 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--数据库连接驱动类,URL,用户名,密码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:sqlserver://172.22.224.60:1433;DatabaseName=GXKH2021&quot;</span> <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;jxkh&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;Jxkh-22183305&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成(实体)模型的包名和位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.hut.jsj.pojo&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;./src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成XML映射文件的包名和位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;./src/main/resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成DAO接口的包名和位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.hut.jsj.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;./src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 关联自动生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span><br>        <span class="hljs-comment">&lt;!--如果是要生成数据库中的所有的表，那么tablename处填%--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;UserData&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;UserData&quot;</span> <span class="hljs-attr">enableCountByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableUpdateByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableDeleteByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableSelectByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">selectByExampleQueryId</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>上面的是sqlserver的，mysql和这个相差无几</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span>  <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/sell?serverTimezone=Asia/Shanghai&quot;</span> <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成实体类的包名和位置 ，targetPackage指的是包名,targetProject值得是路径位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.example.demo.model&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.example.demo.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成DAO的包名和位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.example.demo.dao&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;seller_info&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;SellerInfo&quot;</span> <span class="hljs-attr">enableCountByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableUpdateByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableDeleteByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableSelectByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">selectByExampleQueryId</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>再运行mvn mybatis-generator:generate即可自动生成代码</li></ol><p><img src="/.com//笔记\img\image-20210322204729417.png" alt="image-20210322204729417"></p><h4 id="pom-xml文件总览"><a href="#pom-xml文件总览" class="headerlink" title="pom.xml文件总览"></a>pom.xml文件总览</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.hut<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsj<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>jsj<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--configurationFile对应着generator配置文件的路径--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.microsoft.sqlserver<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mssql-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.4.1.jre8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Springboot-整合-mybatis-generator-逆向生成工程&quot;&gt;&lt;a href=&quot;#Springboot-整合-mybatis-generator-逆向生成工程&quot; class=&quot;headerlink&quot; title=&quot;Springboot 整合 mybatis generator 逆向生成工程&quot;&gt;&lt;/a&gt;Springboot 整合 mybatis generator 逆向生成工程&lt;/h3&gt;&lt;h4 id=&quot;1-先新创建一个springboot项目，引入相关的骨架&quot;&gt;&lt;a href=&quot;#1-先新创建一个springboot项目，引入相关的骨架&quot; class=&quot;headerlink&quot; title=&quot;1.先新创建一个springboot项目，引入相关的骨架&quot;&gt;&lt;/a&gt;1.先新创建一个springboot项目，引入相关的骨架&lt;/h4&gt;&lt;h4 id=&quot;2-在pom-xml文件中引入相关依赖&quot;&gt;&lt;a href=&quot;#2-在pom-xml文件中引入相关依赖&quot; class=&quot;headerlink&quot; title=&quot;2.在pom.xml文件中引入相关依赖&quot;&gt;&lt;/a&gt;2.在pom.xml文件中引入相关依赖&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;引入sqlserver的依赖&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
    <category term="springboot" scheme="http://example.com/tags/springboot/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://example.com/2021/07/22/redis/"/>
    <id>http://example.com/2021/07/22/redis/</id>
    <published>2021-07-22T03:44:40.680Z</published>
    <updated>2021-07-22T06:50:53.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h2><h3 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h3><h4 id="KV键值对"><a href="#KV键值对" class="headerlink" title="KV键值对"></a>KV键值对</h4><ul><li>新浪：<strong>Redis</strong></li><li>美团：Redis+Tair</li><li>阿里、百度：Redis+memecache</li></ul><a id="more"></a><h4 id="文档型数据库（bson格式-和-json一样）"><a href="#文档型数据库（bson格式-和-json一样）" class="headerlink" title="文档型数据库（bson格式 和 json一样）"></a>文档型数据库（bson格式 和 json一样）</h4><ul><li><strong>MongoDB</strong>(一般必须要掌握)<ul><li>MongoDB是一个基于分布式文件存储的数据库，c++编写，主要用来处理大量的文档！</li><li>是一个介于关系型数据库和菲关系型数据库中间的产品！</li></ul></li><li>ConthDB</li></ul><h4 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h4><ul><li><strong>HBase</strong></li><li>分布式文件系统</li></ul><h4 id="图关系数据库"><a href="#图关系数据库" class="headerlink" title="图关系数据库"></a>图关系数据库</h4><ul><li>他不是存图形，放的是关系，比如：朋友圈社交网络，广告推荐</li><li><strong>Neo4j</strong>,InfoGrid</li></ul><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201007193243690.png" alt="image-20201007193243690"></p><h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Redis（<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。</p></blockquote><h3 id="Redis能干嘛"><a href="#Redis能干嘛" class="headerlink" title="Redis能干嘛"></a>Redis能干嘛</h3><ol><li>内存存储、持久化。内存中是断电即失，所以说持久化很重要（rdb、aof）</li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器（浏览量!)</li></ol><h3 id="Redis的特性"><a href="#Redis的特性" class="headerlink" title="Redis的特性"></a>Redis的特性</h3><ol><li>多样的数据类型</li><li>持久优化</li><li>集群</li><li>事务</li></ol><h3 id="Linux安装Redis"><a href="#Linux安装Redis" class="headerlink" title="Linux安装Redis"></a>Linux安装Redis</h3><ol><li>下载安装包</li></ol><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201007195230760.png" alt="image-20201007195230760"></p><ol start="2"><li>解压Redis的安装包，程序一般放在/opt目录下。</li><li>进入解压后的文件，可以看到我们redis的配置文件</li></ol><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014160551048.png" alt="image-20201014160551048"></p><ol start="4"><li>基本的环境安装命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install gcc-c++<br><span class="hljs-comment">#如果redis的版本是6.0以上的，需要升级gcc到5.3以上</span><br>yum -y install centos-release-scl<br>yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils<br>scl <span class="hljs-built_in">enable</span> devtoolset-9 bash<br><span class="hljs-comment">#需要注意的是scl命令启用只是临时的，退出shell或重启就会恢复原系统gcc版本。</span><br><span class="hljs-comment">#如果要长期使用gcc 9.3的话：</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile<br><span class="hljs-comment">#这样退出shell重新打开就是新版的gcc了</span><br>make<br></code></pre></td></tr></table></figure><ol start="5"><li><p>redis的默认安装路径<code>/usr/local/bin</code></p></li><li><p>将redis配置文件，复制到我们当前目录下    redis.conf文件</p></li><li><p>配置redis为后台启动</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#cd 到redis.conf文件目录</span><br>vim 复制的redis.conf文件的路径<br><span class="hljs-comment">#向下找，修改daemenize no 为 daemonize yes</span><br></code></pre></td></tr></table></figure><ol start="8"><li>启动redis</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在/usr/local/bin目录下</span><br>redis-server redis.conf文件的地址<br>redis-server<br>redis-cli p6379   <span class="hljs-comment">#连接</span><br></code></pre></td></tr></table></figure><ol start="9"><li>查看redis的进程是否开启</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef|grep redis <br></code></pre></td></tr></table></figure><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014165115068.png" alt="image-20201014165115068"></p><ol start="10"><li>关闭redis服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">shutdown<br></code></pre></td></tr></table></figure><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014164917598.png" alt="image-20201014164917598"></p><p><a href="https://blog.csdn.net/u011159417/article/details/80085011">Linux安装redis</a></p><h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3><p>redis-benchmark是一个压力测试工具！</p><p>官方自带的性能测试工具！</p><p>redis-benchmark命令参数</p><table><thead><tr><th align="left">序号</th><th align="left">选项</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>-h</strong></td><td align="left">指定服务器主机名</td><td align="left">127.0.0.1</td></tr><tr><td align="left">2</td><td align="left"><strong>-p</strong></td><td align="left">指定服务器端口</td><td align="left">6379</td></tr><tr><td align="left">3</td><td align="left"><strong>-s</strong></td><td align="left">指定服务器 socket</td><td align="left"></td></tr><tr><td align="left">4</td><td align="left"><strong>-c</strong></td><td align="left">指定并发连接数</td><td align="left">50</td></tr><tr><td align="left">5</td><td align="left"><strong>-n</strong></td><td align="left">指定请求数</td><td align="left">10000</td></tr><tr><td align="left">6</td><td align="left"><strong>-d</strong></td><td align="left">以字节的形式指定 SET/GET 值的数据大小</td><td align="left">2</td></tr><tr><td align="left">7</td><td align="left"><strong>-k</strong></td><td align="left">1=keep alive 0=reconnect</td><td align="left">1</td></tr><tr><td align="left">8</td><td align="left"><strong>-r</strong></td><td align="left">SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td align="left"></td></tr><tr><td align="left">9</td><td align="left"><strong>-P</strong></td><td align="left">通过管道传输 <numreq> 请求</numreq></td><td align="left">1</td></tr><tr><td align="left">10</td><td align="left"><strong>-q</strong></td><td align="left">强制退出 redis。仅显示 query/sec 值</td><td align="left"></td></tr><tr><td align="left">11</td><td align="left"><strong>–csv</strong></td><td align="left">以 CSV 格式输出</td><td align="left"></td></tr><tr><td align="left">12</td><td align="left"><strong>-l</strong></td><td align="left">生成循环，永久执行测试</td><td align="left"></td></tr><tr><td align="left">13</td><td align="left"><strong>-t</strong></td><td align="left">仅运行以逗号分隔的测试命令列表。</td><td align="left"></td></tr><tr><td align="left">14</td><td align="left"><strong>-I</strong></td><td align="left">Idle 模式。仅打开 N 个 idle 连接并等待。</td><td align="left"></td></tr></tbody></table><p>简单测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#测试：100个并发连接   100000请求</span><br>redis-benchmark -h localhost -p 6379 -c 100 -n 100000<br></code></pre></td></tr></table></figure><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014171727085.png" alt="image-20201014171727085"></p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014172606359.png" alt="image-20201014172606359"></p><h3 id="基础的知识"><a href="#基础的知识" class="headerlink" title="基础的知识"></a>基础的知识</h3><p>redis一共有16个数据库。</p><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014173309203.png" alt="image-20201014173309203"></p><p>默认使用的是第0个</p><p>可以使用select进行切换数据库！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; select 3  <span class="hljs-comment">#切换数据库</span><br>OK<br>127.0.0.1:6379[3]&gt; DBSIZE <span class="hljs-comment">#查看数据库大小</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[3]&gt; <span class="hljs-built_in">set</span> name pty  <span class="hljs-comment">#设置name 属性值</span><br>OK<br>127.0.0.1:6379[3]&gt; get name   <span class="hljs-comment">#拿到数据库中的name属性值</span><br><span class="hljs-string">&quot;pty&quot;</span><br>127.0.0.1:6379[3]&gt; keys *    <span class="hljs-comment">#查看数据库中的全部key</span><br>1) <span class="hljs-string">&quot;name&quot;</span><br>127.0.0.1:6379[3]&gt; flushdb   <span class="hljs-comment">#清除当前数据库</span><br>OK<br>127.0.0.1:6379[3]&gt; flushall   <span class="hljs-comment">#清除全部数据库</span><br>OK<br></code></pre></td></tr></table></figure><p><strong>redis是单线程的</strong></p><p>Redis很快，是基于内存操作的，CPU不是Redis性能瓶颈，Redis的瓶颈是机器的内存和网络带宽。</p><p><strong>redis是单线程的为什么这么快</strong></p><p>速度：CPU&gt;内存&gt;硬盘</p><p>redis是将所有的数据全部放在内存中的，多线程cpu上下文会切换，这是一个耗时操作。对于内存系统来说，如果没有上下文切换效率就是最高的，所以单线程去操作效率就是最高的。</p><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作==数据库==、==缓存==和==消息中间件MQ==。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）</p><h3 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> name pty  <span class="hljs-comment">#set一个key</span><br>OK<br>127.0.0.1:6379&gt; exists name   <span class="hljs-comment">#判断当前key是否存在，存在则返回1，不存在返回0</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; exists name1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; expire name 10  <span class="hljs-comment">#给当前的key设置过期时间，单位是秒</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ttl name     <span class="hljs-comment">#查看当前key的剩余时间</span><br>(<span class="hljs-built_in">integer</span>) -2<br>127.0.0.1:6379&gt; move name 2   <span class="hljs-comment">#移动当前的可以到第二个数据库</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> name  <span class="hljs-comment">#查看当前key的类型</span><br>string<br>127.0.0.1:6379&gt; del name   <span class="hljs-comment">#删除当前的key,可以同时删除多个key，返回删除的key的数量</span><br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>更多的redis-key的命令参考官网：<a href="http://www.redis.cn/commands.html">redis官网</a></p><h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#####################################</span><br><span class="hljs-comment">#append 追加字符串</span><br><span class="hljs-comment">#strlen 获取列表的长度</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key1 v1   <span class="hljs-comment">#set一个key</span><br>OK<br>127.0.0.1:6379&gt; get key1  <br><span class="hljs-string">&quot;v1&quot;</span><br>127.0.0.1:6379&gt; append key1 hah   <span class="hljs-comment">#在key1后面追加字符串，如果key1不存在，就相当于set key1</span><br>(<span class="hljs-built_in">integer</span>) 5<br>127.0.0.1:6379&gt; get key1<br><span class="hljs-string">&quot;v1hah&quot;</span><br>127.0.0.1:6379&gt; strlen key1 <span class="hljs-comment">#获取key1的长度</span><br>(<span class="hljs-built_in">integer</span>) 5<br><span class="hljs-comment">########################################</span><br><span class="hljs-comment">#incr自增1</span><br><span class="hljs-comment">#decr自减1</span><br><span class="hljs-comment">#incrby 自增指定的数</span><br><span class="hljs-comment">#decrby 自减指定的数</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> views 0<br>OK<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;0&quot;</span><br>127.0.0.1:6379&gt; incr views    <span class="hljs-comment">#自增 +1</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;1&quot;</span><br>127.0.0.1:6379&gt; decr views    <span class="hljs-comment">#自减 -1</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;0&quot;</span><br>127.0.0.1:6379&gt; incrby views 10  <span class="hljs-comment">#自增 +10，自增多少可以自己设置</span><br>(<span class="hljs-built_in">integer</span>) 10<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;10&quot;</span><br>127.0.0.1:6379&gt; decrby views 20 <span class="hljs-comment">#自减 -20  自减多少可以自己设置</span><br>(<span class="hljs-built_in">integer</span>) -10<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;-10&quot;</span><br><span class="hljs-comment">###############################</span><br><span class="hljs-comment">#字符串范围 range</span><br><span class="hljs-comment">#截取字符串</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key1 hello,world<br>OK<br>127.0.0.1:6379&gt; get key1<br><span class="hljs-string">&quot;hello,world&quot;</span><br>127.0.0.1:6379&gt; getrange key1 0 3    <span class="hljs-comment">#截取字符串 [0,3]</span><br><span class="hljs-string">&quot;hell&quot;</span><br>127.0.0.1:6379&gt; getrange key1 0 -1   <span class="hljs-comment">#截取全部字符串，和get key1效果一样</span><br><span class="hljs-string">&quot;hello,world&quot;</span><br><span class="hljs-comment">#################################</span><br><span class="hljs-comment">#setrange 替换字符串</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key2 abcde<br>OK<br>127.0.0.1:6379&gt; get key2<br><span class="hljs-string">&quot;abcde&quot;</span><br>127.0.0.1:6379&gt; setrange key2 2 hahaa  <span class="hljs-comment">#替换指定位置开始的字符串，这里的指定位置和数组一样，即2相当于3</span><br>(<span class="hljs-built_in">integer</span>) 7<br>127.0.0.1:6379&gt; get key2 <br><span class="hljs-string">&quot;abhahaa&quot;</span><br><span class="hljs-comment">###########################################</span><br><span class="hljs-comment">#setex(set with expire)  </span><br><span class="hljs-comment">#设置一个key，并为其设置过期时间，和expire差不多，但是setex是在设置key的时候就为key设置过期时间,而expire是在设置完key以后在设置过期时间</span><br>127.0.0.1:6379&gt; setex name 20 pty  <span class="hljs-comment">#设置一个key,并设置20s过期</span><br>OK<br>127.0.0.1:6379&gt; ttl name   <span class="hljs-comment">#查看当前key的剩余时间</span><br>(<span class="hljs-built_in">integer</span>) 13<br>127.0.0.1:6379&gt; <br><span class="hljs-comment">#setnx(set if not exist) 设置一个key,如果key不存在则设置，存在则创建失败。</span><br>127.0.0.1:6379&gt; setnx key3 hh   <span class="hljs-comment">#设置一个key,因为key3不存在，所以创建成功</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; get key3<br><span class="hljs-string">&quot;hh&quot;</span><br>127.0.0.1:6379&gt; setnx key3 hah  <span class="hljs-comment">#设置一个key,因为key3已经存在，所以创建失败</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; get key3<br><span class="hljs-string">&quot;hh&quot;</span><br><span class="hljs-comment">#############################</span><br>127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3  <span class="hljs-comment">#同时设置多个值</span><br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;k3&quot;</span><br>2) <span class="hljs-string">&quot;k1&quot;</span><br>3) <span class="hljs-string">&quot;k2&quot;</span><br>127.0.0.1:6379&gt; mget k1 k2 k3  <span class="hljs-comment">#同时获取多个值</span><br>1) <span class="hljs-string">&quot;v1&quot;</span><br>2) <span class="hljs-string">&quot;v2&quot;</span><br>3) <span class="hljs-string">&quot;v3&quot;</span><br>127.0.0.1:6379&gt; msetnx k1 v1 k4 v2  <span class="hljs-comment">#同时设置多个值，如果已经存在，则创建失败，这是一个原子性操作，要么同时成功，要么同时失败，因为k1已经存在，所以创建失败，那么k4也没有创建成功。</span><br>(<span class="hljs-built_in">integer</span>) 0<br><span class="hljs-comment">#####################################</span><br><span class="hljs-comment">#getset   先返回key的值，然后再设置key的值</span><br>127.0.0.1:6379&gt; getset k1 v2   <span class="hljs-comment">#先返回key1原来的值v1，在将k1设置为v2</span><br><span class="hljs-string">&quot;v1&quot;</span><br>127.0.0.1:6379&gt; get k1<br><span class="hljs-string">&quot;v2&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>所有的List命令都是由l开头的。Redis不区分大小写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###############################################</span><br><span class="hljs-comment">#Lpush</span><br><span class="hljs-comment">#Rpush</span><br><span class="hljs-comment">#Lrange</span><br>127.0.0.1:6379&gt; lpush list one <span class="hljs-comment">#将一个值或多个值插入到key的头部（左），这里的list相当于这个列表的名字</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; lpush list two<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; lpush list three<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; lrange list 0 -1 <span class="hljs-comment">#获取list中指定区间的值，  0 -1 表示获取全部的值</span><br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379&gt; lrange list 0 1 <span class="hljs-comment">#可以看到后进先出，类似于栈</span><br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379&gt; rpush list 0  <span class="hljs-comment">#将一个值或多个值插入到list的尾部（右）  lpush从左插入，头部，rpush从右插入，尾部</span><br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;one&quot;</span><br>4) <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-comment">#######################################</span><br><span class="hljs-comment">#Lpop</span><br><span class="hljs-comment">#Rpop</span><br>127.0.0.1:6379&gt; lpop list  <span class="hljs-comment">#移出list的第一个元素，从左边移出</span><br><span class="hljs-string">&quot;three&quot;</span><br>127.0.0.1:6379&gt; rpop list  <span class="hljs-comment">#移出list的最后一个元素，从右边移出</span><br><span class="hljs-string">&quot;0&quot;</span><br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;two&quot;</span><br>2) <span class="hljs-string">&quot;one&quot;</span><br><span class="hljs-comment">#######################################</span><br><span class="hljs-comment">#Lindex</span><br>127.0.0.1:6379&gt; lindex list 1   <span class="hljs-comment">#通过下标获得list的某一个值</span><br><span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379&gt; lindex list 0<br><span class="hljs-string">&quot;two&quot;</span><br><span class="hljs-comment">#########################################</span><br>Llen<br>127.0.0.1:6379&gt; Llen list    <span class="hljs-comment">#获取list的长度</span><br>(<span class="hljs-built_in">integer</span>) 2<br><span class="hljs-comment">########################################</span><br><span class="hljs-comment">#移出指定的值</span><br>Lrem<br>127.0.0.1:6379&gt; lrange list 0 -1   <span class="hljs-comment">#可以看到，list中可以存在相同的值</span><br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;three&quot;</span><br>3) <span class="hljs-string">&quot;two&quot;</span><br>4) <span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379&gt; lrem list 1 one    <span class="hljs-comment">#移出list集中指定个数的value,  移除list中的1个one</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;three&quot;</span><br>3) <span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379&gt; lrem list 2 three   <span class="hljs-comment">#移除list中的2个three</span><br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;two&quot;</span><br><span class="hljs-comment">########################################</span><br><span class="hljs-comment">#Ltrim 修改集合中的元素，只保留指定区间的元素，可以理解为lpop,只不过这个是将指定区间外的都移除</span><br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;k4&quot;</span><br>2) <span class="hljs-string">&quot;k3&quot;</span><br>3) <span class="hljs-string">&quot;k2&quot;</span><br>4) <span class="hljs-string">&quot;k1&quot;</span><br>127.0.0.1:6379&gt; ltrim list 1 2   <span class="hljs-comment">#只保留list集合中区间1到区间2的元素</span><br>OK<br>127.0.0.1:6379&gt; lrange list 0 -1   <span class="hljs-comment">#lrange 0 -1 是获取list的所有值，只返回两条，说明list已经被改变，不再是4条数据</span><br>1) <span class="hljs-string">&quot;k3&quot;</span><br>2) <span class="hljs-string">&quot;k2&quot;</span><br><span class="hljs-comment">#####################################</span><br>RpopLpush  <span class="hljs-comment">#移除列表的最后一个元素，并将他移动到一个新的列表的头部（左）</span><br>127.0.0.1:6379&gt; rpoplpush list list1 <span class="hljs-comment">#将list的最后一个元素移到list1的头部，如果list1不存在会自动创建</span><br><span class="hljs-string">&quot;k2&quot;</span><br>127.0.0.1:6379&gt; lrange list1 0 -1<br>1) <span class="hljs-string">&quot;k2&quot;</span><br><span class="hljs-comment">#######################################</span><br><span class="hljs-comment">#Lset  将列表中指定下标的值修改为另一个值   如果列表不存在或者指定下标没有值，则修改失败，类似有更新操作</span><br>127.0.0.1:6379&gt; exists list   <span class="hljs-comment">#判断数据库中是否存在list这个key</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; lset list 1 pty    <span class="hljs-comment">#因为不存在list，所以使用lset修改出错</span><br>(error) ERR no such key<br>127.0.0.1:6379&gt; lpush list k1    <span class="hljs-comment">#创建list,并且添加值</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; lrange list 0 0<br>1) <span class="hljs-string">&quot;k1&quot;</span><br>127.0.0.1:6379&gt; lset list 1 pty   <span class="hljs-comment">#使用lset修改，因为list只有1个值，下标为1的位置没有值，所以修改失败</span><br>(error) ERR index out of range     <span class="hljs-comment">#超出范围</span><br>127.0.0.1:6379&gt; lset list 0 pty    <span class="hljs-comment">#使用lset修改list中下标为0的值，修改为pty</span><br>OK<br>127.0.0.1:6379&gt; lrange list 0 00<br>1) <span class="hljs-string">&quot;pty&quot;</span><br><span class="hljs-comment">##########################################</span><br><span class="hljs-comment">#Linsert  在某个特定的元素的前面或者后面添加一个值</span><br>127.0.0.1:6379&gt; Linsert list before pty hello   <span class="hljs-comment">#在list中的pty前面添加一个值 hello</span><br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;pty&quot;</span><br>127.0.0.1:6379&gt; Linsert list after pty ok   <span class="hljs-comment">#在list中的pey后面添加一个值 ok</span><br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; lrange list 0 -1<br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;pty&quot;</span><br>3) <span class="hljs-string">&quot;ok&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h3><p>set中的值不能重复，List中的值可以重复。set无序不重复集合。</p><p>set的命令以s开头</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##############################</span><br><span class="hljs-comment">#Sadd  往set中添加一个元素</span><br><span class="hljs-comment">#Smembers 查看set中的所有值</span><br><span class="hljs-comment">#Sismember 判断一个值是不是在set中，是返回1，不是返回0</span><br>127.0.0.1:6379&gt; sadd myset hello  <span class="hljs-comment">#向set中添加一个值</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd myset pty<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd myset pty  <span class="hljs-comment">#向set中添加一个重复的值，因为set的值不能重复，所以添加失败</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; smembers myset  <span class="hljs-comment">#查看set中的所有值</span><br>1) <span class="hljs-string">&quot;pty&quot;</span><br>2) <span class="hljs-string">&quot;hello&quot;</span><br>127.0.0.1:6379&gt; sismember myset pty   <span class="hljs-comment">#判断pty是否在set中，在返回1</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sismember myset pet   <span class="hljs-comment">#判断pet是否在set中，不在返回0</span><br>(<span class="hljs-built_in">integer</span>) 0<br><span class="hljs-comment">##############################</span><br><span class="hljs-comment">#Scard 获取set中的元素个数</span><br>127.0.0.1:6379&gt; scard myset <span class="hljs-comment">#获取myset中的元素个数</span><br>(<span class="hljs-built_in">integer</span>) 2<br><span class="hljs-comment">###############################</span><br><span class="hljs-comment">#Srem 移除set中的特定的值</span><br>127.0.0.1:6379&gt; srem myset hello   <span class="hljs-comment">#移除set中的特定值，移除myset中的hello</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; smembers myset<br>1) <span class="hljs-string">&quot;pty&quot;</span><br><span class="hljs-comment">##################################</span><br><span class="hljs-comment">#Srandmember  在set集合中随机抽取指定个数的元素</span><br>127.0.0.1:6379&gt; sadd myset  1 <br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd myset  2<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd myset  3 4 5 6 7 8 9 10  <span class="hljs-comment">#向myset中添加元素，元素个数少，抽取有偶然性</span><br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6379&gt; srandmember myset 1   <span class="hljs-comment">#在set集合中随机抽取一个元素</span><br>1) <span class="hljs-string">&quot;6&quot;</span><br>127.0.0.1:6379&gt; srandmember myset 1<br>1) <span class="hljs-string">&quot;3&quot;</span><br>127.0.0.1:6379&gt; srandmember myset 3  <span class="hljs-comment">#在set集合中随机抽取3个元素</span><br>1) <span class="hljs-string">&quot;5&quot;</span><br>2) <span class="hljs-string">&quot;2&quot;</span><br>3) <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-comment">###############################</span><br><span class="hljs-comment">#Spop 在set集合中随机移除指定个数个元素</span><br>127.0.0.1:6379&gt; spop myset 1   <span class="hljs-comment">#随机移除一个元素</span><br>1) <span class="hljs-string">&quot;1&quot;</span><br>127.0.0.1:6379&gt; spop myset 3   <span class="hljs-comment">#随机移除三个元素</span><br>1) <span class="hljs-string">&quot;7&quot;</span><br>2) <span class="hljs-string">&quot;9&quot;</span><br>3) <span class="hljs-string">&quot;pty&quot;</span><br><span class="hljs-comment">###############################</span><br><span class="hljs-comment">#Smov 将一个指定元素元素从一个集合移到另一个集合</span><br>127.0.0.1:6379&gt; flushdb<br>OK<br>127.0.0.1:6379&gt; sadd set1 1 2 3 4 5 6<br>(<span class="hljs-built_in">integer</span>) 6<br>127.0.0.1:6379&gt; smove set1 set2 1   <span class="hljs-comment">#将set1中的1移到set2中，如果set2没有创建会自动创建</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; smembers set2<br>1) <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-comment">#############################</span><br><span class="hljs-comment">#Sdiff  返回A B两个集合中，A集合中的和B集合中不同的元素，如果是SDIFF B A，则返回B中与A不同的元素</span><br><span class="hljs-comment">#Sinter 返回A B两个set集合中共有的元素</span><br><span class="hljs-comment">#Sunion 返回A B两个set集合中的所有元素，如果具有相同元素，只显示一个</span><br>127.0.0.1:6379&gt; sadd set1 a<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd set1 b<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd set1 c   <span class="hljs-comment">#向set1中添加a,b,c三个元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd set2 c<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd set2 d<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd set2 e   <span class="hljs-comment">#向set2中添加c，d,e三个元素，可以看到，set1和set2具有c这个相同元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sdiff set1 set2  <span class="hljs-comment">#返回set1和set2中，set1中的特有元素 相当于求差集</span><br>1) <span class="hljs-string">&quot;a&quot;</span><br>2) <span class="hljs-string">&quot;b&quot;</span><br>127.0.0.1:6379&gt; sinter set1 set2  <span class="hljs-comment">#返回set1和set2共有元素  相当于求交集</span><br>1) <span class="hljs-string">&quot;c&quot;</span><br>127.0.0.1:6379&gt; sunion set1 set2  <span class="hljs-comment">#返回set1和set2所有元素 相当于求并集</span><br>1) <span class="hljs-string">&quot;b&quot;</span><br>2) <span class="hljs-string">&quot;c&quot;</span><br>3) <span class="hljs-string">&quot;a&quot;</span><br>4) <span class="hljs-string">&quot;e&quot;</span><br>5) <span class="hljs-string">&quot;d&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h3><p>每一个key里面又可以存储多个key-value组合，可以理解成类，如Person是一个类，里面包含username,age,class等属性，这里的Person就相当于外面的key,username就是里面的key,value就是属性值。</p><p>redis是一个key-value数据库，hash其实就是value里面又是多个key-value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">############################</span><br><span class="hljs-comment">#Hset 向key中添加 key-value组合，可以同时添加多个key-value</span><br><span class="hljs-comment">#Hget 获取key中指定key的value,只能获取一个</span><br><span class="hljs-comment">#Hmget 获取key中指定key的value,可以同时获取多个</span><br>127.0.0.1:6379&gt; hset hash1 filed1 hello   <span class="hljs-comment">#向hash1中添加key=filed1,value=hello的元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hget hash1 filed1     <span class="hljs-comment">#获取hash1中key=filed1的value</span><br><span class="hljs-string">&quot;hello&quot;</span><br>127.0.0.1:6379&gt; hset hash1 filed2 pty filed3 haha <span class="hljs-comment">#同时设置多个key-value</span><br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; hmget hash1 filed1 filed2 filed3  <span class="hljs-comment">#同时获取多个key-value</span><br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;pty&quot;</span><br>3) <span class="hljs-string">&quot;haha&quot;</span><br><span class="hljs-comment">#################################</span><br><span class="hljs-comment">#Hdel 删除hash中指定key，可以同时删除多个</span><br>127.0.0.1:6379&gt; hdel hash1 filed3  <span class="hljs-comment">#删除hash1中的key=filed3</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hgetall hash1   <span class="hljs-comment">#获取hash1中的所有key-value，可以看见filed3没有了</span><br>1) <span class="hljs-string">&quot;filed1&quot;</span><br>2) <span class="hljs-string">&quot;hello&quot;</span><br>3) <span class="hljs-string">&quot;filed2&quot;</span><br>4) <span class="hljs-string">&quot;pty&quot;</span><br><span class="hljs-comment">####################################</span><br><span class="hljs-comment">#Hlen  获取hash中key-value的数量</span><br>127.0.0.1:6379&gt; hlen hash1 <br>(<span class="hljs-built_in">integer</span>) 2  <span class="hljs-comment">#返回的是key-value的数量，像上面的filed1和hello是一个key-value，数量为1。</span><br><span class="hljs-comment">#####################################</span><br><span class="hljs-comment">#Hexists 判断hash中是否存在指定的key，</span><br>127.0.0.1:6379&gt; hexists hash1 filed1  <span class="hljs-comment">#判断hash1中是否存在filed1</span><br>(<span class="hljs-built_in">integer</span>) 1<br><span class="hljs-comment">#######################################</span><br><span class="hljs-comment">#Hkeys  获取hash中的所有key</span><br><span class="hljs-comment">#Hvals 获取hash中所有的value</span><br>127.0.0.1:6379&gt; hkeys hash1   <span class="hljs-comment">#获取hash1中所有的key</span><br>1) <span class="hljs-string">&quot;filed1&quot;</span><br>2) <span class="hljs-string">&quot;filed2&quot;</span><br>127.0.0.1:6379&gt; hvals hash1   <span class="hljs-comment">#获取hash1中所有的value</span><br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;pty&quot;</span><br><span class="hljs-comment">####################################</span><br><span class="hljs-comment">#Hincrby  给hash中的指定key的值自增指定的数，没有hdecrby hincr hdecr</span><br>127.0.0.1:6379&gt; hset <span class="hljs-built_in">hash</span> field 2<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hincrby <span class="hljs-built_in">hash</span> field 4  <span class="hljs-comment">#给hash中的field自增+4</span><br>(<span class="hljs-built_in">integer</span>) 6<br>127.0.0.1:6379&gt; hget <span class="hljs-built_in">hash</span> field<br><span class="hljs-string">&quot;6&quot;</span><br><span class="hljs-comment">#######################################</span><br><span class="hljs-comment">#Hsetnx 如果key不存在则创建成功，存在则不成功</span><br>127.0.0.1:6379&gt; hsetnx <span class="hljs-built_in">hash</span> field1 1   <span class="hljs-comment">#因为hash中没有field1，创建成功</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hsetnx <span class="hljs-built_in">hash</span> field1 2 <span class="hljs-comment">#因为hash中已经有了field1,创建失败</span><br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><p>从上面的命令可以看出来，hash和string的操作很像。hash更适合于对象的存储，string更适合于字符串存储。</p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><p>在set的基础上增加了一个值  ，set添加数组的时候<code>sadd k1 v1</code> 而zset添加时<code>zadd k1 score1 v1</code></p><p>在key-value中间多了一个数字，这个数字用来排序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">######################</span><br><span class="hljs-comment">#Zadd 向zset中添加数据，并指定一个值，可以根据这个值进行排序。</span><br>127.0.0.1:6379&gt; zadd zset1 1 one    <span class="hljs-comment">#向zset1中添加数据，指定score为1</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd zset1 2 two 3 three<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; zrange zset1 0 -1  <span class="hljs-comment">#添加多个数据，score为2 3</span><br>1) <span class="hljs-string">&quot;one&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;three&quot;</span><br>127.0.0.1:6379&gt; <br><span class="hljs-comment">#########################</span><br><span class="hljs-comment">#Zrangebyscore 获取zset中的value，并根据设定的score的值进行排序，升序排序。</span><br><span class="hljs-comment">#Zrevrangebyscore 获取zsetz中的value,根据设定的score的值进行排序，降序排序。</span><br>127.0.0.1:6379&gt; zadd salary 2500 xh<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd salary 3000 xm<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd salary 5000 pty<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zrangebyscore salary -inf +inf   <span class="hljs-comment">#根据score获取zset的value,score的取值范围为负无穷到正无穷，inf表示无穷大。 inf处的值可以任意修改</span><br>1) <span class="hljs-string">&quot;xh&quot;</span><br>2) <span class="hljs-string">&quot;xm&quot;</span><br>3) <span class="hljs-string">&quot;pty&quot;</span><br>127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores <span class="hljs-comment">#不仅根据score获取zset中的value，同时还获取相对应的score</span><br>1) <span class="hljs-string">&quot;xh&quot;</span><br>2) <span class="hljs-string">&quot;2500&quot;</span><br>3) <span class="hljs-string">&quot;xm&quot;</span><br>4) <span class="hljs-string">&quot;3000&quot;</span><br>5) <span class="hljs-string">&quot;pty&quot;</span><br>6) <span class="hljs-string">&quot;5000&quot;</span><br>127.0.0.1:6379&gt; zrevrangebyscore salary +inf -inf withscores  <span class="hljs-comment">#降序排序</span><br>1) <span class="hljs-string">&quot;pty&quot;</span><br>2) <span class="hljs-string">&quot;5000&quot;</span><br>3) <span class="hljs-string">&quot;xm&quot;</span><br>4) <span class="hljs-string">&quot;3000&quot;</span><br>5) <span class="hljs-string">&quot;xh&quot;</span><br>6) <span class="hljs-string">&quot;2500&quot;</span><br><span class="hljs-comment">###################################</span><br><span class="hljs-comment">#Zrem   移除指定的value</span><br>127.0.0.1:6379&gt; zrem salary xh    <span class="hljs-comment">#移除salary中的xh</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zrange salary 0 -1<br>1) <span class="hljs-string">&quot;xm&quot;</span><br>2) <span class="hljs-string">&quot;pty&quot;</span><br><span class="hljs-comment">#####################################</span><br><span class="hljs-comment">#Zcard 获取zset中的数量</span><br>127.0.0.1:6379&gt; zcard salary   <span class="hljs-comment">#获取salary中的数量</span><br>(<span class="hljs-built_in">integer</span>) 2<br><span class="hljs-comment">#######################################</span><br><span class="hljs-comment">#Zcount  获取zset中指定区间的成员数量</span><br>127.0.0.1:6379&gt; zadd zet 1 hello 2 pty 3 hahah  <br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; zcount zet 1 3   <span class="hljs-comment">#获取zet中score为1 - 3的成员数量</span><br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; zcount zet 1 2    <span class="hljs-comment">#获取zet中score为1 - 2的成员数量</span><br>(<span class="hljs-built_in">integer</span>) 2<br></code></pre></td></tr></table></figure><p>可以用来做排行榜。</p><h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><h3 id="geospatial-地理位置"><a href="#geospatial-地理位置" class="headerlink" title="geospatial(地理位置)"></a>geospatial(地理位置)</h3><p>朋友的定位，附近的人，打车距离计算……</p><p><a href="https://www.redis.net.cn/order/3685.html">文档</a></p><blockquote><p>Geoadd：将指定的地理空间位置（纬度、经度、名称）添加到指定的<code>key</code>中。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#geoadd  向key中添加指定的经纬度，先写经度，再写纬度。</span><br><span class="hljs-comment">#有效的经度从-180度到180度。有效的纬度从-85.05112878度到85.05112878度。</span><br><span class="hljs-comment">#两级无法直接添加，一般是下载城市数据，通过java程序一次性导入</span><br>127.0.0.1:6379&gt; geoadd city 116.41 39.90 beijing 121.47 31.23 shanghai 108.95 34.26 xian<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; geoadd city 118.77 32.04 nanjing<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; geoadd city 106.50 29.5 chongqing<br>(<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><blockquote><p>Geopos：从<code>key</code>里返回所有给定位置元素的位置（经度和纬度）。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Geopos:获取key中指定位置的经纬度。</span><br>127.0.0.1:6379&gt; geopos city beijing shanghai xian   <span class="hljs-comment">#获取北京，上海，西安的经纬度</span><br>1) 1) <span class="hljs-string">&quot;116.40999823808670044&quot;</span><br>   2) <span class="hljs-string">&quot;39.90000009167092543&quot;</span><br>2) 1) <span class="hljs-string">&quot;121.47000163793563843&quot;</span><br>   2) <span class="hljs-string">&quot;31.22999903975783553&quot;</span><br>3) 1) <span class="hljs-string">&quot;108.95000249147415161&quot;</span><br>   2) <span class="hljs-string">&quot;34.25999964418929977&quot;</span><br>127.0.0.1:6379&gt; geopos city nanjing  <span class="hljs-comment">#获取南京的经纬度</span><br>1) 1) <span class="hljs-string">&quot;118.76999884843826294&quot;</span><br>   2) <span class="hljs-string">&quot;32.03999960287850968&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>Geodist：返回两个给定位置之间的距离</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Geodist:返回两个给定位置之间的距离</span><br><span class="hljs-comment">#如果有一个位置不存在key中，则返回空值</span><br><span class="hljs-comment"># m 表示单位为米。</span><br><span class="hljs-comment"># km 表示单位为千米。</span><br><span class="hljs-comment"># mi 表示单位为英里。</span><br><span class="hljs-comment"># ft 表示单位为英尺。</span><br><span class="hljs-comment">#如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</span><br>127.0.0.1:6379&gt; geodist city beijing shanghai   <span class="hljs-comment">#获取北京到上海的距离 没写单位，默认以m为单位</span><br><span class="hljs-string">&quot;1066992.3081&quot;</span><br>127.0.0.1:6379&gt; geodist city beijing shanghai km <span class="hljs-comment">#获取北京到上海的距离，以km为单位</span><br><span class="hljs-string">&quot;1066.9923&quot;</span> <br></code></pre></td></tr></table></figure><blockquote><p>Georadius：已给定的经纬度为中心，找出某一半径内的元素</p></blockquote><p>范围可以使用以下其中一个单位：</p><ul><li><strong>m</strong> 表示单位为米。</li><li><strong>km</strong> 表示单位为千米。</li><li><strong>mi</strong> 表示单位为英里。</li><li><strong>ft</strong> 表示单位为英尺。</li></ul><p>在给定以下可选项时， 命令会返回额外的信息：</p><ul><li><code>WITHDIST</code>: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致。</li><li><code>WITHCOORD</code>: 将位置元素的经度和维度也一并返回。</li><li><code>WITHHASH</code>: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</li></ul><p>命令默认返回未排序的位置元素。 通过以下两个参数， 用户可以指定被返回位置元素的排序方式：</p><ul><li><code>ASC</code>: 根据中心的位置， 按照从近到远的方式返回位置元素。</li><li><code>DESC</code>: 根据中心的位置， 按照从远到近的方式返回位置元素。</li><li>count：设置一个数字，可以只获取排序在前的指定数量的元素。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; georadius city 100 35 1000 km  <br><span class="hljs-comment">#获取以经纬度 100 35为中心，半径为1000km以内的元素，元素必须在key中才能获取</span><br>1) <span class="hljs-string">&quot;xian&quot;</span><br>2) <span class="hljs-string">&quot;chongqing&quot;</span><br>127.0.0.1:6379&gt; georadius city 100 35 1000 km count 1  <span class="hljs-comment">#使用count控制获取的数量</span><br>1) <span class="hljs-string">&quot;xian&quot;</span><br>127.0.0.1:6379&gt; georadius city 100 35 1000 km withdist  <span class="hljs-comment">#获取元素的同时返回元素与中心的直线距离</span><br>1) 1) <span class="hljs-string">&quot;xian&quot;</span><br>   2) <span class="hljs-string">&quot;822.9592&quot;</span><br>2) 1) <span class="hljs-string">&quot;chongqing&quot;</span><br>   2) <span class="hljs-string">&quot;864.4890&quot;</span><br>127.0.0.1:6379&gt; georadius city 100 35 1000 km withcoord  <span class="hljs-comment">#获取元素同时返回元素的经纬度</span><br>1) 1) <span class="hljs-string">&quot;xian&quot;</span><br>   2) 1) <span class="hljs-string">&quot;108.95000249147415161&quot;</span><br>      2) <span class="hljs-string">&quot;34.25999964418929977&quot;</span><br>2) 1) <span class="hljs-string">&quot;chongqing&quot;</span><br>   2) 1) <span class="hljs-string">&quot;106.49999767541885376&quot;</span><br>      2) <span class="hljs-string">&quot;29.50000115408581536&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>Georadiusbymember：找出位于指定范围内的元素，中心点有给定的位置元素</p></blockquote><p>这个命令与上面的Georadius命令功能差不多，区别在于上面的命令需要自己输入中心点的坐标，而这个命令是给出一个位置元素，以他的经纬度作为中心点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; georadiusbymember city shanghai 500 km   <span class="hljs-comment">#找出以上海为中心，半径为500km以内的元素</span><br>1) <span class="hljs-string">&quot;shanghai&quot;</span><br>2) <span class="hljs-string">&quot;nanjing&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>Geohash：返回一个或多个位置元素的 Geohash 表示</p></blockquote><p>该命令将返回11个字符的Geohash字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; geohash city nanjing <span class="hljs-comment">#返回nanjing的经纬度，并将二维的经纬度转换为一维的字符串</span><br>1) <span class="hljs-string">&quot;wtsqq8twt80&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Geo底层的实现原理其实就是Zset！我们可以使用Zset命令来操作geo</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; zrange city 0 -1<br>1) <span class="hljs-string">&quot;chongqing&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>3) <span class="hljs-string">&quot;shanghai&quot;</span><br>4) <span class="hljs-string">&quot;nanjing&quot;</span><br>5) <span class="hljs-string">&quot;beijing&quot;</span><br>127.0.0.1:6379&gt; zrem city beijing<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zrange city 0 -1<br>1) <span class="hljs-string">&quot;chongqing&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>3) <span class="hljs-string">&quot;shanghai&quot;</span><br>4) <span class="hljs-string">&quot;nanjing&quot;</span><br>127.0.0.1:6379&gt; geopos beijing<br>(empty array)<br></code></pre></td></tr></table></figure><h3 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h3><p>用来统计基数。</p><p>什么是基数？ 基数就是在一个集合中，不重复的数字的数量。如A{1,2,3,4,3,5} 这个集合的基数就是5。</p><p>应用场景：在统计访问量的时候，一个人多次访问一个网站，还是算作一个人。这个时候就需要统计基数。</p><p>优点：占用的内存是固定的，2^64个不同元素的基数，只需要12kb的内存。</p><p>有0.81%的错误率，如果允许错误，可以使用Hyperloglog。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Pfadd 向key中添加元素</span><br>127.0.0.1:6379&gt; pfadd key a b c d e f g h i j k  <span class="hljs-comment">#向key中添加元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; pfcount key  <span class="hljs-comment">#统计key中的基数</span><br>(<span class="hljs-built_in">integer</span>) 11 <br>127.0.0.1:6379&gt; pfadd key1 f g h i k m n s <span class="hljs-comment">#向key1中添加元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; pfcount key1  <span class="hljs-comment">#统计key1中的基数</span><br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6379&gt; pfmerge key3 key key1  <span class="hljs-comment">#将key 和 key1的元素合并到key3中。</span><br>OK<br>127.0.0.1:6379&gt; pfcount key3  <span class="hljs-comment">#统计key3中的基数，key3由key和key1合并而来，应该有19个数，但因为统计的是基数，有5个重复了，所以基数只有14个。</span><br>(<span class="hljs-built_in">integer</span>) 14<br></code></pre></td></tr></table></figure><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>Bitmaps 位图，数据结构，都是操作二进制位来进行记录，只有0和1两个状态</p><p>统计用户活跃，不活跃，打卡，未打卡等两个状态的，都可以使用Bitmaps</p><p>以下以打卡为例子来讲解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#setbit 向key中添加数据，第一个数字为坐标，第二个数字代表状态，只能为 1或者0</span><br>127.0.0.1:6379&gt; setbit sign 0 1    <span class="hljs-comment">#设置第一天的状态为1</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 1 0   <span class="hljs-comment">#设置第二天的状态为0</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 1 3   <span class="hljs-comment">#可以看到当第二个数字不是1或0时报错</span><br>(error) ERR bit is not an <span class="hljs-built_in">integer</span> or out of range<br>127.0.0.1:6379&gt; setbit sign 2 0   <span class="hljs-comment">#设置第三天的状态为0</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 3 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 4 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 5 0<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 6 1<br>(<span class="hljs-built_in">integer</span>) 0<br><span class="hljs-comment">#########################################</span><br><span class="hljs-comment">#getbit 查看某一个坐标的状态，是0还是1</span><br>127.0.0.1:6379&gt; getbit sign 6<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; getbit sign 2<br>(<span class="hljs-built_in">integer</span>) 0<br><span class="hljs-comment">##########################################</span><br><span class="hljs-comment">#bitcount 统计状态为1的坐标的数量</span><br>127.0.0.1:6379&gt; bitcount sign<br>(<span class="hljs-built_in">integer</span>) 4<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>Redis事务本质：一组命令的集合，一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行！</p><p>一次性、顺序性、排他性。</p><p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会被执行。</p><p><strong>Redis单条命令是有原子性的，但是事务不保证原子性！</strong> </p><p>redis的事务：</p><ul><li>开启事务(multi)</li><li>命令入队()</li><li>执行事务(exec)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># multi  开启事务</span><br><span class="hljs-comment"># exec  执行事务</span><br>127.0.0.1:6379&gt; multi    <span class="hljs-comment">#开启事务</span><br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v1   <span class="hljs-comment">#输入一些命令</span><br>QUEUED                      <span class="hljs-comment">#可以看到并没有直接返回结果，而是将命令入队</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; get k1<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k3 v3<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span>    <span class="hljs-comment">#执行事务</span><br>1) OK                    <span class="hljs-comment">#将上述命令的结果按照入队的顺序返回</span><br>2) OK<br>3) <span class="hljs-string">&quot;v1&quot;</span><br>4) OK<br><span class="hljs-comment">#######################################</span><br><span class="hljs-comment">#Discard  放弃事务</span><br>127.0.0.1:6379&gt; multi     <span class="hljs-comment">#开启事务</span><br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v1   <span class="hljs-comment">#输入命令</span><br>QUEUED                      <span class="hljs-comment">#命令入队</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k3 v3<br>QUEUED<br>127.0.0.1:6379&gt; discard  <span class="hljs-comment">#放弃事务</span><br>OK<br>127.0.0.1:6379&gt; get k3    <span class="hljs-comment">#因为要输入实行事务命令后，入队的命令才回执行。放弃了事务，所以入队的命名没有执行，所有get不到k3</span><br>(nil)<br><br></code></pre></td></tr></table></figure><h3 id="监控（watch"><a href="#监控（watch" class="headerlink" title="监控（watch)"></a>监控（watch)</h3><p><strong>悲观锁：</strong></p><ul><li>很悲观，什么时候都会出现问题，无论做什么都会加锁。</li><li>性能低下。</li></ul><p><strong>乐观锁：</strong></p><ul><li>乐观，认为什么时候都不会出现错误，所以不会上锁！更新数据的时候去判断一下在此期间是否有人修改过这个数据</li></ul><p>正常成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> money 50  <br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> out 0<br>OK<br>127.0.0.1:6379&gt; watch money   <span class="hljs-comment">#监视money字段</span><br>OK<br>127.0.0.1:6379&gt; multi    <span class="hljs-comment">#开启事务</span><br>OK<br>127.0.0.1:6379&gt; decrby money 10  <span class="hljs-comment">#money自减10</span><br>QUEUED<br>127.0.0.1:6379&gt; incrby out 10   <span class="hljs-comment">#money自增10</span><br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span>   <span class="hljs-comment">#执行事务，事务正常结束</span><br>1) (<span class="hljs-built_in">integer</span>) 40<br>2) (<span class="hljs-built_in">integer</span>) 10<br></code></pre></td></tr></table></figure><p>使用多线程修改money的值，<strong>watch可以当做redis的乐观锁操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; watch money   <span class="hljs-comment">#监视money</span><br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; decrby money 20   <br>QUEUED<br>127.0.0.1:6379&gt; incrby out 20<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span>   <span class="hljs-comment">#执行事务，在这一步之前，使用多线程修改了money的值，执行事务后才会执行入队的命令，在执行decrby money 20 命令的时候会比较money的值与开启事务前是否一样，如果不一样执行失败</span><br>(nil)<br>127.0.0.1:6379&gt; unwatch    <span class="hljs-comment">#如果事务执行失败，先解锁</span><br>OK<br>127.0.0.1:6379&gt; watch money   <span class="hljs-comment">#重新监视money，因为已经修改了money的值（看下面那个程序）,所以money为50</span><br>OK<br>127.0.0.1:6379&gt; multi     <span class="hljs-comment">#开启事务</span><br>OK<br>127.0.0.1:6379&gt; decrby money 10   <br>QUEUED<br>127.0.0.1:6379&gt; incrby out 10   <br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span>    <span class="hljs-comment">#执行事务   比对监视的值（money）是否发生改变</span><br>1) (<span class="hljs-built_in">integer</span>) 40<br>2) (<span class="hljs-built_in">integer</span>) 20<br></code></pre></td></tr></table></figure><p>多线程修改了money的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; incrby money 10<br>(<span class="hljs-built_in">integer</span>) 50<br></code></pre></td></tr></table></figure><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>Jedis是Redis官方推荐的java连接开发工具，使用java操作redis的中间件。</p><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>编码测试</li></ol><ul><li>连接数据库</li><li>操作命令</li><li>断开连接</li></ul><p>​    redis的操作命令在jedis中是方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pty</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建Jedis对象,公网ip，端口号</span><br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;47.94.228.33&quot;</span>,<span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//设置的密码</span><br>        jedis.auth(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">//执行redis命令。</span><br>        System.out.println(jedis.getrange(<span class="hljs-string">&quot;k1&quot;</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>));<br>        System.out.println(jedis.getrange(<span class="hljs-string">&quot;k2&quot;</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SpringBoot整合redis"><a href="#SpringBoot整合redis" class="headerlink" title="SpringBoot整合redis"></a>SpringBoot整合redis</h3><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><p>在新建springboot项目的时候，在nosql部分勾选redis。或者是直接导入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在springboot2.x之后，原来使用的jedis被替换成了lettuce.</p><p>jedis：采用的是直连，多个线程操作的话不安全。如果想要避免不安全，使用jedis pool连接池。</p><p>lettuce：采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据。</p><p>源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span><br><span class="hljs-comment">//ConditionalOnMissingBean 这个注解的意思是如果不存在才生效，意思就是如果我们自己编写了一个redisTemplate，则这个Bean不生效。我们可以自己写一个来redisTemplate来替换官方的</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class="hljs-function">      <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;<br>      <span class="hljs-comment">//默认的RedisTemplate 没有过多的设置，redis对象都是需要序列化</span><br>     <span class="hljs-comment">//泛型是object object 类型，我们后面需要强制转换&lt;string object&gt;</span><br>   RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;&gt;();<br>   template.setConnectionFactory(redisConnectionFactory);<br>   <span class="hljs-keyword">return</span> template;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">//因为String是redis中最常用的类型，所以单独提出了一个bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> StringRedisTemplate <span class="hljs-title">stringRedisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class="hljs-function">      <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;<br>   StringRedisTemplate template = <span class="hljs-keyword">new</span> StringRedisTemplate();<br>   template.setConnectionFactory(redisConnectionFactory);<br>   <span class="hljs-keyword">return</span> template;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Nosql概述&quot;&gt;&lt;a href=&quot;#Nosql概述&quot; class=&quot;headerlink&quot; title=&quot;Nosql概述&quot;&gt;&lt;/a&gt;Nosql概述&lt;/h2&gt;&lt;h3 id=&quot;Nosql的四大分类&quot;&gt;&lt;a href=&quot;#Nosql的四大分类&quot; class=&quot;headerlink&quot; title=&quot;Nosql的四大分类&quot;&gt;&lt;/a&gt;Nosql的四大分类&lt;/h3&gt;&lt;h4 id=&quot;KV键值对&quot;&gt;&lt;a href=&quot;#KV键值对&quot; class=&quot;headerlink&quot; title=&quot;KV键值对&quot;&gt;&lt;/a&gt;KV键值对&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新浪：&lt;strong&gt;Redis&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;美团：Redis+Tair&lt;/li&gt;
&lt;li&gt;阿里、百度：Redis+memecache&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="后端" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
