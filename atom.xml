<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Myblog</title>
  
  <subtitle>少年，你渴望力量吗</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-25T11:29:17.404Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springmvc文件上传</title>
    <link href="http://example.com/2020/09/25/SprigMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2020/09/25/SprigMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-09-25T07:44:30.990Z</published>
    <updated>2020-09-25T11:29:17.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h2><h3 id="前端页面的要求"><a href="#前端页面的要求" class="headerlink" title="前端页面的要求"></a>前端页面的要求</h3><p>为了上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制流数据发送给服务器。</p><a id="more"></a><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入fileupload和io坐标"><a href="#引入fileupload和io坐标" class="headerlink" title="引入fileupload和io坐标"></a>引入fileupload和io坐标</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.3.3版本</strong>会自动引入io包，所以不需要在单独引入</p><h3 id="配置DispatcherServlet（前端控制器）"><a href="#配置DispatcherServlet（前端控制器）" class="headerlink" title="配置DispatcherServlet（前端控制器）"></a>配置DispatcherServlet（前端控制器）</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--绑定applicationContext.xml，里面用来配置springmvc需要的一些东西--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--设置启动级别,1为服务器已启动就启动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置MultipartResolver解析器"><a href="#配置MultipartResolver解析器" class="headerlink" title="配置MultipartResolver解析器"></a>配置MultipartResolver解析器</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启注解扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pty.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置MultipartResoolver，用于文件上传--></span>    <span class="token comment">&lt;!--注意：CommonsMultipartResolver的id是固定不变的，一定是multipartResolver，不能修改--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--阈值，低于这个的保存在内存中，高于这个的，生成硬盘上的临时文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxInMemorySize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40960<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--上传文件大小上限，单位为字节,这是总的文件的大小--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>104857600<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--设置请求的编码格式，这里设置为utf-8，默认为IOS-8859-1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--单个文件大小上限--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSizePerFile<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Upload</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token comment">//@RequestParam("file)将前端表单中name=file的控件得到的文件封装成MultipartFile 对象</span>    <span class="token comment">//如果上传的是多文件，将MutipartFile改成MutipartFile 数组即可</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取文件名</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否上传文件(即文件名是否为空)，如果没有，返回上传页</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"上传失败"</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*        除了通过判断文件名是否为空来判断是否上传文件，还可以通过以下方式来验证        1. 判断文件的大小是否大于0：file.getSize()得到文件的大小，进行判断。        2.判断文件是否为空： file.isEmpty()         */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传文件名"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取文件存储路径（绝对路径）</span>        <span class="token comment">/*session.getServletContext()拿到了一个servlet的容器        这个path的位置是        */</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//可以对上传的文件的类型做限制，比如说只能够上传jpg和png的图片文件</span>        <span class="token comment">//注意这里的逻辑问题，我一开始是用或，但是应该是既不是jpg也不是png，应该用与</span>        <span class="token comment">//endsWith:判断字符串是否以指定的后缀结尾</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"格式不符合"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//新建文件实例</span>        <span class="token comment">/*这里应该使用File(String parent, String child) 构造方法，从父路径和子路径字符创建新的File实例        因为下面的transferTo（）会将上传的文件保存到一个目录文件中，即让这个目录文件变成上传的文件。        我之前就是使用File(String pathname)构造方法，使得upload文件夹变成了upload文件*/</span>        <span class="token class-name">File</span> upfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否有此文件，没有的话就创建一个。</span>        <span class="token comment">//因为如果是第一次保存，就没有文件。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>upfile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*新建文件,因为上面创建File实例的时候，创建了两层路径。            mkdir()创建由此抽象路径名命名的目录。            mkdirs() 创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录。            因为创建了两层路径，用前者创建的时候只会创建最后一层目录，如果第一层路径没有，则看不到创建出来的目录            而后者在创建最后一层的目录时，还会创建最后一层之前且不存在的目录。            */</span>            upfile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传路径"</span> <span class="token operator">+</span> upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//接收用户上传文件流，输出到指定文件中</span>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//得到上传文件的路径和名字，将其生成一个字符串，然后将这个值保存到数据库。</span>        <span class="token comment">//比如说图片，用户上传头像，我们将图像路径保存到数据库，显示的时候直接将这个地址返回给前端</span>        <span class="token comment">//然后就可以显示图片</span>        <span class="token class-name">String</span> filePath <span class="token operator">=</span> path<span class="token operator">+</span>filename<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>减少了一些注释，以后可以直接拿过来用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pty<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RestController</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> fileupload <span class="token punctuation">&#123;</span>        <span class="token comment">//@RequestParam("file)将前端表单中name=file的控件得到的文件封装成MultipartFile 对象</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"redirect:index.jsp"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名："</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取文件存储路径（绝对路径）</span>            <span class="token comment">//session.getServletContext()拿到了一个servlet的容器</span>            <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token string">"redirect:index.jsp"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">File</span> upfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>upfile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                upfile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传路径"</span> <span class="token operator">+</span> upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token string">"hahah"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h2><p>上面的操作是单文件上传，但有时候会需要上传多个文件。</p><p>我们的方法是将多文件上传分解成单文件上传。</p><p>可以通过一个方法来接收前端传过来的文件，然后我们将文件遍历，单个文件在调用保存方法。</p><h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><p>一次性选择多个文件上传，在input标签中添加<strong>multiple</strong>属性</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/test/upload.do<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   一次选择多个文件的多文件上传 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs1<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    一次选择一个文件的多文件上传 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    单文件上传 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Controller层-1"><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h3><p>多文件上传是，需要用MultipartFile数组来接收这些文件。</p><p>虽然从前端接收到了多个文件，但是springmvc只会将一个文件封装进一个MultipartFile对象，而不会将多个文件封装进一个MutipartFile数组，所以需要使用<code>@RequestParam</code>注解来校正参数，必须写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/upload.do"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs1<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs2<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs3<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img <span class="token operator">:</span> imgs1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//遍历文件，单个文件在调用保存的方法，也就是上面写的controller,这里就不写了。</span>      <span class="token function">uploadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img <span class="token operator">:</span> imgs2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">uploadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img <span class="token operator">:</span> imgs3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">uploadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string">"/success.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="MultipartFile类常用的一些方法"><a href="#MultipartFile类常用的一些方法" class="headerlink" title="MultipartFile类常用的一些方法"></a>MultipartFile类常用的一些方法</h3><ul><li>String getContentType()：获取文件MIME类型</li><li>InputStream getInputStream()：后去文件流</li><li>String getName() ：获取表单中文件组件的名字</li><li>String getOriginalFilename() ：获取上传文件的原名</li><li>long getSize() ：获取文件的字节大小，单位byte</li><li>boolean isEmpty() ：是否为空</li><li>void transferTo(File dest) ：保存到一个目标文件中。</li></ul><h3 id="CommonsMultipartResolver的属性解析"><a href="#CommonsMultipartResolver的属性解析" class="headerlink" title="CommonsMultipartResolver的属性解析"></a>CommonsMultipartResolver的属性解析</h3><ul><li>defaultEncoding：表示用来解析request请求的默认编码格式，当没有指定的时候根据Servlet规范会使用默认值ISO-8859-1。当request自己指明了它的编码格式的时候就会忽略这里指定的defaultEncoding。</li><li>uploadTempDir：设置上传文件时的临时目录，默认是Servlet容器的临时目录。</li><li>maxUploadSize：设置允许上传的总的最大文件大小，以字节为单位计算。当设为-1时表示无限制，默认是-1。</li><li>maxUploadSizePerFile：跟maxUploadSize差不多，不过maxUploadSizePerFile是限制每个上传文件的大小，而maxUploadSize是限制总的上传文件大小。</li><li>maxInMemorySize：设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240。</li><li>resolveLazily：为true时，启用推迟文件解析，以便在UploadAction中捕获文件大小异常。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的多文件上传是参考一遍博客的，我自己没有打代码实现，可能会存在问题。</p><p>经过这次操作，发现了一些问题。</p><ol><li>要保持一个好的心态，一般问题的出现是一个接着一个的，不要太早崩溃。</li><li>出现错误的时候，先检查下自己的环境，很多时候并不是代码的原因而是环境的问题，比如说一些依赖没有导入，项目结构中的Artifacts中没有jar包。</li><li>尽量多查文档之类的。</li><li>没事别手贱乱删东西，说真的强迫症搞程序员太难了，看到一些没用的东西就想删，但是那个可能只是你以为没有用。</li><li>要熟悉新建一个模板的流程，现在用的是springmvc,需要自己配置tomcat，让项目变成web项目。虽然springboot在这些方面比较方便，但是还是要多加练习。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;单文件上传&quot;&gt;&lt;a href=&quot;#单文件上传&quot; class=&quot;headerlink&quot; title=&quot;单文件上传&quot;&gt;&lt;/a&gt;单文件上传&lt;/h2&gt;&lt;h3 id=&quot;前端页面的要求&quot;&gt;&lt;a href=&quot;#前端页面的要求&quot; class=&quot;headerlink&quot; title=&quot;前端页面的要求&quot;&gt;&lt;/a&gt;前端页面的要求&lt;/h3&gt;&lt;p&gt;为了上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制流数据发送给服务器。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="springmvc" scheme="http://example.com/tags/springmvc/"/>
    
    <category term="文件上传" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="http://example.com/2020/09/17/spring/"/>
    <id>http://example.com/2020/09/17/spring/</id>
    <published>2020-09-16T16:43:27.446Z</published>
    <updated>2020-09-25T07:48:53.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring"><a href="#1-Spring" class="headerlink" title="1.Spring"></a>1.Spring</h2><h3 id="1-1优点"><a href="#1-1优点" class="headerlink" title="1.1优点"></a>1.1优点</h3><ul><li>Spring是一个开源的免费的框架(容器)</li><li>Spring是一个轻量级的、非入侵式的框架</li><li>控制反转（IOC),面向切面编程（AOP）</li><li>支持事务的处理，对框架的整合的支持</li></ul><a id="more"></a><p>**总结：Spring是一个轻量级的控制反转（IOC) 和面向切面编程（AOP）的框架 **</p><h3 id="1-2组成"><a href="#1-2组成" class="headerlink" title="1.2组成"></a>1.2组成</h3><p><img src="/images/blog/image-20200915210338148.png" alt="image-20200915210338148"></p><h3 id="1-3拓展"><a href="#1-3拓展" class="headerlink" title="1.3拓展"></a>1.3拓展</h3><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于springboot可以快速的开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>Spring Cloud是基于springboot实现的</li></ul></li></ul><p>学习springboot的前提是需要完全掌握Spring及SpringMVC。承上启下</p><h2 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2.IOC理论推导"></a>2.IOC理论推导</h2><p>原来的步骤：</p><ol><li>UserDao的接口</li><li>UserDaoImpl实现类</li><li>UserService 业务接口</li><li>UserServiceImpl业务实现类</li></ol><p>在我们之前的业务中，用户的需求可能会影响到我们原来的代码，我们需要根据用户的需求去修改源代码。如果程序代码量十分大，修改一次的成本代价很昂贵。</p><p>IOC的思想，从本质上解决了这个问题，我们不用再去管理对象的创建。系统的耦合性大大降低，可以更加专注于业务的实现。</p><h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p>控制反转是一种设计思想，DI(依赖注入)是实现IOC的一种方法。在没有IOC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方。个人认为所谓的控制反转就是：获得对象的方式反转了。</p><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从ioc容器取出需要的对象。</p><p>采用XML配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者结合在一起，Bean的定义信息直接以注解的形式定义在实现类中，从而达到零配置的目的。</p><p><strong>控制反转是一种通过描述(xml或注解)并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入(DI)</strong></p><h2 id="3-初识Spring"><a href="#3-初识Spring" class="headerlink" title="3.初识Spring"></a>3.初识Spring</h2><h3 id="3-1-配置ApplicationContext-xml"><a href="#3-1-配置ApplicationContext-xml" class="headerlink" title="3.1 配置ApplicationContext.xml"></a>3.1 配置ApplicationContext.xml</h3><p>applicationContext.xml用来配置对象信息。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--applicationContext.xml的约束--></span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--使用spring来创建对象，在spring中这些都被称为Bean类型 变量名 = new 类型();Hello hello = new Hello();id = 变量名class = new 的对象property 相当于对象中的属性设置一个值--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--ref引用spring中创建的对象value是具体的值给name为xxx的属性赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">publlic <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取ApplicationContext,拿到spring容器。</span>     <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationcontext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用来创建具体的对象，xxx为配置的bean的id或者别名。</span>     <span class="token class-name">Obeject</span> object<span class="token operator">=</span> context <span class="token function">getBean</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可以进行强转</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-IOC创建对象的方式"><a href="#4-IOC创建对象的方式" class="headerlink" title="4.IOC创建对象的方式"></a>4.IOC创建对象的方式</h2><ol><li><p>使用无参构造创建对象，默认！</p></li><li><p>假如我们要用有参构造创建对象（需要给bean中写一个有参构造）</p><ol><li>下标赋值</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神说java1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神说java2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--给User类的第一个属性赋值为狂神说java1，给第二个属性赋值为狂神说java2--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>类型</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第二种方式：通过类型创建，不建议使用，且type必须填类型的全限定类名，不能像mybatis写别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>参数名</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第三种：直接通过参数名构造--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>总结：在spring加载配置文件的时候，配置文件中所配置的bean对象就已经被实例化了（即调用了相关的构造方法，bean被加载进了容器内），<code>getBean</code>再从容器中找到具体的bean对象。</p><h2 id="5-Spring配置"><a href="#5-Spring配置" class="headerlink" title="5.Spring配置"></a>5.Spring配置</h2><h3 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h3><p><code>&lt;alias name=&quot;&quot; alias=&quot;&quot;&gt;</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--设置别名，给bean中的id设置别名，设置别名后，使用getBean时，也可以通过别名来获取对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2bean的配置"><a href="#5-2bean的配置" class="headerlink" title="5.2bean的配置"></a>5.2bean的配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--       id：bean的唯一标识符，也就是相当于我们以前学的变量名，用于在getBean是找到对应的对象       class：需要创建的bean对象的全限定类名：报名+类型       name：也就是别名，而且name可以同时取多个别名,设置的别名都可以在getBean获取到对象       --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2,u1,u3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h3><p>这个import,一般用于团队开发，可以将多个配置文件合并为一个。</p><p>假设，现在项目中有多个人开发，这三个人负责不同的类的开发，不同的类需要注册不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！</p><ul><li>张三</li><li>李四</li><li>王五</li><li>applicationContext.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans1.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans3.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用的时候，直接使用总的配置就可以了。</p><h2 id="6-依赖注入"><a href="#6-依赖注入" class="headerlink" title="6.依赖注入"></a>6.依赖注入</h2><h3 id="6-1-构造注入"><a href="#6-1-构造注入" class="headerlink" title="6.1 构造注入"></a>6.1 构造注入</h3><p>就是前面的有参构造</p><h3 id="6-2-Set注入【重点】"><a href="#6-2-Set注入【重点】" class="headerlink" title="6.2 Set注入【重点】"></a>6.2 Set注入【重点】</h3><ul><li>依赖注入：Set注入<ul><li>依赖：Bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，由容器来注入！</li></ul></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Adress<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adress<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>湘西州<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--第一种，普通值注入，value--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment">&lt;!--第二种，Bean注入，ref--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adress<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment">&lt;!--第三种，数组注入，array--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>红楼梦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>三国演义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>水浒传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--第四种，list注入，list--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbys<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>网球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--第五种，map注入，map--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>身份证<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>122333<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1111111<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--第六种，set注入，set--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>LOL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>COC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>DOD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>          <span class="token comment">&lt;!--设置为null--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--     properties     键值对 key:value  value写在两个尖括号之间     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3拓展注入"><a href="#6-3拓展注入" class="headerlink" title="6. 3拓展注入"></a>6. 3拓展注入</h3><p>我们可以使用p命名空间和c命名空间进行注入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!--p命名空间注入，可以直接注入属性的值，相当于property--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--c命名空间注入，通过构造器，相当于construct-args，前提是bean必须要有有参构造--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意点</strong>：P命名和C命名不能直接使用，需要导入xml约束</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"xmlns:c="http://www.springframework.org/schema/c"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-4-bean的作用域"><a href="#6-4-bean的作用域" class="headerlink" title="6.4 bean的作用域"></a>6.4 bean的作用域</h3><ol><li>单例模式（Spring默认机制）</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置 为singleton后，在getBean时生成一个对象，接下来如果再次使用getBean生成同一个id的对象，则两个对象是一样的，即一个bean只生成一个对象。</p><ol start="2"><li>原型模式：每次从容器中get的时候，都会产生一个新对象！</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>其余的request、session、application这些只能在web开发中使用。</li></ol><h2 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7.Bean的自动装配"></a>7.Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式。</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性</li></ul><p>在Spring中有三种装配方式</p><ol><li>在xml中显示的配置</li><li>在java中显示配置</li><li>隐式的自动装配bean  【重要】</li></ol><p>这是我们之前学过的配置方式</p><p>cat和dog为两个对象，需要使用ref来引用。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-ByName自动装配"><a href="#7-1-ByName自动装配" class="headerlink" title="7.1 ByName自动装配"></a>7.1 ByName自动装配</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--ByName: 会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid！不需要在自己手动的配置引用的对象。但是如果beanid与自己对象set方法后面的值不同，就会报空指针异常。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-ByType"><a href="#7-2-ByType" class="headerlink" title="7.2 ByType"></a>7.2 ByType</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--ByType: 会自动在容器上下文中查找，和自己对象属性类型相同的bean！不需要在自己手动的配置引用的对象。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ul><li>byname的时候，需要保证所有bean的id唯一，并且这个beanid需要和自动注入的属性的set方法的值相同。</li><li>bytype的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</li></ul><h3 id="7-3使用注解实现自动装配"><a href="#7-3使用注解实现自动装配" class="headerlink" title="7.3使用注解实现自动装配"></a>7.3使用注解实现自动装配</h3><p>要使用注解须知：</p><ol><li>导入约束,context约束</li><li><strong>配置注解的支持：<a href="context:annotation-config/">context:annotation-config/</a></strong></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置注解的支持--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@Autowried</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>           <span class="token comment">//使用@Autowried注解，不需要在配置文件中手动或者Byname,Bytype的注入属性</span>        <span class="token comment">//在对应的属性上面加上这个注解，可以自动注入。</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接在属性上使用！也可以在set方法上使用！</p><p>使用Autowried我们可以不用再写set方法，前提是你这个自动装配的属性在IOC容器中存在。根据Bytype查找。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果显示定义了Autowried的required属性为false，说明这个对象可以为null，否则不允许为null</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>科普：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@Nullable   字段标记这个注解，说明这个字段可以为null；</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cat <span class="token operator">=</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于Autowried注解是根据type查找的，当配置文件中同时配置了多个类型相同的bean,那么使用Autowried注解就不能够自动注入了。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如这个配置文件，cat1和cat2的类型都是一样的，Autowried是根据type查找，出现了相同类型，就不知道要注入哪一个了，这个时候我们就需要使用<code>@Qualifier</code>注解和<code>@Autowried</code>注解</p><p>先使用Autowried定位到需要注入的属性的类型<code>@Qualifier(value=&quot;xxx&quot;)</code>会在配置文件中找到id值为xxx的bean对象，再将它注入进去。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"cat2"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span>  name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是好像最新版的idea就算没用使用Qualifier注解也不会报错。</p><p><strong>@Resource注解</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"cat2"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token comment">//会在配置文件中找id为cat2的bean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>小结：</p><p> @Resource和@Autowried的区别</p><ul><li>都是用来自动装配的，都可以放在属性字段上。</li><li>@Autowried 通过ByType的方式实现，通过配合@Qualifier注解，先ByType查找，在Byname查找。</li><li>@Resource默认通过byname的方式实现，如果找不到名字，就通过bytype实现。</li></ul><h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证aop的包导入了。</p><p>使用注解需要导入context约束，增加注解的支持！</p><ol><li>bean</li><li>属性如何注入</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token annotation punctuation">@Component</span>   <span class="token comment">//将类注册到Spring容器内，getBean时的参数是小写的类名。</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token comment">//给name属性值注入值，相当于 &lt;property name="name" value="pty"></span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"pty"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>衍生的注解</li></ol><p>@Component有几个衍生的注解，我们在web开发中，会按照mvc三层架构分层</p><ul><li>dao 【@Repository】</li><li>service 【@Service】</li><li>controller 【@Controller】</li></ul><p>这四个注解的功能都是一样的，都是代表将某个类注入到Spring容器中，装配Bean。</p><ol start="4"><li>自动装配</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">- @Autowried ：自动装配通过类型如果Autowried不能唯一自动装配上属性，则需要通过@Qualifier(value="xxx")- @Nullable  字段标记这个注解，说明这个字段可以为null- @Resource  自动装配通过名字，类型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>作用域</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>              <span class="token comment">//将User类注入到Spring容器内</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span>    <span class="token comment">//设置bean的作用域</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"pty"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>小结</p><p>xml与注解：</p><ul><li>xml更加万能，适用于任何场合，维护简单方便</li><li>注解，不是自己类是用不了，维护相对复杂。</li></ul><p>xml和注解最佳实践：</p><ul><li>xml用来管理bean</li><li>注解只负责完成属性的注入</li><li>我们在使用的过程中只需要注意一个问题：必须要注解生效。</li></ul></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--指定扫描的包，这个包下的注解就会生效--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="9-使用Java的方式配置Spring"><a href="#9-使用Java的方式配置Spring" class="headerlink" title="9.使用Java的方式配置Spring"></a>9.使用Java的方式配置Spring</h2><p>我们现在要完全不使用Spring的xml配置了，全权交给Java来做了。</p><p>JavaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心功能。</p><p><strong>User类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//属性注入值</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                    <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                    <span class="token string">'&#125;'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Config类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">bean<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Import</span><span class="token punctuation">;</span><span class="token comment">//这个也会被Spring容器托管，注册到容器中，因为他本来就是一个Component。</span><span class="token comment">// @Configuration代表这是一个配置类，就和我们之前的applicationContext.xml一样</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"bean"</span><span class="token punctuation">)</span>   <span class="token comment">//扫描包，该包下的注解就会生效</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">Userconfig2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//引入另一类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Userconfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注册一个Bean,就相当于我们之前写的bean标签</span>    <span class="token comment">//这个方法的名字：getUser就相当于bean标签中的id属性</span>    <span class="token comment">//这个方法的返回值 User 就相当于bean标签中的class属性</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回要注入到bean的对象。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">bean<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">config<span class="token punctuation">.</span></span><span class="token class-name">Userconfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果完全使用了配置类方式去做，我们就只能通过AnootationConfig上下文来获取容器，通过配置类的class对象加载</span>       <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Userconfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种纯java的配置方式，在SpringBoot中随处可见。</p><h2 id="10-代理模式"><a href="#10-代理模式" class="headerlink" title="10. 代理模式"></a>10. 代理模式</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层！【SpringAOP和SpringMVC】</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><h3 id="10-1静态代理"><a href="#10-1静态代理" class="headerlink" title="10.1静态代理"></a>10.1静态代理</h3><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人！</li></ul><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共业务就交给代理角色，实现了业务的分工！</li><li>公共业务发生扩展的时候，方便集中管理！</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色，代码量会翻倍<del>开发效率变低</del></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-Spring&quot;&gt;&lt;a href=&quot;#1-Spring&quot; class=&quot;headerlink&quot; title=&quot;1.Spring&quot;&gt;&lt;/a&gt;1.Spring&lt;/h2&gt;&lt;h3 id=&quot;1-1优点&quot;&gt;&lt;a href=&quot;#1-1优点&quot; class=&quot;headerlink&quot; title=&quot;1.1优点&quot;&gt;&lt;/a&gt;1.1优点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Spring是一个开源的免费的框架(容器)&lt;/li&gt;
&lt;li&gt;Spring是一个轻量级的、非入侵式的框架&lt;/li&gt;
&lt;li&gt;控制反转（IOC),面向切面编程（AOP）&lt;/li&gt;
&lt;li&gt;支持事务的处理，对框架的整合的支持&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>springboot发送邮箱验证</title>
    <link href="http://example.com/2020/09/15/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://example.com/2020/09/15/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</id>
    <published>2020-09-15T06:22:27.040Z</published>
    <updated>2020-09-15T12:24:40.167Z</updated>
    
    <content type="html"><![CDATA[<p>在实际开发中，我们通常需要登录和注册用户。在登录的时候我们可以使用验证码来进行验证，但在注册的时候我们看到更多的是使用邮箱验证，即给你发送的邮箱发送一个验证码，然后你将这个验证码输在页面。</p><a id="more"></a><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ol><li><p>我们使用qq邮箱进行邮件发送，需要开启QQ邮箱的POP3/SMTP服务和IMAP/SMTP服务</p><ul><li>进入QQ邮箱首页，找到设置<img src="/images/blog/qqemail.png" alt="qq邮箱"></li><li>进入设置后点击账户，往下拉找到<strong>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</strong></li></ul><p><img src="/images/blog/pop3.png" alt="pop3"></p><ul><li>开启POP3和IMAP服务（只开启一个好像也行）</li><li>开始这两项服务后各自会生成一串密文密码，把这个保存起来，以后会用到。</li><li>我的两个密码分别是  POP3:cplcsiqntwidfgib    IMAP:zxisvqcbpucmiifb</li></ul></li><li><p>springboot配置邮箱服务</p><ul><li>导入支持邮箱的依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个小插曲：</p><blockquote><p>在后面写代码的时候需要用到<code>JavaMailSenderImpl</code>这个类。</p></blockquote><blockquote><p>但是我导入这个包以后找不到这个类，我以为是还需要添加其他的依赖，百度了一下，导入了<code>spring-context-support</code>这个依赖。然后我点进<code>spring-boot-starter-mail</code>后发现里面已经引入了<code>spring-context-support</code>，所以应该是我最开始没有导入好。</p></blockquote><ul><li>在application.yml中配置邮箱信息</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> <span class="token key atrule">mail</span><span class="token punctuation">:</span><span class="token key atrule">username</span><span class="token punctuation">:</span> 1219002685@qq.com  <span class="token comment">#发件人账号</span><span class="token key atrule">password</span><span class="token punctuation">:</span> zxisvqcbpucmiifb  <span class="token comment">#这里的password不是填你的qq密码，而是你开去那两个服务后生成的密码</span><span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.qq.com        <span class="token comment">#邮箱服务器</span><span class="token key atrule">default-encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span><span class="token comment">#默认编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>至此，发送邮箱验证的前期准备工作都已经做完了，接下来就是写代码了！！！！</p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><ol><li>Controller层</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Email</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">EmailService</span> emailService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/email"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAdress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>emailAdress<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token string">"发送邮件成功"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"邮件发送失败"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Service层</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">JavaMailSenderImpl</span> javaMailSender<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span> <span class="token comment">//验证码</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.mail.username&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sender<span class="token punctuation">;</span>   <span class="token comment">//发送邮件的地址</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        code<span class="token operator">=</span> <span class="token class-name">VerifyCode</span><span class="token punctuation">.</span><span class="token function">getVerifyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"验证码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"尊敬的用户你好：\n"</span><span class="token operator">+</span>                <span class="token string">"\n本次请求的邮件验证码为："</span><span class="token operator">+</span>code<span class="token operator">+</span><span class="token string">",本次验证码5分钟内有效，请及时输入。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送邮件</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@Value()注解：<code> @Value(&quot;$&#123;spring.mail.username&#125;&quot;)</code> 从配置文件中读取username的数据。</li><li><code> SimpleMailMessage message = new SimpleMailMessage();</code>创建一个简单的邮件对象。</li><li><code>message.setSubject()</code>设置邮件的标题</li><li><code>message.setText()</code>设置邮件的内容</li><li><code>message.setTo()</code>设置收件人的地址</li><li><code>message.setFrom()</code>设置发件人的地址</li></ul><ol start="3"><li>随机生成6位数的验证码</li></ol><p>使用SecureRandom生成随机数。</p><blockquote><p>Math.random生成的是一般随机数，采用的是类似于统计学的随机数生成规则，其输出结果很容易预测，因此可能导致被攻击者击中。而SecureRandom是真随机数，采用的是类似于密码学的随机数生成规则，其输出结果较难预测，若想要预防被攻击者攻击，最好做到使攻击者根本无法，或不可能鉴别生成的随机值和真正的随机值</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VerifyCode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SYMBOLS<span class="token operator">=</span><span class="token string">"0123456789"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> RANDOM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getVerifyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> verifycode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//生成一个长度为6的字符数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> verifycode<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//SYMBOLS.charAt()：返回目标索引下的字符</span>            <span class="token comment">//RANDOM.nextInt(xx)：生成0~xx-1的随机数</span>            <span class="token comment">//每次随机生成一个数x，并将SYMBOLS中的第n+1个数字返回给verifycode</span>            verifycode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>SYMBOLS<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>RANDOM<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>SYMBOLS<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>verifycode<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将字符数组转成字符串</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在实际开发中，我们通常需要登录和注册用户。在登录的时候我们可以使用验证码来进行验证，但在注册的时候我们看到更多的是使用邮箱验证，即给你发送的邮箱发送一个验证码，然后你将这个验证码输在页面。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="springboot" scheme="http://example.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合日志框架</title>
    <link href="http://example.com/2020/09/15/springboot%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2020/09/15/springboot%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</id>
    <published>2020-09-15T04:34:25.512Z</published>
    <updated>2020-09-15T04:42:29.052Z</updated>
    
    <content type="html"><![CDATA[<p>在项目的开发中，日志是必不可少的一个记录事件的组件，所以也会相应的在项目中实现和构建我们所需要的日志框架。</p><p>而市面上常见的日志框架有很多，比如：JCL、SLF4J、Jboss-logging、jUL、log4j、log4j2、logback等等，我们该如何选择呢？</p><p>通常情况下，日志是由一个抽象层+实现层的组合来搭建的。</p><a id="more"></a><table><thead><tr><th>日志-抽象层</th><th>日志-实现层</th></tr></thead><tbody><tr><td>JCL、SLF4J、jboss-logging</td><td>jul、log4j、log4j2、logback</td></tr></tbody></table><p><strong>springboot选择了SLF4J和logback</strong></p><h2 id="1-如何使用SLF4J"><a href="#1-如何使用SLF4J" class="headerlink" title="1.如何使用SLF4J"></a>1.如何使用SLF4J</h2><p>在以后的开发中，日志记录方法的调用，不应该来直接调用日志的实现层，而是调用日志抽象层的方法。</p><p>SLF4J就是日志抽象层，而logback就是日志的实现层。</p><p>给项目中导入slf4j和logback的实现jar</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要先生成一个log的对象</p><p>但在实际开发中，我们一般使用**@Slf4j**注解。</p><p>导入**@Slf4j**的依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后还要设置的Plugins里面安装Lombok插件。</p><p>在类的前面写上**@Slf4j**，就不用通过<code>LoggerFactory</code>创建Logger对象了，可以直接使用log。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置logback"><a href="#2-配置logback" class="headerlink" title="2.配置logback"></a>2.配置logback</h2><p>使用logback需要导入<strong>spring-boot-starter-logging</strong>依赖</p><p>但在实际开发中，我们不需要导入这个依赖，因为<strong>spring-boot-starter</strong>依赖中已经包含了<strong>spring-boot-starter-logging</strong>。因此可以不用引依赖，直接用就行了。</p><p>官方推荐使用的xml名字格式是：<code>logback-spring.xml</code>。</p><p>为什么是<code>logback-spring.xml</code> 而不是<code>logback.xml</code>呢？因为带spring后缀的可以使用<code>&lt;springProfile&gt;</code>标签</p><hr><p>在resource目录下新建一个：<code>logback-spring.xml</code>文件</p><p>配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--输出文件位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>../crm-admin-log/server-debug.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--编码--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd.HH:mm:ss&#125; [%5p] %c&#123;50&#125; %3L %M %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>immediateFlush</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>immediateFlush</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--日志级别--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>DEBUG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--滚动输出策略，归档文件名字--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>../crm-admin-log/server-debug.log.%d&#123;yyyy-MM-dd&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>../crm-admin-log/server-info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd.HH:mm:ss&#125; [%5p] %c&#123;50&#125; %3L %M %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>immediateFlush</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>immediateFlush</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>../crm-admin-log/server-info.log.%d&#123;yyyy-MM-dd&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>../crm-admin-log/server-warn.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd.HH:mm:ss&#125; [%5p] %c&#123;50&#125; %3L %M %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>../crm-admin-log/server-warn.log.%d&#123;yyyy-MM-dd&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--输出到控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>consoleApp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--输出样式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                %date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level[%thread]%logger&#123;56&#125;.%method:%L -%msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--设置某个包或者类使用哪个appende name属性值定义到mapper所在的目录--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid<span class="token punctuation">"</span></span>  <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>consoleApp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--全局日志级别--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>application.yml</strong>中配置logging config信息</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>logback<span class="token punctuation">-</span>spring.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在项目的开发中，日志是必不可少的一个记录事件的组件，所以也会相应的在项目中实现和构建我们所需要的日志框架。&lt;/p&gt;
&lt;p&gt;而市面上常见的日志框架有很多，比如：JCL、SLF4J、Jboss-logging、jUL、log4j、log4j2、logback等等，我们该如何选择呢？&lt;/p&gt;
&lt;p&gt;通常情况下，日志是由一个抽象层+实现层的组合来搭建的。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="日志框架" scheme="http://example.com/tags/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>spring boot整合mybatis 和 druid</title>
    <link href="http://example.com/2020/09/13/Springboot%E6%95%B4%E5%90%88Mybatis%E5%92%8Cdruid/"/>
    <id>http://example.com/2020/09/13/Springboot%E6%95%B4%E5%90%88Mybatis%E5%92%8Cdruid/</id>
    <published>2020-09-13T14:00:59.037Z</published>
    <updated>2020-09-13T14:04:27.538Z</updated>
    
    <content type="html"><![CDATA[<p>在实际开发中，我们一般不使用springboot自带的数据池，通常会整合mybatis和druid连接池，这篇博客就是用来记录怎么整合mybatis和druid</p><a id="more"></a><h2 id="spring-boot-整合mybatis"><a href="#spring-boot-整合mybatis" class="headerlink" title="spring boot 整合mybatis"></a>spring boot 整合mybatis</h2><ol><li>导入相关依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者在用<strong>Spring initializr</strong>创建springboot项目时直接添加mybatis maven坐标</p><ol start="2"><li><p>配置数据源</p><p>在resource下新建一个application.yml文件</p><p>在里面配置数据源信息</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>  <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/blog<span class="token punctuation">?</span>serverTimezone=UTC      <span class="token key atrule">username</span><span class="token punctuation">:</span> root       <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>username</strong> 如果使用 **data-username: **好像会出错</p><p>会报这个错误： <strong>Access denied for user ‘’@’localhost’ (using password: YES)</strong></p></li><li><p>添加mybatis配置</p></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.example.druid.bean  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>mapper-locations</code>：mapper所在的文件夹，用来定位mapper的位置</li><li><code>type-aliases-package</code>：别名类所在的文件夹，用来给实体类设置别名。</li><li><code>config-location</code>：mabatis配置文件的地址，如果用了<code>type-aliases-package</code>,就不用这个，因为在mybatis的配置类中基本上就是设置别名，type这个更加简单，不用再去新建一个config.xml。</li></ul><ol start="4"><li><p>创建mapper文件</p><p> 在resources文件夹下创建mapper文件夹，在该文件下创建xxxmapper.xml。</p><p>在xxxmapper.xml下添加如下内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--mapper的约束--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--里面写具体的sql语句，必须要写namespace,这个是用来定位到你这个sql语句是由哪一个来调用，全限定类名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.mapper.Usermapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--id是用来定位具体是哪个方法来调用。    resultType表示返回值类型，设置别名之后，只需要写类名就行了，不大小写--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>写mapper,service,controller层，不要忘记注解</p><ul><li>mapper  @Repository</li><li>service @Service</li><li>controller @RestController 或者 @Controller 推荐使用@RestController</li></ul></li><li><p>在启动类上面，要写上@MapperScan(“mapper层所在的文件夹的全限定名”)注解，用来定位到mapper层。</p></li></ol><h2 id="springboot整合druid数据库连接池"><a href="#springboot整合druid数据库连接池" class="headerlink" title="springboot整合druid数据库连接池"></a>springboot整合druid数据库连接池</h2><ol><li>导入相关依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个坐标其实都是导入druid,但是上面的是可以进入到druid的监测页面(<a href="http://localhost:8080/druid)%EF%BC%8C%E6%89%80%E4%BB%A5%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%9D%90%E6%A0%87">http://localhost:8080/druid)，所以推荐使用上面的坐标</a></p><ol start="2"><li>配置数据源</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/blog<span class="token punctuation">?</span>serverTimezone=UTC    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>细心的人会发现其实这个和mybatis配置数据源是差不多的，只不过druid配置时多加了一个type属性</p><p><strong>type</strong>：用来设置数据库连接池的种类，我们是要整合druid，所以设置成druid。</p><ol start="3"><li>配置druid的其他属性</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">spring:  datasource:    url: jdbc:mysql://localhost:3306/blog?serverTimezone=UTC    driver-class-name: com.mysql.cj.jdbc.Driver    password: 123456    type: com.alibaba.druid.pool.DruidDataSource    username: root<span class="token comment">&lt;!--druid其它配置--></span>    druid:      #初始化大小      initial-size: 5      #最多支持多少个活动会话      max-active: 50      #最小连接个数      min-idle: 1      #配置获取连接等待超时的时间，单位是毫秒      max-wait: 60000      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒      time-between-eviction-runs-millis: 60000      #配置一个连接池最小的生存时间，单位是毫秒      min-evictable-idle-time-millis: 300000      # 用来检测连接是否有效的sql，要求是一个查询语句。      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用      validation-query: SELECT 1 FROM DUAL      # 建议配置为true，不影响性能，并且保证安全性。      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。      test-while-idle: true      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能      test-on-borrow: false      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能      test-on-return: false      # 打开PSCache，并且指定每个连接上PSCache的大小      pool-prepared-statements: true      max-pool-prepared-statement-per-connection-size: 20      # 通过别名的方式配置扩展插件，多个英文逗号分隔，常用的插件有：      #监控统计用的filter:stat      # 日志用的filter:log4j      # 防御sql注入的filter:wall      filters: stat,wall,log4j      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000      # 合并多个DruidDataSource的监控数据      useGlobalDataSourceStat: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>filters这里配置有问题</p><ol start="4"><li>其他的就和整合mybatis一样了。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在实际开发中，我们一般不使用springboot自带的数据池，通常会整合mybatis和druid连接池，这篇博客就是用来记录怎么整合mybatis和druid&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="mybatis" scheme="http://example.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://example.com/2020/09/08/Mysql/"/>
    <id>http://example.com/2020/09/08/Mysql/</id>
    <published>2020-09-08T13:54:51.209Z</published>
    <updated>2020-09-16T13:06:21.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库开发语言SQL"><a href="#数据库开发语言SQL" class="headerlink" title="数据库开发语言SQL"></a>数据库开发语言SQL</h2><p>SQL是一种数据库查询和设计语言，主要用于存取数据，查询数据，更新数据和管理关系数据库系统。</p><p>SQL语言分为3个部分，即数据定义语言（DDL），数据操作语言(DML)，和数据控制语言(DCL)</p><a id="more"></a><ul><li><p>DDL</p><p>用于定义数据库、表、视图、索引、触发器等。其中包括create语句(创建数据库、表、视图)，alter语句(修改表。视图)，drop语句(删除数据库、表、视图)</p></li><li><p>DML</p><p>增删改查数据，包括select，update，delete，insert</p></li><li><p>DCL</p><p>数据完整控制，数据安全性控制和数据库的恢复等，具体如授权(GRANT)、回滚（ROLLBACK）、提交(CONMMIT)</p></li></ul><h2 id="mysql在命令行操作数据库"><a href="#mysql在命令行操作数据库" class="headerlink" title="mysql在命令行操作数据库"></a>mysql在命令行操作数据库</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> database_name<span class="token punctuation">;</span>         <span class="token comment">//database_name是所要创建的数据库的名字</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>                       <span class="token comment">//查询所有的数据库</span><span class="token keyword">use</span> database_name<span class="token punctuation">;</span>                    <span class="token comment">//使用（选择）数据库，database_name是你要用的数据库的名字</span><span class="token keyword">drop</span> datebase database_name<span class="token punctuation">;</span>          <span class="token comment">//删除数据库，首先要确定这个数据库存在才能删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据表的设计理念"><a href="#数据表的设计理念" class="headerlink" title="数据表的设计理念"></a>数据表的设计理念</h2><h3 id="1-数据表包含列，索引和触发器"><a href="#1-数据表包含列，索引和触发器" class="headerlink" title="1.数据表包含列，索引和触发器"></a>1.数据表包含列，索引和触发器</h3><pre><code>+ 列：也称为栏位，对于属性列，创建表时必须指定列的名字和数据类型+ 索引：根据指定的数据库表列建立起来的顺序，提供了快速访问数据的途径。+ 触发器：用户定义的事务命令的集合。</code></pre><h3 id="2-数据表的设计需要遵循三范式"><a href="#2-数据表的设计需要遵循三范式" class="headerlink" title="2.数据表的设计需要遵循三范式"></a>2.数据表的设计需要遵循三范式</h3><ul><li><p>第一范式：确保每列保持原子性</p><p>数据库的每一列都是不可分割的原子数据项，而不能是集合、数组、记录等非原子数据项</p></li></ul><ul><li><p>第二范式：确保每列都和主键相关</p><p>满足第二范式必须先满足第一范式，第二范式要求实体的属性完全依赖主关键字。如果不存在依赖，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与元实体之间是一对多的关系。</p><p>多对多，三张表，关系表两个外键。（关系表用来连接另外两张表）</p></li><li><p>第三范式：确保每列都和主键列直接相关，而不是间接相关。</p><p>满足第三范式必须先满足第二范式，要求一个关系中不包含已在其他关系中包含的非主关键字信息</p><p>一对多两张表，多的表加外键 。</p></li></ul><p>可以参考这篇博客，我觉得写得很详细。<a href="https://blog.csdn.net/kenhins/article/details/51084815?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-51084815.nonecase&utm_term=%E5%BB%BA%E8%A1%A8%E7%9A%84%E4%B8%89%E8%8C%83%E5%BC%8F">三范式</a></p><h3 id="3-表和表的关系"><a href="#3-表和表的关系" class="headerlink" title="3.表和表的关系"></a>3.表和表的关系</h3><p>数据库里表和表的关系有3种：一对一，一对多，多对多。</p><ul><li>一对一：主表和相关联的表是一一对应的。比如学生信息表和学生成绩表，可以根据学生信息表中学生的id在学生成绩表中找到唯一的一个成绩。</li><li>一对多：比如一个班级表，每个班级有多个学生，一个学生只对应一个班级，班级和学生就是一对多的关系。</li><li>多对多：比如选课表，每门课有很多学生选，一个学生又可以选多门课。学生和选课就是多对多的关系。</li></ul><h3 id="4-创建表"><a href="#4-创建表" class="headerlink" title="4.创建表"></a>4.创建表</h3><ul><li><p>建表的语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> table_name<span class="token punctuation">(</span>属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>    属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>    属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写完一个字段要加一个逗号，最后一个不要加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表名不能为sql的关键字</p></li></ul><h3 id="5-操作表的约束"><a href="#5-操作表的约束" class="headerlink" title="5.操作表的约束"></a>5.操作表的约束</h3><p>完整性约束条件是对字段进行限制的，要求用户对该属性进行的操作符合特定的要求。如果不满足完整性约束条件，数据库系统就不再执行用户的操作。MySQL中基本的完整性约束条件如下表。</p><table><thead><tr><th>约束条件</th><th>说明</th></tr></thead><tbody><tr><td>primary key</td><td>标识该属性为该表的主键，可以唯一的标识对应的元组</td></tr><tr><td>foreign key</td><td>标识该属性为该表的外键，是与之联系的某表的主键</td></tr><tr><td>not null</td><td>标识该属性不能为空</td></tr><tr><td>unique</td><td>标识该属性的值是唯一的</td></tr><tr><td>auto_increment</td><td>标识该属性的值自动增加，这是MySQL语句的特色</td></tr><tr><td>default</td><td>为该属性设置默认值</td></tr></tbody></table><h4 id="1-设置非空约束"><a href="#1-设置非空约束" class="headerlink" title="1.设置非空约束"></a>1.设置非空约束</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>属性名  数据类型  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>直接在所要设置的字段名后面加上<span class="token operator">NOT</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-设置表的默认值"><a href="#2-设置表的默认值" class="headerlink" title="2.设置表的默认值"></a>2.设置表的默认值</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>属性名  数据类型 <span class="token keyword">DEFAULT</span> defaultvalue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>username  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age  <span class="token keyword">int</span>  <span class="token keyword">DEFAULT</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>在所要设置的属性后面加上<span class="token keyword">DEFAULT</span> defaultvalue  defaultvalue是默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-设置表字段唯一约束（UK"><a href="#3-设置表字段唯一约束（UK" class="headerlink" title="3.设置表字段唯一约束（UK)"></a>3.设置表字段唯一约束（UK)</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>属性名  数据类型  <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>username  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>age  <span class="token keyword">int</span>  <span class="token keyword">DEFAULT</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>直接在所要设置的字段名后面加上<span class="token keyword">UNIQUE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-设置表的主键约束（PK）"><a href="#4-设置表的主键约束（PK）" class="headerlink" title="4.设置表的主键约束（PK）"></a>4.设置表的主键约束（PK）</h4><ul><li>主键是表的一个特殊字段，该字段能唯一的标识该表中的每一条信息。主键和记录的关系如同身份证和人的关系。主键必须是唯一的，表中任意两条记录的主键字段的值不能相同，主键必须是非空的。</li></ul>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>属性名  数据类型  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-设置表字段值自动增加"><a href="#5-设置表字段值自动增加" class="headerlink" title="5.设置表字段值自动增加"></a>5.设置表字段值自动增加</h3><ul><li>一个表中只能有一个字段使用AUTO_INCREMENT约束，且该字段的数据类型必须是整数类型，一般设置该约束的字段会同时设置成PK约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>属性名   数据类型   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只要这只的字段名后面加上PRIMARY KEY AUTO_INCREMENT 将该字段名同时设置成主键和自增长</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-设置表的外键约束-FK"><a href="#6-设置表的外键约束-FK" class="headerlink" title="6.设置表的外键约束(FK)"></a>6.设置表的外键约束(FK)</h3><ul><li><p>外键是表的一个特殊字段，外键约束用于保证多个表（通常是两个表）之间的参照完整性，即构建与两个表的字段之间的参照关系</p></li><li><p>设置外键约束的两个表之间具有父子关系，即子表中某个字段的取值范围由父表决定。列入一个班级和学生的关系，每个班级有多个学生。首先就应该有学生表和班级表，然后学生表有一个表示班级编号的字段classno,其依赖于班级表的主键，这样字段classno就是学生表的外键，通过该字段，班级表和学生表建立了关系</p></li><li><p>外键依赖于数据库中已经存在的父表的主键，外键可以为空。</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>属性名a  数据类型，    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">CONSTRAINT</span> fk_class_id  <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>class_id<span class="token punctuation">)</span>  <span class="token keyword">REFERENCES</span> class<span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token comment">//fk_class_id为外键约束的名字，可以随便取， class_id为这个表中你要设置为外键的字段名</span>    <span class="token comment">// class为你要关联的表，id为你要关联的表的字段名</span>    <span class="token comment">//这句话的意思就是  将这个表中的class_id作为外键，并且关联class表的字段名为id的字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实际开发中，一般不使用物理外键（即不设置出一个具体的外键），而使用逻辑外键，我们知道他有外键的功能即可可以参考这篇博客  <a href="https://zhuanlan.zhihu.com/p/114834741">主键和外键</a></li></ul><h3 id="7-修改表"><a href="#7-修改表" class="headerlink" title="7.修改表"></a>7.修改表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_class <span class="token keyword">rename</span> tab_class<span class="token punctuation">;</span>     <span class="token comment">//修改表的名字，使用alter和rename</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> propName proptype<span class="token punctuation">;</span> <span class="token comment">//在表的最后一个位置增加字段，tablename为表的名字，propName为属性名，proptype是数据类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> propName proptype <span class="token keyword">first</span><span class="token punctuation">;</span>       <span class="token comment">//在表的第一个位置增加字段，tablename为表的名字，propName为属性名，proptype是数据类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> propName proptype <span class="token keyword">after</span> pNameOld；       <span class="token comment">//在pnameOld后面加一个字段名，pNameOld是已经存在的字段名</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">drop</span> propname<span class="token punctuation">;</span>       <span class="token comment">//删除表中的某个字段，tablename为表的名字，propName为属性名</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">modify</span> propName propType<span class="token punctuation">;</span><span class="token comment">//修改某个字段的数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL的数据操作"><a href="#MySQL的数据操作" class="headerlink" title="MySQL的数据操作"></a>MySQL的数据操作</h2><h3 id="1-插入语句"><a href="#1-插入语句" class="headerlink" title="1.插入语句"></a>1.插入语句</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tablename<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>tablename是要插入的表的名字，field为要插入的字段名，value表示要插入的数值，并且field要和value一一对应。</p></li><li><p>field可以省略，这样就必须在values中写出所有字段的值，并且value对应的字段名必须与数据表中字段名的顺序相同。</p></li><li><p>在给表中所有字段赋值的时候，可以不用写field,由于主键是自增的，所以给主键赋值NULL，系统会自动为其赋值上条记录中该字段的取值加1。</p></li><li><p>field的顺序可以不和数据表中的字段名的顺序相同，但是必须保证field和value是一一对应的。</p></li><li><p>插入多条数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tablename<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span>value11<span class="token punctuation">,</span>value12<span class="token punctuation">,</span>value13<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>，<span class="token keyword">values</span><span class="token punctuation">(</span>value21<span class="token punctuation">,</span>value22<span class="token punctuation">,</span>value23<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">values</span><span class="token punctuation">(</span>value31<span class="token punctuation">,</span>value32<span class="token punctuation">,</span>value33<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">values</span><span class="token punctuation">(</span>valuen1<span class="token punctuation">,</span>valuen2<span class="token punctuation">,</span>valuen3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>可以通过插入数据来实现数据的复制</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tablename<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">(</span>field1<span class="token punctuation">,</span>fidld2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">from</span> tablename2 <span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//从tablename2中查询出数据，将这些数据作为values插入到tablename中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-更新数据记录"><a href="#2-更新数据记录" class="headerlink" title="2.更新数据记录"></a>2.更新数据记录</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> tablename <span class="token keyword">set</span> field1<span class="token operator">=</span>value1<span class="token punctuation">,</span>field2<span class="token operator">=</span>value2<span class="token punctuation">,</span>field3<span class="token operator">=</span>value3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//tablename是表的名字，field是字段名，value是值，where后面填特定的条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除数据记录"><a href="#3-删除数据记录" class="headerlink" title="3.删除数据记录"></a>3.删除数据记录</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//参数tablename表示所要删除的数据记录的表名，where 后面填特定的条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="MySQL的数据类型"><a href="#MySQL的数据类型" class="headerlink" title="MySQL的数据类型"></a>MySQL的数据类型</h2><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h3><table><thead><tr><th>整数类型</th><th>字节数</th><th>无符号数的取值范围</th><th>有符号数的取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>0~255</td><td>-128~127</td></tr><tr><td>SMALLINT</td><td>2</td><td>0~65535</td><td>-32768~32767</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>0~16777215</td><td>-8388608~83886007</td></tr><tr><td>INT</td><td>4</td><td>0~4294967295</td><td>-2147483648~2147483647</td></tr><tr><td>INTEGER</td><td>4</td><td>0~4294967295</td><td>2147483648~2147483647</td></tr><tr><td>BIGINT</td><td>8</td><td>0~18446744073709551615</td><td>-9223372036854775808~9223372036854775807</td></tr></tbody></table><ul><li>字段选择哪个整数类型取决于该字段的范围，现在最常用的整数类型是INT类型。</li></ul><h3 id="2-浮点数类型和定点数类型"><a href="#2-浮点数类型和定点数类型" class="headerlink" title="2.浮点数类型和定点数类型"></a>2.浮点数类型和定点数类型</h3><table><thead><tr><th>类型</th><th>字节数</th><th>负数的取值范围</th><th>非负数的取值范围</th></tr></thead><tbody><tr><td>FLOAT</td><td>4</td><td>-3.402823466E+38~-1.175494351E-38</td><td>0和1.175494351E-38~3.402823466E+38</td></tr><tr><td>DOUBLE</td><td>8</td><td>-1.7976931348623157E+308~-202250738585072014E-308</td><td>0和202250738585072014E-308~1.7976931348623157E+308</td></tr><tr><td>DECIMAL(M,D)</td><td>M+2</td><td>同DOUBLE类型</td><td>同DOUBLE类型</td></tr></tbody></table><ul><li>从表中可以看出DECIMAL类型的取值范围和DOUBLE相同。FLOAT和DOUBLE类型存储数据是存储的是近似值，DECIMAL存储的是字符串，因此提供了更高的精度。在金融系统中，表示货币金额的时候优先选择DECIMAL，一般的价格题中，比如商品的价格一般选择FLOAT类型。</li></ul><h3 id="3-日期与时间类型"><a href="#3-日期与时间类型" class="headerlink" title="3.日期与时间类型"></a>3.日期与时间类型</h3><table><thead><tr><th>类型</th><th>字节数</th></tr></thead><tbody><tr><td>YEAR</td><td>1</td></tr><tr><td>DATE</td><td>4</td></tr><tr><td>TIME</td><td>3</td></tr><tr><td>DATETIME</td><td>8</td></tr><tr><td>TIMESTAP</td><td>4</td></tr></tbody></table><ul><li>YEAR类型表示年，DATE类型表示日期，TIME类型表示时间，DATETIME和TIMESTAMP表示日期和时间</li><li>根据自己的需要，选择相应的类型。</li><li>在实际开发中，往往需要将时间格式化以后才能插入到数据库</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生成日期对象</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置日期格式化样式为yyyy-MM-dd</span> <span class="token class-name">SimpleDateFormat</span>  <span class="token class-name">SimpleDateFormat</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将date转为yyyy-MM-dd的字符串</span><span class="token class-name">String</span> format <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> parse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      parse <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-字符串类型"><a href="#4-字符串类型" class="headerlink" title="4.字符串类型"></a>4.字符串类型</h3><ul><li><strong>char</strong>和<strong>varchar</strong>类型为字符串类型。</li><li>在建表的时候，<strong>varchar</strong>需要设置长度，不设置会报错（有些人又说不会，但是我建表的时候没加过不了）。</li><li>设置长度的格式 : <code>字符串类型（M)</code></li><li><strong>CHAR</strong>和<strong>VARCHAR</strong>没有太大的区别。CHAR的长度是固定的，而VARCHAR的长度是可变的，指定长度之后，其长度可以在0到指定长度之间。比如VARCHAR(100)的最大长度是100，但不是每条记录都会占用100字节，而是在这个最大值范围内，用多少占多少。</li></ul><h2 id="单表数据查询"><a href="#单表数据查询" class="headerlink" title="单表数据查询"></a>单表数据查询</h2><h3 id="1-查询所有的字段数据"><a href="#1-查询所有的字段数据" class="headerlink" title="1.查询所有的字段数据"></a>1.查询所有的字段数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>fieldn <span class="token keyword">from</span> tablename；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在select后面写出所有的字段名</li><li>除了上面这种方法，还可以通过符号”*“来实现</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablename<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-查询指定字段数据"><a href="#2-查询指定字段数据" class="headerlink" title="2.查询指定字段数据"></a>2.查询指定字段数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//查询指定字段数据的方法和查询所有字段数据的第一种方法相同，只是查询所有是要写出所有的字段名，而查询部分只要写出自己需要的字段名即可</span><span class="token keyword">select</span> field1，field2，field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> tablenamea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-避免重复数据"><a href="#3-避免重复数据" class="headerlink" title="3.避免重复数据"></a>3.避免重复数据</h3><p>在MySQL查询执行简单数据查询时，有时候会显示重复数据。</p><p>比如说学生表中有3条数据，age字段的数据分别是16,17,16，你想查询班上的孩子是哪个岁数的，如果是简单的查询就会出现16,17,16,三个数据，而两个16是重复的，我们只要显示一个就够了。</p><p>这个时候就要使用DISTINCT功能来避免重复数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">frselect <span class="token keyword">distinct</span> age <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">//用distinct修饰你想避免重复的字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-条件数据记录查询"><a href="#4-条件数据记录查询" class="headerlink" title="4.条件数据记录查询"></a>4.条件数据记录查询</h3><ul><li>条件查询的种类</li></ul><table><thead><tr><th>查询条件</th><th>符号或关键字</th></tr></thead><tbody><tr><td>比较</td><td>= 、&lt;、&lt;=、&gt;、&gt;=、!=、&lt;&gt;(不等于)、!&gt;(不大于)、!&lt;</td></tr><tr><td>指定范围</td><td>BETWEEN  AND、NOT BETWEEN AND</td></tr><tr><td>指定集合</td><td>IN、NOT IN</td></tr><tr><td>匹配字符</td><td>LIKE、NOT LIKE</td></tr><tr><td>是否为空值</td><td>IS NULL、IS NOT NULL</td></tr><tr><td>多个查询条件</td><td>AND、OR</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> field1，field2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>带IN关键字的查询</p><ol><li><p>用IN来查询在集合中的数据，NOT IN查询不在集合中的数据</p><p><code>select * from student where age in (15,16，17)</code>  查询年龄为15,16,17的学生数据</p><p><code>select * from student where age not in (15,16,17)</code> 查询年龄不是15,16,17的学生数据</p></li><li><p>在使用IN关键字的时候，查询的集合中如果存在NULL，不会影响查询；使用NOT IN时，如果查询的集合中有NULL，则不会有任何的查询结果。</p></li></ol></li><li><p>带BETWEEN AND关键字的查询</p><ol><li><p>BETWEEN AND关键字操作符只针对数字类型。</p></li><li><p>用BETWEEN AND查询符合范围的数据，NOT BETWEEN AND查询不符合范围的数据。</p><p><code>select * from student where age between 15 and 17;</code> 查询年龄在15  ~ 17这个范围内的数据</p><p><code>select * from student where age not between 15 and 17;</code>  查询年龄不在15 ~ 17这个范围内的数据。</p></li></ol></li><li><p>带LIKE关键字的查询</p><ol><li><p>LIKE关键字支持   _    和  % 这两个通配符</p><table><thead><tr><th>符号</th><th>功能描述</th></tr></thead><tbody><tr><td>_</td><td>该通配符只能匹配单个字符</td></tr><tr><td>%</td><td>该通配符可以匹配任意长度的字符串，既可以是0个字符串、1个字符串，又可以是很多字符串</td></tr></tbody></table><p><code>select * from student where name like &#39;L%&#39;;</code>  查询名字以L开头的学生数据</p><p><code>select * from student where not name like &#39;L%&#39; </code>  查询名字不是以K开头的学生数据</p><p><code>select * from student where name like &#39;_A%&#39;</code> 查询名字的第二个字母是A的学生数据</p></li><li><p><strong>注意使用like关键字的时候，通配符位置要用单引号括起来，就算是数字类型的也需要使用单引号</strong></p></li></ol></li><li><p>带AND的多条件查询</p><ol><li><p>关键字ADN可以用来联合多个条件进行查询，使用AND时，只有同时满足所有查询条件的记录才会被查询出来。</p><p><code>select * from student where age = 15 and name =&#39;pty&#39;</code>  查询年龄=15岁并且名字是pty的学生的数据</p></li></ol></li><li><p>OR，IS NULL 、NOT IS NULL这三个关键字比较简单，OR和AND差不多，就不讲了</p></li><li><p>对查询的结果进行排序</p><ol><li>使用ORDER BY关键字对记录进行排序</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//对查询出来的结果根据年龄进行排序，[]中表示可选参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>ASC表示按升序排序，DESC表示按降序排序。</p></li><li><p>可以指定多个字段进行排序，比如可以先按照年龄排序再按照班级排序</p><p><code>select * from student order by age asc,classno desc</code> 先按照年龄升序，在按照班级降序</p><p>即如果两个人年龄相同，班级小的那个人排在前面。</p></li></ol></li></ol><h3 id="5-统计函数和分组函数"><a href="#5-统计函数和分组函数" class="headerlink" title="5.统计函数和分组函数"></a>5.统计函数和分组函数</h3><ul><li>COUNT()函数：实现统计表中记录的条数</li><li>AVG()函数：实现计算字段值的平均值</li><li>SUM()函数：实现计算字段值的综合</li><li>MAX()函数：实现查询字段值的最大值</li><li>MIN()函数：实现查询字段值的最小值</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数：<span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  对表中的记录进行统计，无论表字段中包含的是<span class="token boolean">null</span>值还是非<span class="token boolean">null</span>值cout<span class="token punctuation">(</span>field<span class="token punctuation">)</span>  对表中特定的字段进行统计，忽略<span class="token boolean">null</span>值。<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">//查询student表中一共有多少条记录</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数：<span class="token function">avg</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  先计算特定字段值的和，在求平均值。<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">//查询student中学生年龄的平均值</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数:<span class="token function">sum</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  计算特定字段值之和，在具体使用中会忽略<span class="token boolean">null</span>值。<span class="token keyword">select</span>  <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">//查询student中学生年龄的总和</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数 <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数：<span class="token function">max</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  计算特定字段值的最大值，在具体使用中会忽略<span class="token boolean">null</span>值<span class="token function">min</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  计算特定字段值的最小值，在具体使用中会忽略<span class="token boolean">null</span>值<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> maxval<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> minval <span class="token keyword">from</span> s_score<span class="token punctuation">;</span>  <span class="token comment">//查询student中学生年龄的最大最小值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当数据表中没有任何数据时，COUNT()函数返回数据为0，其他所有函数返回NULL。</li></ul><h4 id="简单分组函数"><a href="#简单分组函数" class="headerlink" title="简单分组函数"></a>简单分组函数</h4><ul><li>在现实应用中，经常会先把所有的数据记录进行分组，再对这些分组后的数据记录进行统计计算。</li><li>使用GROUP BY 来实现分组</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 统计函数<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> field<span class="token punctuation">;</span><span class="token comment">// 根据field进行分组然后在统计数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>同一组的数据只会展示一条。</li><li>只实现简单的分组查询是没有任何意义的，因为GROUP BY 关键字在单独使用时，默认查询出每个分组中随机一条记录。不具有确定性。因此常和统计函数一起使用</li><li>如果想要显示每个分组中的字段，可以使用GROUP_CONCAT()函数来实现。该函数可以显示每个分组中的指定字段。</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> subject<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span> name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> number <span class="token keyword">from</span> teacher <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> subject<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+------------+--------+</span><span class="token operator">|</span> subject <span class="token operator">|</span> name       <span class="token operator">|</span> number <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------------+--------+</span><span class="token operator">|</span> 化学    <span class="token operator">|</span> snow<span class="token punctuation">,</span>ji    <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span> 数学    <span class="token operator">|</span> huang<span class="token punctuation">,</span>zhou <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span> 生物    <span class="token operator">|</span> peng       <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> 语文    <span class="token operator">|</span> chen       <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------------+--------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.34</span> sec<span class="token punctuation">)</span><span class="token comment">//根据subject 分类，将每组中的name都显示出来，并统计人数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Having可以对分组后的数据进行再一次过滤</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> field <span class="token keyword">having</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//根据subject 分类，将每组中的name都显示出来，并统计人数,在过滤掉人数小于等于1的mysql> select subject,group_concat(name) name,count(name) number from teacher GROUP BY subject having number>1;</span><span class="token operator">+</span><span class="token comment">---------+------------+--------+</span><span class="token operator">|</span> subject <span class="token operator">|</span> name       <span class="token operator">|</span> number <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------------+--------+</span><span class="token operator">|</span> 化学    <span class="token operator">|</span> snow<span class="token punctuation">,</span>ji    <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span> 数学    <span class="token operator">|</span> huang<span class="token punctuation">,</span>zhou <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+------------+--------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">////根据subject 分类，将每组中的name都显示出来，并统计人数,在过滤掉人数小于等于1的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Having的执行效率比where低，能用where解决的不要用where</li></ul><h3 id="6-使用LIMIT限制数据记录查询数量"><a href="#6-使用LIMIT限制数据记录查询数量" class="headerlink" title="6.使用LIMIT限制数据记录查询数量"></a>6.使用LIMIT限制数据记录查询数量</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">limit</span> offset_start<span class="token punctuation">,</span>row_count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>offset_start表示起始位置，这个可以省略不写，如果不写默认值为0，表示从第一条记录开始显示。</li><li>offset_start应该比起始位置小1，类似于数组的下标。比如你要显示第4条数据，则offset_start应该为3。</li><li>row_count表示记录条数，即显示出来的记录数，如果row_count小于查询出来的总记录数，则只显示row_count设置的记录数；如果大于总记录数，则会把所有的都显示出来。</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+------+------+---------+---------+</span><span class="token operator">|</span> tid  <span class="token operator">|</span> name <span class="token operator">|</span> age  <span class="token operator">|</span> subject <span class="token operator">|</span> salary  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------+---------+---------+</span><span class="token operator">|</span> <span class="token number">2001</span> <span class="token operator">|</span> snow <span class="token operator">|</span>   <span class="token number">22</span> <span class="token operator">|</span> 化学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2002</span> <span class="token operator">|</span> peng <span class="token operator">|</span>   <span class="token number">23</span> <span class="token operator">|</span> 生物    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+------+------+---------+---------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">//限制了只显示2条记录数，默认从第一条记录开始</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+-------+------+---------+---------+</span><span class="token operator">|</span> tid  <span class="token operator">|</span> name  <span class="token operator">|</span> age  <span class="token operator">|</span> subject <span class="token operator">|</span> salary  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+------+---------+---------+</span><span class="token operator">|</span> <span class="token number">2001</span> <span class="token operator">|</span> snow  <span class="token operator">|</span>   <span class="token number">22</span> <span class="token operator">|</span> 化学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2002</span> <span class="token operator">|</span> peng  <span class="token operator">|</span>   <span class="token number">23</span> <span class="token operator">|</span> 生物    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2003</span> <span class="token operator">|</span> huang <span class="token operator">|</span>   <span class="token number">21</span> <span class="token operator">|</span> 数学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2004</span> <span class="token operator">|</span> ji    <span class="token operator">|</span>   <span class="token number">24</span> <span class="token operator">|</span> 化学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2005</span> <span class="token operator">|</span> chen  <span class="token operator">|</span>   <span class="token number">23</span> <span class="token operator">|</span> 语文    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2006</span> <span class="token operator">|</span> zhou  <span class="token operator">|</span>   <span class="token number">21</span> <span class="token operator">|</span> 数学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------+------+---------+---------+</span><span class="token number">6</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">//限制显示8条记录，但由于总记录数为6，所以显示了所有记录。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多表数据查询"><a href="#多表数据查询" class="headerlink" title="多表数据查询"></a>多表数据查询</h2><p>MySQL支持连接查询，在具体实现连接查询的操作时，首先将两个或两个以上的表按照某个条件连接起来，再查询所要求的数据记录，连接查询分为内连接查询和外连接查询。</p><p>在具体应用中，如果需要实现多表记录查询，一般不适合进行连接查询，因为该操作的效率比较低，所以MySQL体用了连接查询的替代操作——子查询操作。</p><h3 id="1-内连接查询"><a href="#1-内连接查询" class="headerlink" title="1.内连接查询"></a>1.内连接查询</h3><p>MySQL中，内连接数据查询通过“INNER JOIN…ON”语句来实现。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> tablename1 <span class="token keyword">inner</span> <span class="token keyword">join</span> tablename2  <span class="token keyword">on</span> 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内连接查询分为以下3类：</p><ul><li>自连接     指表与其自身连接 （这个不是很懂，看起来很简单就是一张表，但是不知道怎么得到的结果）</li><li>等值连接   在关键字ON后的匹配条件使用等于关系运算符（=）  这个方式我之前用的比较多</li><li>不等连接   关键字ON后的匹配条件使用 &gt;、&lt;、&gt;=、&lt;=、!=等关系运算符</li></ul><h3 id="2-外链接查询"><a href="#2-外链接查询" class="headerlink" title="2.外链接查询"></a>2.外链接查询</h3><p>MySQL中，外连接数据查询通过“OUTER JOIN…ON”语句来实现。<strong>outer可以省略</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> tablename <span class="token keyword">left</span><span class="token operator">|</span><span class="token keyword">right</span><span class="token operator">|</span><span class="token keyword">full</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token keyword">OUTER</span><span class="token punctuation">]</span> <span class="token keyword">join</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">on</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>外链接查询分为以下3类：</p><ul><li>左外连接</li><li>右外连接</li><li>全外连接</li></ul><p>左外连接：以<code>left join</code>左边的表为参考表，左表的所有记录都会被显示出来，而右表只会显示符合搜索条件的记录，没有数据的地方用NULL来代替</p><p>右外连接：以right join 右边的表为参考表，右表的所有记录都会被显示出来，而左表只显示符合搜索条件的记录，没有数据的地方用NULL代替。</p><p>全连接：目前mysql不支持这种方式。</p><p>参考这篇博客 <a href="https://blog.csdn.net/plg17/article/details/78758593">图解mysql内外连接</a></p><h3 id="3-复合条件连接查询"><a href="#3-复合条件连接查询" class="headerlink" title="3.复合条件连接查询"></a>3.复合条件连接查询</h3><p>复合条件连接查询中，通过添加过滤条件限制查询的结果，使查询的结果更加准确。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">班级表mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_class<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------+--------+------+---------+</span><span class="token operator">|</span> classno <span class="token operator">|</span> cname  <span class="token operator">|</span> loc  <span class="token operator">|</span> advisor <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+--------+------+---------+</span><span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span><span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span> class2 <span class="token operator">|</span> loc2 <span class="token operator">|</span> ad2     <span class="token operator">|</span><span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span> class3 <span class="token operator">|</span> loc3 <span class="token operator">|</span> ad3     <span class="token operator">|</span><span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------+--------+------+---------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>学生表mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+</span><span class="token operator">|</span> stuid <span class="token operator">|</span> name                <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> classno <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+</span><span class="token operator">|</span>  <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1002</span> <span class="token operator">|</span> Kalinda Sharma      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1003</span> <span class="token operator">|</span> Cary Agos           <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1004</span> <span class="token operator">|</span> Diane Lockhart      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1005</span> <span class="token operator">|</span> Eli Gold            <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">44</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1006</span> <span class="token operator">|</span> Peter Florric       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">34</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1007</span> <span class="token operator">|</span> Will Gardner        <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1008</span> <span class="token operator">|</span> Jacquiline Florriok <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1009</span> <span class="token operator">|</span> Zach Florriok       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">14</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1010</span> <span class="token operator">|</span> Grace Florriok      <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+</span><span class="token number">10</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>分数表mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_score<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------+---------+------+-----------+---------+</span><span class="token operator">|</span> stuid <span class="token operator">|</span> Chinese <span class="token operator">|</span> English <span class="token operator">|</span> Math <span class="token operator">|</span> Chemistry <span class="token operator">|</span> Physics <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+---------+------+-----------+---------+</span><span class="token operator">|</span>  <span class="token number">1001</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>   <span class="token number">92</span> <span class="token operator">|</span>        <span class="token number">83</span> <span class="token operator">|</span>      <span class="token number">80</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1002</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>      <span class="token number">98</span> <span class="token operator">|</span>   <span class="token number">92</span> <span class="token operator">|</span>        <span class="token number">93</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1003</span> <span class="token operator">|</span>      <span class="token number">79</span> <span class="token operator">|</span>      <span class="token number">78</span> <span class="token operator">|</span>   <span class="token number">82</span> <span class="token operator">|</span>        <span class="token number">83</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1004</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>   <span class="token number">91</span> <span class="token operator">|</span>        <span class="token number">92</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1005</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>      <span class="token number">95</span> <span class="token operator">|</span>   <span class="token number">91</span> <span class="token operator">|</span>        <span class="token number">96</span> <span class="token operator">|</span>      <span class="token number">97</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1006</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>      <span class="token number">91</span> <span class="token operator">|</span>   <span class="token number">92</span> <span class="token operator">|</span>        <span class="token number">94</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1007</span> <span class="token operator">|</span>      <span class="token number">91</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>   <span class="token number">83</span> <span class="token operator">|</span>        <span class="token number">88</span> <span class="token operator">|</span>      <span class="token number">93</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1008</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>      <span class="token number">81</span> <span class="token operator">|</span>   <span class="token number">84</span> <span class="token operator">|</span>        <span class="token number">86</span> <span class="token operator">|</span>      <span class="token number">98</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1009</span> <span class="token operator">|</span>      <span class="token number">91</span> <span class="token operator">|</span>      <span class="token number">84</span> <span class="token operator">|</span>   <span class="token number">85</span> <span class="token operator">|</span>        <span class="token number">86</span> <span class="token operator">|</span>      <span class="token number">93</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1010</span> <span class="token operator">|</span>      <span class="token number">88</span> <span class="token operator">|</span>      <span class="token number">81</span> <span class="token operator">|</span>   <span class="token number">82</span> <span class="token operator">|</span>        <span class="token number">84</span> <span class="token operator">|</span>      <span class="token number">99</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+---------+------+-----------+---------+</span><span class="token number">10</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">//查找总成绩超过450的学生的编号，姓名，性别，年龄，班级号，班级名称，班级位置和班主任信息</span><span class="token keyword">SELECT</span>st<span class="token punctuation">.</span>stuid<span class="token punctuation">,</span>st<span class="token punctuation">.</span> NAME<span class="token punctuation">,</span>st<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>st<span class="token punctuation">.</span>age<span class="token punctuation">,</span>st<span class="token punctuation">.</span>classno<span class="token punctuation">,</span>c<span class="token punctuation">.</span>cname<span class="token punctuation">,</span>c<span class="token punctuation">.</span>loc<span class="token punctuation">,</span>c<span class="token punctuation">.</span>advisor<span class="token punctuation">,</span>sc<span class="token punctuation">.</span>Chinese <span class="token operator">+</span> sc<span class="token punctuation">.</span>English <span class="token operator">+</span> sc<span class="token punctuation">.</span>Math <span class="token operator">+</span> sc<span class="token punctuation">.</span>Chemistry <span class="token operator">+</span> sc<span class="token punctuation">.</span>Physics total<span class="token keyword">FROM</span>t_student st<span class="token punctuation">,</span>t_class c<span class="token punctuation">,</span>t_score sc<span class="token keyword">WHERE</span>st<span class="token punctuation">.</span>classno <span class="token operator">=</span> c<span class="token punctuation">.</span>classno<span class="token operator">AND</span> st<span class="token punctuation">.</span>stuid <span class="token operator">=</span> sc<span class="token punctuation">.</span>stuid<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+--------+------+---------+-------+</span><span class="token operator">|</span> stuid <span class="token operator">|</span> NAME                <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> classno <span class="token operator">|</span> cname  <span class="token operator">|</span> loc  <span class="token operator">|</span> advisor <span class="token operator">|</span> total <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+--------+------+---------+-------+</span><span class="token operator">|</span>  <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>   <span class="token number">434</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1002</span> <span class="token operator">|</span> Kalinda Sharma      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>   <span class="token number">465</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1003</span> <span class="token operator">|</span> Cary Agos           <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>   <span class="token number">411</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1004</span> <span class="token operator">|</span> Diane Lockhart      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span> class2 <span class="token operator">|</span> loc2 <span class="token operator">|</span> ad2     <span class="token operator">|</span>   <span class="token number">453</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1005</span> <span class="token operator">|</span> Eli Gold            <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">44</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span> class3 <span class="token operator">|</span> loc3 <span class="token operator">|</span> ad3     <span class="token operator">|</span>   <span class="token number">471</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1006</span> <span class="token operator">|</span> Peter Florric       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">34</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span> class3 <span class="token operator">|</span> loc3 <span class="token operator">|</span> ad3     <span class="token operator">|</span>   <span class="token number">459</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1007</span> <span class="token operator">|</span> Will Gardner        <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span> class2 <span class="token operator">|</span> loc2 <span class="token operator">|</span> ad2     <span class="token operator">|</span>   <span class="token number">445</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1008</span> <span class="token operator">|</span> Jacquiline Florriok <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>   <span class="token number">439</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1009</span> <span class="token operator">|</span> Zach Florriok       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">14</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>   <span class="token number">439</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1010</span> <span class="token operator">|</span> Grace Florriok      <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>   <span class="token number">434</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+--------+------+---------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-合并查询数据记录"><a href="#4-合并查询数据记录" class="headerlink" title="4.合并查询数据记录"></a>4.合并查询数据记录</h3><p>通过UNION来实现合并查询数据记录的操作，可以将多个select语句的查询结果合并在一起组成新的关系</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span><span class="token operator">|</span><span class="token keyword">union</span> <span class="token keyword">all</span>  <span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span><span class="token operator">|</span><span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述语句中存在多个查询数据记录语句，每个查询数据记录语句之间使用UNION或者UNION ALL语句进行连接。</p><p>合并后的数据记录包含所有select语句的查询结果。union关键字会去掉重复数据，而union all则不会。</p><h3 id="5-子查询"><a href="#5-子查询" class="headerlink" title="5.子查询"></a>5.子查询</h3><p>什么是笛卡尔积？ </p><p>假如A表有4条数据，B表有3条数据，将这两张表联合起来。A表中的每一条数据都会去和B表的每一条数据匹配，也就是说将会出现12条数据，这就是笛卡尔积。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">seletct <span class="token operator">*</span> <span class="token keyword">from</span> a<span class="token punctuation">,</span>b <span class="token keyword">where</span> a<span class="token punctuation">.</span>xxx<span class="token operator">=</span>b<span class="token punctuation">.</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行上面这条语句的时候，就会先进行笛卡尔积操作，然后在选择符合条件的数据。当数据量足够大的时候，进行笛卡尔积就很容易导致死机。</p><p>当笛卡尔的数据记录数很大时，就通常使用子查询。</p><p>所谓子查询，是指在一个查询中嵌套其他若干查询。即在一个select语句的from或者where子句中包含另一个select查询语句。在查询语句中，前面的那个select被称为主查询，where子句中的select语句被称为子查询，也被称为嵌套查询。</p><p><strong>查询薪资水平为高级的员工的编号，名字，性别，年龄和工资</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+--------------------+--------+------+--------+--------+</span><span class="token operator">|</span> id   <span class="token operator">|</span> name               <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> salary <span class="token operator">|</span> deptno <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------------------+--------+------+--------+--------+</span><span class="token operator">|</span> <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric     <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>  <span class="token number">10000</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1002</span> <span class="token operator">|</span> Kalinda Sharma     <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>   <span class="token number">9000</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1003</span> <span class="token operator">|</span> Cary Agos          <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span>   <span class="token number">8000</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1004</span> <span class="token operator">|</span> Eli Gold           <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">44</span> <span class="token operator">|</span>  <span class="token number">20000</span> <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1005</span> <span class="token operator">|</span> Peter Florric      <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">34</span> <span class="token operator">|</span>  <span class="token number">30000</span> <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1006</span> <span class="token operator">|</span> Diane Lockhart     <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>  <span class="token number">50000</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1007</span> <span class="token operator">|</span> Maia Rindell       <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>   <span class="token number">9000</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1008</span> <span class="token operator">|</span> Will Gardner       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">36</span> <span class="token operator">|</span>  <span class="token number">50000</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1009</span> <span class="token operator">|</span> Jacquiline Florric <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">57</span> <span class="token operator">|</span>   <span class="token number">9000</span> <span class="token operator">|</span>      <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1010</span> <span class="token operator">|</span> Zach Florric       <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">17</span> <span class="token operator">|</span>   <span class="token number">5000</span> <span class="token operator">|</span>      <span class="token number">5</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1011</span> <span class="token operator">|</span> Grace Florric      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">14</span> <span class="token operator">|</span>   <span class="token number">4000</span> <span class="token operator">|</span>      <span class="token number">5</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------------------+--------+------+--------+--------+</span><span class="token number">11</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_slevel<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+--------+-------+-------------+</span><span class="token operator">|</span> id   <span class="token operator">|</span> salary <span class="token operator">|</span> <span class="token keyword">level</span> <span class="token operator">|</span> description <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+-------+-------------+</span><span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">3000</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span> 初级        <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">7000</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span> 中级        <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">10000</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span> 高级        <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">20000</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span> 特级        <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>  <span class="token number">30000</span> <span class="token operator">|</span>     <span class="token number">5</span> <span class="token operator">|</span> 高管        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+--------+-------+-------------+</span><span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span> a<span class="token punctuation">.</span> NAME<span class="token punctuation">,</span>a<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>a<span class="token punctuation">.</span>age<span class="token punctuation">,</span>a<span class="token punctuation">.</span>salary <span class="token keyword">FROM</span> t_employee a <span class="token keyword">WHERE</span>    <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span>salary <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> t_slevel <span class="token keyword">WHERE</span> <span class="token keyword">LEVEL</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">AND</span> a<span class="token punctuation">.</span>salary <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> t_slevel <span class="token keyword">WHERE</span> <span class="token keyword">LEVEL</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+----------------+--------+------+--------+</span><span class="token operator">|</span> id   <span class="token operator">|</span> NAME           <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> salary <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+--------+------+--------+</span><span class="token operator">|</span> <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>  <span class="token number">10000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+----------------+--------+------+--------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-带关键字IN的子查询"><a href="#5-1-带关键字IN的子查询" class="headerlink" title="5.1 带关键字IN的子查询"></a>5.1 带关键字IN的子查询</h3><p>一个查询语句的条件可能落在另一个查询语句的查询结果中，这可以通过关键字IN来判断。</p><p><strong>查询员工表t_employee的数据记录，这些记录的字段deptno的值必须在部门表t_dept中出现过</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> deptno <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> deptno <span class="token keyword">from</span> t_dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2带关键字EXISTS的子查询"><a href="#5-2带关键字EXISTS的子查询" class="headerlink" title="5.2带关键字EXISTS的子查询"></a>5.2带关键字EXISTS的子查询</h3><p>关键字EXISTS表示存在，后面的参数是一个任意的子查询，系统对子查询进行运算以判断他是否返回行。</p><p>如果至少返回一行，那么EXISTS返回的结果是true,此时外层语句将进行查询；如果子查询没有任何返回行，那么EXISTS的返回结果是false,此时外层语句将不进行查询。 （前面的select语句是外层语句）</p><p><strong>查询t-dept表中是否存在deptno为4的部门，如果存在，再查询表t_employee的记录</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_dept <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查询表t-dept中是否存在的deptno为4的部门，如果存在，在查询t_employee表中字段age大于40的记录</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> age<span class="token operator">></span><span class="token number">40</span> <span class="token operator">AND</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">*</span> <span class="token keyword">from</span> t_dept <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3带关键字ANY的子查询"><a href="#5-3带关键字ANY的子查询" class="headerlink" title="5.3带关键字ANY的子查询"></a>5.3带关键字ANY的子查询</h3><p>关键字ANY表示满足其中任意一个条件。</p><p>使用ANY时，只要满足内层查询语句返回的结果中的任意一个，就可以通过该条件执行外层查询语句。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数据库开发语言SQL&quot;&gt;&lt;a href=&quot;#数据库开发语言SQL&quot; class=&quot;headerlink&quot; title=&quot;数据库开发语言SQL&quot;&gt;&lt;/a&gt;数据库开发语言SQL&lt;/h2&gt;&lt;p&gt;SQL是一种数据库查询和设计语言，主要用于存取数据，查询数据，更新数据和管理关系数据库系统。&lt;/p&gt;
&lt;p&gt;SQL语言分为3个部分，即数据定义语言（DDL），数据操作语言(DML)，和数据控制语言(DCL)&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://example.com/2020/09/08/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2020/09/08/markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2020-09-07T16:16:59.879Z</published>
    <updated>2020-09-14T12:05:31.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示</p><p>一个#是一级标题，两个#是二级标题，以此类推。支持六级标题</p><a id="more"></a><p>并且在#后面加上空格之后在添加文字</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul><li><p>加粗</p><p>要加粗的文字左右分别使用两个*号包起来</p></li><li><p>斜体</p><p>使用一个*包起来</p></li><li><p>斜体加粗</p><p>使用三个*号包起来</p></li><li><p>删除线</p><p>使用两个~~号包起来</p></li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">加粗</span><span class="token punctuation">**</span></span><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体加粗</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token strike"><span class="token punctuation">~~</span><span class="token content">删除线</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><p><strong>加粗</strong><br><em>斜体</em><br><strong><em>斜体加粗</em></strong><br><del>删除线</del></p><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前面加&gt;即可，也可以嵌套使用，如加两个&gt;,三个&gt;,n个&gt;</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span>引用<span class="token blockquote punctuation">>></span>引用2<span class="token blockquote punctuation">>>></span>引用3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下</p><blockquote><p>引用</p><blockquote><p>引用2</p><blockquote><p>引用3</p></blockquote></blockquote></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或三个以上的+ - *都可以</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">+++<span class="token title important">*****<span class="token punctuation">----</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">![<span class="token content">图片alt</span>](图片地址 <span class="token string">"图片title"</span>)</span>图片alt就是显示在图片下面的文字，相当于对图片内容的解释图片title是图片的标题，当鼠标移到图片上时显示的内容，title可加可不加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;区块链&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果如下：</p><p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">超链接名</span>](超链接地址 <span class="token string">"超链接title"</span>)</span>title 可加可不加[百度] (http://www.baidu.com)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><a href="http://baidu.com/" title="百度">百度</a></p><p><strong>注意</strong>：markdown本身不支持超链接在新页面中打开，如果想在新页面中打开的话可以用html中的a标签来代替</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>超链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下</p><p><a href="http://www.baidu.com" target="_blank">百度</a>  (但是这个好像也打开不了)</p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><p><strong>无序列表</strong></p><p>使用 + - * 任意一种都可以</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 无序列表<span class="token list punctuation">+</span> 无序列表<span class="token list punctuation">*</span> 无序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下</p><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><p><strong>有序列表</strong></p><p>数字加点    <em>在点的后面要加空格</em></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1. 2. 3. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>列表的嵌套</strong></p><p>只需要在字列表的选项前面添加4个空格即可</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 有序列表    <span class="token list punctuation">-</span> 无序列表1    <span class="token list punctuation">-</span> 无序列表2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>有序列表<ul><li>无序列表1</li><li>无序列表2</li></ul></li></ol><pre class="line-numbers language-markd" data-language="markd"><code class="language-markd">- 无序列表    1. 有序列表    2. 有序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>无序列表<ol><li>有序列表</li><li>有序列表</li></ol></li></ul><h2 id="八、代码"><a href="#八、代码" class="headerlink" title="八、代码"></a>八、代码</h2><p>代码之间分别用一个反引号包起来</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code keyword">`void main`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下</p><p><code>public static void main(String args[])</code></p><p><strong>代码块</strong></p><p>用四个反引号包起来，后面写语言名称(三个反引号也可以)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">​<span class="token code keyword">````java    ``</span>`java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题&quot; class=&quot;headerlink&quot; title=&quot;一、标题&quot;&gt;&lt;/a&gt;一、标题&lt;/h2&gt;&lt;p&gt;在想要设置为标题的文字前面加#来表示&lt;/p&gt;
&lt;p&gt;一个#是一级标题，两个#是二级标题，以此类推。支持六级标题&lt;/p&gt;</summary>
    
    
    
    <category term="markdown" scheme="http://example.com/categories/markdown/"/>
    
    
    <category term="语法" scheme="http://example.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>开发中遇到的问题</title>
    <link href="http://example.com/2020/09/08/%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/09/08/%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-07T16:15:50.280Z</published>
    <updated>2020-09-23T12:29:25.640Z</updated>
    
    <content type="html"><![CDATA[<h3 id="springboot集成mybatis后，开始事务管理"><a href="#springboot集成mybatis后，开始事务管理" class="headerlink" title="springboot集成mybatis后，开始事务管理"></a>springboot集成mybatis后，开始事务管理</h3><ol><li>启用全局事务管理：在springboot的启动类上面，添加@**EnableTransactionManagement(proxyTargetClass = true)**注解</li><li>在service层中，在要添加的方法上面添加@Transactional注解，代表这个方法里面的操作是在同一个事务里面的，只要有一个事务有异常，就会回滚。</li></ol><a id="more"></a><h3 id="外键是用来干嘛的？"><a href="#外键是用来干嘛的？" class="headerlink" title="外键是用来干嘛的？"></a>外键是用来干嘛的？</h3><ul><li>外键是用来构建两个表的关系的，比如一张学生表和班级表，学生表里面有个字段classno，我们可以通过这个字段，查询出他是哪个班的。这个字段classno就是外键。</li><li>外键必须依赖于数据库中的已经存在的一张表的主键，被依赖的表叫做父表，有外键的表叫做子表。</li><li>在实际开发中，不设置物理外键（即不设置出真正的外键），因为设置了物理外键在进行删除，插入等操作会很麻烦还会影响性能。我们一般是设置逻辑外键（即我们知道这个字段是起外键的作用就行了）。</li></ul><h3 id="有了外键应该怎么删除数据"><a href="#有了外键应该怎么删除数据" class="headerlink" title="有了外键应该怎么删除数据"></a>有了外键应该怎么删除数据</h3><ul><li>设置外键以后，设置外键的表称为子表，被关联的表称为父表。</li><li>设置外键以后，要先删除子表再删除父表。</li></ul><h3 id="mybatis中parameterType中怎么传入多个不同类型的参数"><a href="#mybatis中parameterType中怎么传入多个不同类型的参数" class="headerlink" title="mybatis中parameterType中怎么传入多个不同类型的参数"></a>mybatis中parameterType中怎么传入多个不同类型的参数</h3><ol><li><p>不需要写parameterType参数</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">public List<span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span>String xxId<span class="token punctuation">,</span> String xxCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　select t.* from tableName where id = #&#123;0&#125; and name = #&#123;1&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于是多参数那么就不能使用parameterType， 改用#｛index｝是第几个就用第几个的索引，索引从0开始</p></li><li><p>注解</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">public List<span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span><span class="token metadata symbol">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>int id<span class="token punctuation">,</span> <span class="token metadata symbol">@Param</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>String code<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　select t.* from tableName where id = #&#123;id&#125; and name = #&#123;code&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于是多参数那么就不能使用parameterType， 这里用@Param来指定哪一个</p></li><li><p>Map封装</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span>HashMap map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashmap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　select 字段... from XXX where id=#&#123;xxId&#125; code = #&#123;xxCode&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中hashmap是mybatis自己配置好的直接使用就行。map中key的名字是那个就在#{}使用那个，map如何封装就不用了我说了吧。</p></li><li><p>List封装</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">List</span><span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span><span class="token keyword">List</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token keyword">list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　select 字段... from XXX where id in　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  　　　　#&#123;item&#125;  　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结</p><p>传递list和map在资源消耗上肯定远大于方法一和方法二，但是有一些特殊的情形需要传递list，比如你需要传递一个id集合并批量对id进行sql操作然后再返回等等。所以都需要了解。</p></li></ol><h3 id="Mybatis中传递参数时，会加上单引号吗"><a href="#Mybatis中传递参数时，会加上单引号吗" class="headerlink" title="Mybatis中传递参数时，会加上单引号吗"></a>Mybatis中传递参数时，会加上单引号吗</h3><p>使用**#{参数}**传入会加上单引号，sql语句解析是会加上‘ ’ </p><p>比如  select * from table where name = #{name} ,传入的name为小李，那么最后打印出来的就是</p><p> select * from table where name = ‘小李’，就是会当成字符串来解析</p><p>但是${}并不会加上单引号</p><h3 id="在数据库中以时间分组查询数据怎么查"><a href="#在数据库中以时间分组查询数据怎么查" class="headerlink" title="在数据库中以时间分组查询数据怎么查"></a>在数据库中以时间分组查询数据怎么查</h3><p><code>select 时间 from 表名 group by 时间</code></p><h3 id="在数据库中按照准确的时间应该怎么查"><a href="#在数据库中按照准确的时间应该怎么查" class="headerlink" title="在数据库中按照准确的时间应该怎么查"></a>在数据库中按照准确的时间应该怎么查</h3><p>使用DATE_FORMAT()函数将date类型的转换为字符串</p><p>DATE_FORMAT(date,format)用法：将时间date转换为format格式的字符串</p><p>format是自己定义的格式，如<code>DATE_FORMAT(date,&#39;%Y-%m-%d&#39;)</code>，就是将date转换为格式为年-月-日的字符串</p><p><code>select * from 表名 where DATE_FORMAT(date,&#39;%Y-%m-%d&#39;)=xxx</code></p><h3 id="pageHelper插件的用法"><a href="#pageHelper插件的用法" class="headerlink" title="pageHelper插件的用法"></a>pageHelper插件的用法</h3><p>pageHelper插件是用来解决分页的问题</p><p>使用方法</p><ol><li><p>导入依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 特别注意版本问题 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在controller中直接使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/articles"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"得到所有的文章信息，用于在首页进行博客展示,需要传入当前pageNum,不传默认为1,每页显示3条信息"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResResult</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">int</span> pageNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//传入pageNum的值，defaulValue表示默认值</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置pageNum和pageSize的值</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articles <span class="token operator">=</span> articleService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>articles<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//将查询的结果放入PageInfo类中，在里面会有查询到的接货以及分页的信息（比如总页数，总记录数等等）</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResResult</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResResult</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>PageInfo中的一些属性</p><pre class="line-numbers language-none"><code class="language-none">private int pageNum;   &#x2F;&#x2F;当前页码private int pageSize;   &#x2F;&#x2F;每页显示多少条信息private int size;      &#x2F;&#x2F;当前页有多少条信息private int startRow;  &#x2F;&#x2F;表示当前页面第一个元素在数据库中的行号private int endRow;    &#x2F;&#x2F;表示当前页面的最后一个元素在数据库中的行号  startRow和endRow不常用，private long total;    &#x2F;&#x2F;表示总的记录数private int pages;     &#x2F;&#x2F;表示总的页数private List&lt;T&gt; list;  &#x2F;&#x2F;结果集private int prePage;   &#x2F;&#x2F;前一页private int nextPage;  &#x2F;&#x2F;后一页private boolean isFirstPage;  &#x2F;&#x2F;当前页面是第一页吗private boolean isLastPage;   &#x2F;&#x2F;当前页面是最后一页吗private boolean hasPreviousPage;  &#x2F;&#x2F;当前页面是否有上一页private boolean hasNextPage;   &#x2F;&#x2F;当前页面是否有下一页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="MapperScan注解的使用"><a href="#MapperScan注解的使用" class="headerlink" title="@MapperScan注解的使用"></a>@MapperScan注解的使用</h3><p>在学习了spring之后，不在需要给dao层建立实体类，只需要写出dao的接口就行了，但是需要我们使用@Mapper注解，在dao接口类上添加@Mapper注解，在编译之后就会生成接口实现类，不在需要我们人为的去写一个实现类。</p><p>但是在接口类很多的情况下，就需要我们给很多接口类都添加@Mapper注解，比较麻烦。所以就出现了@MapperScan</p><p><strong>@MapperScan注解</strong>用于指定dao接口类所在的包，该包下的每一个接口在编译之后都会生成一个实现类，不用再在每一个接口类上添加@Mapper注解。</p><p><strong>@MapperScan注解在springboot启动类上添加</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.hutdsj.blog.mapper"</span><span class="token punctuation">)</span>   <span class="token comment">//指定接口类所在的包，com.hutdsj.blog.mapper下的所有接口都会在编译后生成实现类</span><span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token comment">//指定这是一个springboot程序</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">BlogApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@MapperScan注解指定多个包</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"com.kfit.demo"</span><span class="token punctuation">,</span><span class="token string">"com.kfit.user"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//使用逗号隔开</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Controller和RestController"><a href="#Controller和RestController" class="headerlink" title="Controller和RestController"></a>Controller和RestController</h3><p><strong>@RestController相当于@Controller和@ResponseBody合在一起的作用</strong></p><ol><li>如果是要返回到页面，则不需要添加@ResponseBody注解，只需要添加@Controller注解。</li><li>如果是要返回json数据，xml或者自定义的media Type内容到页面，就需要使用@RestController。</li><li>前后端分离，是将自己从数据库获得的数据以json数据的形式传给前端，所以前后端分离开发时使用@RESTController注解，写在Conrtroller层的最上面。</li></ol><p>可以参考这篇博客  <a href="https://www.cnblogs.com/shuaifing/p/8119664.html">@Controller注解</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;springboot集成mybatis后，开始事务管理&quot;&gt;&lt;a href=&quot;#springboot集成mybatis后，开始事务管理&quot; class=&quot;headerlink&quot; title=&quot;springboot集成mybatis后，开始事务管理&quot;&gt;&lt;/a&gt;springboot集成mybatis后，开始事务管理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;启用全局事务管理：在springboot的启动类上面，添加@**EnableTransactionManagement(proxyTargetClass = true)**注解&lt;/li&gt;
&lt;li&gt;在service层中，在要添加的方法上面添加@Transactional注解，代表这个方法里面的操作是在同一个事务里面的，只要有一个事务有异常，就会回滚。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="开发" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="springboot" scheme="http://example.com/tags/springboot/"/>
    
    <category term="mybatis" scheme="http://example.com/tags/mybatis/"/>
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
</feed>
