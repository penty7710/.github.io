<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>fastapi多文件</title>
    <url>/2021/07/22/fastapi%E5%A4%9A%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><a id="more"></a>

<pre class="line-numbers language-none"><code class="language-none">├── app
│   ├── __init__.py
│   ├── main.py
│   ├── dependencies.py
│   └── routers
│   │   ├── __init__.py
│   │   ├── items.py
│   │   └── users.py
│   └── internal
│       ├── __init__.py
│       └── admin.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>app</code> 目录包含了所有内容。并且它有一个空文件 <code>app/__init__.py</code>，因此它是一个「Python 包」（「Python 模块」的集合）：<code>app</code>。</li>
<li>它包含一个 <code>app/main.py</code> 文件。由于它位于一个 Python 包（一个包含 <code>__init__.py</code> 文件的目录）中，因此它是该包的一个「模块」：<code>app.main</code>。</li>
<li>还有一个 <code>app/dependencies.py</code> 文件，就像 <code>app/main.py</code> 一样，它是一个「模块」：<code>app.dependencies</code>。</li>
<li>有一个子目录 <code>app/routers/</code> 包含另一个 <code>__init__.py</code> 文件，因此它是一个「Python 子包」：<code>app.routers</code>。</li>
<li>文件 <code>app/routers/items.py</code> 位于 <code>app/routers/</code> 包中，因此它是一个子模块：<code>app.routers.items</code>。</li>
<li>同样适用于 <code>app/routers/users.py</code>，它是另一个子模块：<code>app.routers.users</code>。</li>
<li>还有一个子目录 <code>app/internal/</code> 包含另一个 <code>__init__.py</code> 文件，因此它是又一个「Python 子包」：<code>app.internal</code>。</li>
<li><code>app/internal/admin.py</code> 是另一个子模块：<code>app.internal.admin</code>。</li>
</ul>
<h2 id="APIRouter"><a href="#APIRouter" class="headerlink" title="APIRouter"></a>APIRouter</h2><p>可以使用<code>APIRouter</code>为模块创建路径操作，可以与<code>FastAPI</code>类相同的方式创建一个实例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#导入APIRouter</span>
<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> APIRouter
<span class="token comment">#创建一个实例</span>
router <span class="token operator">=</span> APIRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#像FastAPI一样创建路径操作，相当于一个迷你的FastAPI类</span>
<span class="token decorator annotation punctuation">@router<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/users/"</span><span class="token punctuation">,</span> tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"users"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"Rick"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"Morty"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>


<span class="token decorator annotation punctuation">@router<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/users/me"</span><span class="token punctuation">,</span> tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"users"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"fakecurrentuser"</span><span class="token punctuation">&#125;</span>


<span class="token decorator annotation punctuation">@router<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/users/&#123;username&#125;"</span><span class="token punctuation">,</span> tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"users"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span> username<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h2><p><code>dependencies</code> 模块（<code>app/dependencies.py</code>）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Header<span class="token punctuation">,</span> HTTPException


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_token_header</span><span class="token punctuation">(</span>x_token<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">if</span> x_token <span class="token operator">!=</span> <span class="token string">"fake-super-secret-token"</span><span class="token punctuation">:</span>

        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string">"X-Token header invalid"</span><span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_query_token</span><span class="token punctuation">(</span>token<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> token <span class="token operator">!=</span> <span class="token string">"jessica"</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string">"No Jessica token provided"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="其他使用APIRouter的模块"><a href="#其他使用APIRouter的模块" class="headerlink" title="其他使用APIRouter的模块"></a>其他使用APIRouter的模块</h2><p><code>app/routers/items.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> APIRouter<span class="token punctuation">,</span> Depends<span class="token punctuation">,</span> HTTPException

<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> get_token_header

<span class="token comment">#给该模块下的所有路径操作进行统一的设置</span>
router <span class="token operator">=</span> APIRouter<span class="token punctuation">(</span>
    prefix<span class="token operator">=</span><span class="token string">"/items"</span><span class="token punctuation">,</span>  <span class="token comment">#设置了路径， 地址都变成了 /items/xxxx</span>
    tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">#设置了标签</span>
    dependencies<span class="token operator">=</span><span class="token punctuation">[</span>Depends<span class="token punctuation">(</span>get_token_header<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">#设置了依赖</span>
    responses<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">400</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token punctuation">:</span><span class="token string">"NOT found"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">#设置了response</span>
<span class="token punctuation">)</span>

fake_items_db <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"plumbus"</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"pty"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"gun"</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"gun"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>


<span class="token decorator annotation punctuation">@router<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> fake_items_db

<span class="token decorator annotation punctuation">@router<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/&#123;item_id"</span><span class="token punctuation">)</span>  <span class="token comment">#路径变为：/items/&#123;item_id&#125;</span>
<span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> item_id <span class="token keyword">not</span> <span class="token keyword">in</span> fake_items_db<span class="token punctuation">:</span>
        <span class="token keyword">raise</span>  HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span>detail<span class="token operator">=</span><span class="token string">"not found"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span>fake_items_db<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"item_id"</span><span class="token punctuation">:</span>item_id<span class="token punctuation">&#125;</span>

<span class="token comment">#还可以再为某个路径操作单独设置，这样会和之前统一设置的进行叠加</span>
<span class="token decorator annotation punctuation">@router<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span>
    <span class="token string">"/&#123;item_id&#125;"</span><span class="token punctuation">,</span>
    tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"custom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">#有两个tags，items和custom</span>
    responses<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">403</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token punctuation">:</span><span class="token string">"operation"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">#有两个response：404和403</span>
<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> item_id<span class="token operator">!=</span><span class="token string">"plumbus"</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">403</span><span class="token punctuation">,</span>detail<span class="token operator">=</span><span class="token string">"you can only update plumbus"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"item_id"</span><span class="token punctuation">:</span>item_id<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"the great"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>需要设置<code>dependencies</code>的时候的格式，<code>dependencies=[Depends(get_token_header)]</code>      <code>Depends</code>要用[]括起来了，我之前没括起来，报错</strong></p>
<h2 id="FastAPI主体"><a href="#FastAPI主体" class="headerlink" title="FastAPI主体"></a>FastAPI主体</h2><p>位于 <code>app/main.py</code> 的模块，在这里导入并使用<code>FastAPI</code>类，这将是你的应用程序中将所有内容联结在一起的主文件。</p>
<p>由于大部分逻辑都存在于自己的特定模块中，所以主文件的内容将非常简单。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Depends

<span class="token keyword">from</span> <span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> get_token_header<span class="token punctuation">,</span> get_query_token
<span class="token keyword">from</span> <span class="token punctuation">.</span>internal <span class="token keyword">import</span> admin
<span class="token keyword">from</span> <span class="token punctuation">.</span>routers <span class="token keyword">import</span> items<span class="token punctuation">,</span> users

<span class="token comment">#需要注意这里的格式，Depends用[]括起来了，我之前没括起来，报错</span>
app<span class="token operator">=</span>FastAPI<span class="token punctuation">(</span>dependencies<span class="token operator">=</span><span class="token punctuation">[</span>Depends<span class="token punctuation">(</span>get_query_token<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">#</span>
app<span class="token punctuation">.</span>include_router<span class="token punctuation">(</span>items<span class="token punctuation">.</span>router<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>include_router<span class="token punctuation">(</span>users<span class="token punctuation">.</span>router<span class="token punctuation">)</span>

<span class="token comment">#可以在主文件中对其他文件的router进行设置</span>
<span class="token comment">#对interal/admin.py进行router设置</span>
app<span class="token punctuation">.</span>include_router<span class="token punctuation">(</span>
    admin<span class="token punctuation">.</span>router<span class="token punctuation">,</span>
    prefix<span class="token operator">=</span><span class="token string">"/admin"</span><span class="token punctuation">,</span>
    tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    dependencies<span class="token operator">=</span><span class="token punctuation">[</span>Depends<span class="token punctuation">(</span>get_token_header<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    responses<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">418</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token punctuation">:</span><span class="token string">"i'm a teapot"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>

app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="避免名称冲突"><a href="#避免名称冲突" class="headerlink" title="避免名称冲突"></a>避免名称冲突</h3><p>我们将直接导入 <code>items</code> 子模块，而不是仅导入其 <code>router</code> 变量。</p>
<p>这是因为我们在 <code>users</code> 子模块中也有另一个名为 <code>router</code> 的变量。</p>
<p>如果我们一个接一个地导入，例如：</p>
<pre class="line-numbers language-none"><code class="language-none">from .routers.items import router
from .routers.users import router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>来自 <code>users</code> 的 <code>router</code> 将覆盖来自 <code>items</code> 中的 <code>router</code>，我们将无法同时使用它们。</p>
<h2 id="相对导入"><a href="#相对导入" class="headerlink" title="相对导入"></a>相对导入</h2><p>在上面我们会看到这样的代码，这些是从我们的文件中导入的模块，他们是怎么工作的呢？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>dependencies <span class="token keyword">import</span> get_token_header<span class="token punctuation">,</span> get_query_token
<span class="token keyword">from</span> <span class="token punctuation">.</span>internal <span class="token keyword">import</span> admin
<span class="token keyword">from</span> <span class="token punctuation">.</span>routers <span class="token keyword">import</span> items<span class="token punctuation">,</span> users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>一个单点 <code>.</code>，例如：</p>
<pre class="line-numbers language-none"><code class="language-none">from .dependencies import get_token_header<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>表示：</p>
<ul>
<li>从该模块（<code>app/routers/items.py</code> 文件）所在的同一个包（<code>app/routers/</code> 目录）开始…</li>
<li>找到 <code>dependencies</code> 模块（一个位于 <code>app/routers/dependencies.py</code> 的虚构文件）…</li>
<li>然后从中导入函数 <code>get_token_header</code>。</li>
</ul>
<p>两个点 <code>..</code>，例如：</p>
<pre class="line-numbers language-none"><code class="language-none">from ..dependencies import get_token_header<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>表示：</p>
<ul>
<li>从该模块（<code>app/routers/items.py</code> 文件）所在的同一个包（<code>app/routers/</code> 目录）开始…</li>
<li>跳转到其父包（<code>app/</code> 目录）…</li>
<li>在该父包中，找到 <code>dependencies</code> 模块（位于 <code>app/dependencies.py</code> 的文件）…</li>
<li>然后从中导入函数 <code>get_token_header</code>。</li>
</ul>
<p>同样，如果我们使用了三个点 <code>...</code>，例如：</p>
<pre class="line-numbers language-none"><code class="language-none">from ...dependencies import get_token_header<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>那将意味着：</p>
<ul>
<li>从该模块（<code>app/routers/items.py</code> 文件）所在的同一个包（<code>app/routers/</code> 目录）开始…</li>
<li>跳转到其父包（<code>app/</code> 目录）…</li>
<li>然后跳转到该包的父包（该父包并不存在，<code>app</code> 已经是最顶层的包 😱）…</li>
<li>在该父包中，找到 <code>dependencies</code> 模块（位于 <code>app/</code> 更上一级目录中的 <code>dependencies.py</code> 文件）…</li>
<li>然后从中导入函数 <code>get_token_header</code>。</li>
</ul>
<p><code>from .routers import items, users</code></p>
<p>表示：</p>
<ul>
<li>从该模块（<code>app/main.py</code> 文件）所在的同一个包（<code>app/</code> 目录）开始…</li>
<li>寻找 <code>routers</code> 子包（位于 <code>app/routers/</code> 的目录）…</li>
<li>从该包中，导入子模块 <code>items</code> (位于 <code>app/routers/items.py</code> 的文件) 以及 <code>users</code> (位于 <code>app/routers/users.py</code> 的文件)…</li>
</ul>
<p><code>items</code> 模块将具有一个 <code>router</code> 变量（<code>items.router</code>）。这与我们在 <code>app/routers/items.py</code> 文件中创建的变量相同，它是一个 <code>APIRouter</code> 对象。</p>
<p>然后我们对 <code>users</code> 模块进行相同的操作。</p>
<h3 id="绝对引入"><a href="#绝对引入" class="headerlink" title="绝对引入"></a>绝对引入</h3><p><code>from app.routers import items, users</code>    如果是这种样子的话，就是绝对引入</p>
<h2 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h2><p><img src="/.com//Users\彭天怡\AppData\Roaming\Typora\typora-user-images\image-20210721180819459.png" alt="image-20210721180819459"></p>
<p><strong>API文档界面如上，可以看到因为给每个模块设置了tags，所以分成了不同的类，而<code>/items/&#123;item_id&#125;</code>因为设置了两个tags(统一设置了一个items，自己单独设置了custom)，所以显示出了两个。</strong></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Springmvc文件上传</title>
    <url>/2020/09/25/SprigMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h2 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h2><h3 id="前端页面的要求"><a href="#前端页面的要求" class="headerlink" title="前端页面的要求"></a>前端页面的要求</h3><p>为了上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制流数据发送给服务器。</p>
<a id="more"></a>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="引入fileupload和io坐标"><a href="#引入fileupload和io坐标" class="headerlink" title="引入fileupload和io坐标"></a>引入fileupload和io坐标</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>1.3.3版本</strong>会自动引入io包，所以不需要在单独引入</p>
<h3 id="配置DispatcherServlet（前端控制器）"><a href="#配置DispatcherServlet（前端控制器）" class="headerlink" title="配置DispatcherServlet（前端控制器）"></a>配置DispatcherServlet（前端控制器）</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--绑定applicationContext.xml，里面用来配置springmvc需要的一些东西--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--设置启动级别,1为服务器已启动就启动--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="配置MultipartResolver解析器"><a href="#配置MultipartResolver解析器" class="headerlink" title="配置MultipartResolver解析器"></a>配置MultipartResolver解析器</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!--开启注解扫描--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pty.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token comment">&lt;!--配置MultipartResoolver，用于文件上传--></span>
    <span class="token comment">&lt;!--注意：CommonsMultipartResolver的id是固定不变的，一定是multipartResolver，不能修改--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--阈值，低于这个的保存在内存中，高于这个的，生成硬盘上的临时文件--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxInMemorySize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40960<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment">&lt;!--上传文件大小上限，单位为字节,这是总的文件的大小--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>104857600<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment">&lt;!--设置请求的编码格式，这里设置为utf-8，默认为IOS-8859-1--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment">&lt;!--单个文件大小上限--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSizePerFile<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Upload</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>
    <span class="token comment">//@RequestParam("file)将前端表单中name=file的控件得到的文件封装成MultipartFile 对象</span>
    <span class="token comment">//如果上传的是多文件，将MutipartFile改成MutipartFile 数组即可</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//获取文件名</span>
        <span class="token class-name">String</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//判断是否上传文件(即文件名是否为空)，如果没有，返回上传页</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"上传失败"</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">/*
        除了通过判断文件名是否为空来判断是否上传文件，还可以通过以下方式来验证
        1. 判断文件的大小是否大于0：file.getSize()得到文件的大小，进行判断。
        2.判断文件是否为空： file.isEmpty()
         */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传文件名"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取文件存储路径（绝对路径）</span>
        <span class="token comment">/*session.getServletContext()拿到了一个servlet的容器
        这个path的位置是
        */</span>
        <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//可以对上传的文件的类型做限制，比如说只能够上传jpg和png的图片文件</span>
        <span class="token comment">//注意这里的逻辑问题，我一开始是用或，但是应该是既不是jpg也不是png，应该用与</span>
        <span class="token comment">//endsWith:判断字符串是否以指定的后缀结尾</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"格式不符合"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//新建文件实例</span>
        <span class="token comment">/*这里应该使用File(String parent, String child) 构造方法，从父路径和子路径字符创建新的File实例
        因为下面的transferTo（）会将上传的文件保存到一个目录文件中，即让这个目录文件变成上传的文件。
        我之前就是使用File(String pathname)构造方法，使得upload文件夹变成了upload文件*/</span>
        <span class="token class-name">File</span> upfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//判断是否有此文件，没有的话就创建一个。</span>
        <span class="token comment">//因为如果是第一次保存，就没有文件。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>upfile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/*新建文件,因为上面创建File实例的时候，创建了两层路径。
            mkdir()创建由此抽象路径名命名的目录。
            mkdirs() 创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录。
            因为创建了两层路径，用前者创建的时候只会创建最后一层目录，如果第一层路径没有，则看不到创建出来的目录
            而后者在创建最后一层的目录时，还会创建最后一层之前且不存在的目录。
            */</span>
            upfile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传路径"</span> <span class="token operator">+</span> upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//接收用户上传文件流，输出到指定文件中</span>
            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//得到上传文件的路径和名字，将其生成一个字符串，然后将这个值保存到数据库。</span>
        <span class="token comment">//比如说图片，用户上传头像，我们将图像路径保存到数据库，显示的时候直接将这个地址返回给前端</span>
        <span class="token comment">//然后就可以显示图片</span>
        <span class="token class-name">String</span> filePath <span class="token operator">=</span> path<span class="token operator">+</span>filename<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>减少了一些注释，以后可以直接拿过来用</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pty<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RestController</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> fileupload <span class="token punctuation">&#123;</span>

        <span class="token comment">//@RequestParam("file)将前端表单中name=file的控件得到的文件封装成MultipartFile 对象</span>
        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token string">"redirect:index.jsp"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名："</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//获取文件存储路径（绝对路径）</span>
            <span class="token comment">//session.getServletContext()拿到了一个servlet的容器</span>
            <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>filename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token string">"redirect:index.jsp"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">File</span> upfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>upfile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                upfile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件上传路径"</span> <span class="token operator">+</span> upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>upfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token string">"hahah"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h2><p>上面的操作是单文件上传，但有时候会需要上传多个文件。</p>
<p>我们的方法是将多文件上传分解成单文件上传。</p>
<p>可以通过一个方法来接收前端传过来的文件，然后我们将文件遍历，单个文件在调用保存方法。</p>
<h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><p>一次性选择多个文件上传，在input标签中添加<strong>multiple</strong>属性</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/test/upload.do<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 
  一次选择多个文件的多文件上传 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs1<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
 
  一次选择一个文件的多文件上传 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
 
  单文件上传 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Controller层-1"><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h3><p>多文件上传是，需要用MultipartFile数组来接收这些文件。</p>
<p>虽然从前端接收到了多个文件，但是springmvc只会将一个文件封装进一个MultipartFile对象，而不会将多个文件封装进一个MutipartFile数组，所以需要使用<code>@RequestParam</code>注解来校正参数，必须写。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">&#123;</span>
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/upload.do"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs1<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs2<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs3<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img <span class="token operator">:</span> imgs1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//遍历文件，单个文件在调用保存的方法，也就是上面写的controller,这里就不写了。</span>
      <span class="token function">uploadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img <span class="token operator">:</span> imgs2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">uploadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> img <span class="token operator">:</span> imgs3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">uploadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token string">"/success.jsp"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="MultipartFile类常用的一些方法"><a href="#MultipartFile类常用的一些方法" class="headerlink" title="MultipartFile类常用的一些方法"></a>MultipartFile类常用的一些方法</h3><ul>
<li>String getContentType()：获取文件MIME类型</li>
<li>InputStream getInputStream()：后去文件流</li>
<li>String getName() ：获取表单中文件组件的名字</li>
<li>String getOriginalFilename() ：获取上传文件的原名</li>
<li>long getSize() ：获取文件的字节大小，单位byte</li>
<li>boolean isEmpty() ：是否为空</li>
<li>void transferTo(File dest) ：保存到一个目标文件中。</li>
</ul>
<h3 id="CommonsMultipartResolver的属性解析"><a href="#CommonsMultipartResolver的属性解析" class="headerlink" title="CommonsMultipartResolver的属性解析"></a>CommonsMultipartResolver的属性解析</h3><ul>
<li>defaultEncoding：表示用来解析request请求的默认编码格式，当没有指定的时候根据Servlet规范会使用默认值ISO-8859-1。当request自己指明了它的编码格式的时候就会忽略这里指定的defaultEncoding。</li>
<li>uploadTempDir：设置上传文件时的临时目录，默认是Servlet容器的临时目录。</li>
<li>maxUploadSize：设置允许上传的总的最大文件大小，以字节为单位计算。当设为-1时表示无限制，默认是-1。</li>
<li>maxUploadSizePerFile：跟maxUploadSize差不多，不过maxUploadSizePerFile是限制每个上传文件的大小，而maxUploadSize是限制总的上传文件大小。</li>
<li>maxInMemorySize：设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240。</li>
<li>resolveLazily：为true时，启用推迟文件解析，以便在UploadAction中捕获文件大小异常。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的多文件上传是参考一遍博客的，我自己没有打代码实现，可能会存在问题。</p>
<p>经过这次操作，发现了一些问题。</p>
<ol>
<li>要保持一个好的心态，一般问题的出现是一个接着一个的，不要太早崩溃。</li>
<li>出现错误的时候，先检查下自己的环境，很多时候并不是代码的原因而是环境的问题，比如说一些依赖没有导入，项目结构中的Artifacts中没有jar包。</li>
<li>尽量多查文档之类的。</li>
<li>没事别手贱乱删东西，说真的强迫症搞程序员太难了，看到一些没用的东西就想删，但是那个可能只是你以为没有用。</li>
<li>要熟悉新建一个模板的流程，现在用的是springmvc,需要自己配置tomcat，让项目变成web项目。虽然springboot在这些方面比较方便，但是还是要多加练习。</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot整合mybatis 和 druid</title>
    <url>/2020/09/13/Springboot%E6%95%B4%E5%90%88Mybatis%E5%92%8Cdruid/</url>
    <content><![CDATA[<p>在实际开发中，我们一般不使用springboot自带的数据池，通常会整合mybatis和druid连接池，这篇博客就是用来记录怎么整合mybatis和druid</p>
<a id="more"></a>

<h2 id="spring-boot-整合mybatis"><a href="#spring-boot-整合mybatis" class="headerlink" title="spring boot 整合mybatis"></a>spring boot 整合mybatis</h2><ol>
<li>导入相关依赖</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者在用<strong>Spring initializr</strong>创建springboot项目时直接添加mybatis maven坐标</p>
<ol start="2">
<li><p>配置数据源</p>
<p>在resource下新建一个application.yml文件</p>
<p>在里面配置数据源信息</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
  	<span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/blog<span class="token punctuation">?</span>serverTimezone=UTC  
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root   
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>username</strong> 如果使用 **data-username: **好像会出错</p>
<p>会报这个错误： <strong>Access denied for user ‘’@’localhost’ (using password: YES)</strong></p>
</li>
<li><p>添加mybatis配置</p>
</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.example.druid.bean
  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>mapper-locations</code>：mapper所在的文件夹，用来定位mapper的位置</li>
<li><code>type-aliases-package</code>：别名类所在的文件夹，用来给实体类设置别名。</li>
<li><code>config-location</code>：mabatis配置文件的地址，如果用了<code>type-aliases-package</code>,就不用这个，因为在mybatis的配置类中基本上就是设置别名，type这个更加简单，不用再去新建一个config.xml。</li>
</ul>
<ol start="4">
<li><p>创建mapper文件</p>
<p> 在resources文件夹下创建mapper文件夹，在该文件下创建xxxmapper.xml。</p>
<p>在xxxmapper.xml下添加如下内容</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">
<span class="token comment">&lt;!--mapper的约束--></span>
<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>
        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--里面写具体的sql语句，必须要写namespace,这个是用来定位到你这个sql语句是由哪一个来调用，全限定类名--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.mapper.Usermapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    
    <span class="token comment">&lt;!--id是用来定位具体是哪个方法来调用。
    resultType表示返回值类型，设置别名之后，只需要写类名就行了，不大小写--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select * from user;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>写mapper,service,controller层，不要忘记注解</p>
<ul>
<li>mapper  @Repository</li>
<li>service @Service</li>
<li>controller @RestController 或者 @Controller 推荐使用@RestController</li>
</ul>
</li>
<li><p>在启动类上面，要写上@MapperScan(“mapper层所在的文件夹的全限定名”)注解，用来定位到mapper层。</p>
</li>
</ol>
<h2 id="springboot整合druid数据库连接池"><a href="#springboot整合druid数据库连接池" class="headerlink" title="springboot整合druid数据库连接池"></a>springboot整合druid数据库连接池</h2><ol>
<li>导入相关依赖</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这两个坐标其实都是导入druid,但是上面的是可以进入到druid的监测页面(<a href="http://localhost:8080/druid)%EF%BC%8C%E6%89%80%E4%BB%A5%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%9D%90%E6%A0%87">http://localhost:8080/druid)，所以推荐使用上面的坐标</a></p>
<ol start="2">
<li>配置数据源</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/blog<span class="token punctuation">?</span>serverTimezone=UTC
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>细心的人会发现其实这个和mybatis配置数据源是差不多的，只不过druid配置时多加了一个type属性</p>
<p><strong>type</strong>：用来设置数据库连接池的种类，我们是要整合druid，所以设置成druid。</p>
<ol start="3">
<li>配置druid的其他属性</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">spring:
  datasource:
    url: jdbc:mysql://localhost:3306/blog?serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource
    username: root

<span class="token comment">&lt;!--druid其它配置--></span>
    druid:
      #初始化大小
      initial-size: 5
      #最多支持多少个活动会话
      max-active: 50
      #最小连接个数
      min-idle: 1
      #配置获取连接等待超时的时间，单位是毫秒
      max-wait: 60000
      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      #配置一个连接池最小的生存时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句。
      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
      validation-query: SELECT 1 FROM DUAL
      # 建议配置为true，不影响性能，并且保证安全性。
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 通过别名的方式配置扩展插件，多个英文逗号分隔，常用的插件有：
      #监控统计用的filter:stat
      # 日志用的filter:log4j
      # 防御sql注入的filter:wall
      filters: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>filters这里配置有问题</p>
<ol start="4">
<li>其他的就和整合mybatis一样了。</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ORM简介</title>
    <url>/2021/07/22/ORM/</url>
    <content><![CDATA[<h2 id="什么是ORM"><a href="#什么是ORM" class="headerlink" title="什么是ORM"></a>什么是ORM</h2><p>ORM（Object-Relational Mapping ，对象关系映射）模式是为了解决面向对象与关系数据库存在的互不匹配的现象的技术。</p>
<p>ORM主要是把数据库中的关系映射为程序中的对象，将程序中的对象自动持久化到关系型数据库中，他是随着面向对象的开发方法发展起来的，ORM在业务逻辑层和数据库层之间充当了桥梁的作用，我们在具体的操作业务对象的时候，不需要再去和复杂的SQL语句打交道，只需简单的操作对象的属性和方法。</p>
<a id="more"></a>

<h2 id="ORM的由来"><a href="#ORM的由来" class="headerlink" title="ORM的由来"></a>ORM的由来</h2><p>面向对象是从软件工程基本原则（如耦合，聚合，封装等）的基础上发展来的，而关系型数据库是从数学理论发展而来的，这两种理论存在显著差别，为解决这一差异，ORM应运而生。</p>
<p>O是object，也就类对象的意思，R是relation，翻译成中文是关系，也就是关系数据库中数据表的意思，M是mapping，是映射的意思。</p>
<p>在ORM框架中，它帮我们把类和数据表进行了一个映射，可以让我们通过类和类对象就能操作它所对应的表格中的数据。ORM框架还有一个功能，它可以根据我们设计的类自动帮我们生成数据库中的表格，省去了我们自己建表的过程。</p>
<p>几乎所有的软件开发过程中都会涉及到对象和关系数据库，在用户层面和业务逻辑层面，我们是面向对象的。当对象的信息发生变化的时候，我们就需要把对象的信息保存在关系数据库中。</p>
<blockquote>
<p>按之前的方式进行开发，就会出现程序员会在自己的业务逻辑代码中夹杂很多SQL语句用来增加、读取、修改、删除相关数据，而这些代码通常是重复的。</p>
</blockquote>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/1418466-20181224093538503-655204666.png" alt="img"></p>
<h2 id="ORM的核心原则"><a href="#ORM的核心原则" class="headerlink" title="ORM的核心原则"></a>ORM的核心原则</h2><p>（1）简单性：以最基本的形式建模数据</p>
<p>（2）传达性：数据库结构被任何人都能理解的语言文档化</p>
<p>（3）精确性：基于数据库模型创建正确标准化了的结构</p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>ORM主要解决理论对象和关系的映射。通常把一个类和一张表一一对应，类的每一个实例对应表中的一条记录，类的每个属性对应表中的每个字段。</li>
<li>ORM提供了对数据库的映射，不用直接编写sql语句，只需向操作对象一样从数据库操作数据。</li>
<li>提高开发效率，让软件开发人员专注于业务逻辑的处理。</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>无可避免的，自动化意味着映射和关联管理，代价是牺牲性能。</li>
<li>对于复杂查询，ORM力不从心</li>
<li>执行效率低语直接编写的SQL语句</li>
</ul>
<h2 id="DJango框架中ORM示意图"><a href="#DJango框架中ORM示意图" class="headerlink" title="DJango框架中ORM示意图"></a>DJango框架中ORM示意图</h2><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/7918604-f5fa11d7421ac4c8.png" alt="img"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/7918604-1facae29d03da5b5.png" alt="img"></p>
<p>虽然图是Python，但是其他的也是类似的。</p>
]]></content>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>java生成二维码</title>
    <url>/2021/04/27/java%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<h3 id="Java生成二维码"><a href="#Java生成二维码" class="headerlink" title="Java生成二维码"></a>Java生成二维码</h3><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><a id="more"></a>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.zxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.zxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="不带logo"><a href="#不带logo" class="headerlink" title="不带logo"></a>不带logo</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span>pty</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">BarcodeFormat</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">EncodeHintType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">MultiFormatWriter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">WriterException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>client<span class="token punctuation">.</span>j2se<span class="token punctuation">.</span></span><span class="token class-name">MatrixToImageWriter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">BitMatrix</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>qrcode<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span></span><span class="token class-name">ErrorCorrectionLevel</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QRCodeUtil</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 二维码尺寸</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QRCODE_SIZE <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
    <span class="token comment">// LOGO宽度</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIDTH <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
    <span class="token comment">// LOGO高度</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HEIGHT <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createQrcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WriterException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
       <span class="token comment">//二维码中的内容，这个内容一般都需要传参过来，我这里先写死</span>
       <span class="token class-name">String</span> contents <span class="token operator">=</span> <span class="token string">"http://baidu.com"</span><span class="token punctuation">;</span>
       <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//设置字符集</span>
       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span>CHARACTER_SET<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//设置纠错等级L/M/Q/H,等级越高越不容易识别，等级最高为H</span>
       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span>ERROR_CORRECTION<span class="token punctuation">,</span> <span class="token class-name">ErrorCorrectionLevel</span><span class="token punctuation">.</span><span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//设置边框</span>
       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span>MARGIN<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//设置生成的图片的后缀名</span>
       <span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token string">"png"</span><span class="token punctuation">;</span>
       <span class="token class-name">BitMatrix</span> bitMatrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiFormatWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> <span class="token class-name">BarcodeFormat</span><span class="token punctuation">.</span>QR_CODE<span class="token punctuation">,</span> WIDTH<span class="token punctuation">,</span> HEIGHT<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//设置输出地址</span>
       <span class="token class-name">Path</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/new.png"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">MatrixToImageWriter</span><span class="token punctuation">.</span><span class="token function">writeToPath</span><span class="token punctuation">(</span>bitMatrix<span class="token punctuation">,</span>format<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一般来说上面的工具类已经够用了，但是有时候我们想搞点不一样的，比如说在二维码上面添加一个logo，这样让二维码看起来不一样，于是就有了下面这个工具类</p>
<h4 id="带logo"><a href="#带logo" class="headerlink" title="带logo"></a>带logo</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span>pty</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">BarcodeFormat</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">EncodeHintType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">MultiFormatWriter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">WriterException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>client<span class="token punctuation">.</span>j2se<span class="token punctuation">.</span></span><span class="token class-name">MatrixToImageConfig</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>client<span class="token punctuation">.</span>j2se<span class="token punctuation">.</span></span><span class="token class-name">MatrixToImageWriter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">BitMatrix</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span>qrcode<span class="token punctuation">.</span></span><span class="token class-name">ErrorCorrectionLevel</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span></span><span class="token class-name">ImageIO</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>geom<span class="token punctuation">.</span></span><span class="token class-name">RoundRectangle2D</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span></span><span class="token class-name">BufferedImage</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QRCodeUtil</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//二维码高度和宽度</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WIDTH <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HEIGHT <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WriterException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//二维码内容</span>
        <span class="token class-name">String</span> contents <span class="token operator">=</span> <span class="token string">"http://baidu.com"</span><span class="token punctuation">;</span>

        <span class="token comment">//设置字符集</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span>CHARACTER_SET<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置纠错等级</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span>ERROR_CORRECTION<span class="token punctuation">,</span> <span class="token class-name">ErrorCorrectionLevel</span><span class="token punctuation">.</span><span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置边框</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span>MARGIN<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//生成二维码对应的位矩阵对象</span>
        <span class="token class-name">BitMatrix</span> bitMatrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiFormatWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> <span class="token class-name">BarcodeFormat</span><span class="token punctuation">.</span>QR_CODE<span class="token punctuation">,</span> WIDTH<span class="token punctuation">,</span> HEIGHT<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置位矩阵转图片的参数</span>
        <span class="token class-name">MatrixToImageConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MatrixToImageConfig</span><span class="token punctuation">(</span><span class="token number">0xFF000001</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 位矩阵对象转BufferedImage对象</span>
        <span class="token class-name">BufferedImage</span> qrcode <span class="token operator">=</span> <span class="token class-name">MatrixToImageWriter</span><span class="token punctuation">.</span><span class="token function">toBufferedImage</span><span class="token punctuation">(</span>bitMatrix<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将不带logo的输出</span>
        <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>qrcode<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://1.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BufferedImage</span> <span class="token class-name">QRcode</span> <span class="token operator">=</span> <span class="token function">createQRCodeWithLogo</span><span class="token punctuation">(</span>qrcode<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\logo.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//将带logo的输出</span>
        <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">QRcode</span><span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://code.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


	<span class="token comment">//增加logo</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BufferedImage</span> <span class="token function">createQRCodeWithLogo</span><span class="token punctuation">(</span><span class="token class-name">BufferedImage</span> bufferedImage<span class="token punctuation">,</span> <span class="token class-name">File</span> logofile<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">//创建绘图对象</span>
        <span class="token class-name">Graphics2D</span> g2 <span class="token operator">=</span> bufferedImage<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//设置logo的宽高,这里除4是为了让图片比二维码小，这里有个问题，可能是因为我的高和宽都设置为400，我一开始除3，发现生成的带logo的二维码无法识别，我猜想是因为400/3是一个浮点数，导致图片不全，当我除4、 5的时候就可以了。</span>

        <span class="token keyword">int</span> height <span class="token operator">=</span> bufferedImage<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> width <span class="token operator">=</span> bufferedImage<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">;</span>

        <span class="token comment">//设置logo在二维码图片上的起始坐标</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>bufferedImage<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>width<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>bufferedImage<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>height<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token comment">//读取logo文件</span>
        <span class="token class-name">BufferedImage</span> logo <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>logofile<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//开始绘制图像</span>
        g2<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>logo<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BasicStroke</span> stroke <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicStroke</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token class-name">BasicStroke</span><span class="token punctuation">.</span>CAP_ROUND<span class="token punctuation">,</span><span class="token class-name">BasicStroke</span><span class="token punctuation">.</span>JOIN_ROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g2<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span>stroke<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置笔画对象</span>
        <span class="token comment">//指定弧度的圆角矩形</span>
        <span class="token class-name">RoundRectangle2D</span><span class="token punctuation">.</span><span class="token class-name">Float</span> round <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoundRectangle2D</span><span class="token punctuation">.</span><span class="token class-name">Float</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指定圆弧边框的颜色</span>
        g2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>round<span class="token punctuation">)</span><span class="token punctuation">;</span>

        g2<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bufferedImage<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bufferedImage<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>经测试发现，如果加入了圆弧边框，logo图片设置为二维码大小的1/4也是扫不出来的，1/5可以扫出来</strong></p>
]]></content>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>python连接mysql</title>
    <url>/2021/07/22/python%20%E8%BF%9E%E6%8E%A5mysql/</url>
    <content><![CDATA[<p>在看fastapi的官方文档，然后感觉sql部分挺难的，于是写下一篇博客来记录下。</p>
<h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p>首先要安装两个东西</p>
<p><code>pip install sqlalchemy</code></p>
<p><code>pip install pymysql</code></p>
<p>前者是一个ORM框架，在ORM中，你创建一个类就会通过SQLAlchemy将其自动转成一张表，在类中的每一个属性就会转成表中的字段。</p>
<p>后者是用来连接数据库的</p>
<a id="more"></a>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><pre class="line-numbers language-none"><code class="language-none">
└── sql_app
    ├── __init__.py
    ├── crud.py
    ├── database.py
    ├── main.py
    ├── models.py
    └── schemas.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>sql_app是包名，注意是创建一个包，而不是创建一个目录</li>
<li><code>_init_.py</code>是一个空文件，创建sql_app会自动创建这个文件</li>
<li><code>crud.py</code>是用来进行crud操作的文件</li>
<li><code>database.py</code>是用来连接数据库的</li>
<li><code>main.py</code>是用来接受前端请求，类似于controller层</li>
<li><code>models.py</code>是用来创建SQLAlchemy模型的，也就是创建表</li>
<li><code>schemas.py</code>是用来创建Pydentic模型的</li>
</ul>
<h2 id="database-py"><a href="#database-py" class="headerlink" title="database.py"></a>database.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token punctuation">,</span> declarative_base

<span class="token comment">#连接数据库的url</span>
SQLALCHEMY_DATABASES_URL <span class="token operator">=</span><span class="token string">"mysql+pymysql://root:123456@localhost:3306/python"</span>

<span class="token comment">#echo=True表示引擎将用repr()函数记录所有语句及其参数列表到日志</span>
engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>SQLALCHEMY_DATABASES_URL<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">,</span>echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment">#SQLAlchemy中，CRUD是通会话进行管理的，所以需要先创建会话</span>
<span class="token comment">#每一个SessionLocal实例就是一个数据库会话</span>
<span class="token comment">#commit是指提交事务，将变更保存到数据库</span>
<span class="token comment">#flush是指发送到数据库语句到数据库，但数据库不一定执行写入磁盘</span>
<span class="token comment">#autocommit和autoflush是可以不写的</span>
SessionLocal <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>autocommit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>autoflush<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>

<span class="token comment">#创建基本映射类</span>
Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>在数据库相关的配置文件中，首先创建一个SQLAlchemy的”engine”，然后创建SessionLocal实例进行会话，最后创建模型类的基类。</strong></p>
<h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Boolean<span class="token punctuation">,</span> ForeignKey
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship

<span class="token keyword">from</span> <span class="token punctuation">.</span>database <span class="token keyword">import</span> Base

<span class="token comment">#使用database.py创建的Base类创建SQLAlchemy模型</span>
<span class="token comment">#可以理解为这个是与真正的数据库相关联的类</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#对应的是数据库中的表名</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"users"</span>

    <span class="token comment">#设置表的属性名，使用Column设置，定义了属性的类型</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    email <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    hashed_password <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    is_active <span class="token operator">=</span> Column<span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token comment">#设置关系，通过relationship设置，这个不是属性，在数据库中不需要有这一个字段</span>
    <span class="token comment">#当访问users.items时，会直接关联到Item表，可以直接获取到Item的字段数据</span>
    <span class="token comment">#后面的back_populates是反向查询，有这个Item表可以通过items.owner访问到User表的字段数据</span>
    <span class="token comment">#使用了back_populates,那么被关联的数据库也要显示的使用relationship</span>
    <span class="token comment">#这个其实我也还不是太懂</span>
    items <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Item"</span><span class="token punctuation">,</span>back_populates<span class="token operator">=</span><span class="token string">"owner"</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"items"</span>

    <span class="token builtin">id</span><span class="token operator">=</span>Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    title <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    description <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token comment">#设置了外键，使用ForeignKey参数设置，里面填写关联的表和具体的属性</span>
    <span class="token comment">#注意这里是表名而不是上面的类名</span>
    owner_id  <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span>ForeignKey<span class="token punctuation">(</span><span class="token string">"users.id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    owner <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">,</span>back_populates<span class="token operator">=</span><span class="token string">"items"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>通过数据库配置文件中的基类来创建模型类。</strong></p>
<h2 id="schemas-py"><a href="#schemas-py" class="headerlink" title="schemas.py"></a>schemas.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token punctuation">,</span> List

<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel


<span class="token keyword">class</span> <span class="token class-name">ItemBase</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    title<span class="token punctuation">:</span><span class="token builtin">str</span>
    description<span class="token punctuation">:</span>Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">None</span>


<span class="token comment">#这个是用来创建Item的类，可以理解为前端传过来的要新增的数据</span>
<span class="token keyword">class</span> <span class="token class-name">ItemCreate</span><span class="token punctuation">(</span>ItemBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>


<span class="token comment">#继承自ItemBase</span>
<span class="token comment">#Pydantic风格是声明类型，所以用的是:</span>
<span class="token comment">#SQLAlchemy风格是定义属性，所以用的是=</span>
<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>ItemBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span>
    owner_id<span class="token punctuation">:</span> <span class="token builtin">int</span>

    <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">:</span>
        orm_mode<span class="token operator">=</span><span class="token boolean">True</span>


<span class="token keyword">class</span> <span class="token class-name">UserBase</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    email<span class="token punctuation">:</span><span class="token builtin">str</span>


<span class="token keyword">class</span> <span class="token class-name">UserCreate</span><span class="token punctuation">(</span>UserBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    password<span class="token punctuation">:</span><span class="token builtin">str</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>UserBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span>
    is_active<span class="token punctuation">:</span> <span class="token builtin">bool</span>
    items<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Item<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token comment">#Config类用来给Pydantic提供配置信息</span>
    <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">:</span>
        <span class="token comment">#orm_mode出了可以让Pydantic读取字典类型的数据，还支持Pydantic读取属性数据，比如SQLAlchemy模型的数据</span>
        <span class="token comment">#这样我们就可以在路径操作函数中直接返回SQLAlchemy数据模型，没有这个配置项是不支持的</span>
        orm_mode <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>定义请求参数模型验证与响应模型验证的Pydantic模型，其中响应模型中设置orm_mode=True参数，表示与ORM模型兼容，因为后续中返回的数据库查询是orm模型，通过设置这个参数可以将orm模型通过pydantic模型进行验证。</strong></p>
<h2 id="crud-py"><a href="#crud-py" class="headerlink" title="crud.py"></a>crud.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> Session
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models<span class="token punctuation">,</span> schemas


<span class="token comment">#通过id查询用户</span>
<span class="token keyword">def</span> <span class="token function">get_user</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span>user_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#返回的是models.User(其实就是users表)中的全部属性，并且条件是user_id = users中的id</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token operator">==</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#通过email查询用户</span>
<span class="token keyword">def</span> <span class="token function">get_user_by_email</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span>email<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#条件是邮箱相等</span>
    <span class="token keyword">return</span>  db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>email <span class="token operator">==</span> email<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#查询多个用户</span>
<span class="token keyword">def</span> <span class="token function">get_users</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span>skip<span class="token punctuation">:</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>limit<span class="token punctuation">:</span><span class="token builtin">int</span> <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#offset表示偏移量，0表示不偏移,1表示偏移1条数据，即从第二条开始</span>
    <span class="token comment">#limit表示表示限定数量</span>
    <span class="token comment">#从第一条开始,查询100条数据，返回的是个列表</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>offset<span class="token punctuation">(</span>skip<span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#增加数据</span>
<span class="token comment">#将前端传过来的数据保存到数据库</span>
<span class="token comment">#传过来的数据是Pydantic模型，需要先转换为SQLAlchemy模型</span>
<span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span>user<span class="token punctuation">:</span>schemas<span class="token punctuation">.</span>UserCreate<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#密码哈希化(伪造)</span>
    fake_hashed_password <span class="token operator">=</span> user<span class="token punctuation">.</span>password<span class="token operator">+</span><span class="token string">"pty123"</span>
    <span class="token comment">#user是Pydantic模型的，重新创建db_user,db_user是SQLALchemy类型的</span>
    db_user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">(</span>email<span class="token operator">=</span>user<span class="token punctuation">.</span>email<span class="token punctuation">,</span>hashed_password<span class="token operator">=</span>fake_hashed_password<span class="token punctuation">)</span>
    <span class="token comment">#添加到数据库</span>
    db<span class="token punctuation">.</span>add<span class="token punctuation">(</span>db_user<span class="token punctuation">)</span>
    <span class="token comment">#提交</span>
    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">#刷新</span>
    db<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span>db_user<span class="token punctuation">)</span>
    <span class="token keyword">return</span> db_user

<span class="token comment">#查询多个项目</span>
<span class="token keyword">def</span> <span class="token function">get_items</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span>skip<span class="token punctuation">:</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>limit <span class="token punctuation">:</span><span class="token builtin">int</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">.</span>offset<span class="token punctuation">(</span>skip<span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">#增加数据</span>
<span class="token keyword">def</span> <span class="token function">create_user_item</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span>item<span class="token punctuation">:</span>schemas<span class="token punctuation">.</span>ItemCreate<span class="token punctuation">,</span>user_id<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_item <span class="token operator">=</span> models<span class="token punctuation">.</span>Item<span class="token punctuation">(</span><span class="token operator">**</span>item<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>owner_id <span class="token operator">=</span> user_id<span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>add<span class="token punctuation">(</span>db_item<span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span>db_item<span class="token punctuation">)</span>
    <span class="token keyword">return</span> db_item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>通过传入数据库连接以及参数等进行数据库操作，包括创建用户、查询用户等，返回的是orm模型对象。</strong></p>
<h2 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List

<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Depends<span class="token punctuation">,</span>HTTPException
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> Session

<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> schemas<span class="token punctuation">,</span> crud<span class="token punctuation">,</span> models
<span class="token keyword">from</span> <span class="token punctuation">.</span>database <span class="token keyword">import</span> SessionLocal<span class="token punctuation">,</span> engine

<span class="token comment">#创建数据库，就算你没有自己创建表，orm会根据models中的类自动创建表</span>
models<span class="token punctuation">.</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>

app<span class="token operator">=</span>FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#Dependency</span>
<span class="token comment">#每一个请求完毕后都需要关闭当前的数据库会话，不同请求使用不同的数据库会话</span>
<span class="token keyword">def</span> <span class="token function">get_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db<span class="token operator">=</span>SessionLocal<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> db
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">"/users/"</span><span class="token punctuation">,</span>response_model<span class="token operator">=</span>schemas<span class="token punctuation">.</span>User<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span>schemas<span class="token punctuation">.</span>UserCreate<span class="token punctuation">,</span>db<span class="token punctuation">:</span>Session<span class="token operator">=</span>Depends<span class="token punctuation">(</span>get_db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> crud<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span>db<span class="token punctuation">,</span>user<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/user/&#123;user_id&#125;"</span><span class="token punctuation">,</span>response_model<span class="token operator">=</span>schemas<span class="token punctuation">.</span>User<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">read_user</span><span class="token punctuation">(</span>user_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>db<span class="token punctuation">:</span> Session <span class="token operator">=</span> Depends<span class="token punctuation">(</span>get_db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_user <span class="token operator">=</span>crud<span class="token punctuation">.</span>get_user<span class="token punctuation">(</span>db<span class="token punctuation">,</span>user_id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> db_user <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span>  HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">,</span>detail<span class="token operator">=</span><span class="token string">"User not found"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> db_user

<span class="token comment">#这里返回多个对象，需要使用List，一开始没用，报错了</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/users/"</span><span class="token punctuation">,</span>response_model<span class="token operator">=</span>List<span class="token punctuation">[</span>schemas<span class="token punctuation">.</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">read_usres</span><span class="token punctuation">(</span>skip<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>limit <span class="token punctuation">:</span><span class="token builtin">int</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>db<span class="token punctuation">:</span>Session <span class="token operator">=</span> Depends<span class="token punctuation">(</span>get_db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span>  crud<span class="token punctuation">.</span>get_users<span class="token punctuation">(</span>db<span class="token punctuation">,</span>skip<span class="token punctuation">,</span>limit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>主文件进行数据库初始化、FastAPI实例创建以及处理各种请求。</strong></p>
<h2 id="SQLAlchemy的查询语句"><a href="#SQLAlchemy的查询语句" class="headerlink" title="SQLAlchemy的查询语句"></a>SQLAlchemy的查询语句</h2><h3 id="查询执行器"><a href="#查询执行器" class="headerlink" title="查询执行器"></a>查询执行器</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">all()</td>
<td align="center">返回一个元素为查询结果的列表</td>
</tr>
<tr>
<td align="center">count()</td>
<td align="center">返回查询结果的数量</td>
</tr>
<tr>
<td align="center">first()</td>
<td align="center">返回第一个结果或None</td>
</tr>
<tr>
<td align="center">first_or_404()</td>
<td align="center">返回第一个结果或404</td>
</tr>
<tr>
<td align="center">get(主键)</td>
<td align="center">返回主键对应的对象或None</td>
</tr>
<tr>
<td align="center">get_or_404(主键)</td>
<td align="center">返回主键对应的对象或404</td>
</tr>
<tr>
<td align="center">paginate(页码，每页条数)</td>
<td align="center">返回一个分页查询结果</td>
</tr>
</tbody></table>
<h3 id="查询过滤器"><a href="#查询过滤器" class="headerlink" title="查询过滤器"></a>查询过滤器</h3><table>
<thead>
<tr>
<th align="center">过滤器</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">filter_by(字段名=值)</td>
<td align="center">等值查询</td>
</tr>
<tr>
<td align="center">filter(函数引用/比较运算)</td>
<td align="center">函数或比较查询</td>
</tr>
<tr>
<td align="center">limit(限定条数)</td>
<td align="center">限定返回结果数量</td>
</tr>
<tr>
<td align="center">offset(偏移条数)</td>
<td align="center">偏移1即从第二条开始查询</td>
</tr>
<tr>
<td align="center">order_by(排序字段)</td>
<td align="center">对查询结果根据字段进行排序</td>
</tr>
<tr>
<td align="center">options()</td>
<td align="center">针对原查询限定查询的字段</td>
</tr>
</tbody></table>
<h2 id="relationship"><a href="#relationship" class="headerlink" title="relationship"></a>relationship</h2><p>在构建SQLAlchemy模型的时候，relationship我觉得有点难，可以看一下这篇博客，感觉讲的比较详细。</p>
<p><a href="https://www.cnblogs.com/goldsunshine/p/9269880.html">sqlalchemy外键和relationship查询</a></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Util</title>
    <url>/2021/07/22/redis-utils/</url>
    <content><![CDATA[<h2 id="redis-util工具类"><a href="#redis-util工具类" class="headerlink" title="redis util工具类"></a>redis util工具类</h2><a id="more"></a>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token comment">//自己定义的redistemplate</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>

    <span class="token comment">// =============================common============================</span>
    <span class="token comment">/**
     * 指定缓存失效时间
     * @param key  键
     * @param time 时间(秒)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 根据key 获取过期时间
     * @param key 键 不能为null
     * @return 时间(秒) 返回0代表为永久有效
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 判断key是否存在
     * @param key 键
     * @return true 存在 false不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 删除缓存
     * @param key 可以传一个值 或多个
     */</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">// ============================String=============================</span>

    <span class="token comment">/**
     * 普通缓存获取
     * @param key 键
     * @return 值
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 普通缓存放入
     * @param key   键
     * @param value 值
     * @return true成功 false失败
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 普通缓存放入并设置时间
     * @param key   键
     * @param value 值
     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期
     * @return true成功 false 失败
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 递增
     * @param key   键
     * @param delta 要增加几(大于0)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 递减
     * @param key   键
     * @param delta 要减少几(小于0)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">// ================================Map=================================</span>

    <span class="token comment">/**
     * HashGet
     * @param key  键 不能为null
     * @param item 项 不能为null
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">hget</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 获取hashKey对应的所有键值
     * @param key 键
     * @return 对应的多个键值
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">hmget</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * HashSet
     * @param key 键
     * @param map 对应多个键值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * HashSet 并设置时间
     * @param key  键
     * @param map  对应多个键值
     * @param time 时间(秒)
     * @return true成功 false失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 向一张hash表中放入数据,如果不存在将创建
     *
     * @param key   键
     * @param item  项
     * @param value 值
     * @return true 成功 false失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 向一张hash表中放入数据,如果不存在将创建
     *
     * @param key   键
     * @param item  项
     * @param value 值
     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间
     * @return true 成功 false失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 删除hash表中的值
     *
     * @param key  键 不能为null
     * @param item 项 可以使多个 不能为null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 判断hash表中是否有该项的值
     *
     * @param key  键 不能为null
     * @param item 项 不能为null
     * @return true 存在 false不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * hash递增 如果不存在,就会创建一个 并把新增后的值返回
     *
     * @param key  键
     * @param item 项
     * @param by   要增加几(大于0)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * hash递减
     *
     * @param key  键
     * @param item 项
     * @param by   要减少记(小于0)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">// ============================set=============================</span>

    <span class="token comment">/**
     * 根据key获取Set中的所有值
     * @param key 键
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">sGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 根据value从一个set中查询,是否存在
     *
     * @param key   键
     * @param value 值
     * @return true 存在 false不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将数据放入set缓存
     *
     * @param key    键
     * @param values 值 可以是多个
     * @return 成功个数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将set数据放入缓存
     *
     * @param key    键
     * @param time   时间(秒)
     * @param values 值 可以是多个
     * @return 成功个数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 获取set缓存的长度
     *
     * @param key 键
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 移除值为value的
     *
     * @param key    键
     * @param values 值 可以是多个
     * @return 移除的个数
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// ===============================list=================================</span>

    <span class="token comment">/**
     * 获取list缓存的内容
     *
     * @param key   键
     * @param start 开始
     * @param end   结束 0 到 -1代表所有值
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">lGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 获取list缓存的长度
     *
     * @param key 键
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 通过索引 获取list中的值
     *
     * @param key   键
     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">lGetIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将list放入缓存
     *
     * @param key   键
     * @param value 值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将list放入缓存
     * @param key   键
     * @param value 值
     * @param time  时间(秒)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将list放入缓存
     *
     * @param key   键
     * @param value 值
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将list放入缓存
     *
     * @param key   键
     * @param value 值
     * @param time  时间(秒)
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 根据索引修改list中的某条数据
     *
     * @param key   键
     * @param index 索引
     * @param value 值
     * @return
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 移除N个值为value
     *
     * @param key   键
     * @param count 移除多少个
     * @param value 值
     * @return 移除的个数
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Long</span> remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>工具类</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2020/09/08/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示</p>
<p>一个#是一级标题，两个#是二级标题，以此类推。支持六级标题</p>
<a id="more"></a>

<p>并且在#后面加上空格之后在添加文字</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span>
<span class="token title important"><span class="token punctuation">##</span> 二级标题</span>
<span class="token title important"><span class="token punctuation">###</span> 三级标题</span>
<span class="token title important"><span class="token punctuation">####</span> 四级标题</span>
<span class="token title important"><span class="token punctuation">#####</span> 五级标题</span>
<span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如下</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul>
<li><p>加粗</p>
<p>要加粗的文字左右分别使用两个*号包起来</p>
</li>
<li><p>斜体</p>
<p>使用一个*包起来</p>
</li>
<li><p>斜体加粗</p>
<p>使用三个*号包起来</p>
</li>
<li><p>删除线</p>
<p>使用两个~~号包起来</p>
</li>
</ul>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">加粗</span><span class="token punctuation">**</span></span>
<span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体</span><span class="token punctuation">*</span></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体加粗</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>
<span class="token strike"><span class="token punctuation">~~</span><span class="token content">删除线</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如下</p>
<p><strong>加粗</strong><br><em>斜体</em><br><strong><em>斜体加粗</em></strong><br><del>删除线</del></p>
<h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前面加&gt;即可，也可以嵌套使用，如加两个&gt;,三个&gt;,n个&gt;</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span>引用
<span class="token blockquote punctuation">>></span>引用2
<span class="token blockquote punctuation">>>></span>引用3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>效果如下</p>
<blockquote>
<p>引用</p>
<blockquote>
<p>引用2</p>
<blockquote>
<p>引用3</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或三个以上的+ - *都可以</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">+++
<span class="token title important">*****
<span class="token punctuation">----</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">![<span class="token content">图片alt</span>](图片地址 <span class="token string">"图片title"</span>)</span>
图片alt就是显示在图片下面的文字，相当于对图片内容的解释
图片title是图片的标题，当鼠标移到图片上时显示的内容，title可加可不加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;
u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;区块链&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>效果如下：</p>
<p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p>
<h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">超链接名</span>](超链接地址 <span class="token string">"超链接title"</span>)</span>
title 可加可不加
[百度] (http://www.baidu.com)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>效果如下：</p>
<p><a href="http://baidu.com/" title="百度">百度</a></p>
<p><strong>注意</strong>：markdown本身不支持超链接在新页面中打开，如果想在新页面中打开的话可以用html中的a标签来代替</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>超链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>效果如下</p>
<p><a href="http://www.baidu.com" target="_blank">百度</a>  (但是这个好像也打开不了)</p>
<h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><p><strong>无序列表</strong></p>
<p>使用 + - * 任意一种都可以</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 无序列表
<span class="token list punctuation">+</span> 无序列表
<span class="token list punctuation">*</span> 无序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>效果如下</p>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<p><strong>有序列表</strong></p>
<p>数字加点    <em>在点的后面要加空格</em></p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1. 
2. 
3. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>列表的嵌套</strong></p>
<p>只需要在字列表的选项前面添加4个空格即可</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 有序列表
    <span class="token list punctuation">-</span> 无序列表1
    <span class="token list punctuation">-</span> 无序列表2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol>
<li>有序列表<ul>
<li>无序列表1</li>
<li>无序列表2</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-markd" data-language="markd"><code class="language-markd">- 无序列表
    1. 有序列表
    2. 有序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>无序列表<ol>
<li>有序列表</li>
<li>有序列表</li>
</ol>
</li>
</ul>
<h2 id="八、代码"><a href="#八、代码" class="headerlink" title="八、代码"></a>八、代码</h2><p>代码之间分别用一个反引号包起来</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code keyword">`void main`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>效果如下</p>
<p><code>public static void main(String args[])</code></p>
<p><strong>代码块</strong></p>
<p>用四个反引号包起来，后面写语言名称(三个反引号也可以)</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">​<span class="token code keyword">````java    ``</span>`java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>效果如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​        </p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 整合 mybatis generator 逆向生成工程</title>
    <url>/2021/07/22/springboot%E6%95%B4%E5%90%88mybatis%20generator%20/</url>
    <content><![CDATA[<h3 id="Springboot-整合-mybatis-generator-逆向生成工程"><a href="#Springboot-整合-mybatis-generator-逆向生成工程" class="headerlink" title="Springboot 整合 mybatis generator 逆向生成工程"></a>Springboot 整合 mybatis generator 逆向生成工程</h3><h4 id="1-先新创建一个springboot项目，引入相关的骨架"><a href="#1-先新创建一个springboot项目，引入相关的骨架" class="headerlink" title="1.先新创建一个springboot项目，引入相关的骨架"></a>1.先新创建一个springboot项目，引入相关的骨架</h4><h4 id="2-在pom-xml文件中引入相关依赖"><a href="#2-在pom-xml文件中引入相关依赖" class="headerlink" title="2.在pom.xml文件中引入相关依赖"></a>2.在pom.xml文件中引入相关依赖</h4><ol>
<li><p>引入sqlserver的依赖</p>
<a id="more"></a>

</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.microsoft.sqlserver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mssql-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.4.1.jre8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者引入mysql的依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>引入mybatis-generator依赖</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>添加插件</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- mybatis generator 自动生成代码插件 --></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                   <span class="token comment">&lt;!--configurationFile对应着generator配置文件的路径--></span>
             <span class="token comment">&lt;!--需要在src/main/resources创建generator/generatorConfig.xml文件--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">></span></span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>verbose</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>verbose</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
               <span class="token comment">&lt;!--数据库驱动好像是要在这里引入，在上面引入可能会出现问题，没有试过--></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.microsoft.sqlserver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mssql-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.4.1.jre8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li><p>配置generatorConfig.xml文件</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span>
        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>
        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tables<span class="token punctuation">"</span></span>  <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressDate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token comment">&lt;!-- 是否去除自动生成的注释 true：是,false:否 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--数据库连接驱动类,URL,用户名,密码 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.microsoft.sqlserver.jdbc.SQLServerDriver<span class="token punctuation">"</span></span>
                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:sqlserver://172.22.224.60:1433;DatabaseName=GXKH2021<span class="token punctuation">"</span></span> <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jxkh<span class="token punctuation">"</span></span>
                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jxkh-22183305<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 生成(实体)模型的包名和位置--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hut.jsj.pojo<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 生成XML映射文件的包名和位置--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/main/resources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 生成DAO接口的包名和位置--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hut.jsj.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 关联自动生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--></span>
        <span class="token comment">&lt;!--如果是要生成数据库中的所有的表，那么tablename处填%--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserData<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserData<span class="token punctuation">"</span></span> <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">selectByExampleQueryId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<p>上面的是sqlserver的，mysql和这个相差无几</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span>
        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>
        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB2Tables<span class="token punctuation">"</span></span>  <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressDate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--数据库链接URL，用户名、密码 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/sell?serverTimezone=Asia/Shanghai<span class="token punctuation">"</span></span> <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span><span class="token punctuation">></span></span>
            <span class="token comment">&lt;!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 生成实体类的包名和位置 ，targetPackage指的是包名,targetProject值得是路径位置--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.demo.model<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 生成映射文件的包名和位置--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.demo.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 生成DAO的包名和位置--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.demo.dao<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seller_info<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SellerInfo<span class="token punctuation">"</span></span> <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">selectByExampleQueryId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>再运行mvn mybatis-generator:generate即可自动生成代码</li>
</ol>
<p><img src="/.com//笔记\img\image-20210322204729417.png" alt="image-20210322204729417"></p>
<h4 id="pom-xml文件总览"><a href="#pom-xml文件总览" class="headerlink" title="pom.xml文件总览"></a>pom.xml文件总览</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.hut<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>jsj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
            <span class="token comment">&lt;!-- mybatis generator 自动生成代码插件 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token comment">&lt;!--configurationFile对应着generator配置文件的路径--></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">></span></span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>verbose</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>verbose</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.microsoft.sqlserver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mssql-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.4.1.jre8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux部署开发环境</title>
    <url>/2021/04/12/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h3 id="Linux部署开发环境"><a href="#Linux部署开发环境" class="headerlink" title="Linux部署开发环境"></a>Linux部署开发环境</h3><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><h5 id="获取mysql-YUM源"><a href="#获取mysql-YUM源" class="headerlink" title="获取mysql YUM源"></a>获取mysql YUM源</h5><ol>
<li>打开网址  <a href="https://dev.mysql.com/downloads/repo/yum/">Mysql yum存储库</a></li>
<li>进入需要下载的文件，点击这里，获取到链接地址，这样就不需要把文件下载到本地。</li>
</ol>
<a id="more"></a>

<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407095725914.png" alt="image-20210407095725914"></p>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407095911292.png" alt="image-20210407095911292"></p>
<h5 id="下载和安装mysql源"><a href="#下载和安装mysql源" class="headerlink" title="下载和安装mysql源"></a>下载和安装mysql源</h5><ol>
<li><p>先创建一个MySQL的文件夹 ：<code>mkdir mysql</code>    </p>
</li>
<li><p>设置权限：<code>chmod 777 mysql </code></p>
</li>
<li><p>进入mysql文件夹，wget加上刚才复制的地址，下载mysql源</p>
</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407100358273.png" alt="image-20210407100358273"></p>
<ol start="4">
<li>如果显示wget未找到命令，则先安装wget：<code>yum -y install wget</code>,然后在执行刚才的命令。</li>
<li>安装mysql源 ：<code>yum -y localinstall mysql80-community-release-el8-1.noarch.rpm</code></li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407100801585.png" alt="image-20210407100801585"></p>
<h5 id="在线安装mysql"><a href="#在线安装mysql" class="headerlink" title="在线安装mysql"></a>在线安装mysql</h5><ol>
<li><code>yum -y install mysql-community-server</code>  会安装mysql服务器(mysql-community-server) 所需要的依赖和相关组件。</li>
<li>直接输入这个命令会报错</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407101844829.png" alt="image-20210407101844829"></p>
<ol start="3">
<li>在使用这个命令前，先输入<code>yum module disable mysql</code></li>
<li>输入<code>yum -y install mysql-community-server</code>,下载的时间会有点长，因为需要下载很多东西</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407102007009.png" alt="image-20210407102007009"></p>
<h5 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h5><p><code>systemctl start mysqld</code></p>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407102153546.png" alt="image-20210407102153546"></p>
<h5 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h5><p><code>systemctl enable mysqld</code>   <code>systemctl daemon-reload</code></p>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407102344314.png" alt="image-20210407102344314"></p>
<h5 id="登录mysql，并且修改密码"><a href="#登录mysql，并且修改密码" class="headerlink" title="登录mysql，并且修改密码"></a>登录mysql，并且修改密码</h5><ol>
<li>网上的教程说会随机生成一个密码，但是我这个并没有生成密码，也就是在登录的时候不需要输入密码<code>mysql -u root -p</code> 登录数据库</li>
<li><strong>通过</strong> <strong>ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘你的密码’;</strong> <strong>命令来修改密码</strong></li>
</ol>
<h5 id="修改用户登录权限"><a href="#修改用户登录权限" class="headerlink" title="修改用户登录权限"></a>修改用户登录权限</h5><p>我们使用root用户登录mysql，但是刚刚部署的环境中，只允许本机访问数据库，不允许其他地址访问，因此我们需要修改权限。</p>
<ol>
<li>查看一共有哪几个数据库：<code>show databases;</code></li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407103023040.png" alt="image-20210407103023040"></p>
<ol start="2">
<li>进入mysql这个库:<code>use mysql</code>;</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407103113302.png" alt="image-20210407103113302"></p>
<ol start="3">
<li>查询user和host：<code>select user,host from user</code>,我这里已经修改过了，正常刚部署的时候，root后面的host也是localhost。</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407103209085.png" alt="image-20210407103209085"></p>
<ol start="4">
<li>修改root的host：<code>update user set host =&#39;%&#39; where user=root;</code></li>
</ol>
<h5 id="服务器开启3306端口"><a href="#服务器开启3306端口" class="headerlink" title="服务器开启3306端口"></a>服务器开启3306端口</h5><p>登录阿里云控制台，在安全组规则中添加访问规则，开放3306端口。开启的时候注意是在服务器的实例的那个安全组添加，我一开始就是重新创建了一个安全组，但是那个安全组并没有对应的实例，浪费了好久的时间。可以在本机dos窗口下使用<code>tcping ip地址 端口号</code>查看该端口能不能访问。</p>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407103500323.png" alt="image-20210407103500323"></p>
<h5 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h5><p>就可以用navicat连接数据库了。</p>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><h5 id="下载redis"><a href="#下载redis" class="headerlink" title="下载redis"></a>下载redis</h5><ol>
<li><p>进入官方网站下载redis：<a href="https://redis.io/download">下载地址</a></p>
</li>
<li><p>获取下载链接地址，复制链接。</p>
</li>
<li><p>使用wget下载redis文件：<code>wget https://download.redis.io/releases/redis-6.2.1.tar.gz?_ga=2.218275550.693953461.1617763684-492675992.1602071540 </code>   wget+刚才复制的地址。</p>
</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407105237017.png" alt="image-20210407105237017"></p>
<p><strong>注意：我这个地址是直接从官网下载地址复制过来的，但是他后面多了一串字符，从”?_ga=”开始，为什么会这样我也不清楚，因此我们需要将这个文件重新改名。如果后缀直接是.tar.gz就不需要改名了</strong></p>
<ol start="4">
<li>使用<code>mv 原来文件的名字  需要修改的名字</code>修改文件的名字。</li>
</ol>
<h5 id="解压并移动redis"><a href="#解压并移动redis" class="headerlink" title="解压并移动redis"></a>解压并移动redis</h5><ol>
<li><p>使用<code>tar zvxf redis-6.2.1.tar.gz</code>解压文件，可以看到多出了redis-6.2.1这个文件夹。</p>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407110251832.png" alt="image-20210407110251832"></p>
</li>
<li><p>将redis目录移动到/usr/local/redis目录下，使用<code>mv /root/redis-6.2.1 /usr/local/redis</code>移动文件，该命令会自动创建一个redis子目录，因此不需要手动去创建一个redis目录。</p>
</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407110706199.png" alt="image-20210407110706199"></p>
<h5 id="编译安装redis"><a href="#编译安装redis" class="headerlink" title="编译安装redis"></a>编译安装redis</h5><ol>
<li>输入<code>make</code>执行编译命令，最终会出现这个结果：</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407111216978.png" alt="image-20210407111216978"></p>
<ol start="2">
<li>使用<code>make PREFIX=/usr/local/redis install</code>安装redis 。<strong>这里多了一个关键字 <code>PREFIX=</code> ，这个关键字的作用是编译的时候用于指定程序存放的路径。比如我们现在就是指定了redis必须存放在/usr/local/redis目录。假设不添加该关键字Linux会将可执行文件存放在/usr/local/bin目录，库文件会存放在/usr/local/lib目录。配置文件会存放在/usr/local/etc目录。其他的资源文件会存放在usr/local/share目录。这里指定号目录也方便后续的卸载，后续直接rm -rf /usr/local/redis 即可删除redis。</strong></li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407111505750.png" alt="image-20210407111505750"></p>
<h5 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h5><p>上面的操作已经完成了redis的安装.</p>
<h6 id="前端启动"><a href="#前端启动" class="headerlink" title="前端启动"></a>前端启动</h6><p>在redis的安装目录下直接启动redis：使用<code>redis-server</code>启动redis，<strong>注意是在/bin这个目录下</strong></p>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407112151333.png" alt="image-20210407112151333"></p>
<h6 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h6><ol>
<li>将redis.conf复制到/user/local/redis/bin 目录下 <code>cp redis.conf /usr/local/redis/bin</code></li>
<li>修改redis.conf配置 ，进入/bin目录  输入<code>vim redis.conf</code>进入修改界面，向下找，将daemonize设置为yes（原来为no）。</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407112834813.png" alt="image-20210407112834813"></p>
<ol start="3">
<li>启动redis ：/bin目录下，<code>./redis-server redis.conf</code></li>
<li>查看redis是否启动 <code>ps aux|grep redis</code>  **ps:想要关闭redis，  <code>kill -9 44565</code>后面的数字就是前面那个命令显示出来的第二个。</li>
</ol>
<p><img src="/images/Linux%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/image-20210407120052553.png" alt="image-20210407120052553"></p>
<h5 id="修改开启指令"><a href="#修改开启指令" class="headerlink" title="修改开启指令"></a>修改开启指令</h5><p>经过上面的操作，我们可以通过<code>./redis-cli</code>连接redis，但是每次输入./比较麻烦，因此我们可以修改启动的命令，在任意界面下都可以开启，也就是添加一个环境变量。</p>
<ol>
<li>修改profile文件：<code>vim /etc/profile</code></li>
<li>在文件的最后添加如下代码  <code>export PATH=$PATH:/usr/local/redis/src</code>。然后我们就可以通过<code>redis-cli</code>连接redis了。</li>
</ol>
<h5 id="开启6379端口"><a href="#开启6379端口" class="headerlink" title="开启6379端口"></a>开启6379端口</h5><p>注意要开启6379端口，开启方式和mysql中开启3306端口一样。</p>
<h5 id="配置redis-config"><a href="#配置redis-config" class="headerlink" title="配置redis.config"></a>配置redis.config</h5><p><code>vim redis.config</code> hao</p>
<ol>
<li>修改bind 为0.0.0.0 </li>
<li>修改protected-mod 为no</li>
</ol>
<p>连接redis：<code>redis-cli</code>,使用<code>config set requirepass 密码</code>设置密码，今后在进行操作的时候就需要先输入<code>AUTH 密码</code>在进行操作。</p>
<p><strong>注意：阿里云服务器默认没有开启8080端口，只开启了80端口，我在部署springboot项目的时候，发现请求超时，然后就想到应该是没有开启8080端口，需要到安全组中配置规则，一开始以为80端口就是8080端口，而且在快速添加中也没有8080端口这个选项，浪费了好久时间，以后要注意</strong></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>typore图床</title>
    <url>/2021/07/22/typora%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h3 id="写作背景"><a href="#写作背景" class="headerlink" title="写作背景"></a>写作背景</h3><p>我都是使用typora来记笔记，在写笔记的时候，难免会需要贴一些图片，而这些图片都是保存到本地的，如果你需要把这个文章分享给别人的话，就必须将图片也传给他，并且他还需要将图片保存到和你一样的位置，非常麻烦。在将文章部署到github上的博客时，图片的问题也是很麻烦。</p>
<a id="more"></a>

<p>因此这篇博客就是将图片上传到网上，这样图片就变成了网上的地址，分享给别人也同样能访问。</p>
<h3 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h3><blockquote>
<p>Typora的版本要求：0.9.86以上</p>
</blockquote>
<p>点击”帮助=》关于”可以查看现在使用的版本。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210626004000242.png" alt="image-20210626004000242"></p>
<blockquote>
<p>这个版本是写这篇博客时的最新版，如果不想麻烦，直接打开软件后提示更新时就顺手更新了吧</p>
</blockquote>
<h3 id="安装Picgo"><a href="#安装Picgo" class="headerlink" title="安装Picgo"></a>安装Picgo</h3><p>地址  <code>https://github.com/Molunerfinn/PicGo/releases</code></p>
<p>windows安装.exe文件，mac下载dmg。</p>
<h3 id="修改Typora图片功能设置"><a href="#修改Typora图片功能设置" class="headerlink" title="修改Typora图片功能设置"></a>修改Typora图片功能设置</h3><p>点击“文件=》偏好设置=》图像”</p>
<p>修改成如图所示的样子，然后点击<strong>下载更新</strong></p>
<p><img src="https://i.loli.net/2021/06/24/zPHtVyN5jYoIm2l.png" alt="image-20210624192713102"></p>
<h3 id="使用SMMS作为图床"><a href="#使用SMMS作为图床" class="headerlink" title="使用SMMS作为图床"></a>使用SMMS作为图床</h3><p>因为需要将图片上传到网上，所以我们需要使用一个可以存储图片的服务器，这里我们使用smms作为图床。</p>
<p>打开网址，注册账号。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">https://sm.ms/home/apitoken<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注册登录完以后，会自动跳转到一个页面。<img src="https://i.loli.net/2021/06/24/2JglLwH3eQm5hCj.png" alt="image-20210624193204516"></p>
<p>不用管这个页面，再次请求之前的网址：<code>https://sm.ms/home/apitoken</code></p>
<p><img src="https://i.loli.net/2021/06/24/3m2lcfU9MRdeWrB.png" alt="image-20210624193624367"></p>
<p>复制这里的token，后面会用到。</p>
<h3 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h3><p>进入偏好设置=》图像，点击打开配置文件。</p>
<p><img src="https://i.loli.net/2021/06/24/afcipPZCYyzwQ9O.png" alt="image-20210624193813749"></p>
<p>修改配置文件，复制下面的代码</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;picBed&quot;: &#123;
    &quot;uploader&quot;: &quot;smms&quot;, &#x2F;&#x2F; 代表当前的默认上传图床为 SM.MS,
    &quot;smms&quot;: &#123;
      &quot;token&quot;: &quot;这里面的token换成你上个页面的申请的token&quot; &#x2F;&#x2F;一定要换
    &#125;
  &#125;,
  &quot;picgoPlugins&quot;: &#123;&#125; &#x2F;&#x2F; 为插件预留
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>记得换token</strong>，保存配置文件，就可以了。</p>
<h3 id="使用阿里云作为图床"><a href="#使用阿里云作为图床" class="headerlink" title="使用阿里云作为图床"></a>使用阿里云作为图床</h3><p>之前使用SMMS作为图床，但是太不稳定了，今天一直上传不上去，搞得我很心烦，就决定用阿里云作为图床了，虽然要钱，但是还好不是很贵。</p>
<p>1.首先登陆阿里云，然后点击控制台。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210626000813980.png" alt="image-20210626000813980"></p>
<p>2.然后选择对象存储OSS，并开通服务。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210626000813980.png" alt="image-20210626000813980"></p>
<p>3.点击概况，创建Bucket</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210626001410912.png" alt="image-20210626001410912"></p>
<p>4.填写相关信息，<strong>注意读写权限一定要选公共读</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210626001700913.png" alt="image-20210626001700913"></p>
<p>5.创建完成之后，可以购买一个资源包。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210626001915803.png" alt="image-20210626001915803"></p>
<p>6.购买40G，一年差不多了。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210626002022599.png" alt="image-20210626002022599"></p>
<p>7.获取个人ACCESSkey</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210626002417044.png" alt="image-20210626002417044"></p>
<p>8.创建AccessKey</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210626002446884.png" alt="image-20210626002446884"></p>
<p>9.打开typora的偏好设置，打开配置文件，修改文件如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;picBed&quot;: &#123;
    &quot;uploader&quot;: &quot;aliyun&quot;,
    &quot;aliyun&quot;: &#123;
  	&quot;accessKeyId&quot;: &quot;LTAI5tMPmnRuSjU3wmEC13TH&quot;,   &#x2F;&#x2F;上述创建的AccessKey的id
 	&quot;accessKeySecret&quot;: &quot;60w1Stbt3qSUw6ABilXLeCvSWuFw10&quot;,  &#x2F;&#x2F;上述创建的密码
  	&quot;bucket&quot;: &quot;pety&quot;, &#x2F;&#x2F; 存储空间名，即你创建的BUcket的名字
  	&quot;area&quot;: &quot;oss-cn-shenzhen&quot;, &#x2F;&#x2F; 存储区域代号
  	&quot;path&quot;: &quot;img&#x2F;&quot;, &#x2F;&#x2F; 自定义存储路径
 	 &quot;customUrl&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义域名，注意要加 http:&#x2F;&#x2F;或者 https:&#x2F;&#x2F;
 	 &quot;options&quot;: &quot;&quot; &#x2F;&#x2F; 针对图片的一些后缀处理参数 PicGo 2.2.0+ PicGo-Core 1.4.0+
	&#125;
  &#125;,
  &quot;picgoPlugins&quot;: &#123;&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大功完成！！！！！！！！！</p>
]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭应用询问</title>
    <url>/2021/07/22/%E5%85%B3%E9%97%AD%E5%BA%94%E7%94%A8%E8%AF%A2%E9%97%AE/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>电脑重装系统之后，每次安装一个应用都会弹出一个提示框，要我们确认是否安装，这个提示框非常烦人，因此我们想要把他给去掉。</p>
<a id="more"></a>

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>1.搜索控制面板，进入控制面板</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210703143202924.png" alt="image-20210703143202924"></p>
<p>2.点击用户账户</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210703143314496.png" alt="image-20210703143314496"></p>
<p>3.点击更改用户账户控制设置</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210703143417130.png" alt="image-20210703143417130"></p>
<p>4.设置为从不通知</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210703143523120.png" alt="image-20210703143523120"></p>
<h3 id="连接鼠标关闭触摸板"><a href="#连接鼠标关闭触摸板" class="headerlink" title="连接鼠标关闭触摸板"></a>连接鼠标关闭触摸板</h3><p>1.搜索设置，点击设备</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210703144047546.png" alt="image-20210703144047546"></p>
<p>2.点击触摸板，将连接鼠标时让触摸板保持打开状态关闭即可</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210703144124044.png" alt="image-20210703144124044"></p>
]]></content>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot整合日志框架</title>
    <url>/2020/09/15/springboot%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>在项目的开发中，日志是必不可少的一个记录事件的组件，所以也会相应的在项目中实现和构建我们所需要的日志框架。</p>
<p>而市面上常见的日志框架有很多，比如：JCL、SLF4J、Jboss-logging、jUL、log4j、log4j2、logback等等，我们该如何选择呢？</p>
<p>通常情况下，日志是由一个抽象层+实现层的组合来搭建的。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>日志-抽象层</th>
<th>日志-实现层</th>
</tr>
</thead>
<tbody><tr>
<td>JCL、SLF4J、jboss-logging</td>
<td>jul、log4j、log4j2、logback</td>
</tr>
</tbody></table>
<p><strong>springboot选择了SLF4J和logback</strong></p>
<h2 id="1-如何使用SLF4J"><a href="#1-如何使用SLF4J" class="headerlink" title="1.如何使用SLF4J"></a>1.如何使用SLF4J</h2><p>在以后的开发中，日志记录方法的调用，不应该来直接调用日志的实现层，而是调用日志抽象层的方法。</p>
<p>SLF4J就是日志抽象层，而logback就是日志的实现层。</p>
<p>给项目中导入slf4j和logback的实现jar</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要先生成一个log的对象</p>
<p>但在实际开发中，我们一般使用**@Slf4j**注解。</p>
<p>导入**@Slf4j**的依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后还要设置的Plugins里面安装Lombok插件。</p>
<p>在类的前面写上**@Slf4j**，就不用通过<code>LoggerFactory</code>创建Logger对象了，可以直接使用log。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="2-配置logback"><a href="#2-配置logback" class="headerlink" title="2.配置logback"></a>2.配置logback</h2><p>使用logback需要导入<strong>spring-boot-starter-logging</strong>依赖</p>
<p>但在实际开发中，我们不需要导入这个依赖，因为<strong>spring-boot-starter</strong>依赖中已经包含了<strong>spring-boot-starter-logging</strong>。因此可以不用引依赖，直接用就行了。</p>
<p>官方推荐使用的xml名字格式是：<code>logback-spring.xml</code>。</p>
<p>为什么是<code>logback-spring.xml</code> 而不是<code>logback.xml</code>呢？因为带spring后缀的可以使用<code>&lt;springProfile&gt;</code>标签</p>
<hr>
<p>在resource目录下新建一个：<code>logback-spring.xml</code>文件</p>
<p>配置如下：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--输出文件位置--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>../crm-admin-log/server-debug.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--编码--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd.HH:mm:ss&#125; [%5p] %c&#123;50&#125; %3L %M %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>immediateFlush</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>immediateFlush</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--日志级别--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>DEBUG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--滚动输出策略，归档文件名字--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>../crm-admin-log/server-debug.log.%d&#123;yyyy-MM-dd&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>../crm-admin-log/server-info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd.HH:mm:ss&#125; [%5p] %c&#123;50&#125; %3L %M %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>immediateFlush</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>immediateFlush</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>../crm-admin-log/server-info.log.%d&#123;yyyy-MM-dd&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>../crm-admin-log/server-warn.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd.HH:mm:ss&#125; [%5p] %c&#123;50&#125; %3L %M %m%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>../crm-admin-log/server-warn.log.%d&#123;yyyy-MM-dd&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--输出到控制台--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>consoleApp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--输出样式--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>
                %date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level[%thread]%logger&#123;56&#125;.%method:%L -%msg%n
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!--设置某个包或者类使用哪个appende name属性值定义到mapper所在的目录--></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid<span class="token punctuation">"</span></span>  <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>consoleApp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--全局日志级别--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在<strong>application.yml</strong>中配置logging config信息</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>logback<span class="token punctuation">-</span>spring.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>日志框架</tag>
      </tags>
  </entry>
  <entry>
    <title>python创建Token</title>
    <url>/2021/07/17/python%20%E5%88%9B%E5%BB%BAjwt/</url>
    <content><![CDATA[<h1 id="Python创建Token"><a href="#Python创建Token" class="headerlink" title="Python创建Token"></a>Python创建Token</h1><h2 id="关于-JWT"><a href="#关于-JWT" class="headerlink" title="关于 JWT"></a>关于 JWT</h2><p>JWT 表示 「JSON Web Tokens」。</p>
<p>它是一个将 JSON 对象编码为密集且没有空格的长字符串的标准。字符串看起来像这样：</p>
<pre class="line-numbers language-none"><code class="language-none">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<a id="more"></a>

<p>它没有被加密，因此任何人都可以从字符串内容中还原数据。</p>
<p>但它经过了签名。因此，当你收到一个由你发出的令牌时，可以校验令牌是否真的由你发出。</p>
<p>通过这种方式，你可以创建一个有效期为 1 周的令牌。然后当用户第二天使用令牌重新访问时，你知道该用户仍然处于登入状态。</p>
<p>一周后令牌将会过期，用户将不会通过认证，必须再次登录才能获得一个新令牌。而且如果用户（或第三方）试图修改令牌以篡改过期时间，你将因为签名不匹配而能够发觉。</p>
<h3 id="JWT组成"><a href="#JWT组成" class="headerlink" title="JWT组成"></a>JWT组成</h3><h4 id="Header头部"><a href="#Header头部" class="headerlink" title="Header头部"></a>Header头部</h4><p>头部包含了两部分，token类型和采用的加密算法</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"alg"</span><span class="token operator">:</span><span class="token string">"HS256"</span>
    <span class="token property">"typ"</span><span class="token operator">:</span><span class="token string">"JWT"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>会使用Base64编码组成JWT结构的第一部分。</p>
<h4 id="Payload负载"><a href="#Payload负载" class="headerlink" title="Payload负载"></a>Payload负载</h4><p>负载就是存放有效信息的地方，这些有效信息包含三个部分。</p>
<ul>
<li>标准中注册声明</li>
<li>公共的声明</li>
<li>私有的声明</li>
</ul>
<h5 id="公共的声明："><a href="#公共的声明：" class="headerlink" title="公共的声明："></a>公共的声明：</h5><p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密。</p>
<h5 id="私有的声明："><a href="#私有的声明：" class="headerlink" title="私有的声明："></a>私有的声明：</h5><p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"lion1ou JWT"</span><span class="token punctuation">,</span>
    <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1441593502</span><span class="token punctuation">,</span>
    <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1441594722</span><span class="token punctuation">,</span>
    <span class="token property">"aud"</span><span class="token operator">:</span> <span class="token string">"www.example.com"</span><span class="token punctuation">,</span>
    <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"lion1ou@163.com"</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 包括需要传递的用户信息；</span>
<span class="token punctuation">&#123;</span> 
  <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"Online JWT Builder"</span><span class="token punctuation">,</span> 
  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1416797419</span><span class="token punctuation">,</span> 
  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1448333419</span><span class="token punctuation">,</span> 
  <span class="token property">"aud"</span><span class="token operator">:</span> <span class="token string">"www.gusibi.com"</span><span class="token punctuation">,</span> 
  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"uid"</span><span class="token punctuation">,</span> 
  <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"goodspeed"</span><span class="token punctuation">,</span> 
  <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"goodspeed"</span><span class="token punctuation">,</span> 
  <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"user"</span> <span class="token punctuation">]</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>iss: 该JWT的签发者，是否使用是可选的；</li>
<li>sub: 该JWT所面向的用户，是否使用是可选的；</li>
<li>aud: 接收该JWT的一方，是否使用是可选的；</li>
<li>exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的</li>
<li>iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；</li>
<li>nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；</li>
<li>jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。同样的，它会使用 Base64 编码组成 JWT 结构的第二部分。</li>
<li>Signature 签名<br>前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过。</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// 根据alg算法与私有秘钥进行加密得到的签名字串；</span>
<span class="token comment">// 这一段是最重要的敏感信息，只能在服务端解密；</span>
HMACSHA256(  
    base64UrlEncode(header) + <span class="token string">"."</span> +
    base64UrlEncode(payload)<span class="token punctuation">,</span>
    SECREATE_KEY
)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>三个部分通过.连接在一起就是我们的 JWT 了，它可能长这个样子，长度貌似和你的加密算法和私钥有关系。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU3ZmVmMTY0ZTU0YWY2NGZmYzUzZGJkNSIsInhzcmYiOiI0ZWE1YzUwOGE2NTY2ZTc2MjQwNTQzZjhmZWIwNmZkNDU3Nzc3YmUzOTU0OWM0MDE2NDM2YWZkYTY1ZDIzMzBlIiwiaWF0IjoxNDc2NDI3OTMzfQ.PA3QjeyZSUh7H0GfE0vJaKW4LjKJuC3dVLQiY4hii8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="签名的目的"><a href="#签名的目的" class="headerlink" title="签名的目的"></a>签名的目的</h3><p>最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</p>
<blockquote>
<p>itsdangerous(使用固定密钥/字符串进行加密, jwt 有多种加密方式, 这只是其中一种, 建议先去了解一下)所生成的 token 仍然是可以被破译从而看到 jwt 的 payload(有效负载) 里的数据, 只不过因为破译者并不知道加密的密钥, 也就无法对数据进行篡改, 所以如果是私密的数据, 就不应该使用 jwt 进行传递, 如 账号的密码, 以防止泄露. 如果需要传递私密数据, 解决办法是,对 payload 的数据进行加密,从而杜绝非法破译者看到 payload 内的任何信息,但是目前加密payload的操作不是很普及,在不加密 payload 的前提下, jwt 比较适合进行非受信任端的身份验证, 此时即使接收方破译了 token, 看到了 payload 的数据, 也不会造成太大的影响, 因为数据是无法被篡改的(当接收方将 token 值返回给服务器后, 需要使用相同的密钥进行解密, 所以服务器的密钥一定要保管好), 只要接收方将 token 原封不动的返回给服务器, 那么服务器就可以根据 token 值的内容来确认接收方身份的合法性,而不需要关心接收方是否看到过 payload 的内容.</p>
<p>　简而言之, 除非额外对 payload 加密过, 否则就不要在 jwt 中传递不可被第三方获知的私密数据</p>
</blockquote>
<h2 id="安装python-jose"><a href="#安装python-jose" class="headerlink" title="安装python-jose"></a>安装<code>python-jose</code></h2><p>需要安装<code>python-jose</code>以在Python中生成和校验JWT令牌：</p>
<p><code>pip install python-jose</code></p>
<h2 id="生成和解析jwt"><a href="#生成和解析jwt" class="headerlink" title="生成和解析jwt"></a>生成和解析jwt</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#从jose导入jwt，用于token的生成和验证</span>
<span class="token keyword">from</span> jose <span class="token keyword">import</span> jwt

<span class="token comment">#导入日期模块，用来设置和验证token的过期时间</span>
<span class="token keyword">from</span> datetime <span class="token keyword">import</span>  datetime<span class="token punctuation">,</span>timedelta

<span class="token comment">#密钥，这个很重要，可以通过他来验证是否是自己签发的token</span>
<span class="token comment">#内容可以随便写，也可以不定义变量</span>
SECRT_KEY<span class="token operator">=</span><span class="token string">"hut@pty"</span>

<span class="token comment">#生成token的代码，token过期时长定义为默认参数，单位为秒</span>
<span class="token keyword">def</span> <span class="token function">create_token</span><span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#定义过期时间，当前时间+60秒</span>
    expire <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span>seconds<span class="token punctuation">)</span>
    <span class="token comment">#定义签发时间</span>
    iat <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">#定义token的payload，设置了过期时间,签发时间，username（自定义）...</span>
    <span class="token comment">#此处的to_encode还可以是空的字典，但是不建议这样</span>
    to_encode<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"expire"</span><span class="token punctuation">:</span>expire<span class="token punctuation">,</span><span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"pty"</span><span class="token punctuation">,</span><span class="token string">"iat"</span><span class="token punctuation">:</span>iat<span class="token punctuation">&#125;</span>

    <span class="token comment">#使用jwt生成token，传入payload、签名、验证算法</span>
    token <span class="token operator">=</span>jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>to_encode<span class="token punctuation">,</span>SECRT_KEY<span class="token punctuation">,</span><span class="token string">"HS256"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> token


<span class="token comment">#解析jwt</span>
<span class="token keyword">def</span> <span class="token function">verify_token</span><span class="token punctuation">(</span>token<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#解析jwt，需要传入token，签名，验证算法，返回token的payload</span>
    payload <span class="token operator">=</span> jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>token<span class="token punctuation">,</span>SECRT_KEY<span class="token punctuation">,</span><span class="token string">"HS256"</span><span class="token punctuation">)</span>
    <span class="token comment">#可以取出payload的值</span>
    username <span class="token operator">=</span> payload<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <tags>
        <tag>python</tag>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>今年一定过四级</title>
    <url>/2020/10/12/%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<ol>
<li><p><strong>stability：</strong> n  稳定（性）、稳固（性）</p>
<ul>
<li>social stability          社会稳定</li>
<li>stable        adj  稳定的    n 马厩，牛棚</li>
</ul>
<a id="more"></a></li>
<li><p><strong>trace：</strong> n   痕迹、踪迹、足迹、微量、追查；v   仔细寻找、追踪、研究….的历史、探究…..的发展;  v 描绘</p>
<ul>
<li>trace back       追溯</li>
<li>a trace of   少量的，一丝的</li>
<li>without trace  了无踪迹</li>
</ul>
</li>
<li><p><strong>admission：</strong> n  允许加入，许可；入场费；承认</p>
<ul>
<li>admit   vt  承认，允许进入；vi 承认，容许</li>
<li>admission office     招生办</li>
<li>permission   n    允许，许可</li>
</ul>
</li>
<li><p><strong>arrival：</strong>  n    到达，抵达，到达者</p>
<ul>
<li>cash on arrival   货到付款</li>
<li>with the arrival of    随着…的到来</li>
<li>arrive  vi 到达</li>
</ul>
</li>
<li><p><strong>fifty：</strong>   n   五十几，五十年代；num  五十 ；adj 许多的</p>
<ul>
<li>fiftieth    第五十的，五十分之一的</li>
</ul>
</li>
<li><p><strong>pollution：</strong> n 污染，污染物，垃圾</p>
<ul>
<li>to reduce levels of environmental pollution    降低环境污染的程度</li>
<li>environmental pollution   环境污染</li>
<li>popular  n   流行</li>
<li>population  n  人口</li>
</ul>
</li>
<li><p><strong>mile：</strong> n  英里，很远的距离 </p>
<ul>
<li>meter   n  米</li>
<li>mile better  好得多  ： she’s felling mile better today.   她今天觉得好多了</li>
<li>stand out a mile 显而易见</li>
<li>kilometer  公里</li>
</ul>
</li>
<li><p><strong>glove：</strong>  n   手套 ；  v  给戴手套</p>
<ul>
<li>a pair of gloves   一副手套</li>
<li>fit…..like a glove    恰当，合身,对….来说很合适</li>
<li>as right as my glove  完全正确</li>
</ul>
</li>
<li><p><strong>romantic：</strong>  adj  浪漫的，爱情的；n 浪漫的人，耽于幻想的人</p>
<ul>
<li>I‘m not interested in a romantic relationship   我对谈情说爱不感兴趣</li>
<li>romantic notions    异想天开的念头</li>
<li>romance   浪漫史，爱情小说，恋爱关系</li>
<li>romantic movement  n  浪漫主义运动</li>
</ul>
</li>
<li><p><strong>angle：</strong> n  角，角度，观点，斜角   v.钓鱼</p>
<ul>
<li>eye angle    视野</li>
<li>angle for  谋取   angle for promotion   谋求升职</li>
<li>triangle   三角形</li>
<li>anger  生气；  angel  天使</li>
</ul>
</li>
<li><p><strong>lawn：</strong> n  草坪，草地，上等细棉布</p>
<ul>
<li>He spent a whole afternoon mowing the lawn in front of his house  他花了一下午的时间修剪门前的草坪</li>
<li>lawn mower  割草机</li>
<li>meadow  草原</li>
</ul>
</li>
<li><p><strong>bite：</strong>  v  咬，叮； n  咬，少量食物</p>
<ul>
<li>Stop biting your nails   别咬指甲了</li>
<li>bite the dust  碰瓷了</li>
</ul>
</li>
<li><p><strong>brilliant：</strong> adj  聪颖的，才华横溢的，优秀的，卓越的；  n  钻石</p>
<ul>
<li>a brilliant performance  精彩的表演</li>
<li>a brilliant culture  灿烂的文化</li>
<li>a brilliant sunshine  灿烂的阳光</li>
<li>brilliant idea 高招，绝妙的主意   He came up a brilliant idea. 他想出了一个绝妙的主意。</li>
</ul>
</li>
<li><p><strong>vital：</strong> adj  重要的，必不可少的，生机勃勃的</p>
<ul>
<li>The police play a vital role in our society   警察在我们的社会中扮演着重要的角色。</li>
<li>vitality   n  精神，活力，力量，生命力</li>
<li>vital issue  至关重要的问题</li>
</ul>
</li>
<li><p><strong>convert：</strong>  v  （使）转变，（使）改变信仰 ;   n  皈依者</p>
<ul>
<li>convert…into   将…改变成   convert stocks into cash   将股票兑换成现金</li>
<li>unconverted   adj  不改变的</li>
<li>converter  转换器</li>
<li>conversation  交谈</li>
</ul>
</li>
<li><p><strong>comprehensive：</strong> adj  综合的，全面的，有理解力的</p>
<ul>
<li>They did a comprehensive study on leanring styles  他们对学习方式做了全面的研究</li>
<li>comprehension  n  理解力，理解</li>
<li>comprehensive university  综合性大学</li>
<li>comprehensive  quality  综合素质</li>
<li>prehensive  adj  握住的，抓住的</li>
</ul>
</li>
<li><p><strong>prominent：</strong> adj 杰出的，显著的，突出的</p>
<ul>
<li>As the leader,he played a prominent part in the team’s victory.  作为队长，他在小组的胜利中发挥了重要的作用</li>
<li>prominently  显著的，明显的</li>
</ul>
</li>
<li><p><strong>load：</strong> v  装填，装载  n  负荷，负担</p>
<ul>
<li>The trucks watied at the warehouse to pick up their loads.货车在仓库等着装载货物。</li>
<li>a load of 大量，许多</li>
<li>study load 学习任务</li>
</ul>
</li>
<li><p><strong>introduction：</strong> n  引入，引进，采用，介绍，入门</p>
<ul>
<li>the introduction of new manufacturing methods 新制造方法的采用</li>
<li>recommend  vt  推荐，介绍，劝告 </li>
<li>letter of introduction   介绍信</li>
<li>brief introduction  简介，简短介绍</li>
<li>introduce  vt 提出 介绍</li>
</ul>
</li>
<li><p><strong>pretend：</strong> v 假装 佯装 自称 模拟；  adj 假装的，想象的</p>
<ul>
<li>I’m tired of having to pretend all the time  我厌倦了一直假装</li>
<li>pretend to 假装 </li>
<li>pretend anger 假装生气 </li>
<li>pretend to be   假装是</li>
<li>pretend to do sth   假装做某事</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>单词</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域</title>
    <url>/2021/07/22/%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<p>和前端进行对接，我将产生的token值传给前端，然后前端将这个token值设置在请求头中传给我，当他请求的时候，就报了一个跨域的错误。</p>
<a id="more"></a>

<p><img src="https://i.loli.net/2021/06/25/mvMYFTxkbOB82gA.png" alt="bedbcfe80d7aa55080abad3c9cd417c0"></p>
<p>解决跨域问题，我在网上找了很多博客，都是说添加一个过滤器来过滤前端发起的请求，然后上次学姐说她是在拦截器中做了设置，目前还不知道在拦截器中如何设置，所以我写的这篇文章是添加一个过滤器。</p>
<h4 id="实现Filter接口，重写doFilter方法"><a href="#实现Filter接口，重写doFilter方法" class="headerlink" title="实现Filter接口，重写doFilter方法"></a>实现Filter接口，重写doFilter方法</h4><p><strong>这是出现了问题，然后学姐说是因为OPTIONS方法的问题，然后做了一个判断，但是好像出错的原因并不是因为这个</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 允许跨域访问过滤器
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HttpServletResponse</span> httpResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>
        <span class="token class-name">HttpServletRequest</span> httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> httpRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Max-Age"</span><span class="token punctuation">,</span> <span class="token string">"3600"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Request-Headers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>OPTIONS<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>这是最初的版本</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 允许跨域访问过滤器
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HttpServletResponse</span> httpResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>
        <span class="token class-name">HttpServletRequest</span> httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> httpRequest<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Max-Age"</span><span class="token punctuation">,</span> <span class="token string">"3600"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Request-Headers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="添加对应的配置类"><a href="#添加对应的配置类" class="headerlink" title="添加对应的配置类"></a>添加对应的配置类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hutbbs<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">CorsFilter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">CorsFilter</span> corsFilter<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FilterRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注入过滤器</span>
        registrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>corsFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//过滤器名称</span>
        registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"CorsFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//拦截规则</span>
        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//过滤器顺序</span>
        registrationBean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="为什么有跨域问题"><a href="#为什么有跨域问题" class="headerlink" title="为什么有跨域问题"></a>为什么有跨域问题</h2><p>前后端服务中，协议、域名、端口号只要有一个不相同，那么就是不同源的，这样就会产生跨域问题</p>
<h2 id="解决跨域问题的三种方法"><a href="#解决跨域问题的三种方法" class="headerlink" title="解决跨域问题的三种方法"></a>解决跨域问题的三种方法</h2><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>可以在类名或者方法上添加<code>@CrossOrigin</code>注解</p>
<h3 id="添加过滤器"><a href="#添加过滤器" class="headerlink" title="添加过滤器"></a>添加过滤器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * @author : pety
 * @date : 2022/5/29 21:36
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//添加允许访问的请求体</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//添加允许访问的方法</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//允许访问的源列表</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span>corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>实现接口 WebCMvcConfigure接口，重写addCorsMapping方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * @author : pety
 * @date : 2022/5/29 21:50
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"PUT"</span><span class="token punctuation">,</span><span class="token string">"DELETE"</span><span class="token punctuation">,</span><span class="token string">"HEAD"</span><span class="token punctuation">,</span><span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token comment">//配置缓存时间</span>
                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot发送邮箱验证</title>
    <url>/2020/09/15/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<p>在实际开发中，我们通常需要登录和注册用户。在登录的时候我们可以使用验证码来进行验证，但在注册的时候我们看到更多的是使用邮箱验证，即给你发送的邮箱发送一个验证码，然后你将这个验证码输在页面。</p>
<a id="more"></a>

<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ol>
<li><p>我们使用qq邮箱进行邮件发送，需要开启QQ邮箱的POP3/SMTP服务和IMAP/SMTP服务</p>
<ul>
<li>进入QQ邮箱首页，找到设置<img src="/images/blog/qqemail.png" alt="qq邮箱"></li>
<li>进入设置后点击账户，往下拉找到<strong>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</strong></li>
</ul>
<p><img src="/images/blog/pop3.png" alt="pop3"></p>
<ul>
<li>开启POP3和IMAP服务（只开启一个好像也行）</li>
<li>开始这两项服务后各自会生成一串密文密码，把这个保存起来，以后会用到。</li>
<li>我的两个密码分别是  POP3:cplcsiqntwidfgib    IMAP:zxisvqcbpucmiifb</li>
</ul>
</li>
<li><p>springboot配置邮箱服务</p>
<ul>
<li>导入支持邮箱的依赖</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>一个小插曲：</p>
<blockquote>
<p>在后面写代码的时候需要用到<code>JavaMailSenderImpl</code>这个类。</p>
</blockquote>
<blockquote>
<p>但是我导入这个包以后找不到这个类，我以为是还需要添加其他的依赖，百度了一下，导入了<code>spring-context-support</code>这个依赖。然后我点进<code>spring-boot-starter-mail</code>后发现里面已经引入了<code>spring-context-support</code>，所以应该是我最开始没有导入好。</p>
</blockquote>
<ul>
<li>在application.yml中配置邮箱信息</li>
</ul>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> 
	<span class="token key atrule">mail</span><span class="token punctuation">:</span>
		<span class="token key atrule">username</span><span class="token punctuation">:</span> 1219002685@qq.com  <span class="token comment">#发件人账号</span>
		<span class="token key atrule">password</span><span class="token punctuation">:</span> zxisvqcbpucmiifb  <span class="token comment">#这里的password不是填你的qq密码，而是你开去那两个服务后生成的密码</span>
		<span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.qq.com        	<span class="token comment">#邮箱服务器</span>
		<span class="token key atrule">default-encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>		<span class="token comment">#默认编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<p>至此，发送邮箱验证的前期准备工作都已经做完了，接下来就是写代码了！！！！</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><ol>
<li>Controller层</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Email</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">EmailService</span> emailService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/email"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAdress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>emailAdress<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token keyword">return</span> <span class="token string">"发送邮件成功"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"邮件发送失败"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>Service层</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailService</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">JavaMailSenderImpl</span> javaMailSender<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span> <span class="token comment">//验证码</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.mail.username&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sender<span class="token punctuation">;</span>   <span class="token comment">//发送邮件的地址</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        code<span class="token operator">=</span> <span class="token class-name">VerifyCode</span><span class="token punctuation">.</span><span class="token function">getVerifyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"验证码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"尊敬的用户你好：\n"</span><span class="token operator">+</span>
                <span class="token string">"\n本次请求的邮件验证码为："</span><span class="token operator">+</span>code<span class="token operator">+</span><span class="token string">",本次验证码5分钟内有效，请及时输入。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>
        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送邮件</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>@Value()注解：<code> @Value(&quot;$&#123;spring.mail.username&#125;&quot;)</code> 从配置文件中读取username的数据。</li>
<li><code> SimpleMailMessage message = new SimpleMailMessage();</code>创建一个简单的邮件对象。</li>
<li><code>message.setSubject()</code>设置邮件的标题</li>
<li><code>message.setText()</code>设置邮件的内容</li>
<li><code>message.setTo()</code>设置收件人的地址</li>
<li><code>message.setFrom()</code>设置发件人的地址</li>
</ul>
<ol start="3">
<li>随机生成6位数的验证码</li>
</ol>
<p>使用SecureRandom生成随机数。</p>
<blockquote>
<p>Math.random生成的是一般随机数，采用的是类似于统计学的随机数生成规则，其输出结果很容易预测，因此可能导致被攻击者击中。而SecureRandom是真随机数，采用的是类似于密码学的随机数生成规则，其输出结果较难预测，若想要预防被攻击者攻击，最好做到使攻击者根本无法，或不可能鉴别生成的随机值和真正的随机值</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VerifyCode</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SYMBOLS<span class="token operator">=</span><span class="token string">"0123456789"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> RANDOM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getVerifyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> verifycode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//生成一个长度为6的字符数组</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> verifycode<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//SYMBOLS.charAt()：返回目标索引下的字符</span>
            <span class="token comment">//RANDOM.nextInt(xx)：生成0~xx-1的随机数</span>
            <span class="token comment">//每次随机生成一个数x，并将SYMBOLS中的第n+1个数字返回给verifycode</span>
            verifycode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>SYMBOLS<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>RANDOM<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>SYMBOLS<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>verifycode<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将字符数组转成字符串</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java生成Pdf文档</title>
    <url>/2021/04/28/Java%E7%94%9F%E6%88%90Pdf%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="Java生成Pdf文档"><a href="#Java生成Pdf文档" class="headerlink" title="Java生成Pdf文档"></a>Java生成Pdf文档</h3><h4 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h4><p>​        在做填报系统的时候，有一个需求是将用户填报的信息生成一个pdf文档，本来是打算前端来做这个pdf的，但是后面前端说他生成的文档显示不全，于是我就被迫接受这个任务。</p>
<p>​        然后在百度了一两个小时后，就开始着手画pdf文档了，注意是画，不是生成，就和html一样需要自己一个一个的堆盒子。而且刚开始画的时候，出现了很多问题，比如说表格不出现，不能控制列宽……第一天搞了3个多小时，就写出了个标题，好在第二天有了第一天的教训，摸清楚了使用方法，花了一个下午给画好了。</p>
<a id="more"></a>

<p>​            写下这篇博客，来记录下，顺便做个工具类，万一以后还需要使用。</p>
<h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itextpdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>itextpdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.5.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itextpdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>itext-asian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要导入以上两个依赖。</p>
<h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ul>
<li>创建document对象 </li>
<li>获取PdfWriter实例</li>
<li>打开document文档</li>
<li>向文档写入内容</li>
<li>关闭文档</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span>pty</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">Document</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">DocumentException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">Paragraph</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span></span><span class="token class-name">PdfWriter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pdf</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">DocumentException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建document对象</span>
        <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取Pdfwriter实例，将生成的pdf写入 D:\hello.pdf</span>
        <span class="token class-name">PdfWriter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\hello.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//打开文档</span>
        document<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//向文档添加内容</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//关闭文档</span>
        document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述是一个简单的生成pdf的程序，向<code>D:\hello.pdf</code>写入了helloworld内容。</p>
<p>但是一般我们生成的pdf并不会这么简单，还需要表格等信息。</p>
<h4 id="itext常用API"><a href="#itext常用API" class="headerlink" title="itext常用API"></a>itext常用API</h4><h5 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//xxx为段落的实际内容，fontchina18是字体，这个是之前代码已经设置好的，不能通用，要自己设置</span>
<span class="token class-name">Paragraph</span> paragraph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">,</span>fontChina18<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置文字对齐方式 0靠左对齐，1居中对齐，2靠右对齐</span>
paragraph<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置左边缩进几个字符</span>
paragraph<span class="token punctuation">.</span><span class="token function">setIndentationLeft</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置右边缩进几个字符</span>
paragraph<span class="token punctuation">.</span><span class="token function">setIndentationRight</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置首行缩进几个字符</span>
paragraph<span class="token punctuation">.</span><span class="token function">setFirstLineIndent</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//行间距</span>
paragraph<span class="token punctuation">.</span><span class="token function">setLeading</span><span class="token punctuation">(</span><span class="token number">20f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置段落上空白</span>
paragraph<span class="token punctuation">.</span><span class="token function">setSpacingBefore</span><span class="token punctuation">(</span><span class="token number">5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//设置段落下空白</span>
paragraph<span class="token punctuation">.</span><span class="token function">setSpacingAfter</span><span class="token punctuation">(</span><span class="token number">10f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//将段落添加到文档</span>
document<span class="token punctuation">.</span><span class="token function">addd</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>标题一般直接居中显示，同时可以设置一个空的段落，从而实现空一行的操作  Paragraph paragraph = new Paragraph(“ “);  ,注意引号之间有个空格，没有空格好像并不能表示一个空的段落,设置完段落后，别忘了加入到文档</strong></p>
<h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建指定列的表格，下面代码为创建列数为3的表格</span>
<span class="token class-name">PdfPTable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPTable</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建指定列宽的表格，需要传入一个数组，数组的个数就是列的个数，数组的数字就是列宽</span>
<span class="token comment">//自定义列宽的时候要设置LockedWidth为true，将宽度锁定</span>
<span class="token class-name">PdfPTable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
table<span class="token punctuation">.</span><span class="token function">setLockedWidth</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置表格的总宽度</span>
table<span class="token punctuation">.</span><span class="token function">setTotalWidth</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置表格的边框宽度？</span>
table<span class="token punctuation">.</span><span class="token function">getDefaultCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置表格占页面的多少，如图设置为100%</span>
table<span class="token punctuation">.</span><span class="token function">setWidthPercentage</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//将表格添加到文档中</span>
document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个单元格</span>
<span class="token class-name">PdfPCell</span> cell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置单元格跨几列</span>
cell<span class="token punctuation">.</span><span class="token function">setColspan</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置单元格跨几行</span>
cell<span class="token punctuation">.</span><span class="token function">setRowspan</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置单元格边框宽度</span>
cell<span class="token punctuation">.</span><span class="token function">setBorderWidth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置水平居中</span>
cell<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置垂直居中</span>
cell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置单元格内容</span>
cell<span class="token punctuation">.</span><span class="token function">setPhrase</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>字体<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//将单元格加入到表格中</span>
table<span class="token punctuation">.</span><span class="token function">addcell</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>如果你创建了一个有7列的表格，但是你只添加了6个单元格，那么表格的内容是不会在页面中显示出来，只有当添加的单元格的数量大于列数，才会显示出来表格内容，没满一行的表格不显示</strong></p>
<h5 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//解决中文不显示问题</span>
<span class="token class-name">BaseFont</span> bfChinese <span class="token operator">=</span> <span class="token class-name">BaseFont</span><span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token string">"STSong-Light"</span><span class="token punctuation">,</span><span class="token string">"UniGB-UCS2-H"</span><span class="token punctuation">,</span> <span class="token class-name">BaseFont</span><span class="token punctuation">.</span>NOT_EMBEDDED<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Font</span> fontChina18 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Font</span> fontChina12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>




<span class="token comment">//这里也是设置字体，定义全局都可以使用</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Font</span> titlefont<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Font</span> headfont<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Font</span> keyfont<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Font</span> textfont<span class="token punctuation">;</span>
    <span class="token comment">// 最大宽度</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maxWidth <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>
    <span class="token comment">// 静态代码块</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 不同字体（这里定义为同一种字体：包含不同字号、不同style）</span>
            <span class="token class-name">BaseFont</span> bfChinese <span class="token operator">=</span> <span class="token class-name">BaseFont</span><span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token string">"STSong-Light"</span><span class="token punctuation">,</span> <span class="token string">"UniGB-UCS2-H"</span><span class="token punctuation">,</span> <span class="token class-name">BaseFont</span><span class="token punctuation">.</span>NOT_EMBEDDED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            titlefont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
            headfont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
            keyfont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
            textfont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h4 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h4><p>附上这一次画pdf的成果，以后也可以直接拿这个做一些调整即可</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span>pty</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span></span><span class="token class-name">BaseFont</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span></span><span class="token class-name">PdfPCell</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span></span><span class="token class-name">PdfPTable</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>itextpdf<span class="token punctuation">.</span>text<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span></span><span class="token class-name">PdfWriter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> chapter <span class="token punctuation">&#123;</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Font</span> titlefont<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Font</span> headfont<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Font</span> keyfont<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Font</span> textfont<span class="token punctuation">;</span>
    <span class="token comment">// 最大宽度</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maxWidth <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>
    <span class="token comment">// 静态代码块</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 不同字体（这里定义为同一种字体：包含不同字号、不同style）</span>
            <span class="token class-name">BaseFont</span> bfChinese <span class="token operator">=</span> <span class="token class-name">BaseFont</span><span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token string">"STSong-Light"</span><span class="token punctuation">,</span> <span class="token string">"UniGB-UCS2-H"</span><span class="token punctuation">,</span> <span class="token class-name">BaseFont</span><span class="token punctuation">.</span>NOT_EMBEDDED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            titlefont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
            headfont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
            keyfont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
            textfont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">DocumentException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建document对象</span>
        <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取PdfWriter实例</span>
        <span class="token class-name">PdfWriter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\hello1.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//打开文档</span>
        document<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//解决中文不显示问题</span>
        <span class="token class-name">BaseFont</span> bfChinese <span class="token operator">=</span> <span class="token class-name">BaseFont</span><span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token string">"STSong-Light"</span><span class="token punctuation">,</span><span class="token string">"UniGB-UCS2-H"</span><span class="token punctuation">,</span> <span class="token class-name">BaseFont</span><span class="token punctuation">.</span>NOT_EMBEDDED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Font</span> fontChina18 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Font</span> fontChina12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>bfChinese<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



        <span class="token comment">//标题</span>
        <span class="token class-name">Paragraph</span> paragraph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"湖南工业大学2021-2023年岗位定级申请表"</span><span class="token punctuation">,</span>fontChina18<span class="token punctuation">)</span><span class="token punctuation">;</span>
        paragraph<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//居中</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Paragraph</span> blank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blank<span class="token punctuation">)</span><span class="token punctuation">;</span>


        chapter chapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">chapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//表格</span>
        <span class="token class-name">PdfPTable</span> table <span class="token operator">=</span> chapter<span class="token punctuation">.</span><span class="token function">creteTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 个人信息</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"个人信息"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"性别"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"归口单位"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"计算机学院"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"现任专业技术职务"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"教授"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"取得时间"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"专业技术证书编号"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"申请岗位类别"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"专业技术岗位"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"申请岗位等级"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"教授四级"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"教师资格证书编号"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"工作业绩取得的年度"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"2017年   2018年   2019年   2020年"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blank<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//必选条件</span>
        <span class="token class-name">PdfPTable</span> table1 <span class="token operator">=</span> chapter<span class="token punctuation">.</span><span class="token function">creteTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"必选条件"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"发表中心核心期刊论文3篇"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"序号"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"发表时间"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"论文标题（书名）"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"排名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"刊物名称"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"审核人签字盖章"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"2017"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            table1<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">&#125;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blank<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//任选条件</span>
        <span class="token class-name">PdfPTable</span> table2 <span class="token operator">=</span> chapter<span class="token punctuation">.</span><span class="token function">creteTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//TODO 这里跨几行应该根据前端传过来的数据动态变化，先写死</span>
        table2<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"任选条件"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//TODO 这里的名字应该也是动态的，先写死</span>
        chapter<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>table2<span class="token punctuation">,</span><span class="token string">"D01 湖南省普通高校学科带头人培养对象或入选省“思想政治教育中青年杰出人才支持计划”、或省文艺人才扶持“三百工程"</span><span class="token punctuation">,</span><span class="token string">"荣誉称号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chapter<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>table2<span class="token punctuation">,</span><span class="token string">"D05 省部级教学成果一等级前5名、或二等奖前4名、或三等奖前2名"</span><span class="token punctuation">,</span><span class="token string">"奖项名称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chapter<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>table2<span class="token punctuation">,</span><span class="token string">"D10 国家级教学工程项目的前6名"</span><span class="token punctuation">,</span><span class="token string">"项目(专利名称)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chapter<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>table2<span class="token punctuation">,</span><span class="token string">"D16 一等刊期、或CSSCI/CSCD期刊论文1篇，或国外专业学术期刊论文1篇，或三大检索收录论文1篇，或被《新华文橘》/《中国社会科学文摘》/《人大复印资料》全文收录论文1篇"</span><span class="token punctuation">,</span><span class="token string">"论文标题（书名）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blank<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//教学情况</span>
        <span class="token class-name">PdfPTable</span> table3 <span class="token operator">=</span> chapter<span class="token punctuation">.</span><span class="token function">creteTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table3<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"教学情况"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table3<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"序号"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table3<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table3<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"课程名称"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table3<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"工作完成量(积分)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table3<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"审核人签字盖章"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//TODO 这里循环次数和年份也应该动态变化</span>
        <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2017</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            chapter<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>table3<span class="token punctuation">,</span>s<span class="token punctuation">,</span>year<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blank<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//个人承诺</span>
        <span class="token class-name">PdfPTable</span> table4 <span class="token operator">=</span> chapter<span class="token punctuation">.</span><span class="token function">creteTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">680</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table4<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"个人承诺"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table4<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"\n\n\n\n\n本人保证本表所填内容情况属实，否则愿意承担一切后果和责任。\n\n"</span><span class="token operator">+</span>
                                               <span class="token string">"                                                        本人签字："</span><span class="token operator">+</span><span class="token string">"\n\n"</span><span class="token operator">+</span>
                                               <span class="token string">"                                                        年      月     日\n\n\n\n\n"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blank<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//所在单位推荐意见</span>
        <span class="token class-name">PdfPTable</span> table5 <span class="token operator">=</span> chapter<span class="token punctuation">.</span><span class="token function">creteTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">680</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table5<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"所在单位推荐意见"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table5<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"\n\n\n\n\n经本单位评议，该同志在本次考核定级中， 符合岗位的聘任条件，同意推荐上报\n\n"</span><span class="token operator">+</span>
                                            <span class="token string">"                                                        单位负责人签字（单位公章）\n\n"</span><span class="token operator">+</span>
                                            <span class="token string">"                                                        年      月       日\n\n\n\n\n"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blank<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">PdfPTable</span> table6 <span class="token operator">=</span> chapter<span class="token punctuation">.</span><span class="token function">creteTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">680</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table6<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"学校岗位定级工作领导小组意见"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table6<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"\n\n\n\n\n经审核，同意核准该同志聘用到 岗位 级，聘期为2020年1月1日至2023年12月31日。\n\n"</span><span class="token operator">+</span>
                <span class="token string">"                                                        签字（公章）\n\n"</span><span class="token operator">+</span>
                <span class="token string">"                                                        年      月       日\n\n\n\n\n\n\n"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//关闭</span>
        document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">//简单的单元格</span>
    <span class="token keyword">public</span> <span class="token class-name">PdfPCell</span> <span class="token function">createCell</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PdfPCell</span> cell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setBorderWidth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setPhrase</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>textfont<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setFixedHeight</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>  cell<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">//简单的单元格</span>
    <span class="token keyword">public</span> <span class="token class-name">PdfPCell</span> <span class="token function">createCell</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span><span class="token keyword">boolean</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PdfPCell</span> cell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setBorderWidth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setPhrase</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>textfont<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>  cell<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//跨列的单元格</span>
    <span class="token keyword">public</span> <span class="token class-name">PdfPCell</span> <span class="token function">createCell</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PdfPCell</span> cell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setColspan</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setBorderWidth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setPhrase</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>textfont<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setFixedHeight</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>  cell<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//跨行的单元格</span>
    <span class="token keyword">public</span> <span class="token class-name">PdfPCell</span> <span class="token function">createCell</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PdfPCell</span> cell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setRowspan</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setBorderWidth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setPhrase</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>textfont<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setFixedHeight</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>  cell<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//跨列的 自定义对齐方式单元格</span>
    <span class="token keyword">public</span> <span class="token class-name">PdfPCell</span> <span class="token function">createCell</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">,</span><span class="token keyword">int</span> alin<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PdfPCell</span> cell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">.</span>ALIGN_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setColspan</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setBorderWidth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span>alin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setPhrase</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>textfont<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cell<span class="token punctuation">.</span><span class="token function">setFixedHeight</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>  cell<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//创建表格</span>
    <span class="token keyword">public</span> <span class="token class-name">PdfPTable</span> <span class="token function">creteTable</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cols<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PdfPTable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfPTable</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">setTotalWidth</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">setLockedWidth</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">getDefaultCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">setWidthPercentage</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> table<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">//创建任选条件时的表格</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token class-name">PdfPTable</span> table<span class="token punctuation">,</span><span class="token class-name">String</span> title<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"序号"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"发表时间"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"排名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"授予组织"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"审核人签字盖章"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">"2017"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//教学情况</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token class-name">PdfPTable</span> table<span class="token punctuation">,</span><span class="token class-name">String</span> t<span class="token punctuation">,</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">addCell</span><span class="token punctuation">(</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2020/10/14/Springboot/</url>
    <content><![CDATA[<h2 id="第一个SpringBoot程序"><a href="#第一个SpringBoot程序" class="headerlink" title="第一个SpringBoot程序"></a>第一个SpringBoot程序</h2><p>官方提供了一个快速生成的网站，idea集成了这个网站。</p>
<a id="more"></a>

<p><img src="images/blog/image-20200927194923490.png" alt="image-20200927194923490"></p>
<h3 id="Hello-SpringBoot程序"><a href="#Hello-SpringBoot程序" class="headerlink" title="Hello,SpringBoot程序"></a>Hello,SpringBoot程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span>

<span class="token comment">//程序的主入口</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloworldApplication</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HelloworldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>helloworld<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//接口：http://localhost:8080/hello</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
       <span class="token keyword">return</span> <span class="token string">"hello，SpringBoot!"</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>helloworld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>helloworld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!--web依赖：tomcat,dispatcherServlet,xml--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment">&lt;!--spring-boot-starter 所有的springboot依赖都是使用这个开头的--></span>

        <span class="token comment">&lt;!--单元测试--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--打jar包插件--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="springboot程序打包"><a href="#springboot程序打包" class="headerlink" title="springboot程序打包"></a>springboot程序打包</h3><p>首先需要引入打jar包的插件（springboot打成jar包，之前是war包）</p>
<p>在maven中的Lifecycle中点击package</p>
<p><img src="images/blog/image-20200927201339226.png" alt="image-20200927201339226"></p>
<p>当控制台出现<code>BUILD SUCCESS</code>说明打包成功</p>
<p>在该项目的target目录下会出现一个jar文件。在dos窗口中使用<code>java -jar jar包的名字.jar</code>运行这个springboot程序</p>
<p>使用dos窗口运行的时候，必须先定位到jar包所在得到目录下。</p>
<p><strong>小插曲</strong></p>
<ul>
<li><p>在dos窗口中，直接输入盘符和冒号就可以切换盘符</p>
<p><img src="images/blog/image-20200927202308137.png" alt="image-20200927202308137"></p>
</li>
<li><p>切换盘符后使用cd 目录名称可以切换工作目录</p>
<p><img src="images/blog/image-20200927202619592.png" alt="image-20200927202619592"></p>
</li>
</ul>
<h3 id="小彩蛋"><a href="#小彩蛋" class="headerlink" title="小彩蛋"></a>小彩蛋</h3><ol>
<li><p>修改端口号</p>
<p>在application.properties中配置</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">server.port=8081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>修改控制台的spring启动标志</p>
</li>
</ol>
<p><img src="images/blog/image-20200927203905671.png" alt="image-20200927203905671"></p>
<ul>
<li>百度在线搜索springbanner : <a href="https://www.bootschool.net/ascii/">springbanner</a>，然后复制自己想要的。<pre><code>- 在springboot的resource下面新建一个banner.txt,粘贴复制的内容
- 重启springboot</code></pre>
</li>
</ul>
<h2 id="SpringBoot自动装配原理"><a href="#SpringBoot自动装配原理" class="headerlink" title="SpringBoot自动装配原理"></a>SpringBoot自动装配原理</h2><h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><ul>
<li>形如<code>spring-boot-starter-xxx</code>这样的就是启动器，启动器说白了就是springboot的启动场景。</li>
<li>比如<code>spring-boot-starte-web</code>，它就会帮我们导入web环境所有的依赖！</li>
<li>springboot会将所有的功能场景都变成一个个的启动器。</li>
<li>我们要是用什么功能，就只需要找到对应的启动器就可以了。</li>
</ul>
<h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span>

<span class="token comment">//程序的主入口</span>
<span class="token comment">//@SpringBootApplication：标注这个类是一个Springboot的主配置类，Springboot就应该运行这个类的main方法来启动springboot应用。</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloworldApplication</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//将springboot应用启动</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HelloworldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>
    excludeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>
    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>
    classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>
    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>
    classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>@SpringBootConfiguration：</strong>SpringBoot的配置类；   </p>
<p>​                标注在某个类上，表示这是一个SpringBoot的配置类；</p>
<p>​                @<strong>Configuration：</strong>配置类上来标注这个注解；</p>
<p>​                            配置类——配置文件；配置类也是容器中的一个组件；@Component</p>
<p>@<strong>EnableAutoConfiguration：</strong>开启自动配置功能</p>
<p>​            以前我们需要配置的东西，SpringBoot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉springboot开启自动配置功能，这样自动配置才能生效；</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigurationPackage</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>@<strong>AutoConfigurationPackage：</strong>自动配置包</p>
<p>​        @Import(AutoConfigurationPackages.Registrar.class)：</p>
<p>​        Spring的底层注解@Import，给容器中导入一个组件。</p>
<p>​        <strong>AutoConfigurationPackage的作用：将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器</strong></p>
<p>@<strong>Import</strong>({AutoConfigurationImportSelector.class})</p>
<p>​    给容器中导入组件</p>
<p>​    AutoConfigurationImportSelector:导入哪些组件的选择器；</p>
<p>​    将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中。</p>
<p>会给容器中导入非常多的自动配置类（xxxAutoConfiguration）,就是给容器中导入这个场景需要的所有组件，并配置好这些组件。</p>
<p><img src="images/blog/image-20201005220032627.png" alt="image-20201005220032627"></p>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等工作。</p>
<p>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值。将这些值作为自动配置类导入到容器中，自动配置类就生效了，帮我们进行自动配置工作。以前我们需要自己配置的东西，自动配置类都帮我们配置好了。</p>
<p>J2EE的整体整合解决方案和自动配置都在<code>spring-boot-autoconfigure-2.3.3.RELEASE</code>  META-INF/spring.factories</p>
<p>结论：springboot所有自动配置都是在启动的时候扫描并加载：<code>spring.factories</code>所有的自动配置类都在这里面，但是不一定所有的配置都会生效，要判断条件是否成立。只要导入了相应的star，就会有对应的启动器，有了启动器，我们的自动装配就会生效，然后就配置成功。</p>
<h2 id="yaml语法讲解"><a href="#yaml语法讲解" class="headerlink" title="yaml语法讲解"></a>yaml语法讲解</h2><p>Springboot使用一个全局的配置文件，配置文件名称是固定的：application.properties或者application.yml</p>
<ul>
<li>application.properties<ul>
<li>语法结构：key=value</li>
</ul>
</li>
<li>application.yml<ul>
<li>语法结构：key:（空格）value</li>
</ul>
</li>
</ul>
<p><strong>配置文件的作用</strong>：修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了，我们可以通过写配置文件来修改默认配置。</p>
<h3 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h3><p><strong>对空格的要求十分要求，不能乱写空格！！！！</strong></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#普通的key-value</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> pty



<span class="token comment">#对象</span>
<span class="token key atrule">student</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> pty
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span>
  <span class="token key atrule">sex</span><span class="token punctuation">:</span> M

<span class="token comment">#对象的行内写法</span>
<span class="token key atrule">student</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">name</span><span class="token punctuation">:</span> pty<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token key atrule">sex</span><span class="token punctuation">:</span> M<span class="token punctuation">&#125;</span>


<span class="token comment">#数组</span>
<span class="token key atrule">pets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> dog
  <span class="token punctuation">-</span> cat
  <span class="token punctuation">-</span> pig
    
<span class="token comment">#数组的行内写法</span>
<span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="yaml给实体类赋值"><a href="#yaml给实体类赋值" class="headerlink" title="yaml给实体类赋值"></a>yaml给实体类赋值</h3><p>spring中赋值的方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将这个类注册到ioc容器里面，相当于写了个&lt;bean class="" id=""/></span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>   <span class="token comment">//使用@Value注解给参数注入值，@Value可以写在set方法上，</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"14"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用yaml赋值</p>
<ul>
<li>在application.yml中写上属性对应的值</li>
</ul>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dog</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> 胜利
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">4</span>
  <span class="token comment">#注意语法，冒号后面有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在实体类上写上<code>@ConfigurationProperties（prefix=&quot;&quot;）</code>注解。</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注册到ioc容器</span>
<span class="token annotation punctuation">@Component</span>
<span class="token comment">//prefix中写上该实体类属性在yml文件中的对象名，并且prefix中的参数不能写大写，如不能写Dog</span>
<span class="token comment">//但是在application.yml中可以可以写大写：Dog</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>@ConfigurationProperties作用：将配置文件中配置的每一个属性的值，映射到这个组件中，告诉SpringBoot将本类中的所有属性和配置文件中的相关配置进行绑定，参数<code>prefix=&quot;dog&quot;</code>：将配置文件中的dog下面的属性与实体类的属性一一对应。</p>
<p>@Value:还可以使用@Value进行赋值。</p>
<ul>
<li>语法：  ${key}  #{SpEL},从环境变量、配置文件中获取值</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;person.name&#125;"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;11*2&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token comment">#这里可以写大写，但是在prefix=""里面不能写大写</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> pty
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span>
  <span class="token key atrule">dog</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> 胜利
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">4</span>
  <span class="token key atrule">list</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>lq<span class="token punctuation">,</span>ppq<span class="token punctuation">,</span>zq<span class="token punctuation">]</span>
  <span class="token key atrule">map</span><span class="token punctuation">:</span>
    <span class="token key atrule">k1</span><span class="token punctuation">:</span> v1
    <span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>@Value和@ConfigurationProperties为属性注值对比</p>
<table>
<thead>
<tr>
<th></th>
<th>@Value</th>
<th>@ConfigurationProperties</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>一个个指定注入</td>
<td>批量注入配置文件中的属性</td>
</tr>
<tr>
<td>松散绑定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>SpEl</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>JSR-303数据校验</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<h3 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR-303"></a>JSR-303</h3><p>JSR-303是用来对数据的格式进行校验的。</p>
<p>虽然说前端可以数据进行校验，但最好是前后端都进行检验，这样会更加安全</p>
<ul>
<li>在springboot.2.3.0以后，需要导入坐标才能够使用。</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0.17.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在实体类上面写上<code>@Validata</code>注解</li>
<li>在需要检验格式的属性上面写上对应格式的注解</li>
</ul>
<p>参考这篇博客：<a href="https://blog.csdn.net/qq_28867949/article/details/78922520">JSR-303</a></p>
<h3 id="多环境配置及配置文件位置"><a href="#多环境配置及配置文件位置" class="headerlink" title="多环境配置及配置文件位置"></a>多环境配置及配置文件位置</h3><h4 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h4><p>Application属性文件，按优先级顺序排序，位置高的将覆盖位置低的</p>
<ol>
<li>当前项目目录下的一个/config子目录</li>
<li>当前项目目录</li>
<li>项目的resources即一个classpath下的/config包</li>
<li>项目的resources即classpath根路径（root）</li>
</ol>
<p><img src="images/blog/image-20200928174407131.png" alt="image-20200928174407131"></p>
<p><strong>如果在不同的目录中存在多个配置文件，它的读取顺序是：</strong></p>
<ol>
<li>config/application.properties（项目根目录中config目录下）</li>
<li>config/application.yml</li>
<li>application.properties（项目根目录下）application.yml</li>
<li>resources/config/application.properties（项目resources目录中config目录下）</li>
<li>resources/config/application.yml</li>
<li>resources/application.properties（项目的resources目录下）</li>
<li>resources/application.yml</li>
</ol>
<p>即：在同一目录下，先加载.properties文件，再加载.yml文件。</p>
<h4 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h4><p>yaml文件中通过—（3条杠）来区分多个环境配置</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span> <span class="token comment">#默认使用最上面的这个配置文件</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev    <span class="token comment">#使用名字叫dev的配置文件</span>

<span class="token punctuation">---</span>     <span class="token comment">#使用三条杠隔开，表示是另一个配置文件。这里配置了3个配置文件</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev  <span class="token comment">#给这个配置文件取名字</span>
<span class="token punctuation">---</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><ul>
<li>配置yml和配置properties都可以获取到指，强烈推荐yml</li>
<li>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用@value</li>
<li>如果我们专门编写了一个JavaBean来和配置文件进行映射，就直接使用@configurationProperties，不要犹豫。</li>
</ul>
<h2 id="SpringBoot-Web开发"><a href="#SpringBoot-Web开发" class="headerlink" title="SpringBoot Web开发"></a>SpringBoot Web开发</h2><h3 id="加载静态资源"><a href="#加载静态资源" class="headerlink" title="加载静态资源"></a>加载静态资源</h3><ol>
<li>在Springboot中，我们可以使用以下方式处理静态资源<ul>
<li>webjars   <code>localhost:8080/webjars/</code></li>
<li>public、static、/**、resources    <code>localhost:8080/</code></li>
</ul>
</li>
<li>优先级：resources&gt;static&gt;public</li>
<li>templates目录下的文件不能够直接访问，只能通过controller来跳转。</li>
</ol>
<h2 id="SpringBoot-扩展SpringMvc"><a href="#SpringBoot-扩展SpringMvc" class="headerlink" title="SpringBoot 扩展SpringMvc"></a>SpringBoot 扩展SpringMvc</h2><p>在spring boot中 MVC这部分也有默认自动配置，也就是说我们不用做任何配置，那么也是OK的，这个配置类就是 WebMvcAutoConfiguration，但是也时候我们想设置自己的springMvc配置怎么办呢 。</p>
<p>我们也可以写个自己的配置类，实现 WebMvcConfigurer接口，重写需要的配置方法 。在spring boot 早期是继承WebMvcConfigurerAdapter ，但是高版已标上注解@Deprecated，<strong>注意：在配置类中不要标注：@EnableWebMvc，否则，spring boot的配置全部失效，只留自己扩展配置。</strong></p>
<p>Springboot在自动配置的时候，先看容器中有没有用户自己配置的，如果有，就用用户自己配置的，没有才自动配置。如果有些组件可以有多个（ViewResolver)将用户配置的和springboot默认的组合起来。    </p>
<p>自定义视图跳转</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>   <span class="token comment">//标志这个类是一个spring的配置类</span>
<span class="token comment">//实现WebMvcConfigurer接口，重写里面的方法，实现功能</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfiig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//当浏览器请求/hello时，跳转到test页面</span>
        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>自定义视图解析器</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment">// 标注这个类是一个配置类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 将视图解析器配置到容器中</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ViewResolver</span> <span class="token function">myViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">// 自定义一个视图解析器</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span> <span class="token punctuation">&#123;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">resolveViewName</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>通常我们在首页使用自定义视图跳转，当用户只输入主机+ip时也能够访问到我们的项目。</p>
<p>我之前是将所有的静态文件放在static目录下，经过测试发现addviewControllers无法映射到static目录下的文件，可以映射到templates目录下。</p>
<p>其次当映射成功了以后，我发现页面的CSS样式等都无法加载。查看以后发现这些文件请求的地址是<code>localhost:8080/static/css/...</code>，但是默认访问css的地址是<code>localhost:8080/css/...</code>,所以需要在页面中修改引入css样式的地址，由<code>&quot;../static/css/login.css&quot;</code>修改为<code>&quot;/css/login.css&quot;</code>。</p>
<p>经过测试发现，上述方法需要导入thymeleaf。springboot默认static用来放静态资源，templates用来放动态资源，使用试图跳转后的页面应该属于动态的，所以访问不了static目录下的页面。</p>
<p>但是我们可以自己来设置视图解析器的前后缀来实现跳转到static目录下。</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#properties写法</span>
<span class="token attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token attr-value">/</span>
<span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.html</span>

<span class="token comment">#yaml写法</span>
<span class="token attr-name">spring</span><span class="token punctuation">:</span>
<span class="token attr-name">  mvc</span><span class="token punctuation">:</span>
<span class="token attr-name">    view</span><span class="token punctuation">:</span>
<span class="token attr-name">      prefix</span><span class="token punctuation">:</span> <span class="token attr-value">/</span>
<span class="token attr-name">      suffix</span><span class="token punctuation">:</span> <span class="token attr-value">.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于springboot会默认在static下找静态资源，所以访问static目录下的地址是<code>localhost:8080/</code>,因此我们的前缀只要是一个<code>/</code>即可，而后缀就是.html (我一开始没设置后缀跳转不成功，找不到文件)，这种方法不需要导入thymeleaf。</p>
<h2 id="SpringBoot推荐添加组件的方式"><a href="#SpringBoot推荐添加组件的方式" class="headerlink" title="SpringBoot推荐添加组件的方式"></a>SpringBoot推荐添加组件的方式</h2><p>我们可以通过使用<code>@ImportResource(locations=&#123;&quot;classpath:xxxxz&quot;&#125;)</code>来引入自己写的spring的配置文件</p>
<p>但是springboot推荐我们使用全注解的方式：</p>
<ol>
<li>配置类========Spring的配置文件</li>
<li>使用@Bean给容器添加组件</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @Configuration:  指明当前类是一个配置类，就是用来替代之前的Spring的配置文件
 *
 *
 * 在配置文件中使用&lt;bean>&lt;/bean>标签来添加组件
 * 在配置类中使用@Bean来添加组件
 */</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfiig</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//将方法的返回值添加到容器中，容器中的这个组件默认的id就是方法名。</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">HelloService</span> <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot整合redis</title>
    <url>/2021/07/22/springboot%E6%95%B4%E5%90%88redis/</url>
    <content><![CDATA[<h3 id="一、pom"><a href="#一、pom" class="headerlink" title="一、pom"></a>一、pom</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<a id="more"></a>

<h3 id="二、application-yml"><a href="#二、application-yml" class="headerlink" title="二、application.yml"></a>二、application.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token comment">#redis服务器地址</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.0.102  
    <span class="token comment">#redis连接端口号</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token comment">#redis连接密码</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token comment">#redis连接超时时间（毫秒）</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">18000</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token comment"># 连接池最小空闲连接</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token comment"># 连接池最大空闲连接</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>
        <span class="token comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>
        <span class="token comment"># 连接池最大连接数（使用负值表示没有限制）</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="三、自定义redisTemplate"><a href="#三、自定义redisTemplate" class="headerlink" title="三、自定义redisTemplate"></a>三、自定义redisTemplate</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RedisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">LettuceConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JedisConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">&#123;</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span>
			<span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> template<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span>
	<span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span>
			<span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">StringRedisTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> template<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是springboot自动配置的redisTemplate，可以看到他的泛型是&lt;object,object&gt;,但我们用的最多的是string，所以在使用的时候就会要多次强制转换，并且默认使用的是Jdk的序列化方式。会存在乱码情况</p>
<p>所以我们自己编写一个redisTemplate。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonAutoDetect</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>

  <span class="token annotation punctuation">@Bean</span>
  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//配置连接工厂</span>
      template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化</span>
      <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span>
      om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect</span><span class="token punctuation">.</span><span class="token class-name">Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span>
      om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper</span><span class="token punctuation">.</span><span class="token class-name">DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
      jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// key采用String的序列化方式</span>
      template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// hash的key也采用String的序列化方式</span>
      template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// value序列化方式采用jackson</span>
      template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// hash的value序列化方式采用jackson</span>
      template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> template<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>


<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="四、redis工具类"><a href="#四、redis工具类" class="headerlink" title="四、redis工具类"></a>四、redis工具类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>

    <span class="token comment">// =============================common============================</span>
    <span class="token comment">/**
     * 指定缓存失效时间
     * @param key  键
     * @param time 时间(秒)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 根据key 获取过期时间
     * @param key 键 不能为null
     * @return 时间(秒) 返回0代表为永久有效
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 判断key是否存在
     * @param key 键
     * @return true 存在 false不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 删除缓存
     * @param key 可以传一个值 或多个
     */</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">// ============================String=============================</span>

    <span class="token comment">/**
     * 普通缓存获取
     * @param key 键
     * @return 值
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 普通缓存放入
     * @param key   键
     * @param value 值
     * @return true成功 false失败
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 普通缓存放入并设置时间
     * @param key   键
     * @param value 值
     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期
     * @return true成功 false 失败
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 递增
     * @param key   键
     * @param delta 要增加几(大于0)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 递减
     * @param key   键
     * @param delta 要减少几(小于0)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">// ================================Map=================================</span>

    <span class="token comment">/**
     * HashGet
     * @param key  键 不能为null
     * @param item 项 不能为null
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">hget</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 获取hashKey对应的所有键值
     * @param key 键
     * @return 对应的多个键值
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">hmget</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * HashSet
     * @param key 键
     * @param map 对应多个键值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * HashSet 并设置时间
     * @param key  键
     * @param map  对应多个键值
     * @param time 时间(秒)
     * @return true成功 false失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 向一张hash表中放入数据,如果不存在将创建
     *
     * @param key   键
     * @param item  项
     * @param value 值
     * @return true 成功 false失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 向一张hash表中放入数据,如果不存在将创建
     *
     * @param key   键
     * @param item  项
     * @param value 值
     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间
     * @return true 成功 false失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 删除hash表中的值
     *
     * @param key  键 不能为null
     * @param item 项 可以使多个 不能为null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 判断hash表中是否有该项的值
     *
     * @param key  键 不能为null
     * @param item 项 不能为null
     * @return true 存在 false不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * hash递增 如果不存在,就会创建一个 并把新增后的值返回
     *
     * @param key  键
     * @param item 项
     * @param by   要增加几(大于0)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * hash递减
     *
     * @param key  键
     * @param item 项
     * @param by   要减少记(小于0)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">// ============================set=============================</span>

    <span class="token comment">/**
     * 根据key获取Set中的所有值
     * @param key 键
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">sGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 根据value从一个set中查询,是否存在
     *
     * @param key   键
     * @param value 值
     * @return true 存在 false不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将数据放入set缓存
     *
     * @param key    键
     * @param values 值 可以是多个
     * @return 成功个数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将set数据放入缓存
     *
     * @param key    键
     * @param time   时间(秒)
     * @param values 值 可以是多个
     * @return 成功个数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 获取set缓存的长度
     *
     * @param key 键
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 移除值为value的
     *
     * @param key    键
     * @param values 值 可以是多个
     * @return 移除的个数
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// ===============================list=================================</span>

    <span class="token comment">/**
     * 获取list缓存的内容
     *
     * @param key   键
     * @param start 开始
     * @param end   结束 0 到 -1代表所有值
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">lGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 获取list缓存的长度
     *
     * @param key 键
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 通过索引 获取list中的值
     *
     * @param key   键
     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">lGetIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将list放入缓存
     *
     * @param key   键
     * @param value 值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将list放入缓存
     * @param key   键
     * @param value 值
     * @param time  时间(秒)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将list放入缓存
     *
     * @param key   键
     * @param value 值
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 将list放入缓存
     *
     * @param key   键
     * @param value 值
     * @param time  时间(秒)
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 根据索引修改list中的某条数据
     *
     * @param key   键
     * @param index 索引
     * @param value 值
     * @return
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/**
     * 移除N个值为value
     *
     * @param key   键
     * @param count 移除多少个
     * @param value 值
     * @return 移除的个数
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Long</span> remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2021/07/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>通常情况下一个进程中包含若干个线程，一个进程中至少有一个线程。线程是cpu调度和执行的单位。</p>
<p>很多多线程是模拟出来的，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所有就有同时执行的错觉。</p>
<a id="more"></a>

<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210331194428311.png" alt="image-20210331194428311"></p>
<h4 id="创建多线程"><a href="#创建多线程" class="headerlink" title="创建多线程"></a>创建多线程</h4><h5 id="方式一：继承Thread类"><a href="#方式一：继承Thread类" class="headerlink" title="方式一：继承Thread类"></a>方式一：继承Thread类</h5><h6 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h6><ul>
<li>继承Thread类</li>
<li>重写run()方法</li>
<li>调用start开启线程  <strong>注意：调用的是start方法，不是run方法</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span>  <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//run方法线程体</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//main线程  主线程</span>

        <span class="token comment">//创建一个线程对象</span>
        <span class="token class-name">TestThread</span> testThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//调用start()方法，开启多线程</span>
        testThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"嘻嘻嘻"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>线程不一定立即执行，有cpu安排调度。</p>
<h5 id="方式二：实现Runnable接口"><a href="#方式二：实现Runnable接口" class="headerlink" title="方式二：实现Runnable接口"></a>方式二：实现Runnable接口</h5><h6 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h6><ul>
<li>实现Runnable接口</li>
<li>重写run()方法</li>
<li>创建Runnable接口的实现类对象</li>
<li>创建Thread线程对象，将上面创建的实现类对象作为参数传入构造函数中，通过线程对象开启多线程，代理模式</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThred2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//run方法线程体</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//mian线程  主线程</span>
        
        <span class="token comment">//创建实现Runnable接口的实现类对象</span>
        <span class="token class-name">TestThred2</span> testThred2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThred2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建线程对象，并调用start()方法开启多线程</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThred2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"嘻嘻嘻"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210331204653399.png" alt="image-20210331204653399"></p>
<h5 id="方式三：实现Callable接口"><a href="#方式三：实现Callable接口" class="headerlink" title="方式三：实现Callable接口"></a>方式三：实现Callable接口</h5><h6 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h6><ul>
<li>实现Callable接口，需要返回值类型</li>
<li>重写call方法，需要抛出异常</li>
<li>创建实现接口的实现类对象</li>
<li>创建执行服务</li>
<li>提交执行</li>
<li>获取结果</li>
<li>关闭服务</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThred2</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//这里的泛型可以自己定义 影响到call方法的返回值</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token string">"多线程结束"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TestThred2</span> testThred2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThred2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建执行服务，创建固定数量的线程池</span>
        <span class="token class-name">ExecutorService</span> ser <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//提交执行</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> r1 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>testThred2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> r2 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>testThred2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//获取返回值</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> r1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> r2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//关闭服务</span>
        ser<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="初识并发问题"><a href="#初识并发问题" class="headerlink" title="初识并发问题"></a>初识并发问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThred2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//run方法线程体</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//让当前线程延时</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//Thread.currentThread() 得到当前线程对象的实例，</span>
            <span class="token comment">//getName()得到此线程的名字</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"拿到了第"</span><span class="token operator">+</span>num<span class="token operator">--</span><span class="token operator">+</span><span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TestThred2</span> testThred2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThred2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//创建一个线程，并生成名字</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThred2<span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThred2<span class="token punctuation">,</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThred2<span class="token punctuation">,</span><span class="token string">"小花"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210331211534734.png" alt="image-20210331211534734"></p>
<p>可以看到输出的结果紊乱，多个人拿到同一张票。</p>
<p>多个线程操作同一个资源的情况下，线程不安全，数据紊乱</p>
<h4 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h4><h5 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h5><p>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口，对于函数式接口，我们可以通过lamda表达式来创建该接口的对象。</p>
<h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210401142922082.png" alt="image-20210401142922082"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210401143008686.png" alt="image-20210401143008686"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210401143112018.png" alt="image-20210401143112018"></p>
<h5 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h5><ul>
<li>不推荐使用jdk提供的stop方法和destory方法</li>
<li>推荐线程自己停下来</li>
<li>建议使用一个标志位作为终止变量，当flag=false时，终止线程运行。</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span>  <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//终止变量</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//run方法线程体</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hahahah"</span><span class="token operator">+</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TestThread</span> testThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//当i==900的时候，停止上面开启的线程</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">900</span><span class="token punctuation">)</span>
                testThread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xixi"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="线程休眠-sleep"><a href="#线程休眠-sleep" class="headerlink" title="线程休眠 sleep"></a>线程休眠 sleep</h5><h5 id="线程礼让-yield"><a href="#线程礼让-yield" class="headerlink" title="线程礼让 yield"></a>线程礼让 yield</h5><p>礼让线程，让当前正在执行的线程<strong>暂停</strong>，但是不阻塞，将线程由运行状态转为就绪状态，等待cpu的调度，但是下次被调度的不一定不是礼让的线程，还是由cpu随机调度。</p>
<h5 id="线程强制执行-Join"><a href="#线程强制执行-Join" class="headerlink" title="线程强制执行 Join"></a>线程强制执行 Join</h5><p>Join合并线程，待此线程完成后，再执行其他线程，可以想象成插队。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span>  <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vip用户"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TestThread</span> testThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">150</span><span class="token punctuation">)</span>
                <span class="token comment">//插队，让thread线程先运行，运行完以后再运行该线程</span>
                thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mian"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="观察线程的状态-Thread-State"><a href="#观察线程的状态-Thread-State" class="headerlink" title="观察线程的状态  Thread.State"></a>观察线程的状态  Thread.State</h5><p>线程状态。线程可以处于以下状态之一：</p>
<ul>
<li><p>NEW<br>尚未启动的线程处于此状态。 </p>
</li>
<li><p>RUNNABLE<br>在Java虚拟机中执行的线程处于此状态。</p>
</li>
<li><p>BLOCKED</p>
<p>被阻塞等待监视器锁定的线程处于此状态。</p>
</li>
<li><p>WAITING<br>正在等待另一个线程执行特定动作的线程处于此状态。 </p>
</li>
<li><p>TIMED_WAITING<br>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。 </p>
</li>
<li><p>TERMINATED</p>
<p>已退出的线程处于此状态。</p>
<p>一个线程可以在给定时间点处于一个状态。 这些状态是不反映任何操作系统线程状态的虚拟机状态。 </p>
</li>
</ul>
<p>死亡后的线程不能再次被启动。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//lamda表达式</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//观察状态</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span> state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//NEW</span>

        <span class="token comment">//启动线程</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//RUNNABLE</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>state<span class="token operator">!=</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token punctuation">.</span>TERMINATED<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//只要线程没结束，就输出线程状态</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
            state<span class="token operator">=</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h5><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有进程，线程调度器按照优先级决定应该调度哪个线程来执行。</p>
<p>优先级用数字来表示，范围为1~10</p>
<p>使用<code>getPriority()</code>获取优先级，使用<code>setPriority(int xxx)</code>设置优先级</p>
<p>设置了优先级，也不一定优先级高调度先执行。优先级低只是说获得调度的概率低，终究还是一个概率问题。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span>   <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-->"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-->"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TestThread</span> testThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 先设置优先级在启动线程</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t3<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t4<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t5<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t5<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t6<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t6<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="守护线程-daemon"><a href="#守护线程-daemon" class="headerlink" title="守护线程(daemon)"></a>守护线程(daemon)</h5><p>线程分为用户线程和守护线程，<strong>虚拟机必须确保用户线程执行完毕，但是不同等待守护线程执行完毕</strong>，也就是说，如果用户线程没有执行完毕，那么程序将不会结束，只用当用户线程结束后，程序才会结束。而如果守护线程没有执行完，但是用户线程执行完毕，程序仍然结束。</p>
<p><strong>守护线程可以用来后台记录操作日志，监控内存，垃圾回收等待等工作</strong></p>
<p>通过设置<code>setDaemon()</code>方法设置是否为守护线程，传入布尔值，默认是false，表示是用户线程。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span>  <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">You</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">You</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">God</span> god <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">God</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>god<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread1<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置为守护线程</span>
        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>you<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">You</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有按时长大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"goodbye，world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">God</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token comment">//永远执行，但是由于上面被设置为守护线程，因此程序不会管该线程是否结束。</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上帝与你同在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多线程进阶"><a href="#多线程进阶" class="headerlink" title="多线程进阶"></a>多线程进阶</h3><h4 id="多线程同步机制"><a href="#多线程同步机制" class="headerlink" title="多线程同步机制"></a>多线程同步机制</h4><p>并发：多线程访问同一个对象</p>
<p><img src="/.com//笔记\img\Linux部署环境\image-20210407214450499.png" alt="image-20210407214450499"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210407214624523.png" alt="image-20210407214624523"></p>
<p>线程同步的安全性需要<strong>队列+锁</strong> </p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210407215013532.png" alt="image-20210407215013532"></p>
<p>确保了程序的安全性，但是降低了性能</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210408144045258.png" alt="image-20210408144045258"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210408144134205.png" alt="image-20210408144134205"></p>
<p>线程同步代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThred2</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BuyTicket</span> buyTicket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>buyTicket<span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>buyTicket<span class="token punctuation">,</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>buyTicket<span class="token punctuation">,</span><span class="token string">"小朱"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">BuyTicket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">//synchroized 同步方法，锁的是对象。</span>
    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>num<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210408150604377.png" alt="image-20210408150604377"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span>  <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token string">"基金"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Drawing</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Drawing</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        me<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        you<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//账户</span>
<span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> money<span class="token punctuation">;</span>  <span class="token comment">//卡里的钱</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span> 

    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//银行，模拟取款</span>
<span class="token keyword">class</span> <span class="token class-name">Drawing</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>

   <span class="token class-name">Account</span> account<span class="token punctuation">;</span>
   <span class="token keyword">int</span> drawingMoney<span class="token punctuation">;</span>  <span class="token comment">//取的钱</span>
   <span class="token keyword">int</span> nowMoney<span class="token punctuation">;</span>   <span class="token comment">//手中的钱</span>

    <span class="token keyword">public</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">,</span><span class="token keyword">int</span> drawingMoney<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>account<span class="token operator">=</span>account<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>drawingMoney<span class="token operator">=</span>drawingMoney<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>money<span class="token operator">-</span>drawingMoney<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"钱不够了，取不了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            account<span class="token punctuation">.</span>money<span class="token operator">=</span>account<span class="token punctuation">.</span>money<span class="token operator">-</span>drawingMoney<span class="token punctuation">;</span>
            nowMoney<span class="token operator">=</span>nowMoney<span class="token operator">+</span>drawingMoney<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"余额为："</span><span class="token operator">+</span>account<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>nowMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>可以看到上面两个例子有不同的地方，第一个例子是模拟买票，第二个例子是模拟用同一个账户去取钱。由于车票余下的数量是在车站里面的，因此我们锁住了取票这个方法，那么久可以保证线程的安全，A买完票以后B才能买。所以我们使用<code>synchronized</code>方法。但是第二个例子中，我们的余额是在账户中，如果我们锁了run方法（因为synchronized锁的是对象，所以锁的也就是Drawing这个对象），只是锁住了取钱这一个操作，但是没有锁住账户中的余额，也就是说我们可能同时看到了100元，同时去取，但是因为加锁了，取钱这个操作要排队，我取完50，你再取，但是你取的时候账户余额还是100，因为没有锁住余额，不是要等上一次操作完余额发生变化之后才能进行操作</strong> 。 ==总而言之，锁的对象就是变化的量，需要增删改的对象，也就是共享资源==</p>
<h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210408153422016.png" alt="image-20210408153422016"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210408154021123.png" alt="image-20210408154021123"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span><span class="token punctuation">;</span>

<span class="token comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Makeup</span> g1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Makeup</span> g2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//口红</span>
<span class="token keyword">class</span> <span class="token class-name">Lipstick</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//镜子</span>
<span class="token keyword">class</span> <span class="token class-name">Mirror</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">Makeup</span> <span class="token keyword">extends</span>  <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//需要的资源只有一份，用static来保证</span>
    <span class="token keyword">static</span> <span class="token class-name">Lipstick</span> lipstick<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lipstick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">Mirror</span> mirror <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> choice<span class="token punctuation">;</span>  <span class="token comment">//选择</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//名字</span>

    <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>choice<span class="token operator">=</span>choice<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">makeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">//化妆，互相持有对方的锁</span>
    <span class="token keyword">private</span>  <span class="token keyword">void</span> <span class="token function">makeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>choice<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>上面的代码中，A先拿到口红的锁，并且没有释放掉，想在1秒之后再度拿到镜子的锁，但是镜子的锁B先拿到了，并且也没有释放掉，B想在2秒后拿到口红的锁，因此A与B相互僵持，最终程序卡死。拿到锁以后只有释放掉以后，其他对象才能拿到这个锁</strong></p>
<p>要想解决上面的情况，将睡眠之后拿锁的操作放在外面，也就是第一次拿锁结束，将这个锁释放掉，那么B就可以拿到这个锁，同理A也是。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span><span class="token punctuation">;</span>

<span class="token comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Makeup</span> g1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Makeup</span> g2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//口红</span>
<span class="token keyword">class</span> <span class="token class-name">Lipstick</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//镜子</span>
<span class="token keyword">class</span> <span class="token class-name">Mirror</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">Makeup</span> <span class="token keyword">extends</span>  <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//需要的资源只有一份，用static来保证</span>
    <span class="token keyword">static</span> <span class="token class-name">Lipstick</span> lipstick<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lipstick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">Mirror</span> mirror <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> choice<span class="token punctuation">;</span>  <span class="token comment">//选择</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//名字</span>

    <span class="token class-name">Makeup</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>choice<span class="token operator">=</span>choice<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">makeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span>  <span class="token keyword">void</span> <span class="token function">makeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>choice<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="lock锁"><a href="#lock锁" class="headerlink" title="lock锁"></a>lock锁</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLock</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">//定义lock锁</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加锁  要捕获一下错误</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁，解锁操作在finally中完成</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>lock锁和synchronized作用差不多，但是lock锁是显示锁，需要手动开启和关闭锁，一般在finally中关闭锁，并且lock锁只有代码块锁，但是synchronized有代码块锁和方法锁。</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210409142700271.png" alt="image-20210409142700271"></p>
<h4 id="生产者消费者模式"><a href="#生产者消费者模式" class="headerlink" title="生产者消费者模式"></a>生产者消费者模式</h4><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210409152007207.png" alt="image-20210409152007207"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pool</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建线程连接池</span>
        <span class="token comment">//newFixedThreadPool 参数为线程池大小</span>
        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//执行线程，创建方法与原来不同，原来是 new Thread(new Mythread()).start;</span>
        <span class="token comment">//这里使用execute方法</span>
        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//关闭连接</span>
        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2021/07/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h4><h5 id="数据结构的两个层次"><a href="#数据结构的两个层次" class="headerlink" title="数据结构的两个层次"></a>数据结构的两个层次</h5><p><strong>1.逻辑结构</strong></p>
<p>逻辑结构是描述元素之间的逻辑关系，与数据的存储无关，独立于计算机，是从具体问题抽象出来的数学模型。</p>
<a id="more"></a>

<p><strong>2.物理结构（存储结构）</strong></p>
<p>数据元素及其关系在计算机内存器中的结构（存储方式），是数据结构在计算机中的表示</p>
<p>==存储结构是逻辑关系的影响与元素本身的映像，逻辑结构是数据结构的抽象，存储结构是数据结构的实现。==</p>
<h5 id="逻辑结构的种类"><a href="#逻辑结构的种类" class="headerlink" title="逻辑结构的种类"></a>逻辑结构的种类</h5><ul>
<li>线性结构：有且仅有一个开始和一个终端结点，并且所有结点都最多只有一个直接前趋和一个直接后继。<strong>如：线性表、栈、队列、串</strong></li>
<li>非线性结构：一个节点可能有多个直接前趋和直接后继，<strong>如：树，图</strong></li>
</ul>
<h5 id="存储结构的种类"><a href="#存储结构的种类" class="headerlink" title="存储结构的种类"></a>存储结构的种类</h5><ul>
<li>顺序存储结构：用一组连续的存储单元依次存储数据元素，数据元素之间的逻辑关系由关系的存储位置来表示</li>
<li>链式存储结构：用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示。</li>
<li>索引存储结构</li>
<li>散列存储结构</li>
</ul>
<h4 id="算法和算法分析"><a href="#算法和算法分析" class="headerlink" title="算法和算法分析"></a>算法和算法分析</h4><h5 id="算法的定义"><a href="#算法的定义" class="headerlink" title="算法的定义"></a>算法的定义</h5><p>对特定问题求解方法和步骤的一种描述，它是指令的有限序列，其中每个指令表示一个或多个操作。</p>
<h5 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h5><p>一个算法必须具备以下五个重要特性：</p>
<ul>
<li>有穷性：一个算法必须总是咋执行<strong>有穷步</strong>之后结束，且每一步都在有穷时间内完成。</li>
<li>确定性：算法中每一条指令必须有确切的含义，没有二义性，在任何条件下，只有唯一的一条执行路径，即对于相同的输入只能得到相同的输出。</li>
<li>可行性：算法是可执行的，算法描述的操作可以通过已经实现的基本操作执行有限次实现。</li>
<li>输入：一个算法有零个或多个输入。</li>
<li>输出：一个算法有一个或多个输出。</li>
</ul>
<h5 id="算法设计的要求"><a href="#算法设计的要求" class="headerlink" title="算法设计的要求"></a>算法设计的要求</h5><ul>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>高效性</li>
</ul>
<h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>一个算法的运行时间是指一个算法在计算机上运行所耗费的时间，==大致可以等于计算机执行一种简单的操作（如赋值、比较、移动等）所需的时间与算法中进行的简单操作次数乘积==。</p>
<p><strong>算法运行时间=一个简单操作所需的时间 X 简单操作次数</strong> </p>
<p>即 <strong>算法运行时间=∑每条语句频度X该语句执行一次所需的时间</strong></p>
<p>每条语句执行一次所需要的时间，一般是由机器而异的，与算法无关。所以我们可以假设执行每条语句所需要的时间均为单位时间，此时对算法的运行时间的讨论就可以转化为讨论该算法中所有语句的执行次数，即频度之和。</p>
<p>为了便于比较不同算法的时间效率，我们仅比较它们的数量级。</p>
<p>T(n)=O(f(n)),称O(f(n))为算法的渐进时间复杂度(O是数量级的符号)，简称时间复杂度。 </p>
<p>== 一般情况下，不必计算所有操作的执行次数，而只考虑算法中基本操作执行的次数==，它是问题规模n的某个函数，用T(n)来表示。  </p>
<h5 id="分析时间复杂度的基本方法"><a href="#分析时间复杂度的基本方法" class="headerlink" title="分析时间复杂度的基本方法"></a>分析时间复杂度的基本方法</h5><ol>
<li>找出语句频度最大的那条语句为基本语句</li>
<li>计算基本语句的频度得到问题规模n的某个函数f(n)</li>
<li>取其数量级用符号“o”表示。 </li>
</ol>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">x&#x3D;0;                                                       1
y&#x3D;0;                                                       2
for(int k&#x3D;0;k&lt;n;k++)                                       3
    x++;                                                   4    
for(int i&#x3D;0;i&lt;n;i++)                                       5
    for(int j&#x3D;0;j&lt;n;j++)                                   6
        y++;                                               7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>f(n)=n*(n+1) *<em>:6的执行频度为n+1   7的执行频度是n</em>(n+1)        ** T(n)=O(n²)</strong></p>
<p>==时间复杂度是由嵌套最深层语句的频度决定的==</p>
<h5 id="时间复杂度分类"><a href="#时间复杂度分类" class="headerlink" title="时间复杂度分类"></a>时间复杂度分类</h5><ul>
<li>最坏时间复杂度：指在最坏的情况下，算法的时间复杂度。</li>
<li>平均时间复杂度：指在所有可能输入实例在等概率出现的情况下，算法的期望运行时间。</li>
<li>最好时间复杂度：指在最好情况下，算法的时间复杂度。</li>
</ul>
<p>一般总是考虑在最坏情况下的时间复杂度，以保证算法的运行时间不会比他长。</p>
<h5 id="算法时间效率的比较"><a href="#算法时间效率的比较" class="headerlink" title="算法时间效率的比较"></a>算法时间效率的比较</h5><p>时间复杂度按数量级递增顺序为：</p>
<p><img src="https://i.loli.net/2021/06/25/paxo5K83Pq14ykh.png" alt="image-20210622205237015"></p>
<h5 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><p>空间复杂度：算法所需存储空间的度量，记作： S(n)=O(f(n))，n为问题的规模</p>
<p>算法要占据的空间</p>
<ul>
<li>算法本身要占据的空间，输入、输出、指令、常数、变量等</li>
<li>算法要使用的辅助空间。</li>
</ul>
<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="线性表的定义和特点"><a href="#线性表的定义和特点" class="headerlink" title="线性表的定义和特点"></a>线性表的定义和特点</h3><p>线性表是具有相同特性的元素的一个有限序列，(a1,a2,…ai-1,ai,ai+1,…,an)     ai-1称为ai的直接前趋，ai+1称为ai的直接后继。当n=0时称为空表。</p>
<p>==同一线性表中的元素必定具有相同特性，数据元素间的关系是线性关系。==</p>
<h3 id="线性表的类型定义"><a href="#线性表的类型定义" class="headerlink" title="线性表的类型定义"></a>线性表的类型定义</h3><ol>
<li><strong>InitList(&amp;L)</strong><ul>
<li>操作结果：构造一个空的线性表L。</li>
</ul>
</li>
<li><strong>DestroyList(&amp;L)</strong><ul>
<li>初始条件：线性表L已经存在。</li>
<li>操作结果：销毁线性表L。</li>
</ul>
</li>
<li><strong>ClearList(&amp;L)</strong><ul>
<li>初始条件：线性表L已经存在。</li>
<li>操作结果：将线性表L重置为空表。</li>
</ul>
</li>
<li><strong>ListEmpty(L)</strong><ul>
<li>初始条件：线性表L已经存在。</li>
<li>操作结果：若线性表L为空，则返回True，否则返回False。</li>
</ul>
</li>
<li><strong>ListLength(L)</strong><ul>
<li>初始条件：线性表L已经存在。</li>
<li>操作结果：返回线性表L中的数据元素个数。</li>
</ul>
</li>
<li><strong>GetElem(L,i,&amp;e)</strong><ul>
<li>初始条件：线性表L已经存在,1&lt;=i&lt;=ListLength(L)。</li>
<li>操作结果，用E返回线性表L中第i个数据元素的值。</li>
</ul>
</li>
<li><strong>LocateElem(L,e,compare())</strong><ul>
<li>初始条件：线性表L已经存在,compare()是数据元素判定函数。</li>
<li>操作结果：返回L中第1个与e满足compare()的数据元素的位序，若这样的数据元素不存在则返回值为0。</li>
</ul>
</li>
</ol>
<p>………</p>
<h3 id="顺序表的表示和实现"><a href="#顺序表的表示和实现" class="headerlink" title="顺序表的表示和实现"></a>顺序表的表示和实现</h3><p>线性表顺序存储结构占有一片连续的存储空间，知道某个元素的存储位置就可以计算其他元素的存储位置。</p>
<p>顺序表的特点：==以物理位置相邻表示逻辑关系，任意元素均可随机存取（优点）==，这种存取元素的方法叫做<strong>随机存取法</strong></p>
<p><img src="https://i.loli.net/2021/06/25/3j6CeI5b7ZdtYnp.png" alt="image-20210623102638413"></p>
<p> 假设线性表的每个元素需占m个存储单元，则第i+1个数据元素的存储位置和第i个数据元素的存储位置之间满足关系：</p>
<p>​                                                            <strong>LOC(ai+1)=LOC(ai)+m</strong></p>
<p><img src="https://i.loli.net/2021/06/25/i7oXZafVPcKBUGH.png" alt="image-20210623103523630"></p>
<p>使用一维数组表示顺序表，由于数组长度不可以动态定义，因此我们用一个变量表示顺序表的长度属性。</p>
<h5 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h5><p>顺序表的定义如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token expression">LIST_INT_SIZE <span class="token number">100</span>   </span><span class="token comment">//线性表存储空间的初始分配量</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>
    ElemType elem<span class="token punctuation">[</span>LIST_INIT_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//定义一个指定长度的数组，ElemType是数据类型，如INT,FLOAT.</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token comment">//当前长度</span>
<span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="顺序表示意图"><a href="#顺序表示意图" class="headerlink" title="顺序表示意图"></a>顺序表示意图</h5><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210625201628543.png"></p>
<h4 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a>顺序表的基本操作</h4><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210627131242504.png" alt="image-20210627131242504"></p>
<p><strong>其中橙色部分的为重点操作</strong></p>
<h5 id="顺序表的基本操作实现"><a href="#顺序表的基本操作实现" class="headerlink" title="顺序表的基本操作实现"></a>顺序表的基本操作实现</h5><p>操作算法中用到的预定义常量和类型</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210625202130788.png" alt=" "></p>
<h6 id="初始化线性表"><a href="#初始化线性表" class="headerlink" title="初始化线性表"></a>初始化线性表</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c">status <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>					<span class="token comment">//构造一个空的顺序表L</span>
    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> new ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment">//为顺序表分配空间</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token comment">//存储分配失败</span>
    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                               <span class="token comment">//空表长度为0</span>
    renturn OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="销毁线性表"><a href="#销毁线性表" class="headerlink" title="销毁线性表"></a>销毁线性表</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DestroyList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> delete L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>     <span class="token comment">//释放内存空间</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h6 id="清空线性表"><a href="#清空线性表" class="headerlink" title="清空线性表"></a>清空线性表</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">//将线性表的长度设置为0</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h6 id="求线性表的长度"><a href="#求线性表的长度" class="headerlink" title="求线性表的长度"></a>求线性表的长度</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">GetLength</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h6 id="判断线性表是否为空"><a href="#判断线性表是否为空" class="headerlink" title="判断线性表是否为空"></a>判断线性表是否为空</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="顺序表取值（根据位置i获取相应位置数据元素的内容）"><a href="#顺序表取值（根据位置i获取相应位置数据元素的内容）" class="headerlink" title="顺序表取值（根据位置i获取相应位置数据元素的内容）"></a>顺序表取值（根据位置i获取相应位置数据元素的内容）</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>  <span class="token comment">//判断i的值是否合理</span>
    e<span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//将第i个位置的元素赋值给e</span>
    <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="顺序表的查找（在线性表中查找与指定值e相同的数据元素的位置）"><a href="#顺序表的查找（在线性表中查找与指定值e相同的数据元素的位置）" class="headerlink" title="顺序表的查找（在线性表中查找与指定值e相同的数据元素的位置）"></a>顺序表的查找（在线性表中查找与指定值e相同的数据元素的位置）</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>e<span class="token punctuation">)</span>   <span class="token comment">//元素进行对比</span>
            <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//查找成功则返回序号</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//查找失败，返回0</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>平均查找长度：ASL=（n+1)/2 ，时间复杂度T(n)=O(n)</strong></p>
<h6 id="顺序表的插入"><a href="#顺序表的插入" class="headerlink" title="顺序表的插入"></a>顺序表的插入</h6><p>算法思想：</p>
<ul>
<li>插入位置i是否合法，只能在0~L.length之间，即第1个位置和第length+1个位置。</li>
<li>判断顺序表的存储空间是否已满，若已满返回ERROR。</li>
<li>将第L.length至第i位的元素依次向后移动一个位置，将第i个位置空出来。</li>
<li>将要插入的新元素e放入第i个位置</li>
<li>表长+1，插入成功返回OK</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token comment">//判断插入位置是否合理</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span>MAXSIZE<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token comment">//判断顺序表的存储空间是否已满</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token operator">-</span><span class="token number">1</span>j<span class="token punctuation">;</span><span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token comment">//将数据依次后移</span>
    <span class="token punctuation">&#123;</span>
        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>          <span class="token comment">//赋值，插入数据</span>
    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//表长+1 </span>
    <span class="token keyword">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>平均移动长度：ASL=n/2，时间复杂度T(n)=O(n)</strong></p>
<h6 id="顺序表的删除"><a href="#顺序表的删除" class="headerlink" title="顺序表的删除"></a>顺序表的删除</h6><p>线性表的删除运算是指将表的第i(1&lt;=i&lt;=n)个节点删除，使长度为n的线性表变成长度为n-1的线性表。</p>
<p>算法思想：</p>
<ul>
<li>判断删除位置是否合法。（合法值为1&lt;=i&lt;=n)</li>
<li>将欲删除的元素保留在e中。</li>
<li>将第i+1至第n位元素依次向前移动一个位置</li>
<li>表长-1，删除成功返回OK。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ListDelete_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>   <span class="token comment">//i的值不合法</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//被删除元素之后的元素前移</span>
    <span class="token punctuation">&#125;</span>
    L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>                 <span class="token comment">//表长减1</span>
    <span class="token keyword">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> <strong>平均移动长度：(n-1)/2，时间复杂度T(N)=O(n)</strong></p>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p><strong>顺序表的优点：</strong></p>
<ul>
<li>存储密度大（存储密度=结点本身所占存储量/结点结构所占存储量），顺序表的存储密度为1。</li>
<li>可以随机存取表中任一元素。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>在插入、删除某一元素时，需要移动大量元素。</li>
<li>浪费存储空间（需要预先分配空间，很多空间可能没有用到）</li>
<li>属于静态存储形式，数据元素的个数不能自由扩充。</li>
</ul>
<h4 id="补充C和C-的知识"><a href="#补充C和C-的知识" class="headerlink" title="补充C和C++的知识"></a>补充C和C++的知识</h4><p>定义顺序表</p>
<p>数组静态分配：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token expression">LIST_INT_SIZE <span class="token number">100</span>   </span><span class="token comment">//线性表存储空间的初始分配量</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>
    ElemType elem<span class="token punctuation">[</span>LIST_INIT_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//定义一个指定长度的数组，ElemType是数据类型，如INT,FLOAT.</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token comment">//当前长度</span>
<span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>数组动态分配：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>
    ElemType <span class="token operator">*</span>data<span class="token punctuation">;</span>   <span class="token comment">//这里是一个指针变量，指的是数组的第一个元素</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>SqList  <span class="token comment">//顺序表类型</span>
    
<span class="token comment">//动态分配空间</span>
    SqList L<span class="token punctuation">;</span>  <span class="token comment">//定义一个顺序表L</span>
	L<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token punctuation">(</span>ElemType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token operator">*</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使用malloc函数动态分配空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="C语言内存分配函数"><a href="#C语言内存分配函数" class="headerlink" title="C语言内存分配函数"></a>C语言内存分配函数</h5><p>需要加载头文件<code>&lt;stdlib.h&gt;</code></p>
<ul>
<li>malloc(m)函数，开辟m字节长度的地址空间，并返回这段空间的首地址。</li>
<li>sizeof(x)运算，计算变量x的长度,即占几个字节。</li>
<li>free(p)函数，释放指针p所指变量的存储空间，即彻底删除一个变量。</li>
</ul>
<h5 id="C-动态存储分配"><a href="#C-动态存储分配" class="headerlink" title="C++动态存储分配"></a>C++动态存储分配</h5><p><code>new l类型名T（初值列表）</code></p>
<p>功能：申请用于存放T类型对象的内存空间，并依初值赋以初值</p>
<p>结果值：</p>
<p>​    成功：T类型的指针，指向新分配的内存。</p>
<p>​    失败：0（NULL)</p>
<p><code>int *p1 = new int ;</code>  从内存开辟一个空间放一个int型变量，返回一个地址。</p>
<p><code>int *p1 = new int(10);</code> 从内存开辟一个空间放10个int型变量，返回一个地址。</p>
<h3 id="链表的表示和实现"><a href="#链表的表示和实现" class="headerlink" title="链表的表示和实现"></a>链表的表示和实现</h3><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p>链式存储结构：结点在存储器中的位置是任意的，即逻辑上相邻的数据元素在物理上不一定相邻。</p>
<p>线性表的链式表示又称为非顺序映像或链式映像。</p>
<p>用一组<strong>物理位置任意的存储单元</strong>来存放线性表的数据元素。</p>
<p>这组存储单元既可以是<strong>连续</strong>的，也可以是<strong>不连续</strong>的，甚至是零散分布在内存中的任意位置上的。</p>
<p>链表中元素的<strong>逻辑次序和物理次序不一定相同</strong>。</p>
<h4 id="与链式存储相关的术语"><a href="#与链式存储相关的术语" class="headerlink" title="与链式存储相关的术语"></a>与链式存储相关的术语</h4><p><strong>1、结点：</strong>数据元素的存储映像。链表的各个结点由两部分组成：<strong>数据域和指针域</strong>，数据域用来存储数值数据，指针域用来存储直接后继结点的存储位置。</p>
<p><strong>2、链表：</strong>n个结点由指针链组成一个链表。</p>
<p><strong>3、单链表、双链表、循环链表：</strong></p>
<ul>
<li>结点只有一个指针域的链表成为<strong>单链表</strong>或<strong>线性链表</strong>，指针域存储直接后继结点的地址，并且尾结点的指针域为NULL。</li>
<li>结点由两个指针域的链表称为<strong>双链表</strong>，第一个指针域存储前一个结点的地址，后一个指针域存储下一个结点的地址，尾结点的指针域为NULL。</li>
<li>首尾相连的链表称为<strong>循环链表</strong>，尾指针的指针域存储首节点的地址。</li>
</ul>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210627134652130.png" alt="image-20210627134652130"></p>
<p><strong>4、头指针、头结点和首元结点：</strong></p>
<ul>
<li>头指针：指向链表第一个结点的指针，是个指针，没有数据域。</li>
<li>首元结点：链表中第一个存储数据元素的结点。</li>
<li>头结点，为了方便在首元结点前附设的一个结点，有数据域和指针域，但是数据域不保存数据，指针域指向首元结点的地址。</li>
</ul>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210627135040727.png" alt="image-20210627135040727"></p>
<blockquote>
<p>既然设不设置头结点都可以，为什么要设置头结点呢？设置头结点有什么好处？</p>
</blockquote>
<p>1.便于首元结点的处理。</p>
<p>如果没有头结点，那个首元结点的地址就由头指针指向，而有了头指针，那么首元结点的地址就保存在头结点的指针域中，可以直接由头结点指向，与后面的结点操作一直，不用进行特殊处理。</p>
<p>2.便于空表和非空表的统一处理</p>
<p>无论链表是否为空，头指针都是指向头结点的非空指针，因此空表和非空表的处理也一致了。</p>
<blockquote>
<p>头结点的数据域内存什么信息</p>
</blockquote>
<p>头结点的数据域可以为空，也可以存放线性表长度等附加信息，但是这个节点不计入链表的长度。</p>
<h4 id="链式存储结构的特点"><a href="#链式存储结构的特点" class="headerlink" title="链式存储结构的特点"></a>链式存储结构的特点</h4><ol>
<li>结点在存储器中的位置是任意的，即逻辑上相邻的数据元素在物理上不一定相邻。</li>
<li>正是因为存储位置是任意的，因此不能像顺序表中直接访问某一结点。访问时必须从头指针开始进入链表，并通过每一个结点的指针域找到下一个结点，依次扫描，所以寻找第一个节点和最后一个节点所花费的时间不等。 这种存取元素的方法叫做<strong>顺序存取法。</strong></li>
</ol>
<h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>带头结点的单链表</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210627141240817.png" alt="image-20210627141240817"></p>
<h5 id="单链表的类型定义"><a href="#单链表的类型定义" class="headerlink" title="单链表的类型定义"></a>单链表的类型定义</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token punctuation">&#123;</span>         <span class="token comment">//声明结点的类型和指向结点的指针类型     </span>
    ElemType data<span class="token punctuation">;</span>           <span class="token comment">//结点的数据域</span>
    <span class="token keyword">struct</span> <span class="token class-name">Londe</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>     <span class="token comment">//结点的指针域</span>
<span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span>          <span class="token comment">//LinkList为指向结构体Londe类型的指针类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p> <strong>定义链表：</strong><code>LinkList L;</code></p>
<p><strong>定义结点指针P：</strong><code>LNode *p;</code>  或者<code>LinkList p;</code></p>
<h5 id="单链表基本操作的实现"><a href="#单链表基本操作的实现" class="headerlink" title="单链表基本操作的实现"></a>单链表基本操作的实现</h5><p><img src="/.com//blog\数据结构\image-20210627155835316.png" alt="image-20210627155835316"></p>
<h6 id="初始化（带头结点）"><a href="#初始化（带头结点）" class="headerlink" title="初始化（带头结点）"></a>初始化（带头结点）</h6><p>算法步骤：</p>
<ul>
<li>生成的新结点作为头结点，用头指针L指向头结点。</li>
<li>将头结点的指针域置空。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InitList_L</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    L<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//根据LNode的内存大小动态分配一个空间，返回空间地址，也可以使用C++:L=new LNode;生成头结点。</span>
    L<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="判断链表是否为空"><a href="#判断链表是否为空" class="headerlink" title="判断链表是否为空"></a>判断链表是否为空</h6><p>链表中无元素，称为空链表（头指针和头结点还在）</p>
<p>算法思路：判断头结点的指针域是否为空。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListEmpty</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//判断链表是否为空，是返回2，不是返回0；L是头指针，直接指向了头结点。</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>next<span class="token punctuation">)</span>
       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="销毁单链表"><a href="#销毁单链表" class="headerlink" title="销毁单链表"></a>销毁单链表</h6><p>链表销毁后不存在（头结点不存在）</p>
<p>算法思路：从头指针开始，依次释放所有结点。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210627151613026.png" alt="image-20210627151613026"></p>
 <pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">DestroyList_L</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    LinkList p<span class="token punctuation">;</span>   <span class="token comment">//或LNode *p  定义一个指针，用来存储当前结点。</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//判断是否到达链表尾部</span>
        p<span class="token operator">=</span>L<span class="token punctuation">;</span>      <span class="token comment">//将当前结点赋值给p</span>
        L<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">//L指向下一个结点，向后移动一位</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放当前节点的空间  也可以使用delete(new 出来的结点用delete，malloc的用free)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="清空链表"><a href="#清空链表" class="headerlink" title="清空链表"></a>清空链表</h6><p>链表仍存在，但是链表中没有元素，成为空链表（头指针和头结点仍然存在）</p>
<p>算法思路：依次释放所有结点，并将头结点的指针域设置为空。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210627153059520.png" alt="image-20210627153059520"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ClearList</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    LNode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>            <span class="token comment">//定义两个辅助指针结点</span>
    p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>              <span class="token comment">//使p指向首元结点</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//判断链表是否到达尾结点</span>
        q<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>         <span class="token comment">//将当前结点的下一结点赋给q，释放当前结点后还可以找到下一结点</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//释放当前结点的空间</span>
        p<span class="token operator">=</span>q<span class="token punctuation">;</span>               <span class="token comment">//p指向当前结点的下一结点</span>
    <span class="token punctuation">&#125;</span>
    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token comment">//将头结点的指针域设置为NULL。</span>
    <span class="token keyword">return</span> OK<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="求链表的表长"><a href="#求链表的表长" class="headerlink" title="求链表的表长"></a>求链表的表长</h6><p>算法思路：从首元结点开始，依次计数所有结点。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20210627154551676.png" alt="image-20210627154551676"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListLength_L</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    LinkList p<span class="token punctuation">;</span>
    p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token comment">//p指向首元结点</span>
    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">//定义长度</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//判断是否到达链表尾部</span>
        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">//将p指向当前结点的下一结点</span>
        t<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token comment">//长度+1</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="取值——取第i个元素的内容"><a href="#取值——取第i个元素的内容" class="headerlink" title="取值——取第i个元素的内容"></a>取值——取第i个元素的内容</h6><p><strong>算法步骤：</strong></p>
<p>1.从第一个节点(L-&gt;next)顺链扫描，用指针p指向当前扫描到的结点，p初值 p=L-&gt;next。</p>
<p>2.j做计数器，累计当前扫描过的结点数，j初值为1。</p>
<p>3.当p指向扫描到的下一结点时，计数器j加1。</p>
<p>4.当j==i时，p所指的结点就是要找的第i个结点。</p>
 <pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">GetElem_L</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  
    LinkList p<span class="token punctuation">;</span>  
    p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>           <span class="token comment">//p指向首元结点</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//向后扫描，直到p指向第i个元素或者p到达链表尾部</span>
        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>       <span class="token comment">//p指向下一个结点</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//如果j==i，说明找到了第i个元素。</span>
        e<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>
    	<span class="token keyword">return</span> OK<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







]]></content>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>注解和反射</title>
    <url>/2021/04/12/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>元注解的作用就是负责注解其他注解，java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型做说明。</p>
<ul>
<li>@Target：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</li>
<li>@Retention：表示需要在什么级别保存该注解信息，用户描述注解的生命周期（source&lt;class&lt;runtime)</li>
<li>@Document：说明该注解将包含在javadoc中</li>
<li>@Inherited：说明子类可以继承父类中的该注解</li>
</ul>
<a id="more"></a>

<h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p><strong>使用@Interface自定义注解</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span><span class="token punctuation">;</span>i

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//因为age已经有了默认值，可以不用再赋值，如果只有一个参数，还可以直接省略前面你的参数名，直接写参数</span>
    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"pty"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//表示这个注解我们可以用在哪些地方，type表示类，method表示方法，field表示属性</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span>
<span class="token comment">//表示这个注解在什么地方还有效</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//注解的参数： 参数类型+参数名();</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span>  <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token comment">//还可以使用default "xxx" 设置默认值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><strong>反射是java被视为动态语言的关键，反射机制就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性，这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</strong></p>
<p>实际上，我们创建的每一个类都是对象。在加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象，这个类对象包含了完成的类的结构信息。我们可以通过这个对象看到类的结构。</p>
<p><img src="/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/20170513133210763.png" alt="img"></p>
<h4 id="获得反射对象"><a href="#获得反射对象" class="headerlink" title="获得反射对象"></a>获得反射对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>reflection</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//通过反射过去类的Class对象， 使用.forname()方法，参数为实体类的包名+类名</span>
        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mp.demo.reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>一个类只能有一个Class对象</strong>‘’</p>
<h4 id="Class类常用的方法"><a href="#Class类常用的方法" class="headerlink" title="Class类常用的方法"></a>Class类常用的方法</h4><p><img src="/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210411194627729.png" alt="image-20210411194627729"></p>
<h4 id="获得Class类对象"><a href="#获得Class类对象" class="headerlink" title="获得Class类对象"></a>获得Class类对象</h4><ul>
<li>已经知道具体的类，通过类的Class属性获取。推荐使用这种，这种最为安全可靠，程序性能高</li>
</ul>
<p><code>Class c = User.class;</code> </p>
<ul>
<li>已经有某个类的具体对象，需要获取这个类的Class对象，可以调用这个具体对象的getClass方法</li>
</ul>
<p><code>Class c = user.getClass()</code>  user是User类具体的对象</p>
<ul>
<li>知道一个类的全类名（包名+类名）,且该类在类路径下，可以通过Class类的静态方法forName()获取，但是可能会抛出异常。</li>
</ul>
<p><code>Class c1 = Class.forName(&quot;com.mp.demo.reflection.User&quot;);</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>reflection</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//通过.class 方法获取实例</span>
        <span class="token class-name">Class</span> cl <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//通过具体对象调用getClass方法创建class实例</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c2 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//使用全类名创建class对象</span>
        <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mp.demo.reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取父类的class对象</span>
        <span class="token class-name">Class</span> c4 <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="类加载器（JVM-目前先了解）"><a href="#类加载器（JVM-目前先了解）" class="headerlink" title="类加载器（JVM   目前先了解）"></a>类加载器（JVM   目前先了解）</h4><p>作用：将class文件字节码内容加载到内存中，并将这些景泰数据转换成为方法区的运行时的数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p>
<p><img src="/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210411214155426.png" alt="image-20210411214155426"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//获取系统类的加载器</span>
        <span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取系统类加载器得到父类加载器->拓展类加载器</span>
        <span class="token class-name">ClassLoader</span> parent <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取拓展类加载器的父类加载器->根加载器（c/c++)   根（引导类）加载器无法读取到</span>
        <span class="token class-name">ClassLoader</span> parent1 <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent1<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//测试当前类是哪个加载器加载的</span>
        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210411215250373.png" alt="image-20210411215250373"></p>
<h4 id="获取运行时类的完整结构（方法，属性，类名，构造器…"><a href="#获取运行时类的完整结构（方法，属性，类名，构造器…" class="headerlink" title="获取运行时类的完整结构（方法，属性，类名，构造器….)"></a>获取运行时类的完整结构（方法，属性，类名，构造器….)</h4><p>==获取属性和方法、构造器的方法有两种，一种是没加Declared的，一种是加了Declared的。前者只能获取到公共的属性、方法和构造器（即由public修饰的），后者可以获取到所有的，包括被private、protected修饰的==</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//获取user类对象</span>
        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================名字========================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取类的名字</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取类的包名+类名</span>
        <span class="token class-name">String</span> name1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取类的类名</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================属性========================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获得类的属性</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获得所有的属性</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">Field</span> name2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取指定的属性</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================方法========================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取类的方法</span>
        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取所有的方法</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> declaredMethod <span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//获取指定的方法,参数1是方法名，参数二是参数的类型，没有参数填写null</span>
        <span class="token comment">//为什么要填写参数类型，因为java存在重载</span>
        <span class="token class-name">Method</span> setName <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>setName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================构造器========================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取所有的构造器</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">:</span> declaredConstructors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
		<span class="token comment">//此处的参数的类型必须和构造器的参数类型一样。由于我使用了@AllArgsConstructor注解，因此含所有参数的构造器的参数类型的顺序与你定义属性时的顺序一样</span>
        <span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210411222729261.png" alt="image-20210411222729261"></p>
<h4 id="动态创建对象、调用方法、操作属性"><a href="#动态创建对象、调用方法、操作属性" class="headerlink" title="动态创建对象、调用方法、操作属性"></a>动态创建对象、调用方法、操作属性</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

        <span class="token comment">//直接使用newInstance()方法，调用的是无参构造器，如果没有无参构造器，会报错</span>
        <span class="token class-name">Object</span> user <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================构造器======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过构造器创建实例</span>
        <span class="token comment">//通过Class对象获取构造器</span>
        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"pty"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过构造器创建实例，参数为构造器所需的具体的值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================调用普通方法================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取普通方法</span>
        <span class="token class-name">Method</span> setName <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        setName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> <span class="token string">"彭天怡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//通过invoke()方法激活方法，第一个参数为执行的对象，第二个是方法需要的具体参数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================操作属性====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取属性</span>
        <span class="token class-name">Field</span> name <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//因为name设置为私有属性，因此不能被外界访问到，使用setAccessible(true)可以使其被访问</span>
        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span><span class="token string">"pty1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置属性</span>
        name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>构造器<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>pty<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>调用普通方法<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>彭天怡<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>操作属性<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>pty1<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>总结</strong></p>
<ul>
<li>如果实体类没有无参构造，不能直接使用newInstance()方法，会报错，应该使用构造器来创建对象</li>
<li>使用<code>构造器.newInstance()</code>创建对象时，参数为构造器具体需要的值</li>
<li>获取到方法后，通过<code>方法.invoke()</code>来激活方法，第一个参数为执行方法的对象，第二个是方法所需的参数。</li>
<li>由于私有方法和私有属性不能被直接操作，因此需要在操作前使用<code>setAccessibel(true)</code>方法，这样就可以操作private修饰的方法和属性了。（setAccessibel(true) 也称为暴力忽略）</li>
<li><code>getMathod()</code>和<code>getField()</code>不仅可以获取到本类的方法和属性，还可以获取到从父类继承的方法和属性。</li>
</ul>
<h4 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">ParameterizedType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Type</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">></span></span> map<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//获取Class对象</span>
        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token comment">//获取具体的方法</span>
        <span class="token class-name">Method</span> test1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//getGenericParameterTypes()返回一个Type对象数组，获取方法的形参类型，如果参数是泛型，将会返回完整的泛型信息</span>
        <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> genericParameterTypes <span class="token operator">=</span> test1<span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> genericParameterType <span class="token operator">:</span> genericParameterTypes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>genericParameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//判断参数类型是否属于参数化类型（只要是泛型，且不是数组和本类上定义的泛型）</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>genericParameterType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//将genericParameterTyp强转为ParameterizedType类型，并且调用getActualTypeArguments()方法获取参数化类型中的实际参数</span>
                <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> genericParameterType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> actualTypeArgument <span class="token operator">:</span> actualTypeArguments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>actualTypeArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============方法返回值的泛型============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//操作与获取上面方法的参数类型一致，不同的是获取的是返回值的参数类型 getGenericReturnType()</span>
        <span class="token class-name">Method</span> test2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Type</span> genericReturnType <span class="token operator">=</span> test2<span class="token punctuation">.</span><span class="token function">getGenericReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>genericReturnType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>genericReturnType <span class="token keyword">instanceof</span>  <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> genericReturnType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> actualTypeArgument <span class="token operator">:</span> actualTypeArguments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>actualTypeArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">,</span> com<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span><span class="token class-name">User</span><span class="token punctuation">></span></span>  <span class="token comment">//获得了完整的泛型信息</span>
<span class="token keyword">class</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span>    <span class="token comment">//获得了泛型里面具体的参数类型</span>
<span class="token keyword">class</span> com<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span><span class="token class-name">User</span>
java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>com<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span><span class="token class-name">User</span><span class="token punctuation">></span></span>
<span class="token keyword">class</span> com<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span><span class="token class-name">User</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>方法返回值的泛型<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">,</span> com<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span><span class="token class-name">User</span><span class="token punctuation">></span></span>
<span class="token keyword">class</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span>
<span class="token keyword">class</span> com<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span><span class="token class-name">User</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h4><p><strong>User类 + 自定义注解</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">"用户表"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@FieldUser</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@FieldUser</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@FieldUser</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//自定义注解</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">Table</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">FieldUser</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>测试类</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Annotation</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token comment">//获取类全部的注解</span>
        <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//获取类特定的注解,并强转为特定的类型</span>
        <span class="token class-name">Table</span> annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取属性特定的注解</span>
        <span class="token comment">//先获取属性</span>
        <span class="token class-name">Field</span> name <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取属性的注解，这里不需要进行强转，已经是FieldUser类了</span>
        <span class="token class-name">FieldUser</span> annotation1 <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">FieldUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取注解的值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation1<span class="token punctuation">.</span><span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation1<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>==只有当注解的@Retention=RUNTIME时，才能在反射中被获取到==</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title>开发中遇到的问题</title>
    <url>/2020/09/08/%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="springboot集成mybatis后，开始事务管理"><a href="#springboot集成mybatis后，开始事务管理" class="headerlink" title="springboot集成mybatis后，开始事务管理"></a>springboot集成mybatis后，开始事务管理</h3><ol>
<li>启用全局事务管理：在springboot的启动类上面，添加@**EnableTransactionManagement(proxyTargetClass = true)**注解</li>
<li>在service层中，在要添加的方法上面添加@Transactional注解，代表这个方法里面的操作是在同一个事务里面的，只要有一个事务有异常，就会回滚。</li>
</ol>
<a id="more"></a>



<h3 id="外键是用来干嘛的？"><a href="#外键是用来干嘛的？" class="headerlink" title="外键是用来干嘛的？"></a>外键是用来干嘛的？</h3><h3 id="有了外键应该怎么删除数据"><a href="#有了外键应该怎么删除数据" class="headerlink" title="有了外键应该怎么删除数据"></a>有了外键应该怎么删除数据</h3><h3 id="mybatis中parameterType中怎么传入多个不同类型的参数"><a href="#mybatis中parameterType中怎么传入多个不同类型的参数" class="headerlink" title="mybatis中parameterType中怎么传入多个不同类型的参数"></a>mybatis中parameterType中怎么传入多个不同类型的参数</h3><p>不需要使用parameterType参数</p>
<ol>
<li><p>使用下标</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">public List<span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span>String xxId<span class="token punctuation">,</span> String xxCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

　　select t.* from tableName where id = #&#123;0&#125; and name = #&#123;1&#125;  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于是多参数那么就不能使用parameterType， 改用#｛index｝是第几个就用第几个的索引，索引从0开始</p>
</li>
<li><p>注解</p>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">public List<span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span><span class="token metadata symbol">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>String id<span class="token punctuation">,</span> <span class="token metadata symbol">@Param</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>String code<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

　　select t.* from tableName where id = #&#123;id&#125; and name = #&#123;code&#125;  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于是多参数那么就不能使用parameterType， 这里用@Param来指定哪一个</p>
</li>
<li><p>Map封装</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span>HashMap map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashmap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

　　select 字段... from XXX where id=#&#123;xxId&#125; code = #&#123;xxCode&#125;  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中hashmap是mybatis自己配置好的直接使用就行。map中key的名字是那个就在#{}使用那个，map如何封装就不用了我说了吧。</p>
</li>
<li><p>List封装</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">List</span><span class="token operator">&lt;</span>XXXBean<span class="token operator">></span> <span class="token function">getXXXBeanList</span><span class="token punctuation">(</span><span class="token keyword">List</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token keyword">list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getXXXBeanList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XXBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
　　select 字段... from XXX where id in
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  
　　　　#&#123;item&#125;  
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>总结</p>
<p>传递list和map在资源消耗上肯定远大于方法一和方法二，但是有一些特殊的情形需要传递list，比如你需要传递一个id集合并批量对id进行sql操作然后再返回等等。所以都需要了解。</p>
</li>
</ol>
<h3 id="Mybatis中传递参数时，会加上单引号吗"><a href="#Mybatis中传递参数时，会加上单引号吗" class="headerlink" title="Mybatis中传递参数时，会加上单引号吗"></a>Mybatis中传递参数时，会加上单引号吗</h3><p>使用**#{参数}**传入会加上单引号，sql语句解析是会加上‘ ’ </p>
<p>比如  select * from table where name = #{name} ,传入的name为小李，那么最后打印出来的就是</p>
<p> select * from table where name = ‘小李’，就是会当成字符串来解析</p>
<p>但是${}并不会加上单引号</p>
<h3 id="在数据库中以时间分组查询数据怎么查"><a href="#在数据库中以时间分组查询数据怎么查" class="headerlink" title="在数据库中以时间分组查询数据怎么查"></a>在数据库中以时间分组查询数据怎么查</h3><p><code>select 时间 from 表名 group by 时间</code></p>
<h3 id="在数据库中按照准确的时间应该怎么查"><a href="#在数据库中按照准确的时间应该怎么查" class="headerlink" title="在数据库中按照准确的时间应该怎么查"></a>在数据库中按照准确的时间应该怎么查</h3><p>使用DATE_FORMAT()函数将date类型的转换为字符串</p>
<p>DATE_FORMAT(date,format)用法：将时间date转换为format格式的字符串</p>
<p>format是自己定义的格式，如<code>DATE_FORMAT(date,&#39;%Y-%m-%d&#39;)</code>，就是将date转换为格式为年-月-日的字符串</p>
<p><code>select * from 表名 where DATE_FORMAT(date,&#39;%Y-%m-%d&#39;)=xxx</code></p>
<h3 id="pgeHelper插件的用法"><a href="#pgeHelper插件的用法" class="headerlink" title="pgeHelper插件的用法"></a>pgeHelper插件的用法</h3><p>pageHelper插件是用来解决分页的问题</p>
<p>使用方法</p>
<ol>
<li><p>导入依赖：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 特别注意版本问题 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在controller中直接使用</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/articles"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"得到所有的文章信息，用于在首页进行博客展示,需要传入当前pageNum,不传默认为1,每页显示3条信息"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResResult</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">int</span> pageNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
    <span class="token comment">//传入pageNum的值，defaulValue表示默认值</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置pageNum和pageSize的值</span>
       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> articles <span class="token operator">=</span> articleService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>articles<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">//将查询的结果放入PageInfo类中，在里面会有查询到的接货以及分页的信息（比如总页数，总记录数等等）</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResResult</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResResult</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>PageInfo中的一些属性</p>
<pre class="line-numbers language-none"><code class="language-none">private int pageNum;   &#x2F;&#x2F;当前页码
private int pageSize;   &#x2F;&#x2F;每页显示多少条信息
private int size;      &#x2F;&#x2F;当前页有多少条信息
private int startRow;  &#x2F;&#x2F;表示当前页面第一个元素在数据库中的行号
private int endRow;    &#x2F;&#x2F;表示当前页面的最后一个元素在数据库中的行号  startRow和endRow不常用，
private long total;    &#x2F;&#x2F;表示总的记录数
private int pages;     &#x2F;&#x2F;表示总的页数
private List&lt;T&gt; list;  &#x2F;&#x2F;结果集
private int prePage;   &#x2F;&#x2F;前一页
private int nextPage;  &#x2F;&#x2F;后一页
private boolean isFirstPage;  &#x2F;&#x2F;当前页面是第一页吗
private boolean isLastPage;   &#x2F;&#x2F;当前页面是最后一页吗
private boolean hasPreviousPage;  &#x2F;&#x2F;当前页面是否有上一页
private boolean hasNextPage;   &#x2F;&#x2F;当前页面是否有下一页
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h3 id="MapperScan注解的使用"><a href="#MapperScan注解的使用" class="headerlink" title="@MapperScan注解的使用"></a>@MapperScan注解的使用</h3><p>在学习了spring之后，不在需要给dao层建立实体类，只需要写出dao的接口就行了，但是需要我们使用@Mapper注解，在dao接口类上添加@Mapper注解，在编译之后就会生成接口实现类，不在需要我们人为的去写一个实现类。</p>
<p>但是在接口类很多的情况下，就需要我们给很多接口类都添加@Mapper注解，比较麻烦。所以就出现了@MapperScan</p>
<p><strong>@MapperScan注解</strong>用于指定dao接口类所在的包，该包下的每一个接口在编译之后都会生成一个实现类，不用再在每一个接口类上添加@Mapper注解。</p>
<p><strong>@MapperScan注解在springboot启动类上添加</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.hutdsj.blog.mapper"</span><span class="token punctuation">)</span>   <span class="token comment">//指定接口类所在的包，com.hutdsj.blog.mapper下的所有接口都会在编译后生成实现类@SpringBootApplication  //指定这是一个springboot程序public class BlogApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(BlogApplication.class, args);    &#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>@MapperScan注解指定多个包</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"com.kfit.demo"</span><span class="token punctuation">,</span><span class="token string">"com.kfit.user"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//使用逗号隔开</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="使用-Autowried-注解后注入为null"><a href="#使用-Autowried-注解后注入为null" class="headerlink" title="使用@Autowried 注解后注入为null"></a>使用@Autowried 注解后注入为null</h3><p>当你的注入对象已经注册到容器中（即已经添加了@Compoent，@Controller….等注解），但是仍然注入为null时，需要检查获取对象的方式是否为new,new出来的对象使用的是有参，无参构造，不走spring的IOC容器，直接创建出来的。而@Autowried注解是根据type自动配置，要求对象是在IOC容器里面的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/verifycode"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getVerify</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置相应类型,告诉浏览器输出的内容为图片        response.setHeader("Pragma", "No-cache");//设置响应头信息，告诉浏览器不要缓存此内容        response.setHeader("Cache-Control", "no-cache");        response.setDateHeader("Expire", 0);        VerifyCode verifyCode = new VerifyCode();        verifyCode.getRandcode(request, response);//输出验证码图片方法    &#125; catch (Exception e) &#123;       e.printStackTrace();    &#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VerifyCode</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">RedisUtil</span> redisUtil<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getRandcode</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>RANDOMCODEKEY<span class="token punctuation">,</span>randomString<span class="token punctuation">)</span><span class="token punctuation">;</span>      	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如上面这两段代码，因为verifyCode这个对象是被new出来的，即使在VerifyCode这个类中使用 <code>@Autowired</code>标注了</p>
<p><code>RedisUtil</code>,但是仍然获取不到RedisUtil的值，即没有创建出这个对象。</p>
<p>解决方法是在第一段代码中，verifyCode这个对象不要是new出来的，使用 <code>@Autowired</code>标注实体类  </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutowiredVerifyCode</span> verifyCode<span class="token punctuation">;</span>	<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>简单的来说：**@Autowired注入Spring Bean，则当前类必须也是Spring Bean才能调用它，不能用new xxx()来获得对象，这种方式获得的对象无法调用@Autowired注入的Bean。**</p>
<h3 id="使用-ConfigurationProperties注解，下面有横线"><a href="#使用-ConfigurationProperties注解，下面有横线" class="headerlink" title="使用@ConfigurationProperties注解，下面有横线"></a>使用@ConfigurationProperties注解，下面有横线</h3><p>使用<code>@ConfigurationProperties</code>注解，注解下面有横线，需要引入下面这个依赖。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但是好像就算有横线也没有问题，可以读取到配置文件。</p>
<h3 id="使用-ConfigurationProperties注解，读取不到配置文件"><a href="#使用-ConfigurationProperties注解，读取不到配置文件" class="headerlink" title="使用@ConfigurationProperties注解，读取不到配置文件"></a>使用@ConfigurationProperties注解，读取不到配置文件</h3><p>使用这个注解给实体类注入信息，需要配置文件中的属性名和实体类中的属性名一致，同时实体类中的属性还需要有set,get方法。</p>
<h3 id="在拦截器中使用-AutoWired注解注入为null"><a href="#在拦截器中使用-AutoWired注解注入为null" class="headerlink" title="在拦截器中使用@AutoWired注解注入为null"></a>在拦截器中使用@AutoWired注解注入为null</h3><p>因为拦截器的加载是在<strong>springcontext</strong>之前，所以在拦截器中注入为null。</p>
<p>因此我们需要在配置类中使用@Bean注解提前去加载</p>
<p>修改前的配置类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configurationpublic</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//注册拦截器    @Override    public void addInterceptors(InterceptorRegistry registry) &#123;        //添加具体的拦截器，同时设置拦截的地址。        //JwtInterceptor为我们拦截器实体类        registry.addInterceptor(new JwtInterceptor()).addPathPatterns("/user/h");    &#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改之后：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configurationpublic</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>	<span class="token comment">//使用@Bean注解提前加载JwtInterceptor这个类    @Bean    public JwtInterceptor jwtInterceptor()&#123;        return new JwtInterceptor();    &#125;    //注册拦截器    @Override    public void addInterceptors(InterceptorRegistry registry) &#123;        //添加具体的拦截器，同时设置拦截的地址。        registry.addInterceptor(jwtInterceptor()).addPathPatterns("/user/h");    &#125;	//注意：我们这里使用@Bean将jwtInterceptor 注册到IOC容器，然后下面addInterceptor中的参数不再是new JwtInterceptor(),而是调用上面的jwtInterceptor()方法&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>拦截器</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>	    <span class="token comment">//自动注入jwtutil    @Autowired    JwtUtil jwtUtil;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;        HashMap&lt;String, Object> map = new HashMap&lt;>();        String token = request.getHeader("token");        try &#123;            Claims claims = jwtUtil.parseJwt(token);            return true;        &#125; catch (Exception e) &#123;            map.put("code",403);            map.put("msg","token无效");        &#125;        String json= new ObjectMapper().writeValueAsString(map);        response.getWriter().write(json);        return false;    &#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="Disconnected-from-the-target-VM-address-‘127-0-0-1-3231’-transport-‘socket’"><a href="#Disconnected-from-the-target-VM-address-‘127-0-0-1-3231’-transport-‘socket’" class="headerlink" title="Disconnected from the target VM, address: ‘127.0.0.1:3231’, transport: ‘socket’"></a>Disconnected from the target VM, address: ‘127.0.0.1:3231’, transport: ‘socket’</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201104175754449.png" alt="image-20201104175754449"></p>
<p>在项目中报了这个错，在网上百度了很久，都不是我错误的原因。</p>
<p>我找了很久，发现是将一个类两次注册到IOC容器中的原因。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201104175954095.png" alt="image-20201104175954095"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201104180110624.png" alt="image-20201104180110624"></p>
<p>比如说这里，我已经使用<code>@Component</code>注解将<code>JwtInterceptor</code>注册到IOC容器中，但是我在<code>WebConfig</code>中又使用<code>@Bean</code>注解将<code>JwtInterceptor</code>注册到IOC容器中，然后就报了这样的错误。</p>
<h3 id="使用json将地址传给前端，发现地址处有两根斜杠"><a href="#使用json将地址传给前端，发现地址处有两根斜杠" class="headerlink" title="使用json将地址传给前端，发现地址处有两根斜杠"></a>使用json将地址传给前端，发现地址处有两根斜杠</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201109193629497.png" alt="image-20201109193629497"></p>
<p>这个情况是正常的，因为后面的地址是字符串，而在字符串中，反斜杠需要使用转义字符，也就是两个反斜杠来表示一个反斜杠，因此，这里的两个反斜杠只是标识这是一个字符串中的转移字符，仍然是一个反斜杠。</p>
<h3 id="从redis中获取数据，得到了Object类型，怎么将其转为java实体类"><a href="#从redis中获取数据，得到了Object类型，怎么将其转为java实体类" class="headerlink" title="从redis中获取数据，得到了Object类型，怎么将其转为java实体类"></a>从redis中获取数据，得到了Object类型，怎么将其转为java实体类</h3><p>使用fastjson来进行转换。</p>
<p>从redis中取出数据，得到了一个List<Object>xxx,想将它转为对应的java实体类。</Object></p>
<ul>
<li>引入依赖</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>转换</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从redis中获取数据List&lt;Object> topics = redisUtil.lGet("topics", 0, -1);//得到是是一个json字符串数组，将其转为topic类List&lt;Topic> topics1 = JSONObject.parseArray(JSON.toJSONString(topics),Topic.class);for (Topic topic : topics1) &#123;    System.out.println(topic);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="json返回到前端的日期格式有问题"><a href="#json返回到前端的日期格式有问题" class="headerlink" title="json返回到前端的日期格式有问题"></a>json返回到前端的日期格式有问题</h3><p>​    如果没有进行专门的设置，直接把日期返回给前端，那么日期的格式是有问题的</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201109212105358.png" alt="image-20201109212105358"></p>
<p>比如这个，日期看起来很乱，不是我们需要的格式（ps：之前格式更乱，和设置的时间相差8个小时）</p>
<p>因此我们需要专门设置一下日期的格式，在对应的实体类里面，在日期属性上面使用<code>@JsonFormat</code>注解，写上日期格式以及时区。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201109212428691.png" alt="image-20201109212428691"></p>
<h3 id="保存到数据库的时间和设置的时间相差8个小时"><a href="#保存到数据库的时间和设置的时间相差8个小时" class="headerlink" title="保存到数据库的时间和设置的时间相差8个小时"></a>保存到数据库的时间和设置的时间相差8个小时</h3><p>在此之前，我写jdbc的url都是这样写的<code>url:jdbc:mysql://localhost:3306/xxx?serverTimezone=utc</code></p>
<p>我们将时区设置为utc（utc不是时区，这样说只是为了理解），但是utc是协调世界时，中国在东八区，和这个时间相比快了8个小时，因此我们需要将时区设置为中国的时区</p>
<p>所以以后我们的url可以这么写: <code>url: jdbc:mysql://localhost:3306/hutbbs?serverTimezone=Asia/Shanghai</code></p>
<h3 id="数据库的字段名和关键字发生冲突"><a href="#数据库的字段名和关键字发生冲突" class="headerlink" title="数据库的字段名和关键字发生冲突"></a>数据库的字段名和关键字发生冲突</h3><p>写项目的时候报了这个错误</p>
<p><img src="/.com//myblog\public\images\多线程\image-20210415221808053.png" alt="image-20210415221808053"></p>
<p><strong>ou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near  xxxx</strong> 这个错误是数据库中的字段名和关键字起了冲突。碰到这种情况，我们一般有以下几种解决方法。</p>
<ul>
<li>第一种是修改字段名，将字段名修改为和关键字不冲突的名字。可以将sql语句复制到navicat中， 关键字会用蓝色标记， rank 没有用蓝色标记，但是好像也不能用，用了也会出错误，我就是被rank耽误了好久时间。</li>
<li>第二种是不修改字段名，在sql语句中，用一些特殊的符号将起冲突的字段名给括起来。在sqlserver中，使用方括号将字段名括起来,如：**[name]**。在mysql中，使用反单引号将字段名括起来（tab上面的那个键）如：</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">`name`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="与前端对接数据时，接收到的数据为null"><a href="#与前端对接数据时，接收到的数据为null" class="headerlink" title="与前端对接数据时，接收到的数据为null"></a>与前端对接数据时，接收到的数据为null</h3><p>首先看前端传过来的数据是否为json格式，如果是json格式的话，就需要使用<code>@RequestBody</code>这个注解。</p>
<p>其次需要知道前端是否将数据封装成一个对象传递过来，如果封装为一个对象，那么我们这边也需要使用一个对象来接收数据。比如 前端传过来了用户名和密码，但是他封装为一个对象，所以我们在方法的参数上就需要写<code>User user</code>,而不能使用<code>String username,String password</code>来接收数据。</p>
<h3 id="将实体类存放到一些数据结构中，当再次取出来的时候，不能转成原来的实体类"><a href="#将实体类存放到一些数据结构中，当再次取出来的时候，不能转成原来的实体类" class="headerlink" title="将实体类存放到一些数据结构中，当再次取出来的时候，不能转成原来的实体类"></a>将实体类存放到一些数据结构中，当再次取出来的时候，不能转成原来的实体类</h3><p>上面<strong>从redis中获取数据，得到的Object类型</strong>问题其实和这个问题是一样的，只不过上面只是讲解的是redis中的。</p>
<p>取出来的数据不能转成原来的类型，我们需要借助json，先将原来的数据转为json格式，然后在使用json将数据封装到具体的实体类。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入fastjson依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.56<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//类型转换Object user = claims.get("user");//将map中的类型转为User类//先将user转为json字符串，然后使用parseObject 将字符串转为User.classUser user1 = JSON.parseObject(JSON.toJSONString(user), User.class);o</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="sql语句中，用查询结果作为like模糊查询的参数"><a href="#sql语句中，用查询结果作为like模糊查询的参数" class="headerlink" title="sql语句中，用查询结果作为like模糊查询的参数"></a>sql语句中，用查询结果作为like模糊查询的参数</h3><p>需要拼接字符串，一开始我是使用 +  来进行拼接，但是没有拼接成功，然后使用concat函数，但是由于未用单引号将通配符括起来，所以还是错了，应该用单引号将通配符括起来</p>
<h3 id="从前端一次接受多个参数应该怎么做"><a href="#从前端一次接受多个参数应该怎么做" class="headerlink" title="从前端一次接受多个参数应该怎么做"></a>从前端一次接受多个参数应该怎么做</h3><p>有时候前端可能一次性将填写的多个同一类型的数据提交给后端，这个时候我们需要使用list接收数据，在使用list接收数据的时候，还需要使用<code>@RequestBody</code>这个注解。</p>
<p>将多个对象同时传入数据库，可以使用foreach来遍历。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into ApplyData (id, datatype, Idcard,      gettime, `name`, `rank`,      `group`, `code`, checkstatus,      checktime, checkpeople, IntoTime      )      values    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       (#&#123;item.id,jdbcType=INTEGER&#125;, #&#123;item.datatype,jdbcType=INTEGER&#125;, #&#123;item.idcard,jdbcType=NVARCHAR&#125;,      #&#123;item.gettime,jdbcType=NVARCHAR&#125;, #&#123;item.name,jdbcType=VARCHAR&#125;, #&#123;item.rank,jdbcType=NVARCHAR&#125;,      #&#123;item.group,jdbcType=VARCHAR&#125;, #&#123;item.code,jdbcType=NVARCHAR&#125;, #&#123;item.checkstatus,jdbcType=NVARCHAR&#125;,      #&#123;item.checktime,jdbcType=TIMESTAMP&#125;, #&#123;item.checkpeople,jdbcType=NVARCHAR&#125;, #&#123;item.intotime,jdbcType=TIMESTAMP&#125;      )    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中collection是容器的类型，item是容器中的每一个对象的名字，separator是分隔符。</p>
<p><strong>注意只要将数据放在foreach中即可，我在增加的时候，不小心将values这个字段一同放在foreach中，结果插入第二条数据死活插入不进去，看了别人的foreach的用法才知道values应该放在外面</strong></p>
<h3 id="使用foreach查询数据"><a href="#使用foreach查询数据" class="headerlink" title="使用foreach查询数据"></a>使用foreach查询数据</h3><p>碰到一个需求，传过来一个string集合，然后根据string集合中的每一个元素去数据库查询相对应的数据。一看到参数是个集合，我就想到应该使用foreach来进行遍历，的确也是使用这个。</p>
<p>我以为查询和上面的插入是一样的，因此直接套用了上面插入的语法，但是发现死活都插不进去。后面打印了sql语句才知道问题。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getDescribe<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optioncode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select CodeNo,`Describe`,typename,count from OptionCode        where  CodeNo =        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  #&#123;item&#125;         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这是最初的写法，可以发现foreach和上面的插入是一样的。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>A01<span class="token punctuation">,</span> A02<span class="token punctuation">,</span> A03<span class="token punctuation">]</span>Creating a new SqlSessionSqlSession <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span><span class="token keyword">session</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>DefaultSqlSession<span class="token variable">@3eed9c44</span><span class="token punctuation">]</span> was <span class="token operator">not</span> registered <span class="token keyword">for</span> synchronization because synchronization <span class="token operator">is</span> <span class="token operator">not</span> activeJDBC Connection <span class="token punctuation">[</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ConnectionProxyImpl<span class="token variable">@418882cf</span><span class="token punctuation">]</span> will <span class="token operator">not</span> be managed <span class="token keyword">by</span> Spring<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span>  Preparing: <span class="token keyword">select</span> CodeNo<span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token keyword">Describe</span><span class="token punctuation">`</span><span class="token punctuation">,</span>typename<span class="token punctuation">,</span>count <span class="token keyword">from</span> OptionCode <span class="token keyword">where</span> CodeNo <span class="token operator">=</span> ? <span class="token punctuation">,</span> ? <span class="token punctuation">,</span> ?<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> Parameters: A01<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> A02<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> A03<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这是打印出来的sql语句，<strong>select CodeNo,<code>Describe</code>,typename,count from OptionCode where CodeNo = ? , ? , ?</strong>  我们发现语句是 xxx= xx,xx,xx   很明显，等号并没有这个作用，等号只能附一个值，也就是说只能是xxx=xx这种，所以我之前只传一个值的时候是可以查询到数据的。当后面的具有多个参数的时候，我们就想到应该使用in这个关键字，in后面可以是一个集合。</p>
<p>但是in的格式是 xxx in (xx,xx,xx),所以我们就需要给传过来的参数添加一对括号，因此，需要在foreach中进行修改。修改的代码如下</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">select CodeNo,`Describe`,typename,count from OptionCode        where  CodeNo in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  #&#123;item&#125;         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这是打印出来的sql语句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>A01<span class="token punctuation">,</span> A02<span class="token punctuation">,</span> A03<span class="token punctuation">]</span>Creating a new SqlSessionSqlSession <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span><span class="token keyword">session</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>DefaultSqlSession<span class="token variable">@6bd28c3b</span><span class="token punctuation">]</span> was <span class="token operator">not</span> registered <span class="token keyword">for</span> synchronization because synchronization <span class="token operator">is</span> <span class="token operator">not</span> activeJDBC Connection <span class="token punctuation">[</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ConnectionProxyImpl<span class="token variable">@6d0e99e0</span><span class="token punctuation">]</span> will <span class="token operator">not</span> be managed <span class="token keyword">by</span> Spring<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span>  Preparing: <span class="token keyword">select</span> CodeNo<span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token keyword">Describe</span><span class="token punctuation">`</span><span class="token punctuation">,</span>typename<span class="token punctuation">,</span>count <span class="token keyword">from</span> OptionCode <span class="token keyword">where</span> CodeNo <span class="token operator">in</span> <span class="token punctuation">(</span> ? <span class="token punctuation">,</span> ? <span class="token punctuation">,</span> ? <span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> Parameters: A01<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> A02<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span> A03<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以很明显的看见这里已经变成了in ,<strong>select CodeNo,<code>Describe</code>,typename,count from OptionCode where CodeNo in ( ? , ? , ? )</strong>  这样查询是可以查询到的。</p>
<h3 id="打印sql语句"><a href="#打印sql语句" class="headerlink" title="打印sql语句"></a>打印sql语句</h3><p>在application.yml中修改配置文件</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.hut.jsj.pojo<span class="token punctuation">,</span>;com.hut.jsj.vo  mapper<span class="token punctuation">-</span><span class="token key atrule">locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*  <span class="token comment">#加入下面这段代码  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>





<h3 id="如何在PostMan中传递Date类型的数据"><a href="#如何在PostMan中传递Date类型的数据" class="headerlink" title="如何在PostMan中传递Date类型的数据"></a>如何在PostMan中传递Date类型的数据</h3><p>今天在做数据库课设的时候，在学生表中有一个字段是生日，建表的同学将该字段的类型设置为Date型（如果是我自己写的话，我是不会将这个设置为Date型的，设置成字符串型会更加方便）。在使用postman测试接口的时候，我发现直接输入<code>2000-9-17</code>这种数据是加不进去的，会报下面这个错误。</p>
<p>(图挂了)</p>
<p>大概的意思 就是String型的数据不能转换为Date型的数据。</p>
<p><strong>那么应该如何传递参数呢？</strong></p>
<p>我百度了一下，有的说需要设置全局变量等等，我觉得很麻烦，后面发现只需要改变一下传递的参数的格式即可。</p>
<p><code>2000/09/17</code>即可，也就是用<code>/</code>连接年月日。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>mysql</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>spring</title>
    <url>/2020/09/17/spring/</url>
    <content><![CDATA[<h2 id="1-Spring"><a href="#1-Spring" class="headerlink" title="1.Spring"></a>1.Spring</h2><h3 id="1-1优点"><a href="#1-1优点" class="headerlink" title="1.1优点"></a>1.1优点</h3><ul>
<li>Spring是一个开源的免费的框架(容器)</li>
<li>Spring是一个轻量级的、非入侵式的框架</li>
<li>控制反转（IOC),面向切面编程（AOP）</li>
<li>支持事务的处理，对框架的整合的支持</li>
</ul>
<a id="more"></a>

<p>**总结：Spring是一个轻量级的控制反转（IOC) 和面向切面编程（AOP）的框架 **</p>
<h3 id="1-2组成"><a href="#1-2组成" class="headerlink" title="1.2组成"></a>1.2组成</h3><p><img src="/images/blog/image-20200915210338148.png" alt="image-20200915210338148"></p>
<h3 id="1-3拓展"><a href="#1-3拓展" class="headerlink" title="1.3拓展"></a>1.3拓展</h3><ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架</li>
<li>基于springboot可以快速的开发单个微服务</li>
<li>约定大于配置</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>Spring Cloud是基于springboot实现的</li>
</ul>
</li>
</ul>
<p>学习springboot的前提是需要完全掌握Spring及SpringMVC。承上启下</p>
<h2 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2.IOC理论推导"></a>2.IOC理论推导</h2><p>原来的步骤：</p>
<ol>
<li>UserDao的接口</li>
<li>UserDaoImpl实现类</li>
<li>UserService 业务接口</li>
<li>UserServiceImpl业务实现类</li>
</ol>
<p>在我们之前的业务中，用户的需求可能会影响到我们原来的代码，我们需要根据用户的需求去修改源代码。如果程序代码量十分大，修改一次的成本代价很昂贵。</p>
<p>IOC的思想，从本质上解决了这个问题，我们不用再去管理对象的创建。系统的耦合性大大降低，可以更加专注于业务的实现。</p>
<h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p>控制反转是一种设计思想，DI(依赖注入)是实现IOC的一种方法。在没有IOC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方。个人认为所谓的控制反转就是：获得对象的方式反转了。</p>
<p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从ioc容器取出需要的对象。</p>
<p>采用XML配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者结合在一起，Bean的定义信息直接以注解的形式定义在实现类中，从而达到零配置的目的。</p>
<p><strong>控制反转是一种通过描述(xml或注解)并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入(DI)</strong></p>
<h2 id="3-初识Spring"><a href="#3-初识Spring" class="headerlink" title="3.初识Spring"></a>3.初识Spring</h2><h3 id="3-1-配置ApplicationContext-xml"><a href="#3-1-配置ApplicationContext-xml" class="headerlink" title="3.1 配置ApplicationContext.xml"></a>3.1 配置ApplicationContext.xml</h3><p>applicationContext.xml用来配置对象信息。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--applicationContext.xml的约束--></span>
<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    
        <span class="token comment">&lt;!--使用spring来创建对象，在spring中这些都被称为Bean
		类型 变量名 = new 类型();
		Hello hello = new Hello();

		id = 变量名
		class = new 的对象
		property 相当于对象中的属性设置一个值
	--></span>
    
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
       <span class="token comment">&lt;!--ref引用spring中创建的对象
			value是具体的值
			给name为xxx的属性赋值
			--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">publlic <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
    <span class="token comment">//获取ApplicationContext,拿到spring容器。</span>
     <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationcontext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//用来创建具体的对象，xxx为配置的bean的id或者别名。</span>
     <span class="token class-name">Obeject</span> object<span class="token operator">=</span> context <span class="token function">getBean</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可以进行强转</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="4-IOC创建对象的方式"><a href="#4-IOC创建对象的方式" class="headerlink" title="4.IOC创建对象的方式"></a>4.IOC创建对象的方式</h2><ol>
<li><p>使用无参构造创建对象，默认！</p>
</li>
<li><p>假如我们要用有参构造创建对象（需要给bean中写一个有参构造）</p>
<ol>
<li>下标赋值</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神说java1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神说java2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--给User类的第一个属性赋值为狂神说java1，给第二个属性赋值为狂神说java2--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>类型</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第二种方式：通过类型创建，不建议使用，且type必须填类型的全限定类名，不能像mybatis写别名--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>参数名</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第三种：直接通过参数名构造--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<p>总结：在spring加载配置文件的时候，配置文件中所配置的bean对象就已经被实例化了（即调用了相关的构造方法，bean被加载进了容器内），<code>getBean</code>再从容器中找到具体的bean对象。</p>
<h2 id="5-Spring配置"><a href="#5-Spring配置" class="headerlink" title="5.Spring配置"></a>5.Spring配置</h2><h3 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h3><p><code>&lt;alias name=&quot;&quot; alias=&quot;&quot;&gt;</code></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--设置别名，给bean中的id设置别名，设置别名后，使用getBean时，也可以通过别名来获取对象--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="5-2bean的配置"><a href="#5-2bean的配置" class="headerlink" title="5.2bean的配置"></a>5.2bean的配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--
       id：bean的唯一标识符，也就是相当于我们以前学的变量名，用于在getBean是找到对应的对象
       class：需要创建的bean对象的全限定类名：报名+类型
       name：也就是别名，而且name可以同时取多个别名,设置的别名都可以在getBean获取到对象       
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2,u1,u3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h3><p>这个import,一般用于团队开发，可以将多个配置文件合并为一个。</p>
<p>假设，现在项目中有多个人开发，这三个人负责不同的类的开发，不同的类需要注册不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！</p>
<ul>
<li>张三</li>
<li>李四</li>
<li>王五</li>
<li>applicationContext.xml</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans1.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans3.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用的时候，直接使用总的配置就可以了。</p>
<h2 id="6-依赖注入"><a href="#6-依赖注入" class="headerlink" title="6.依赖注入"></a>6.依赖注入</h2><h3 id="6-1-构造注入"><a href="#6-1-构造注入" class="headerlink" title="6.1 构造注入"></a>6.1 构造注入</h3><p>就是前面的有参构造</p>
<h3 id="6-2-Set注入【重点】"><a href="#6-2-Set注入【重点】" class="headerlink" title="6.2 Set注入【重点】"></a>6.2 Set注入【重点】</h3><ul>
<li>依赖注入：Set注入<ul>
<li>依赖：Bean对象的创建依赖于容器</li>
<li>注入：bean对象中的所有属性，由容器来注入！</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Adress<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adress<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>湘西州<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
     <span class="token comment">&lt;!--第一种，普通值注入，value--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
     <span class="token comment">&lt;!--第二种，Bean注入，ref--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adress<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
     <span class="token comment">&lt;!--第三种，数组注入，array--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>红楼梦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>三国演义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>水浒传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token comment">&lt;!--第四种，list注入，list--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbys<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>网球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token comment">&lt;!--第五种，map注入，map--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>身份证<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>122333<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1111111<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     <span class="token comment">&lt;!--第六种，set注入，set--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>LOL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>COC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>DOD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
     
     <span class="token comment">&lt;!--设置为null--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
   
     <span class="token comment">&lt;!--
     properties
     键值对 key:value  value写在两个尖括号之间
     --></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>
             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="6-3拓展注入"><a href="#6-3拓展注入" class="headerlink" title="6. 3拓展注入"></a>6. 3拓展注入</h3><p>我们可以使用p命名空间和c命名空间进行注入</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!--p命名空间注入，可以直接注入属性的值，相当于property--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

 <span class="token comment">&lt;!--c命名空间注入，通过构造器，相当于construct-args，前提是bean必须要有有参构造--></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意点</strong>：P命名和C命名不能直接使用，需要导入xml约束</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"
xmlns:c="http://www.springframework.org/schema/c"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h3 id="6-4-bean的作用域"><a href="#6-4-bean的作用域" class="headerlink" title="6.4 bean的作用域"></a>6.4 bean的作用域</h3><ol>
<li>单例模式（Spring默认机制）</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>设置 为singleton后，在getBean时生成一个对象，接下来如果再次使用getBean生成同一个id的对象，则两个对象是一样的，即一个bean只生成一个对象。</p>
<ol start="2">
<li>原型模式：每次从容器中get的时候，都会产生一个新对象！</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>其余的request、session、application这些只能在web开发中使用。</li>
</ol>
<h2 id="7-Bean的自动装配"><a href="#7-Bean的自动装配" class="headerlink" title="7.Bean的自动装配"></a>7.Bean的自动装配</h2><ul>
<li>自动装配是Spring满足bean依赖的一种方式。</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性</li>
</ul>
<p>在Spring中有三种装配方式</p>
<ol>
<li>在xml中显示的配置</li>
<li>在java中显示配置</li>
<li>隐式的自动装配bean  【重要】</li>
</ol>
<p>这是我们之前学过的配置方式</p>
<p>cat和dog为两个对象，需要使用ref来引用。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-1-ByName自动装配"><a href="#7-1-ByName自动装配" class="headerlink" title="7.1 ByName自动装配"></a>7.1 ByName自动装配</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  
<span class="token comment">&lt;!--
ByName: 会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid！
不需要在自己手动的配置引用的对象。
但是如果beanid与自己对象set方法后面的值不同，就会报空指针异常。
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-2-ByType"><a href="#7-2-ByType" class="headerlink" title="7.2 ByType"></a>7.2 ByType</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token comment">&lt;!--
ByType: 会自动在容器上下文中查找，和自己对象属性类型相同的bean！
不需要在自己手动的配置引用的对象。
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>小结：</p>
<ul>
<li>byname的时候，需要保证所有bean的id唯一，并且这个beanid需要和自动注入的属性的set方法的值相同。</li>
<li>bytype的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</li>
</ul>
<h3 id="7-3使用注解实现自动装配"><a href="#7-3使用注解实现自动装配" class="headerlink" title="7.3使用注解实现自动装配"></a>7.3使用注解实现自动装配</h3><p>要使用注解须知：</p>
<ol>
<li>导入约束,context约束</li>
<li><strong>配置注解的支持：<a href="context:annotation-config/">context:annotation-config/</a></strong></li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	
    <span class="token comment">&lt;!--配置注解的支持--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>@Autowried</code></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>


        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.druid.bean.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>           <span class="token comment">//使用@Autowried注解，不需要在配置文件中手动或者Byname,Bytype的注入属性</span>
    						    <span class="token comment">//在对应的属性上面加上这个注解，可以自动注入。</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>直接在属性上使用！也可以在set方法上使用！</p>
<p>使用Autowried我们可以不用再写set方法，前提是你这个自动装配的属性在IOC容器中存在。根据Bytype查找。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//如果显示定义了Autowried的required属性为false，说明这个对象可以为null，否则不允许为null</span>
    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>科普：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@Nullable   字段标记这个注解，说明这个字段可以为null；</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cat <span class="token operator">=</span> cat<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>由于Autowried注解是根据type查找的，当配置文件中同时配置了多个类型相同的bean,那么使用Autowried注解就不能够自动注入了。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>例如这个配置文件，cat1和cat2的类型都是一样的，Autowried是根据type查找，出现了相同类型，就不知道要注入哪一个了，这个时候我们就需要使用<code>@Qualifier</code>注解和<code>@Autowried</code>注解</p>
<p>先使用Autowried定位到需要注入的属性的类型<code>@Qualifier(value=&quot;xxx&quot;)</code>会在配置文件中找到id值为xxx的bean对象，再将它注入进去。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"cat2"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>
    <span class="token keyword">private</span>  <span class="token class-name">String</span>  name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是好像最新版的idea就算没用使用Qualifier注解也不会报错。</p>
<p><strong>@Resource注解</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"cat2"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Cat</span> cat
<span class="token comment">//会在配置文件中找id为cat2的bean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>小结：</p>
<p> @Resource和@Autowried的区别</p>
<ul>
<li>都是用来自动装配的，都可以放在属性字段上。</li>
<li>@Autowried 通过ByType的方式实现，通过配合@Qualifier注解，先ByType查找，在Byname查找。</li>
<li>@Resource默认通过byname的方式实现，如果找不到名字，就通过bytype实现。</li>
</ul>
<h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证aop的包导入了。</p>
<p>使用注解需要导入context约束，增加注解的支持！</p>
<ol>
<li>bean</li>
<li>属性如何注入</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token annotation punctuation">@Component</span>   <span class="token comment">//将类注册到Spring容器内，getBean时的参数是小写的类名。</span>
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//给name属性值注入值，相当于 &lt;property name="name" value="pty"></span>
      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"pty"</span><span class="token punctuation">)</span>
      <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>衍生的注解</li>
</ol>
<p>@Component有几个衍生的注解，我们在web开发中，会按照mvc三层架构分层</p>
<ul>
<li>dao 【@Repository】</li>
<li>service 【@Service】</li>
<li>controller 【@Controller】</li>
</ul>
<p>这四个注解的功能都是一样的，都是代表将某个类注入到Spring容器中，装配Bean。</p>
<ol start="4">
<li>自动装配</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">- @Autowried ：自动装配通过类型
	如果Autowried不能唯一自动装配上属性，则需要通过@Qualifier(value="xxx")
- @Nullable  字段标记这个注解，说明这个字段可以为null
- @Resource  自动装配通过名字，类型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>作用域</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>              <span class="token comment">//将User类注入到Spring容器内</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span>    <span class="token comment">//设置bean的作用域</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"pty"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li><p>小结</p>
<p>xml与注解：</p>
<ul>
<li>xml更加万能，适用于任何场合，维护简单方便</li>
<li>注解，不是自己类是用不了，维护相对复杂。</li>
</ul>
<p>xml和注解最佳实践：</p>
<ul>
<li>xml用来管理bean</li>
<li>注解只负责完成属性的注入</li>
<li>我们在使用的过程中只需要注意一个问题：必须要注解生效。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>
<span class="token comment">&lt;!--指定扫描的包，这个包下的注解就会生效--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="9-使用Java的方式配置Spring"><a href="#9-使用Java的方式配置Spring" class="headerlink" title="9.使用Java的方式配置Spring"></a>9.使用Java的方式配置Spring</h2><p>我们现在要完全不使用Spring的xml配置了，全权交给Java来做了。</p>
<p>JavaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心功能。</p>
<p><strong>User类</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">bean</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//属性注入值</span>
        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>
                    <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                    <span class="token string">'&#125;'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>Config类</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">config</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">bean<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Import</span><span class="token punctuation">;</span>

<span class="token comment">//这个也会被Spring容器托管，注册到容器中，因为他本来就是一个Component。</span>
<span class="token comment">// @Configuration代表这是一个配置类，就和我们之前的applicationContext.xml一样</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"bean"</span><span class="token punctuation">)</span>   <span class="token comment">//扫描包，该包下的注解就会生效</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">Userconfig2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//引入另一类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Userconfig</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//注册一个Bean,就相当于我们之前写的bean标签</span>
    <span class="token comment">//这个方法的名字：getUser就相当于bean标签中的id属性</span>
    <span class="token comment">//这个方法的返回值 User 就相当于bean标签中的class属性</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回要注入到bean的对象。</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>测试类</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">bean<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">config<span class="token punctuation">.</span></span><span class="token class-name">Userconfig</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>


    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//如果完全使用了配置类方式去做，我们就只能通过AnootationConfig上下文来获取容器，通过配置类的class对象加载</span>
       <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Userconfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这种纯java的配置方式，在SpringBoot中随处可见。</p>
<h2 id="10-代理模式"><a href="#10-代理模式" class="headerlink" title="10. 代理模式"></a>10. 代理模式</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层！【SpringAOP和SpringMVC】</p>
<p>代理模式的分类：</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<h3 id="10-1静态代理"><a href="#10-1静态代理" class="headerlink" title="10.1静态代理"></a>10.1静态代理</h3><p>角色分析：</p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li>
<li>客户：访问代理对象的人！</li>
</ul>
<p>代理模式的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li>
<li>公共业务就交给代理角色，实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实角色就会产生一个代理角色，代码量会翻倍<del>开发效率变低</del></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2020/09/08/Mysql/</url>
    <content><![CDATA[<h2 id="数据库开发语言SQL"><a href="#数据库开发语言SQL" class="headerlink" title="数据库开发语言SQL"></a>数据库开发语言SQL</h2><p>SQL是一种数据库查询和设计语言，主要用于存取数据，查询数据，更新数据和管理关系数据库系统。</p>
<p>SQL语言分为3个部分，即数据定义语言（DDL），数据操作语言(DML)，和数据控制语言(DCL)</p>
<a id="more"></a>

<ul>
<li><p>DDL</p>
<p>用于定义数据库、表、视图、索引、触发器等。其中包括create语句(创建数据库、表、视图)，alter语句(修改表。视图)，drop语句(删除数据库、表、视图)</p>
</li>
<li><p>DML</p>
<p>增删改查数据，包括select，update，delete，insert</p>
</li>
<li><p>DCL</p>
<p>数据完整控制，数据安全性控制和数据库的恢复等，具体如授权(GRANT)、回滚（ROLLBACK）、提交(CONMMIT)</p>
</li>
</ul>
<h2 id="mysql在命令行操作数据库"><a href="#mysql在命令行操作数据库" class="headerlink" title="mysql在命令行操作数据库"></a>mysql在命令行操作数据库</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> database_name<span class="token punctuation">;</span>         <span class="token comment">//database_name是所要创建的数据库的名字</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>                       <span class="token comment">//查询所有的数据库</span>
<span class="token keyword">use</span> database_name<span class="token punctuation">;</span>                    <span class="token comment">//使用（选择）数据库，database_name是你要用的数据库的名字</span>
<span class="token keyword">drop</span> datebase database_name<span class="token punctuation">;</span>          <span class="token comment">//删除数据库，首先要确定这个数据库存在才能删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="数据表的设计理念"><a href="#数据表的设计理念" class="headerlink" title="数据表的设计理念"></a>数据表的设计理念</h2><h3 id="1-数据表包含列，索引和触发器"><a href="#1-数据表包含列，索引和触发器" class="headerlink" title="1.数据表包含列，索引和触发器"></a>1.数据表包含列，索引和触发器</h3><pre><code>+ 列：也称为栏位，对于属性列，创建表时必须指定列的名字和数据类型
+ 索引：根据指定的数据库表列建立起来的顺序，提供了快速访问数据的途径。
+ 触发器：用户定义的事务命令的集合。</code></pre>
<h3 id="2-数据表的设计需要遵循三范式"><a href="#2-数据表的设计需要遵循三范式" class="headerlink" title="2.数据表的设计需要遵循三范式"></a>2.数据表的设计需要遵循三范式</h3><ul>
<li><p>第一范式：确保每列保持原子性</p>
<p>数据库的每一列都是不可分割的原子数据项，而不能是集合、数组、记录等非原子数据项</p>
</li>
</ul>
<ul>
<li><p>第二范式：确保每列都和主键相关</p>
<p>满足第二范式必须先满足第一范式，第二范式要求实体的属性完全依赖主关键字。如果不存在依赖，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与元实体之间是一对多的关系。</p>
<p>多对多，三张表，关系表两个外键。（关系表用来连接另外两张表）</p>
</li>
<li><p>第三范式：确保每列都和主键列直接相关，而不是间接相关。</p>
<p>满足第三范式必须先满足第二范式，要求一个关系中不包含已在其他关系中包含的非主关键字信息</p>
<p>一对多两张表，多的表加外键 。</p>
</li>
</ul>
<p>可以参考这篇博客，我觉得写得很详细。<a href="https://blog.csdn.net/kenhins/article/details/51084815?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-51084815.nonecase&utm_term=%E5%BB%BA%E8%A1%A8%E7%9A%84%E4%B8%89%E8%8C%83%E5%BC%8F">三范式</a></p>
<h3 id="3-表和表的关系"><a href="#3-表和表的关系" class="headerlink" title="3.表和表的关系"></a>3.表和表的关系</h3><p>数据库里表和表的关系有3种：一对一，一对多，多对多。</p>
<ul>
<li>一对一：主表和相关联的表是一一对应的。比如学生信息表和学生成绩表，可以根据学生信息表中学生的id在学生成绩表中找到唯一的一个成绩。</li>
<li>一对多：比如一个班级表，每个班级有多个学生，一个学生只对应一个班级，班级和学生就是一对多的关系。</li>
<li>多对多：比如选课表，每门课有很多学生选，一个学生又可以选多门课。学生和选课就是多对多的关系。</li>
</ul>
<h3 id="4-创建表"><a href="#4-创建表" class="headerlink" title="4.创建表"></a>4.创建表</h3><ul>
<li><p>建表的语法</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> table_name<span class="token punctuation">(</span>
	属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>
    属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>
    属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    属性名  数据类型 <span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//写完一个字段要加一个逗号，最后一个不要加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>表名不能为sql的关键字</p>
</li>
</ul>
<h3 id="5-操作表的约束"><a href="#5-操作表的约束" class="headerlink" title="5.操作表的约束"></a>5.操作表的约束</h3><p>完整性约束条件是对字段进行限制的，要求用户对该属性进行的操作符合特定的要求。如果不满足完整性约束条件，数据库系统就不再执行用户的操作。MySQL中基本的完整性约束条件如下表。</p>
<table>
<thead>
<tr>
<th>约束条件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>primary key</td>
<td>标识该属性为该表的主键，可以唯一的标识对应的元组</td>
</tr>
<tr>
<td>foreign key</td>
<td>标识该属性为该表的外键，是与之联系的某表的主键</td>
</tr>
<tr>
<td>not null</td>
<td>标识该属性不能为空</td>
</tr>
<tr>
<td>unique</td>
<td>标识该属性的值是唯一的</td>
</tr>
<tr>
<td>auto_increment</td>
<td>标识该属性的值自动增加，这是MySQL语句的特色</td>
</tr>
<tr>
<td>default</td>
<td>为该属性设置默认值</td>
</tr>
</tbody></table>
<h4 id="1-设置非空约束"><a href="#1-设置非空约束" class="headerlink" title="1.设置非空约束"></a>1.设置非空约束</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名  数据类型  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

直接在所要设置的字段名后面加上<span class="token operator">NOT</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-设置表的默认值"><a href="#2-设置表的默认值" class="headerlink" title="2.设置表的默认值"></a>2.设置表的默认值</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名  数据类型 <span class="token keyword">DEFAULT</span> defaultvalue<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
username  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
age  <span class="token keyword">int</span>  <span class="token keyword">DEFAULT</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>

在所要设置的属性后面加上<span class="token keyword">DEFAULT</span> defaultvalue  defaultvalue是默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-设置表字段唯一约束（UK"><a href="#3-设置表字段唯一约束（UK" class="headerlink" title="3.设置表字段唯一约束（UK)"></a>3.设置表字段唯一约束（UK)</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名  数据类型  <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
username  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
age  <span class="token keyword">int</span>  <span class="token keyword">DEFAULT</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>

直接在所要设置的字段名后面加上<span class="token keyword">UNIQUE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-设置表的主键约束（PK）"><a href="#4-设置表的主键约束（PK）" class="headerlink" title="4.设置表的主键约束（PK）"></a>4.设置表的主键约束（PK）</h4><ul>
<li>主键是表的一个特殊字段，该字段能唯一的标识该表中的每一条信息。主键和记录的关系如同身份证和人的关系。主键必须是唯一的，表中任意两条记录的主键字段的值不能相同，主键必须是非空的。</li>
</ul>
  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名  数据类型  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="5-设置表字段值自动增加"><a href="#5-设置表字段值自动增加" class="headerlink" title="5.设置表字段值自动增加"></a>5.设置表字段值自动增加</h3><ul>
<li>一个表中只能有一个字段使用AUTO_INCREMENT约束，且该字段的数据类型必须是整数类型，一般设置该约束的字段会同时设置成PK约束</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名   数据类型   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//只要这只的字段名后面加上PRIMARY KEY AUTO_INCREMENT 将该字段名同时设置成主键和自增长</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="6-设置表的外键约束-FK"><a href="#6-设置表的外键约束-FK" class="headerlink" title="6.设置表的外键约束(FK)"></a>6.设置表的外键约束(FK)</h3><ul>
<li><p>外键是表的一个特殊字段，外键约束用于保证多个表（通常是两个表）之间的参照完整性，即构建与两个表的字段之间的参照关系</p>
</li>
<li><p>设置外键约束的两个表之间具有父子关系，即子表中某个字段的取值范围由父表决定。列入一个班级和学生的关系，每个班级有多个学生。首先就应该有学生表和班级表，然后学生表有一个表示班级编号的字段classno,其依赖于班级表的主键，这样字段classno就是学生表的外键，通过该字段，班级表和学生表建立了关系</p>
</li>
<li><p>外键依赖于数据库中已经存在的父表的主键，外键可以为空。</p>
</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tablename<span class="token punctuation">(</span>
属性名a  数据类型，
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">CONSTRAINT</span> fk_class_id  <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>class_id<span class="token punctuation">)</span>  <span class="token keyword">REFERENCES</span> class<span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token comment">//fk_class_id为外键约束的名字，可以随便取， class_id为这个表中你要设置为外键的字段名</span>
    <span class="token comment">// class为你要关联的表，id为你要关联的表的字段名</span>
    <span class="token comment">//这句话的意思就是  将这个表中的class_id作为外键，并且关联class表的字段名为id的字段</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>实际开发中，一般不使用物理外键（即不设置出一个具体的外键），而使用逻辑外键，我们知道他有外键的功能即可可以参考这篇博客  <a href="https://zhuanlan.zhihu.com/p/114834741">主键和外键</a></li>
</ul>
<h3 id="7-修改表"><a href="#7-修改表" class="headerlink" title="7.修改表"></a>7.修改表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_class <span class="token keyword">rename</span> tab_class<span class="token punctuation">;</span>     <span class="token comment">//修改表的名字，使用alter和rename</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> propName proptype<span class="token punctuation">;</span> 
		<span class="token comment">//在表的最后一个位置增加字段，tablename为表的名字，propName为属性名，proptype是数据类型</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> propName proptype <span class="token keyword">first</span><span class="token punctuation">;</span>
       <span class="token comment">//在表的第一个位置增加字段，tablename为表的名字，propName为属性名，proptype是数据类型</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> propName proptype <span class="token keyword">after</span> pNameOld；
       <span class="token comment">//在pnameOld后面加一个字段名，pNameOld是已经存在的字段名</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">drop</span> propname<span class="token punctuation">;</span>
       <span class="token comment">//删除表中的某个字段，tablename为表的名字，propName为属性名</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">modify</span> propName propType<span class="token punctuation">;</span>
		<span class="token comment">//修改某个字段的数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="MySQL的数据操作"><a href="#MySQL的数据操作" class="headerlink" title="MySQL的数据操作"></a>MySQL的数据操作</h2><h3 id="1-插入语句"><a href="#1-插入语句" class="headerlink" title="1.插入语句"></a>1.插入语句</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tablename<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
		<span class="token keyword">values</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>





<ul>
<li><p>tablename是要插入的表的名字，field为要插入的字段名，value表示要插入的数值，并且field要和value一一对应。</p>
</li>
<li><p>field可以省略，这样就必须在values中写出所有字段的值，并且value对应的字段名必须与数据表中字段名的顺序相同。</p>
</li>
<li><p>在给表中所有字段赋值的时候，可以不用写field,由于主键是自增的，所以给主键赋值NULL，系统会自动为其赋值上条记录中该字段的取值加1。</p>
</li>
<li><p>field的顺序可以不和数据表中的字段名的顺序相同，但是必须保证field和value是一一对应的。</p>
</li>
<li><p>插入多条数据</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tablename<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
		<span class="token keyword">values</span><span class="token punctuation">(</span>value11<span class="token punctuation">,</span>value12<span class="token punctuation">,</span>value13<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>，
		<span class="token keyword">values</span><span class="token punctuation">(</span>value21<span class="token punctuation">,</span>value22<span class="token punctuation">,</span>value23<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token keyword">values</span><span class="token punctuation">(</span>value31<span class="token punctuation">,</span>value32<span class="token punctuation">,</span>value33<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
		<span class="token keyword">values</span><span class="token punctuation">(</span>valuen1<span class="token punctuation">,</span>valuen2<span class="token punctuation">,</span>valuen3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



</li>
</ul>
<ul>
<li><p>可以通过插入数据来实现数据的复制</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tablename<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
	<span class="token keyword">select</span> <span class="token punctuation">(</span>field1<span class="token punctuation">,</span>fidld2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
	<span class="token keyword">from</span> tablename2 <span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	
<span class="token comment">//从tablename2中查询出数据，将这些数据作为values插入到tablename中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
</ul>
<h3 id="2-更新数据记录"><a href="#2-更新数据记录" class="headerlink" title="2.更新数据记录"></a>2.更新数据记录</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> tablename 
		<span class="token keyword">set</span> field1<span class="token operator">=</span>value1<span class="token punctuation">,</span>field2<span class="token operator">=</span>value2<span class="token punctuation">,</span>field3<span class="token operator">=</span>value3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">//tablename是表的名字，field是字段名，value是值，where后面填特定的条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-删除数据记录"><a href="#3-删除数据记录" class="headerlink" title="3.删除数据记录"></a>3.删除数据记录</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment">//参数tablename表示所要删除的数据记录的表名，where 后面填特定的条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="MySQL的数据类型"><a href="#MySQL的数据类型" class="headerlink" title="MySQL的数据类型"></a>MySQL的数据类型</h2><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h3><table>
<thead>
<tr>
<th>整数类型</th>
<th>字节数</th>
<th>无符号数的取值范围</th>
<th>有符号数的取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1</td>
<td>0~255</td>
<td>-128~127</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>0~65535</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>0~16777215</td>
<td>-8388608~83886007</td>
</tr>
<tr>
<td>INT</td>
<td>4</td>
<td>0~4294967295</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>INTEGER</td>
<td>4</td>
<td>0~4294967295</td>
<td>2147483648~2147483647</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>0~18446744073709551615</td>
<td>-9223372036854775808~9223372036854775807</td>
</tr>
</tbody></table>
<ul>
<li>字段选择哪个整数类型取决于该字段的范围，现在最常用的整数类型是INT类型。</li>
</ul>
<h3 id="2-浮点数类型和定点数类型"><a href="#2-浮点数类型和定点数类型" class="headerlink" title="2.浮点数类型和定点数类型"></a>2.浮点数类型和定点数类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>负数的取值范围</th>
<th>非负数的取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>FLOAT</td>
<td>4</td>
<td>-3.402823466E+38~-1.175494351E-38</td>
<td>0和1.175494351E-38~3.402823466E+38</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8</td>
<td>-1.7976931348623157E+308~-202250738585072014E-308</td>
<td>0和202250738585072014E-308~1.7976931348623157E+308</td>
</tr>
<tr>
<td>DECIMAL(M,D)</td>
<td>M+2</td>
<td>同DOUBLE类型</td>
<td>同DOUBLE类型</td>
</tr>
</tbody></table>
<ul>
<li>从表中可以看出DECIMAL类型的取值范围和DOUBLE相同。FLOAT和DOUBLE类型存储数据是存储的是近似值，DECIMAL存储的是字符串，因此提供了更高的精度。在金融系统中，表示货币金额的时候优先选择DECIMAL，一般的价格题中，比如商品的价格一般选择FLOAT类型。</li>
</ul>
<h3 id="3-日期与时间类型"><a href="#3-日期与时间类型" class="headerlink" title="3.日期与时间类型"></a>3.日期与时间类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR</td>
<td>1</td>
</tr>
<tr>
<td>DATE</td>
<td>4</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
</tr>
<tr>
<td>TIMESTAP</td>
<td>4</td>
</tr>
</tbody></table>
<ul>
<li>YEAR类型表示年，DATE类型表示日期，TIME类型表示时间，DATETIME和TIMESTAMP表示日期和时间</li>
<li>根据自己的需要，选择相应的类型。</li>
<li>在实际开发中，往往需要将时间格式化以后才能插入到数据库</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生成日期对象</span>
<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置日期格式化样式为yyyy-MM-dd</span>
 <span class="token class-name">SimpleDateFormat</span>  <span class="token class-name">SimpleDateFormat</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将date转为yyyy-MM-dd的字符串</span>
<span class="token class-name">String</span> format <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Date</span> parse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      parse <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-字符串类型"><a href="#4-字符串类型" class="headerlink" title="4.字符串类型"></a>4.字符串类型</h3><ul>
<li><strong>char</strong>和<strong>varchar</strong>类型为字符串类型。</li>
<li>在建表的时候，<strong>varchar</strong>需要设置长度，不设置会报错（有些人又说不会，但是我建表的时候没加过不了）。</li>
<li>设置长度的格式 : <code>字符串类型（M)</code></li>
<li><strong>CHAR</strong>和<strong>VARCHAR</strong>没有太大的区别。CHAR的长度是固定的，而VARCHAR的长度是可变的，指定长度之后，其长度可以在0到指定长度之间。比如VARCHAR(100)的最大长度是100，但不是每条记录都会占用100字节，而是在这个最大值范围内，用多少占多少。</li>
</ul>
<h2 id="单表数据查询"><a href="#单表数据查询" class="headerlink" title="单表数据查询"></a>单表数据查询</h2><h3 id="1-查询所有的字段数据"><a href="#1-查询所有的字段数据" class="headerlink" title="1.查询所有的字段数据"></a>1.查询所有的字段数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>fieldn <span class="token keyword">from</span> tablename；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>在select后面写出所有的字段名</li>
<li>除了上面这种方法，还可以通过符号”*“来实现</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablename<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-查询指定字段数据"><a href="#2-查询指定字段数据" class="headerlink" title="2.查询指定字段数据"></a>2.查询指定字段数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//查询指定字段数据的方法和查询所有字段数据的第一种方法相同，只是查询所有是要写出所有的字段名，而查询部分只要写出自己需要的字段名即可</span>

<span class="token keyword">select</span> field1，field2，field3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> tablenamea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-避免重复数据"><a href="#3-避免重复数据" class="headerlink" title="3.避免重复数据"></a>3.避免重复数据</h3><p>在MySQL查询执行简单数据查询时，有时候会显示重复数据。</p>
<p>比如说学生表中有3条数据，age字段的数据分别是16,17,16，你想查询班上的孩子是哪个岁数的，如果是简单的查询就会出现16,17,16,三个数据，而两个16是重复的，我们只要显示一个就够了。</p>
<p>这个时候就要使用DISTINCT功能来避免重复数据</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">frselect <span class="token keyword">distinct</span> age <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token comment">//用distinct修饰你想避免重复的字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="4-条件数据记录查询"><a href="#4-条件数据记录查询" class="headerlink" title="4.条件数据记录查询"></a>4.条件数据记录查询</h3><ul>
<li>条件查询的种类</li>
</ul>
<table>
<thead>
<tr>
<th>查询条件</th>
<th>符号或关键字</th>
</tr>
</thead>
<tbody><tr>
<td>比较</td>
<td>= 、&lt;、&lt;=、&gt;、&gt;=、!=、&lt;&gt;(不等于)、!&gt;(不大于)、!&lt;</td>
</tr>
<tr>
<td>指定范围</td>
<td>BETWEEN  AND、NOT BETWEEN AND</td>
</tr>
<tr>
<td>指定集合</td>
<td>IN、NOT IN</td>
</tr>
<tr>
<td>匹配字符</td>
<td>LIKE、NOT LIKE</td>
</tr>
<tr>
<td>是否为空值</td>
<td>IS NULL、IS NOT NULL</td>
</tr>
<tr>
<td>多个查询条件</td>
<td>AND、OR</td>
</tr>
</tbody></table>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> field1，field2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li><p>带IN关键字的查询</p>
<ol>
<li><p>用IN来查询在集合中的数据，NOT IN查询不在集合中的数据</p>
<p><code>select * from student where age in (15,16，17)</code>  查询年龄为15,16,17的学生数据</p>
<p><code>select * from student where age not in (15,16,17)</code> 查询年龄不是15,16,17的学生数据</p>
</li>
<li><p>在使用IN关键字的时候，查询的集合中如果存在NULL，不会影响查询；使用NOT IN时，如果查询的集合中有NULL，则不会有任何的查询结果。</p>
</li>
</ol>
</li>
<li><p>带BETWEEN AND关键字的查询</p>
<ol>
<li><p>BETWEEN AND关键字操作符只针对数字类型。</p>
</li>
<li><p>用BETWEEN AND查询符合范围的数据，NOT BETWEEN AND查询不符合范围的数据。</p>
<p><code>select * from student where age between 15 and 17;</code> 查询年龄在15  ~ 17这个范围内的数据</p>
<p><code>select * from student where age not between 15 and 17;</code>  查询年龄不在15 ~ 17这个范围内的数据。</p>
</li>
</ol>
</li>
<li><p>带LIKE关键字的查询</p>
<ol>
<li><p>LIKE关键字支持   _    和  % 这两个通配符</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>_</td>
<td>该通配符只能匹配单个字符</td>
</tr>
<tr>
<td>%</td>
<td>该通配符可以匹配任意长度的字符串，既可以是0个字符串、1个字符串，又可以是很多字符串</td>
</tr>
</tbody></table>
<p><code>select * from student where name like &#39;L%&#39;;</code>  查询名字以L开头的学生数据</p>
<p><code>select * from student where not name like &#39;L%&#39; </code>  查询名字不是以K开头的学生数据</p>
<p><code>select * from student where name like &#39;_A%&#39;</code> 查询名字的第二个字母是A的学生数据</p>
</li>
<li><p><strong>注意使用like关键字的时候，通配符位置要用单引号括起来，就算是数字类型的也需要使用单引号</strong></p>
</li>
</ol>
</li>
<li><p>带AND的多条件查询</p>
<ol>
<li><p>关键字ADN可以用来联合多个条件进行查询，使用AND时，只有同时满足所有查询条件的记录才会被查询出来。</p>
<p><code>select * from student where age = 15 and name =&#39;pty&#39;</code>  查询年龄=15岁并且名字是pty的学生的数据</p>
</li>
</ol>
</li>
<li><p>OR，IS NULL 、NOT IS NULL这三个关键字比较简单，OR和AND差不多，就不讲了</p>
</li>
<li><p>对查询的结果进行排序</p>
<ol>
<li>使用ORDER BY关键字对记录进行排序</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//对查询出来的结果根据年龄进行排序，[]中表示可选参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>ASC表示按升序排序，DESC表示按降序排序。</p>
</li>
<li><p>可以指定多个字段进行排序，比如可以先按照年龄排序再按照班级排序</p>
<p><code>select * from student order by age asc,classno desc</code> 先按照年龄升序，在按照班级降序</p>
<p>即如果两个人年龄相同，班级小的那个人排在前面。</p>
</li>
</ol>
</li>
</ol>
<h3 id="5-统计函数和分组函数"><a href="#5-统计函数和分组函数" class="headerlink" title="5.统计函数和分组函数"></a>5.统计函数和分组函数</h3><ul>
<li>COUNT()函数：实现统计表中记录的条数</li>
<li>AVG()函数：实现计算字段值的平均值</li>
<li>SUM()函数：实现计算字段值的综合</li>
<li>MAX()函数：实现查询字段值的最大值</li>
<li>MIN()函数：实现查询字段值的最小值</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数：
	<span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  对表中的记录进行统计，无论表字段中包含的是<span class="token boolean">null</span>值还是非<span class="token boolean">null</span>值
	cout<span class="token punctuation">(</span>field<span class="token punctuation">)</span>  对表中特定的字段进行统计，忽略<span class="token boolean">null</span>值。
	<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">//查询student表中一共有多少条记录</span>
	
<span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数：
	<span class="token function">avg</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  先计算特定字段值的和，在求平均值。
	<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">//查询student中学生年龄的平均值</span>


<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数:
	<span class="token function">sum</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  计算特定字段值之和，在具体使用中会忽略<span class="token boolean">null</span>值。
	<span class="token keyword">select</span>  <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">//查询student中学生年龄的总和</span>

<span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数 <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数：
	<span class="token function">max</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  计算特定字段值的最大值，在具体使用中会忽略<span class="token boolean">null</span>值
	<span class="token function">min</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>  计算特定字段值的最小值，在具体使用中会忽略<span class="token boolean">null</span>值
	<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> maxval<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> minval <span class="token keyword">from</span> s_score<span class="token punctuation">;</span>  <span class="token comment">//查询student中学生年龄的最大最小值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当数据表中没有任何数据时，COUNT()函数返回数据为0，其他所有函数返回NULL。</li>
</ul>
<h4 id="简单分组函数"><a href="#简单分组函数" class="headerlink" title="简单分组函数"></a>简单分组函数</h4><ul>
<li>在现实应用中，经常会先把所有的数据记录进行分组，再对这些分组后的数据记录进行统计计算。</li>
<li>使用GROUP BY 来实现分组</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 统计函数<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> field<span class="token punctuation">;</span>
<span class="token comment">// 根据field进行分组然后在统计数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>同一组的数据只会展示一条。</li>
<li>只实现简单的分组查询是没有任何意义的，因为GROUP BY 关键字在单独使用时，默认查询出每个分组中随机一条记录。不具有确定性。因此常和统计函数一起使用</li>
<li>如果想要显示每个分组中的字段，可以使用GROUP_CONCAT()函数来实现。该函数可以显示每个分组中的指定字段。</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> subject<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span> name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> number <span class="token keyword">from</span> teacher <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> subject<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token operator">|</span> subject <span class="token operator">|</span> name       <span class="token operator">|</span> number <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token operator">|</span> 化学    <span class="token operator">|</span> snow<span class="token punctuation">,</span>ji    <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> 数学    <span class="token operator">|</span> huang<span class="token punctuation">,</span>zhou <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> 生物    <span class="token operator">|</span> peng       <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> 语文    <span class="token operator">|</span> chen       <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.34</span> sec<span class="token punctuation">)</span>
<span class="token comment">//根据subject 分类，将每组中的name都显示出来，并统计人数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Having可以对分组后的数据进行再一次过滤</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> field <span class="token keyword">having</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//根据subject 分类，将每组中的name都显示出来，并统计人数,在过滤掉人数小于等于1的mysql> select subject,group_concat(name) name,count(name) number from teacher GROUP BY subject having number>1;</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token operator">|</span> subject <span class="token operator">|</span> name       <span class="token operator">|</span> number <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token operator">|</span> 化学    <span class="token operator">|</span> snow<span class="token punctuation">,</span>ji    <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> 数学    <span class="token operator">|</span> huang<span class="token punctuation">,</span>zhou <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+------------+--------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span class="token comment">////根据subject 分类，将每组中的name都显示出来，并统计人数,在过滤掉人数小于等于1的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Having的执行效率比where低，能用where解决的不要用where</li>
</ul>
<h3 id="6-使用LIMIT限制数据记录查询数量"><a href="#6-使用LIMIT限制数据记录查询数量" class="headerlink" title="6.使用LIMIT限制数据记录查询数量"></a>6.使用LIMIT限制数据记录查询数量</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">limit</span> offset_start<span class="token punctuation">,</span>row_count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>offset_start表示起始位置，这个可以省略不写，如果不写默认值为0，表示从第一条记录开始显示。</li>
<li>offset_start应该比起始位置小1，类似于数组的下标。比如你要显示第4条数据，则offset_start应该为3。</li>
<li>row_count表示记录条数，即显示出来的记录数，如果row_count小于查询出来的总记录数，则只显示row_count设置的记录数；如果大于总记录数，则会把所有的都显示出来。</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+------+------+---------+---------+</span>
<span class="token operator">|</span> tid  <span class="token operator">|</span> name <span class="token operator">|</span> age  <span class="token operator">|</span> subject <span class="token operator">|</span> salary  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+------+------+---------+---------+</span>
<span class="token operator">|</span> <span class="token number">2001</span> <span class="token operator">|</span> snow <span class="token operator">|</span>   <span class="token number">22</span> <span class="token operator">|</span> 化学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2002</span> <span class="token operator">|</span> peng <span class="token operator">|</span>   <span class="token number">23</span> <span class="token operator">|</span> 生物    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+------+------+---------+---------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span class="token comment">//限制了只显示2条记录数，默认从第一条记录开始</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+-------+------+---------+---------+</span>
<span class="token operator">|</span> tid  <span class="token operator">|</span> name  <span class="token operator">|</span> age  <span class="token operator">|</span> subject <span class="token operator">|</span> salary  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+-------+------+---------+---------+</span>
<span class="token operator">|</span> <span class="token number">2001</span> <span class="token operator">|</span> snow  <span class="token operator">|</span>   <span class="token number">22</span> <span class="token operator">|</span> 化学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2002</span> <span class="token operator">|</span> peng  <span class="token operator">|</span>   <span class="token number">23</span> <span class="token operator">|</span> 生物    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2003</span> <span class="token operator">|</span> huang <span class="token operator">|</span>   <span class="token number">21</span> <span class="token operator">|</span> 数学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2004</span> <span class="token operator">|</span> ji    <span class="token operator">|</span>   <span class="token number">24</span> <span class="token operator">|</span> 化学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2005</span> <span class="token operator">|</span> chen  <span class="token operator">|</span>   <span class="token number">23</span> <span class="token operator">|</span> 语文    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2006</span> <span class="token operator">|</span> zhou  <span class="token operator">|</span>   <span class="token number">21</span> <span class="token operator">|</span> 数学    <span class="token operator">|</span> <span class="token number">1200.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+-------+------+---------+---------+</span>
<span class="token number">6</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
<span class="token comment">//限制显示8条记录，但由于总记录数为6，所以显示了所有记录。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="多表数据查询"><a href="#多表数据查询" class="headerlink" title="多表数据查询"></a>多表数据查询</h2><p>MySQL支持连接查询，在具体实现连接查询的操作时，首先将两个或两个以上的表按照某个条件连接起来，再查询所要求的数据记录，连接查询分为内连接查询和外连接查询。</p>
<p>在具体应用中，如果需要实现多表记录查询，一般不适合进行连接查询，因为该操作的效率比较低，所以MySQL体用了连接查询的替代操作——子查询操作。</p>
<h3 id="1-内连接查询"><a href="#1-内连接查询" class="headerlink" title="1.内连接查询"></a>1.内连接查询</h3><p>MySQL中，内连接数据查询通过“INNER JOIN…ON”语句来实现。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> tablename1 <span class="token keyword">inner</span> <span class="token keyword">join</span> tablename2  <span class="token keyword">on</span> 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>内连接查询分为以下3类：</p>
<ul>
<li>自连接     指表与其自身连接 （这个不是很懂，看起来很简单就是一张表，但是不知道怎么得到的结果）</li>
<li>等值连接   在关键字ON后的匹配条件使用等于关系运算符（=）  这个方式我之前用的比较多</li>
<li>不等连接   关键字ON后的匹配条件使用 &gt;、&lt;、&gt;=、&lt;=、!=等关系运算符</li>
</ul>
<h3 id="2-外链接查询"><a href="#2-外链接查询" class="headerlink" title="2.外链接查询"></a>2.外链接查询</h3><p>MySQL中，外连接数据查询通过“OUTER JOIN…ON”语句来实现。<strong>outer可以省略</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> tablename <span class="token keyword">left</span><span class="token operator">|</span><span class="token keyword">right</span><span class="token operator">|</span><span class="token keyword">full</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token keyword">OUTER</span><span class="token punctuation">]</span> <span class="token keyword">join</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">on</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>外链接查询分为以下3类：</p>
<ul>
<li>左外连接</li>
<li>右外连接</li>
<li>全外连接</li>
</ul>
<p>左外连接：以<code>left join</code>左边的表为参考表，左表的所有记录都会被显示出来，而右表只会显示符合搜索条件的记录，没有数据的地方用NULL来代替</p>
<p>右外连接：以right join 右边的表为参考表，右表的所有记录都会被显示出来，而左表只显示符合搜索条件的记录，没有数据的地方用NULL代替。</p>
<p>全连接：目前mysql不支持这种方式。</p>
<p>参考这篇博客 <a href="https://blog.csdn.net/plg17/article/details/78758593">图解mysql内外连接</a></p>
<h3 id="3-复合条件连接查询"><a href="#3-复合条件连接查询" class="headerlink" title="3.复合条件连接查询"></a>3.复合条件连接查询</h3><p>复合条件连接查询中，通过添加过滤条件限制查询的结果，使查询的结果更加准确。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">班级表
mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_class<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------+--------+------+---------+</span>
<span class="token operator">|</span> classno <span class="token operator">|</span> cname  <span class="token operator">|</span> loc  <span class="token operator">|</span> advisor <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+--------+------+---------+</span>
<span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span> class2 <span class="token operator">|</span> loc2 <span class="token operator">|</span> ad2     <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span> class3 <span class="token operator">|</span> loc3 <span class="token operator">|</span> ad3     <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+--------+------+---------+</span>
<span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

学生表
mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+</span>
<span class="token operator">|</span> stuid <span class="token operator">|</span> name                <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> classno <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+</span>
<span class="token operator">|</span>  <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1002</span> <span class="token operator">|</span> Kalinda Sharma      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1003</span> <span class="token operator">|</span> Cary Agos           <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1004</span> <span class="token operator">|</span> Diane Lockhart      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1005</span> <span class="token operator">|</span> Eli Gold            <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">44</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1006</span> <span class="token operator">|</span> Peter Florric       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">34</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1007</span> <span class="token operator">|</span> Will Gardner        <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1008</span> <span class="token operator">|</span> Jacquiline Florriok <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1009</span> <span class="token operator">|</span> Zach Florriok       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">14</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1010</span> <span class="token operator">|</span> Grace Florriok      <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+</span>
<span class="token number">10</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

分数表
mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_score<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+---------+---------+------+-----------+---------+</span>
<span class="token operator">|</span> stuid <span class="token operator">|</span> Chinese <span class="token operator">|</span> English <span class="token operator">|</span> Math <span class="token operator">|</span> Chemistry <span class="token operator">|</span> Physics <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------+---------+------+-----------+---------+</span>
<span class="token operator">|</span>  <span class="token number">1001</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>   <span class="token number">92</span> <span class="token operator">|</span>        <span class="token number">83</span> <span class="token operator">|</span>      <span class="token number">80</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1002</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>      <span class="token number">98</span> <span class="token operator">|</span>   <span class="token number">92</span> <span class="token operator">|</span>        <span class="token number">93</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1003</span> <span class="token operator">|</span>      <span class="token number">79</span> <span class="token operator">|</span>      <span class="token number">78</span> <span class="token operator">|</span>   <span class="token number">82</span> <span class="token operator">|</span>        <span class="token number">83</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1004</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>   <span class="token number">91</span> <span class="token operator">|</span>        <span class="token number">92</span> <span class="token operator">|</span>      <span class="token number">89</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1005</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>      <span class="token number">95</span> <span class="token operator">|</span>   <span class="token number">91</span> <span class="token operator">|</span>        <span class="token number">96</span> <span class="token operator">|</span>      <span class="token number">97</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1006</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>      <span class="token number">91</span> <span class="token operator">|</span>   <span class="token number">92</span> <span class="token operator">|</span>        <span class="token number">94</span> <span class="token operator">|</span>      <span class="token number">92</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1007</span> <span class="token operator">|</span>      <span class="token number">91</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>   <span class="token number">83</span> <span class="token operator">|</span>        <span class="token number">88</span> <span class="token operator">|</span>      <span class="token number">93</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1008</span> <span class="token operator">|</span>      <span class="token number">90</span> <span class="token operator">|</span>      <span class="token number">81</span> <span class="token operator">|</span>   <span class="token number">84</span> <span class="token operator">|</span>        <span class="token number">86</span> <span class="token operator">|</span>      <span class="token number">98</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1009</span> <span class="token operator">|</span>      <span class="token number">91</span> <span class="token operator">|</span>      <span class="token number">84</span> <span class="token operator">|</span>   <span class="token number">85</span> <span class="token operator">|</span>        <span class="token number">86</span> <span class="token operator">|</span>      <span class="token number">93</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1010</span> <span class="token operator">|</span>      <span class="token number">88</span> <span class="token operator">|</span>      <span class="token number">81</span> <span class="token operator">|</span>   <span class="token number">82</span> <span class="token operator">|</span>        <span class="token number">84</span> <span class="token operator">|</span>      <span class="token number">99</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------+---------+------+-----------+---------+</span>
<span class="token number">10</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment">//查找总成绩超过450的学生的编号，姓名，性别，年龄，班级号，班级名称，班级位置和班主任信息</span>
<span class="token keyword">SELECT</span>
	st<span class="token punctuation">.</span>stuid<span class="token punctuation">,</span>
	st<span class="token punctuation">.</span> NAME<span class="token punctuation">,</span>
	st<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>
	st<span class="token punctuation">.</span>age<span class="token punctuation">,</span>
	st<span class="token punctuation">.</span>classno<span class="token punctuation">,</span>
	c<span class="token punctuation">.</span>cname<span class="token punctuation">,</span>
	c<span class="token punctuation">.</span>loc<span class="token punctuation">,</span>
	c<span class="token punctuation">.</span>advisor<span class="token punctuation">,</span>
	sc<span class="token punctuation">.</span>Chinese <span class="token operator">+</span> sc<span class="token punctuation">.</span>English <span class="token operator">+</span> sc<span class="token punctuation">.</span>Math <span class="token operator">+</span> sc<span class="token punctuation">.</span>Chemistry <span class="token operator">+</span> sc<span class="token punctuation">.</span>Physics total
<span class="token keyword">FROM</span>
	t_student st<span class="token punctuation">,</span>
	t_class c<span class="token punctuation">,</span>
	t_score sc
<span class="token keyword">WHERE</span>
	st<span class="token punctuation">.</span>classno <span class="token operator">=</span> c<span class="token punctuation">.</span>classno
<span class="token operator">AND</span> st<span class="token punctuation">.</span>stuid <span class="token operator">=</span> sc<span class="token punctuation">.</span>stuid<span class="token punctuation">;</span>

<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+--------+------+---------+-------+</span>
<span class="token operator">|</span> stuid <span class="token operator">|</span> NAME                <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> classno <span class="token operator">|</span> cname  <span class="token operator">|</span> loc  <span class="token operator">|</span> advisor <span class="token operator">|</span> total <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+--------+------+---------+-------+</span>
<span class="token operator">|</span>  <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>   <span class="token number">434</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1002</span> <span class="token operator">|</span> Kalinda Sharma      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>   <span class="token number">465</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1003</span> <span class="token operator">|</span> Cary Agos           <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span>       <span class="token number">1</span> <span class="token operator">|</span> class1 <span class="token operator">|</span> loc1 <span class="token operator">|</span> ad1     <span class="token operator">|</span>   <span class="token number">411</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1004</span> <span class="token operator">|</span> Diane Lockhart      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span> class2 <span class="token operator">|</span> loc2 <span class="token operator">|</span> ad2     <span class="token operator">|</span>   <span class="token number">453</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1005</span> <span class="token operator">|</span> Eli Gold            <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">44</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span> class3 <span class="token operator">|</span> loc3 <span class="token operator">|</span> ad3     <span class="token operator">|</span>   <span class="token number">471</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1006</span> <span class="token operator">|</span> Peter Florric       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">34</span> <span class="token operator">|</span>       <span class="token number">3</span> <span class="token operator">|</span> class3 <span class="token operator">|</span> loc3 <span class="token operator">|</span> ad3     <span class="token operator">|</span>   <span class="token number">459</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1007</span> <span class="token operator">|</span> Will Gardner        <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">2</span> <span class="token operator">|</span> class2 <span class="token operator">|</span> loc2 <span class="token operator">|</span> ad2     <span class="token operator">|</span>   <span class="token number">445</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1008</span> <span class="token operator">|</span> Jacquiline Florriok <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">38</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>   <span class="token number">439</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1009</span> <span class="token operator">|</span> Zach Florriok       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">14</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>   <span class="token number">439</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">1010</span> <span class="token operator">|</span> Grace Florriok      <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span>       <span class="token number">4</span> <span class="token operator">|</span> class4 <span class="token operator">|</span> loc4 <span class="token operator">|</span> ad4     <span class="token operator">|</span>   <span class="token number">434</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+---------------------+--------+------+---------+--------+------+---------+-------+</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-合并查询数据记录"><a href="#4-合并查询数据记录" class="headerlink" title="4.合并查询数据记录"></a>4.合并查询数据记录</h3><p>通过UNION来实现合并查询数据记录的操作，可以将多个select语句的查询结果合并在一起组成新的关系</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span><span class="token operator">|</span><span class="token keyword">union</span> <span class="token keyword">all</span>  <span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">union</span><span class="token operator">|</span><span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>form
			<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述语句中存在多个查询数据记录语句，每个查询数据记录语句之间使用UNION或者UNION ALL语句进行连接。</p>
<p>合并后的数据记录包含所有select语句的查询结果。union关键字会去掉重复数据，而union all则不会。</p>
<h3 id="5-子查询"><a href="#5-子查询" class="headerlink" title="5.子查询"></a>5.子查询</h3><p>什么是笛卡尔积？ </p>
<p>假如A表有4条数据，B表有3条数据，将这两张表联合起来。A表中的每一条数据都会去和B表的每一条数据匹配，也就是说将会出现12条数据，这就是笛卡尔积。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">seletct <span class="token operator">*</span> <span class="token keyword">from</span> a<span class="token punctuation">,</span>b <span class="token keyword">where</span> a<span class="token punctuation">.</span>xxx<span class="token operator">=</span>b<span class="token punctuation">.</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行上面这条语句的时候，就会先进行笛卡尔积操作，然后在选择符合条件的数据。当数据量足够大的时候，进行笛卡尔积就很容易导致死机。</p>
<p>当笛卡尔的数据记录数很大时，就通常使用子查询。</p>
<p>所谓子查询，是指在一个查询中嵌套其他若干查询。即在一个select语句的from或者where子句中包含另一个select查询语句。在查询语句中，前面的那个select被称为主查询，where子句中的select语句被称为子查询，也被称为嵌套查询。</p>
<p><strong>查询薪资水平为高级的员工的编号，名字，性别，年龄和工资</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+--------------------+--------+------+--------+--------+</span>
<span class="token operator">|</span> id   <span class="token operator">|</span> name               <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> salary <span class="token operator">|</span> deptno <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+--------------------+--------+------+--------+--------+</span>
<span class="token operator">|</span> <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric     <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>  <span class="token number">10000</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1002</span> <span class="token operator">|</span> Kalinda Sharma     <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">31</span> <span class="token operator">|</span>   <span class="token number">9000</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1003</span> <span class="token operator">|</span> Cary Agos          <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">27</span> <span class="token operator">|</span>   <span class="token number">8000</span> <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1004</span> <span class="token operator">|</span> Eli Gold           <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">44</span> <span class="token operator">|</span>  <span class="token number">20000</span> <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1005</span> <span class="token operator">|</span> Peter Florric      <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">34</span> <span class="token operator">|</span>  <span class="token number">30000</span> <span class="token operator">|</span>      <span class="token number">2</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1006</span> <span class="token operator">|</span> Diane Lockhart     <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>  <span class="token number">50000</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1007</span> <span class="token operator">|</span> Maia Rindell       <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">43</span> <span class="token operator">|</span>   <span class="token number">9000</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1008</span> <span class="token operator">|</span> Will Gardner       <span class="token operator">|</span> Male   <span class="token operator">|</span>   <span class="token number">36</span> <span class="token operator">|</span>  <span class="token number">50000</span> <span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1009</span> <span class="token operator">|</span> Jacquiline Florric <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">57</span> <span class="token operator">|</span>   <span class="token number">9000</span> <span class="token operator">|</span>      <span class="token number">4</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1010</span> <span class="token operator">|</span> Zach Florric       <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">17</span> <span class="token operator">|</span>   <span class="token number">5000</span> <span class="token operator">|</span>      <span class="token number">5</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">1011</span> <span class="token operator">|</span> Grace Florric      <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">14</span> <span class="token operator">|</span>   <span class="token number">4000</span> <span class="token operator">|</span>      <span class="token number">5</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+--------------------+--------+------+--------+--------+</span>
<span class="token number">11</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_slevel<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+--------+-------+-------------+</span>
<span class="token operator">|</span> id   <span class="token operator">|</span> salary <span class="token operator">|</span> <span class="token keyword">level</span> <span class="token operator">|</span> description <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+--------+-------+-------------+</span>
<span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">3000</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span> 初级        <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">7000</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span> 中级        <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">10000</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span> 高级        <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">20000</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span> 特级        <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">5</span> <span class="token operator">|</span>  <span class="token number">30000</span> <span class="token operator">|</span>     <span class="token number">5</span> <span class="token operator">|</span> 高管        <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+--------+-------+-------------+</span>
<span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span> a<span class="token punctuation">.</span> NAME<span class="token punctuation">,</span>a<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>a<span class="token punctuation">.</span>age<span class="token punctuation">,</span>a<span class="token punctuation">.</span>salary <span class="token keyword">FROM</span> t_employee a <span class="token keyword">WHERE</span>
    <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span>salary <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> t_slevel <span class="token keyword">WHERE</span> <span class="token keyword">LEVEL</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">AND</span> a<span class="token punctuation">.</span>salary <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> t_slevel <span class="token keyword">WHERE</span> <span class="token keyword">LEVEL</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+----------------+--------+------+--------+</span>
<span class="token operator">|</span> id   <span class="token operator">|</span> NAME           <span class="token operator">|</span> gender <span class="token operator">|</span> age  <span class="token operator">|</span> salary <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+----------------+--------+------+--------+</span>
<span class="token operator">|</span> <span class="token number">1001</span> <span class="token operator">|</span> Alicia Florric <span class="token operator">|</span> Female <span class="token operator">|</span>   <span class="token number">33</span> <span class="token operator">|</span>  <span class="token number">10000</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+----------------+--------+------+--------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-1-带关键字IN的子查询"><a href="#5-1-带关键字IN的子查询" class="headerlink" title="5.1 带关键字IN的子查询"></a>5.1 带关键字IN的子查询</h3><p>一个查询语句的条件可能落在另一个查询语句的查询结果中，这可以通过关键字IN来判断。</p>
<p><strong>查询员工表t_employee的数据记录，这些记录的字段deptno的值必须在部门表t_dept中出现过</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> deptno <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> deptno <span class="token keyword">from</span> t_dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-2带关键字EXISTS的子查询"><a href="#5-2带关键字EXISTS的子查询" class="headerlink" title="5.2带关键字EXISTS的子查询"></a>5.2带关键字EXISTS的子查询</h3><p>关键字EXISTS表示存在，后面的参数是一个任意的子查询，系统对子查询进行运算以判断他是否返回行。</p>
<p>如果至少返回一行，那么EXISTS返回的结果是true,此时外层语句将进行查询；如果子查询没有任何返回行，那么EXISTS的返回结果是false,此时外层语句将不进行查询。 （前面的select语句是外层语句）</p>
<p><strong>查询t-dept表中是否存在deptno为4的部门，如果存在，再查询表t_employee的记录</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_dept <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>查询表t-dept中是否存在的deptno为4的部门，如果存在，在查询t_employee表中字段age大于40的记录</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_employee <span class="token keyword">where</span> age<span class="token operator">></span><span class="token number">40</span> <span class="token operator">AND</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">*</span> <span class="token keyword">from</span> t_dept <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-3带关键字ANY的子查询"><a href="#5-3带关键字ANY的子查询" class="headerlink" title="5.3带关键字ANY的子查询"></a>5.3带关键字ANY的子查询</h3><p>关键字ANY表示满足其中任意一个条件。</p>
<p>使用ANY时，只要满足内层查询语句返回的结果中的任意一个，就可以通过该条件执行外层查询语句。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2021/12/07/java%E5%9F%BA%E7%A1%80%E9%A2%98/</url>
    <content><![CDATA[<p>题目：<br>1、列举出四种及以上Java的容器类（即集合类）？<br>Set、List、Queue、Map、ArrayList、HashSet、HashMap</p>
<p>2、简单说说Java事件处理由哪四部分组成？<br>Java事件由四部分组成：<br>事件源：产生事件的对象，例如：各个组件<br>事件对象：事件类<br>监听器：监听器接口(里面定义了响应事件的抽象方法)<br>“注册”：产生事件的对象，通过调用一个方法，通知“监听器”。</p>
<p>3、Java网络编程主要基于两个协议，是哪两个协议，其作用各是什么？（7分）<br>答：是TCP协议和UDP协议（1分）<br>    TCP协议：是面向连接的传输层协议。 进程（应用程序）在使用TCP协议之前，必须先建立连接，在数据传输完毕后要释放已建立的连接。（3分）<br>    UDP协议：是无连接的传输层协议。进程（应用程序）使用UDP无须建立连接，当然，数据传输结束时也没有连接需要释放。因此，用UDP能减少开销和发送数据之前的时延。（3分）</p>
<p>4、X公司承接了一个软件项目，目前正在做可行性分析。项目经理偏向于采用Java语言开发此项目，但有少数员工提出也可以用其他语言开发如C++或C#等，为统一思想。项目经理委托小张收集数据，并给大家分析下Java的特点或优势。（请列举Java的特点至少6点，并简单进行分析说明）<br>答：简单、面向对象、支持分布式(即网络功能)、健壮性（少出低级错误）、安全（被破解的可能性）、体系结构中立（跨平台）、可移植性、解释执行、高性能、多线程、动态</p>
<p>5、Java相对于C、C++语言，更适合应用型软件的开发，这主要是Java语言本身就相对C++语言作出了一些变化，请分析出至少Java相对C++语言在语法上6个及更多的不同点。<br>答：1）全局变量：Java中没有全局变量。2）指针：Java不支持指针，但对象变量实际上都是指针。3）数据类型的支持：Java在不同平台上数据类型都统一。4）类型转换：Java有类型相容性检查。5）结构和联合：Java只支持类。6）多重继承：Java用接口实现类似多重继承的功能。7）内存管理：Java自动回收无用内存。8）头文件：Java支持包引入import。9）宏定义和预处理：Java不支持宏定义。</p>
<p>6、什么是JDBC，在什么时候会用到它？<br>答、JDBC的全称是Java DataBase Connection，也就是Java数据库连接，我们可以用它来操作关系型数据库。JDBC接口及相关类在java.sql包和javax.sql包里。我们可以用它来连接数据库，执行SQL查询，存储过程，并处理返回的结果。JDBC接口让Java程序和JDBC驱动实现了松耦合，使得切换不同的数据库变得更加简单。</p>
<p>7、列举出任意四个JDBC连接数据库相关的Java类？<br>答：DriverManager、Connection、Statement、ResultSet、PreparedStatement、SQLException、Types、ClassNotFoundException等</p>
<p>8、JDBC操作数据库的步骤？<br>答：注册数据库驱动。<br>建立数据库连接。<br>操作数据库：包括创建一个Statement，执行SQL语句，处理结果集等。<br>关闭数据库连接</p>
<p>9、有哪些不同类型的JDBC驱动，每种驱动的特点是什么？<br>答：有四类JDBC驱动。<br>1） JDBC-ODBC Bridge plus ODBC Driver（类型1）：它使用ODBC驱动连接数据库。需要安装ODBC以便连接数据库，正因为这样，这种方式现在已经基本淘汰了。<br>2） Native API partly Java technology-enabled driver（类型2）：这种驱动把JDBC调用适配成数据库的本地接口的调用。<br>3） Pure Java Driver for Database Middleware（类型3）：这个驱动把JDBC调用转发给中间件服务器，由它去和不同的数据库进行连接。用这种类型的驱动需要部署中间件服务器。这种方式增加了额外的网络调用，导致性能变差，因此很少使用。<br>4） Direct-to-Database Pure Java Driver（类型4）：这个驱动把JDBC转化成数据库使用的网络协议。这种方案最简单，也适合通过网络连接数据库。不过使用这种方式的话，需要根据不同数据库选用特定的驱动程序，比如OJDBC是Oracle开发的Oracle数据库的驱动，而MySQL Connector/J是MySQL数据库的驱动。</p>
<p>10、JDBC是如何实现Java程序和JDBC驱动的松耦合的？<br>答：JDBC API使用Java的反射机制来实现Java程序和JDBC驱动的松耦合。随便看一个简单的JDBC示例，你会发现所有操作都是通过JDBC接口完成的，而驱动只有在通过Class.forName反射机制来加载的时候才会出现，它使得应用程序和驱动程序之间进行了隔离，让迁移数据库的工作变得更简单。在这里可以看到更多JDBC的使用示例。</p>
<p>11、JDBC的DriverManager是用来做什么的？<br>答：JDBC的DriverManager是一个工厂类，我们通过它来创建数据库连接。当JDBC的Driver类被加载进来时，它会自己注册到DriverManager类里面，然后我们会把数据库配置信息传成DriverManager.getConnection()方法，DriverManager会使用注册到它里面的驱动来获取数据库连接，并返回给调用的程序。</p>
<p>=======================================================<br>论述题：</p>
<p>对Java中JDBC的分析和理解？<br>   （1、可以从JDBC的含义；JDBC连接数据库相关的常用Java类；当前主要使用哪种类型的JDBC驱动；JDBC是如何实现Java程序和JDBC驱动的松耦合的；JDBC的DriverManager是用来做什么的；JDBC的DriverManager的理解等等角度进行分析（但不限于这些角度）<br>     2、能正确答出3个及以上点，且字数超过200字，则得满分<br>    ）。<br>答：<br>  1、JDBC的含义<br>  JDBC的全称是Java DataBase Connection，也就是Java数据库连接，我们可以用它来操作关系型数据库。JDBC接口及相关类在java.sql包和javax.sql包里。我们可以用它来连接数据库，执行SQL查询，存储过程，并处理返回的结果。JDBC接口让Java程序和JDBC驱动实现了松耦合，使得切换不同的数据库变得更加简单。</p>
<p>  2、JDBC连接数据库相关的常用Java类包括（列举4个及以上，并可以简单说说列举的类的作用或含义）：<br>  DriverManager、Connection、Statement、ResultSet、PreparedStatement、SQLException、Types、ClassNotFoundException等  </p>
<p>  3、主要使用的JDBC驱动类型<br>  Direct-to-Database Pure Java Driver：这个驱动把JDBC转化成数据库使用的网络协议。这种方案最简单，也适合通过网络连接数据库。需要根据不同数据库选用特定的驱动程序，比如OJDBC是Oracle开发的Oracle数据库的驱动，而MySQLConnector/J是MySQL数据库的驱动。</p>
<p>  4、JDBC如何实现Java程序和JDBC驱动的松耦合的<br>JDBC API使用Java的反射机制来实现Java程序和JDBC驱动的松耦合。随便看一个简单的JDBC示例，你会发现所有操作都是通过JDBC接口完成的，而驱动只有在通过Class.forName反射机制来加载的时候才会出现，它使得应用程序和驱动程序之间进行了隔离，让迁移数据库的工作变得更简单。</p>
<p>  5、JDBC的DriverManager<br>JDBC的DriverManager是一个工厂类，我们通过它来创建数据库连接。当JDBC的Driver类被加载进来时，它会自己注册到DriverManager类里面，然后我们会把数据库配置信息传成DriverManager. getConnection()方法，DriverManager会使用注册到它里面的驱动来获取数据库连接，并返回给调用的程序。</p>
<p>=======================================================</p>
<p>12、在Java程序中，如何获取数据库服务器的相关信息？<br>答：使用DatabaseMetaData可以获取到服务器的信息。当和数据库的连接成功建立了之后，可以通过调用getMetaData()方法来获取数据库的元信息。DatabaseMetaData里面有很多方法，通过它们可以获取到数据库的产品名称，版本号，配置信息等。相关代码为：<br>DatabaseMetaData metaData = con.getMetaData();<br>String dbProduct = metaData.getDatabaseProductName();</p>
<p>13、JDBC的Statement是什么？<br>答：Statement是JDBC中用来执行数据库SQL查询语句的接口。通过调用连接对象的getStatement()方法我们可以生成一个Statement对象。我们可以通过调用它的execute()，executeQuery()，executeUpdate()方法来执行静态SQL查询。由于SQL语句是程序中传入的，如果没有对用户输入进行校验的话可能会引起SQL注入的问题。<br>另外，默认情况下，一个Statement同时只能打开一个ResultSet。如果想操作多个ResultSet对象的话，需要创建多个Statement。Statement接口的所有execute方法开始执行时都默认会关闭当前打开的ResultSet。</p>
<p>14、execute，executeQuery，executeUpdate的区别是什么？<br>答：1）execute方法用来执行任意的SQL查询，如果查询的结果是一个ResultSet，这个方法就返回true。如果结果不是ResultSet，比如insert或者update查询，它就会返回false。我们可以通过它的getResultSet方法来获取ResultSet，或者通过getUpdateCount()方法来获取更新的记录条数。<br>2）executeQuery方法用来执行查询(select)，并且返回ResultSet。即使查询不到记录返回的ResultSet也不会为null。我们通常使用executeQuery来执行查询语句，这样的话如果传进来的是insert或者update语句的话，它会抛出错误信息为 “executeQuery method can not be used for update”的java.util.SQLException。<br>3）executeUpdate方法用来执行添删改操作，即insert或者update/delete（DML）语句，或者 什么也不返回DDL语句。返回值是int类型，如果是DML语句的话，它就是更新的条数，如果是DDL的话，就返回0。<br>4）只有当你不确定是什么语句的时候才应该使用execute()方法，否则应该使用executeQuery或者executeUpdate方法。</p>
<p>15、JDBC的PreparedStatement是什么？<br>答：PreparedStatement对象代表的是一个预编译的SQL语句。用它提供的setter方法可以传入查询的变量。<br>由于PreparedStatement是预编译的，通过它可以将对应的SQL语句高效的执行多次。由于PreparedStatement自动对特殊字符转义，避免了SQL注入攻击，因此应当尽量的使用它。</p>
<p>16、PreparedStatement中如何注入NULL值？<br>答：可以使用它的setNull方法来把null值绑定到指定的变量上。setNull方法需要传入参数的索引以及SQL字段的类型，像这样：<br>ps.setNull(10, java.sql.Types.INTEGER);.</p>
<p>17、Statement中的getGeneratedKeys方法有什么用？<br>答：有的时候表会生成主键，这时候就可以用Statement的getGeneratedKeys()方法来获取这个自动生成的主键的值了。</p>
<p>18、相对于Statement，PreparedStatement的优点是什么？<br>答：它和Statement相比优点在于：<br>1）PreparedStatement有助于防止SQL注入，因为它会自动对特殊字符转义。<br>2）PreparedStatement可以用来进行动态查询。<br>3）PreparedStatement执行更快。尤其当你重用它或者使用它的拼量查询接口执行多条语句时。<br>4）使用PreparedStatement的setter方法更容易写出面向对象的代码，而Statement的话，我们得拼接字符串来生成查询语句。如果参数太多了，字符串拼接看起来会非常难看并且容易出错。</p>
<p>19、JDBC中大数据量的分页解决方法?<br>答：最好的办法是利用sql语句进行分页，这样每次查询出的结果集中就只包含某页的数据内容。<br>mysql语法：<br>    SELECT *<br>    FROM 表名<br>    LIMIT [START], length;<br>oracle语法：<br>    SELECT *FROM (<br>        SELECT 列名,列名,ROWNUM rn<br>        FROM 表名<br>        WHERE ROWNUM&lt;=(currentPage*lineSize)) temp<br>    WHERE temp.rn&gt;(currentPage-1)*lineSize;</p>
<p>简答和分析题集</p>
<p>20 java中有几种类型的流?JDK为每种类型的流提供了一些抽象类以提供继承，请说出他们分别是哪些类？<br>答：<br>（1）字节流，字符流。<br>（2）字节流继承于InputStream，OutputStream。<br>（3）字符流继承于Reader Writer。</p>
<p>21 使用处理流的优势有哪些？如何识别所使用的流是处理流还是节点流？<br>答：<br>优势：对开发人员来说，使用处理流进行输入/输出操作更简单。使用处理流的执行效率更高。<br>识别：处理流的构造器的参数不是一个物理节点，而是已经存在的流。而节点流都是直接以物理 IO 及节点作为构造器参数的。</p>
<p>22 什么是标准的IO流？<br>答：在java语言中用stdin表示键盘，用stdout表示监视器。它们被封装在System类的类变量 in 和 out 中，对应系统调用System,in 和 System,out。这样的两个流加上System.err统称为标准流。<br>System类中声明的3个类变量：<br>（1）public static InputStream in;<br>（2）public static PrinStream out;<br>（3）public static PriStram err;</p>
<p>23  什么能被序列化？什么不能被序列化？<br>答：<br>能被序列化：<br>（1）属性<br>（2）类型；<br>不能被序列化：<br>（1）static的属性；<br>（2）方法，<br>（3）加了transient修饰符的属性。</p>
<p>24 什么是java序列化，如何实现java序列化？<br>答：<br>（1）序列化而就是一种处理对象流的机制，所谓对象流也就是对象的内容进行流化。<br>（2）实现：将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，implements Serializable只是为了标注该对象是可被序列化的，然后使用一个输出流（如：FileOutputStream）来构造一个ObjectOutputSream对象，接着使用ObjectOutputSream对象的writeObject方法就可以将参数obj对象写出，要恢复的话则使用输入流。</p>
<p>1.抽象：<br>　答：<br>  抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。</p>
<p>2.继承：<br>　答：<br>  继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。</p>
<p>3.封装：<br>　答：<br>   封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。</p>
<ol start="4">
<li>多态性：<br> 答：<br> 　多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</li>
</ol>
<p>5、String是最基本的数据类型吗?<br>　答：<br>  基本数据类型有8个，包括byte、short、int、long、char、float、double和boolean。<br>　java.lang.String是类，不属于基本数据类型。</p>
<p>6、int 和 Integer 有什么区别<br>　Java 提供两种不同的类型：引用类型和原始类型（或内置类型）。Int是java的原始数据类型，Integer是java为int提供的封装类。</p>
<p>小张到X软件公司实习，第一天程序员老李为摸底，问了他一个问题：Java中的有8个基本数据类型，这破坏了面向对象的思想，为此Java提供了封装类，那么这些封装类具体有哪些？请代小张回答（至少回答出其中六个即可得满分）</p>
<p>Java为每个原始类型提供了封装类。<br>原始类型       封装类<br>boolean      Boolean<br>char          Character<br>byte          Byte<br>short          Short<br>int          Integer<br>long          Long<br>float          Float<br>double      Double<br>　引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。</p>
<p>7、实习程序员小张，接到X项目组经理命令完成某模块代码开发。在设计中，该模块算法中特别提到将有大量字符串的拼接。编码过程中，小张准备使用自己熟悉的String对象类完成这段代码，并向程序员老王征求意见，谁知老王否定了小张用String类型的方案，并建议他此处使用StringBuffer对象更合适，这令小张有些困惑。请帮小张分析下为何此处要用StringBuffer？<br>  即回答：String 和StringBuffer的区别<br>　答：<br>  JAVA平台提供了两个类：String和StringBuffer。<br>  String不是简单类型，而是一个类，它被用来表示字符序列。String的特点是一旦赋值，便不能更改其指向的字符对象，如果更改，则会生成一个新的字符串对象。<br>  StringBuffer是一个具有对象引用传递特点的字符串对象。StringBuffer对象可以调用其方法动态的进行增加、插入、修改和删除操作，从而实现多次插入字符，而不用担心像String类那样不断产生新对象而消耗内存，因而在字符串变化较多的操作中，效率更高。</p>
<p>9、&amp;和&amp;&amp;的区别。<br>   答： &amp;是位运算符，表示按位与运算，&amp;&amp;是逻辑运算符，表示逻辑与（and）。</p>
<p>10、final, finally的区别。<br>　　答：final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改（相当于常量）。被声明为final的方法也同样只能使用，不能覆盖。<br>    finally是异常处理语句结构的一部分，表示总是执行。一般在异常处理时提供 finally 块来执行任何清除操作。</p>
<p>11、Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?<br>　  答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被”屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型。</p>
<p>12、error和exception有什么区别?<br>　 答：error 表示恢复不是不可能但很困难的情况下的一种严重问题，是一种系统性的错误，程序本身不能处理这样的情况，比如说内存溢出。<br>      exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，是不会发生这种错误的。</p>
<p>13、abstract class和interface有什么区别?<br>　  答：声明方法的存在而不去实现它的类被叫做抽象类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract 类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例。不能有抽象构造函数或抽象静态方法。     Abstract 类的子类为它们父类中的所有抽象方法提供实现，否则它们也是抽象类为。取而代之，在子类中实现该方法。知道其行为的其它类可以在类中实现这些方法。<br>　   接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。接口只可以定义static final成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口。</p>
<p>14、GC是什么? 为什么要有GC?<br>　　答：1）GC是垃圾收集的意思（Gabage Collection）,内存处理是编程人员容易出现问题的地方，忘记或错误的内存回收会导致程序或系统的不稳定，甚至崩溃；2）Java提供的垃圾回收机制（GC）可以自动监测对象是否超过作用域从而达到自动回收内存的目的；3）Java不提供显示释放已分配内存的操作方法。</p>
<p>15、分析题<br>    1）short s1 = 1; s1 = s1 + 1;有什么错?<br>    答：short s1 = 1; s1 = s1 + 1; （s1+1运算结果是int型，int数据1给short型变量s1，需要强制转换类型）<br>    2）short s1 = 1; s1 += 1;有什么错?<br>    答：本题无措short s1 = 1; s1 += 1;（可以正确编译）</p>
<p>16、分析题：Math.round(11.5)等於多少? Math.round(-11.5)等於多少?<br>    答：Math.round(11.5)==12<br>        Math.round(-11.5)==-11<br>        round方法返回与参数最接近的长整数，参数加1/2后求其floor.</p>
<p>17、String s = new String(“xyz”);创建了几个String Object?<br>    答：两个对象，一个是在字符串池中的对象“xyx”,引用对象s指向的堆空间的对象“xyx”。其中，堆空间的对象“xyz”是字符串池中字符串“xyz”的副本。    </p>
<p>18、接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承实体类(concrete class)?<br>　  答：接口可以继承接口。抽象类可以实现(implements)接口，抽象类是否可继承实体类，但前提是实体类必须有明确的构造函数。</p>
<p>19、数组有没有length()这个方法? String有没有length()这个方法？<br>　  答：数组没有length()这个方法，只有length的属性，用来得到数组元素个数。<br>        String有length()这个方法，用来得到字符串长度。</p>
<p>20、构造器Constructor是否可被override?<br>　  答：构造器Constructor不能被继承，因此不能重写Overriding，但可以被重载Overloading。</p>
<p>21、是否可以继承String类?<br>　  答：String类是final类，故不可以继承。</p>
<p>22、swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上?<br>　  答：switch（expr1）中，expr1是一个整数表达式。因此传递给 switch 和 case 语句的参数应该是 int、 short、 char 或者 byte。<br>       long,string 都不能作用于swtich。</p>
<p>23、try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?<br>　  答：会执行，在return前执行。</p>
<p>24、编程题: 用最有效率的方法算出2乘以8等於几?<br>    答：用位运算符“&lt;&lt;”，语句写为：2 &lt;&lt; 3;</p>
<p>25、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递?<br>　  答：<br>    是值传递。Java 编程语言只有值传递参数。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的。</p>
<p>26、Java中的异常处理机制的简单原理和应用。<br>　   答：<br>     当JAVA 程序违反了JAVA的语义规则时，JAVA虚拟机就会将发生的错误表示为一个异常。违反语义规则包括2种情况。一种是JAVA类库内置的语义检查。例如数组下标越界,会引发IndexOutOfBoundsException;访问null的对象时会引发NullPointerException。另一种情况就是JAVA允许程序员扩展这种语义检查，程序员可以创建自己的异常，并自由选择在何时用throw关键字引发异常。所有的异常都是 java.lang.Thowable的子类。</p>
<p>27、描述一下JVM加载class文件的原理机制?<br>　  答：JVM中类的装载是由ClassLoader和它的子类来实现的,Java ClassLoader 是一个重要的Java运行时系统组件。它负责在运行时查找和装入类文件的类。</p>
<p>28、char型变量中能不能存贮一个中文汉字?为什么?<br>　  答：能够定义成为一个中文的，因为java中以unicode编码，一个char占16个字节，所以放一个中文是没问题的</p>
<p>29、多线程有几种实现方法,都是什么?同步有几种实现方法,都是什么?<br>    答：多线程有两种实现方法，分别是继承Thread类与实现Runnable接口<br>    同步的实现方面有两种，分别是synchronized,wait与notify</p>
<p>30、线程的基本概念、线程的基本状态以及状态之间的关系<br>　 答：<br>   线程指在程序执行过程中，能够执行程序代码的一个执行单位，每个程序至少都有一个线程，也就是程序本身。<br>   Java中的线程有四种状态分别是：运行、就绪、挂起、结束。 </p>
<p>=============================================<br>论述题<br>31、谈谈对Java语言中异常处理的理解？（<br>    1）可以从异常处理包含哪些关键字；每个关键字的含义或作用；引用异常处理后对开发有哪些帮助；异常处理机制的类体系结构；异常处理实现的底层机制等角度进行分析（但不限于这些角度）；<br>    2）能正确答出3个及以上点，且字数超过200字，则得满分。答案仅供参考，不唯一<br>   ）<br>    答：<br>    1、基本概念<br>    Java的异常处理是通过5个关键词来实现的：try、catch、throw、throws和finally。一般情况下是用try来执行一段程序，如果出现异常，系统会抛出（throws）一个异常，这时候你可以通过它的类型来捕捉（catch）它，或最后（finally）由缺省处理器来处理。</p>
<pre><code>2、5个主要关键字的作用
用try来指定一块预防所有&quot;异常&quot;的程序。紧跟在try程序后面，应包含一个catch子句来指定你想要捕捉的&quot;异常&quot;的类型。
finally为确保一段代码不管发生什么&quot;异常&quot;都被执行一段代码。
throw语句用来明确地抛出一个&quot;异常&quot;。
throws用来标明一个成员函数可能抛出的各种&quot;异常&quot;。

3、实现的机制
Java 通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在Java中，每个异常都是一个对象，它是Throwable类或其它子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并进行处理。
4、采用异常处理机制的好处
可以提高Java语言的处理错误能力；可以帮助程序员调试程序，发现开发中的问题，提高开发效率；可以让Java程序有健壮性，程序不容易崩溃；</code></pre>
<p>===========================================================</p>
<p>32、一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？<br>   答：1）可以。<br>       2）只有一个类的类名能与Java程序的该源文件名相同。</p>
<p>33、java中实现多态的机制是什么（Java借助什么实现多态性）？<br>　 答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。<br>      重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。</p>
<p>34、在JAVA中，如何跳出当前的多重嵌套循环？<br>    答：用break; return 方法。</p>
<p>35、Java是从（  B  ）语言改进重新设计而发展来的？<br>A. Ada    B. C++    C.Pascal  D.BASIC<br>分析：Java是从C、C++发展过来的</p>
<p>36、研究下面Java代码<br>public class TestException{<br>    public static void main(String args[]){<br>        try{<br>            System.out.println(“hello,jr”);<br>            System.exit(0);<br>        }finally{<br>            System.out.println(“88”);<br>        }<br>    }<br>}<br>输出结果为：（  A  ）<br>A. hello,jr<br>B. 88<br>C. hello,jr后是88<br>D. 不能编译<br>分析：System.exit(0);会中断程序，即使是finally都无法被执行</p>
<p>37、下面说法正确的有（  C   ）<br>A. class中的contructor不可省略<br>B. contructor必须与class同名，但方法不能与class同名<br>C. contructor在一个对象被new时执行<br>D. 一个class只能定义一个contructor</p>
<p>分析：contructor就是指的构造方法，普通方法也可以和类同名</p>
<p>38、在java中，已定义两个接口B和C，要定义一个实现这两个接口的类，以下语句正确的是（  C  ）<br>A. interface A extends B,C<br>B. interface A implements B,C<br>C. class A implements B,C<br>D. class A implements B,implements C</p>
<p>分析：类实现接口的基本语法</p>
<p>39、当编译并允许下面程序时，会发生什么结果？（   D   ）<br>public class Demo{<br>    protected Demo(){<br>        for(int i=0;i&lt;10;i++){<br>            System.out.println(i);<br>        }<br>    }</p>
<pre><code>public static void main(String args[])&#123;
    Demo d=new Demo();
&#125;</code></pre>
<p>}<br>A. 编译错误，构造方法不能被声明为protected<br>B. 允许错误，构造方法不能被声明为protected<br>C. 编译并运行输出0到10<br>D. 编译并运行输出0到9</p>
<p>分析：本题程序无错误可正常运行，构造方法是可以定义为protected的。</p>
<p>40、当编译和运行下面程序时，哪项描述可以最准确的表达发生了什么事情（   B    ）<br>public class MyAr{</p>
<pre><code>public void amethod()&#123;
    int i;
    System.out.println(i);    
&#125;

public static void main(String args[])&#123;
    MyAr m=new MyAr();
    m.amethod();
&#125;</code></pre>
<p>}<br>A. 编译并输出0<br>B. 编译错误<br>C. 编译并输出null<br>D. 运行错误</p>
<p>分析： 方法amethod()中定义的变量：int i; 是一个方法级别的变量，必须手动赋予初值，否则编译错误。<br>       注意：成员变量系统给默认值，如果不显示手动赋值，依然是正确的。</p>
<p>41、给定java代码如下，关于super的用法，以下描述正确的是（    C   ）<br>class C extends B{<br>    public C(){<br>        super();<br>    }<br>}<br>A. 用来调用类B中定义的super()方法<br>B. 用来调用类C中定义的super()方法<br>C. 用来调用类B中的无参构造方法<br>D. 用来调用类B中第一个出现的构造方法</p>
<p>分析：super()的含义是用来调用父类（B）中不带参数的构造方法。super()的用法，一般出现在子类构造方法中第一行。</p>
<p>42、下列语句正确的是（   A  ）<br>A) 形式参数可被视为local variable<br>B) 形式参数可被字段修饰符修饰<br>C) 形式参数为方法被调用时，真正被传递的参数<br>D) 形式参数不可以是对象</p>
<p>分析：B项无此说法，C中被真正传递的是实参，D中形参可以使对象</p>
<p>43、以下代码输出结果为（  C    ）<br>public class Test{<br>    public static String output=””;</p>
<pre><code>public static void foo(int i)&#123;
    try&#123;
        if(i==1)
            throw new Exception();

        output+=&quot;1&quot;;            
    &#125;catch(Exception e)&#123;
        output+=&quot;2&quot;;
        return ;
    &#125;finally&#123;
        output+=&quot;3&quot;;
        output+=&quot;4&quot;;
    &#125;
&#125;

public static void main(String args[])&#123;
    foo(0);
    foo(1);
    System.out.println(output);
&#125;</code></pre>
<p>}<br>A. 1342        B. 123        C. 134234    D. 13423</p>
<p>分析：本题中，foo(0)时，if语句if(i==1)throw new Exception();不满足条件，不会抛出异常，因此此时output值为“134”；<br>      紧接着执行foo(1)时，if语句if(i==1)throw new Exception();满足条件，抛出异常，执行catch语句，output值变成“1342”；<br>      最难点在于此时碰到了return，是否还会执行finally语句，答案是会执行，因此最后output值变成“134234”；答案为C。</p>
<p>44、在Java中，下列（  D    ）类不能派生出子类？<br>A) public class MyClass{ … }<br>B) class MyClass{ … }<br>C) abstract class MyClass{ … }<br>D) final class MyClass{    … }</p>
<p>分析：类前面可以有public和默认两种权限，一般都能被子类继承，因此A、B答案可以派生子类<br>      C答案是抽象类，也可以被继承<br>      D答案是final修饰的类，是最终类，不允许被继承。</p>
<p>45、编译和运行下面代码时显示结果是（     ）<br>public class Conv{<br>    public static void main(String argv[]){<br>            Conv c=new Conv();<br>            String s=new String(“ello”);<br>            c.amethod(s);<br>    }<br>    public void amethod(String s){<br>            char c=’H’;<br>            c+=s;<br>            System.out.println(c);<br>    }<br>}<br>A、Hello<br>B、ello<br>C、elloH<br>D、编译错误<br>解答：D<br>分析：c是字符类型，s是字符串类型，字符型无法自动转换成字符串类型，因此语句c+=s;类型不兼容，有语法错误，故答案是D<br>修改方案：将char c=’H’;语句变为String c=”H”;</p>
<p>46、当下列程序执行时，其输出结果是（     ）。<br>int i=9;<br>switch (i) {<br> default:<br> System.out.println(“default”);<br> case 0:<br> System.out.println(“zero”);<br> break;<br> case 1:<br> System.out.println(“one”);<br> case 2:<br> System.out.println(“two”);<br>}<br>A、default<br>B、default, zero<br>C、错误： default 子句没有定义<br>D、没有输出结果<br>解答：Ｂ<br>原因：程序开始遇到default关键字，会执行其语句块中语句，输出“default”；<br>由于default语句块中没有结束switch语句的关键字break;<br>所以程序会继续执行其他case块中语句，并且无需验证case的值匹配；运行到case 0语句块时，首先输出“zero”，最后碰到break语句，结束整个switch语句块。<br>故最后输出结果：<br>default<br>zero</p>
<p>47、阅读下列代码，其正确的结果是（     ）。<br>publicclass Test2 {<br>    static boolean foo(char c) {<br>       System.out.print(c);<br>       return true;<br>    }<br>    Public static void main(String[] argv) {<br>       int i = 0;<br>       //for(65;88&amp;&amp;(i&lt;2);67)<br>       for (foo(‘A’); foo(‘B’) &amp;&amp; (i &lt; 2); foo(‘C’)) {<br>           i++;<br>           foo(‘D’);<br>       }<br>    }<br>}<br>A. ABDCBDCB<br>B. ABCDABCD<br>C. Compilation fails.<br>D. An exception is thrown at runtimeB、1<br>解答：A</p>
<p>48、有以下程序段：<br>class MyThread extends Thread {<br>    public static void main(String args[]) {<br>        MyThread t = new MyThread();<br>        MyThread s = new MyThread();<br>        t.start();<br>        System.out.print(“one.”);<br>        s.start();<br>        System.out.print(“two.”);<br>    }<br>    public void run() {<br>        System.out.print(“Thread”);<br>    }<br>}<br>则下列选项说法正确的是（     ）。<br>A、编译失败<br>B、程序运行结果为：one.Threadtwo.Thread<br>C、程序运行结果是：one.two.ThreaThread<br>D、程序运行结果不确定<br>解答：D<br>分析：线程是并行运行，故结果输出顺序是不确定。<br>部分同学计算机运行几次时，可能会发现结果确定，<br>是因计算机速度太快导致，可以多次运行十几次或几十次，可以发现结果有变化</p>
<p>49、仔细分析下面程序，其正确的输出结果是（     ）。<br>publicclass Test1 {<br>    public static void changeStr(String str){   //②str<br>        str=”welcome”;<br>    }<br>    public staticvoid main(String[] args) {<br>        String str=”1234”;               //①str<br>        changeStr(str);<br>        System.out.println(str);<br>    }<br>}<br>A、welcome<br>B、welcome1234<br>C、1234<br>D、1234welcome<br>解答：C</p>
<p>分析：<br>1）主方法中的①号变量str是实际参数，changeStr(String str)中的②号str是形式参数，虽然是两个同名字变量，但实际是两个变量。</p>
<p>2）Java字符串基于字符串池实现，虽然①号str传值给了②号str，并且传的是引用，<br>   但②号str中执行语句str=”welcome”;后，并没有修改”1234”这个值本身，而是在字符串池中，新增加了一个字符串常量”welcome”，<br>   ②号str的引用指向了新的”welcome”值，但①号str指向的值”1234”没有被修改，因此主方法中打印输出的①号str的值还是1234</p>
<p>3）这里要注意，正常情况下，给方法的参数传值，当值是对象类型时，是引用传递。（若是基本数据类型，则是值传递）<br>   引用传递的确是可以利用方法来修改引用指向对的成员变量值的，字符串类（String）因其实现的机制是基于字符串池，故情况特殊<br>   参见下面代码对比：</p>
<p>class Stu{<br>    int stuAge;<br>}<br>public class Test1 {<br>    public static void changeStu(Stu stu){<br>        stu.stuAge=100;<br>    }<br>    public static void changeStr(String str){<br>        str=”welcome”;<br>    }<br>    public static void main(String[] args) {<br>        String str=”1234”;<br>        changeStr(str);               //Java字符串基于字符串池实现，因此不是简单的传递引用<br>        System.out.println(str);<br>//        Stu s=new Stu();<br>//        s.stuAge=20;<br>//        changeStu(s);                //对象类型传的是引用<br>//        System.out.println(s.stuAge);//输出100<br>    }<br>}  </p>
<p>50、下面2个文件位于相同目录下，编译运行后会出现的情况是（      ）。<br>//File P1.java<br>package MyPackage;<br>class P1{<br>void afancymethod(){<br>        System.out.println(“What a fancy method”);<br>        }<br>}<br>//File P2.java<br>public class P2 extends P1{<br>    public static void main(String argv[]){<br>    P2 p2 = new P2();<br>    p2.afancymethod();<br>    }<br>}<br>A、2个文件都可以编译，P2运行输出“What a fancy method”<br>B、2个文件都不能编译<br>C、2个文件都可以编译，P2运行时报错误<br>D、P1编译成功，P2编译时报错误<br>解答：D</p>
<p>51、编译和运行下面代码时显示的结果是（     ）。<br>public class MyClass{<br> static int i;<br> public static void main(String argv[]){<br>     System.out.println(i);<br> }<br>}<br>A、Error Variable i may not have been initializenull<br>C、1<br>D、0<br>解答：D<br>分析：本题能正常运行，static int i;中定义的i是静态成员变量，Java中成员变量默认给了初值，整型的初值是0，故此题正确</p>
]]></content>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2021/07/22/redis/</url>
    <content><![CDATA[<h2 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h2><h3 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h3><h4 id="KV键值对"><a href="#KV键值对" class="headerlink" title="KV键值对"></a>KV键值对</h4><ul>
<li>新浪：<strong>Redis</strong></li>
<li>美团：Redis+Tair</li>
<li>阿里、百度：Redis+memecache</li>
</ul>
<a id="more"></a>

<h4 id="文档型数据库（bson格式-和-json一样）"><a href="#文档型数据库（bson格式-和-json一样）" class="headerlink" title="文档型数据库（bson格式 和 json一样）"></a>文档型数据库（bson格式 和 json一样）</h4><ul>
<li><strong>MongoDB</strong>(一般必须要掌握)<ul>
<li>MongoDB是一个基于分布式文件存储的数据库，c++编写，主要用来处理大量的文档！</li>
<li>是一个介于关系型数据库和菲关系型数据库中间的产品！</li>
</ul>
</li>
<li>ConthDB</li>
</ul>
<h4 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h4><ul>
<li><strong>HBase</strong></li>
<li>分布式文件系统</li>
</ul>
<h4 id="图关系数据库"><a href="#图关系数据库" class="headerlink" title="图关系数据库"></a>图关系数据库</h4><ul>
<li>他不是存图形，放的是关系，比如：朋友圈社交网络，广告推荐</li>
<li><strong>Neo4j</strong>,InfoGrid</li>
</ul>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201007193243690.png" alt="image-20201007193243690"></p>
<h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Redis（<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。</p>
</blockquote>
<h3 id="Redis能干嘛"><a href="#Redis能干嘛" class="headerlink" title="Redis能干嘛"></a>Redis能干嘛</h3><ol>
<li>内存存储、持久化。内存中是断电即失，所以说持久化很重要（rdb、aof）</li>
<li>效率高，可以用于高速缓存</li>
<li>发布订阅系统</li>
<li>地图信息分析</li>
<li>计时器、计数器（浏览量!)</li>
</ol>
<h3 id="Redis的特性"><a href="#Redis的特性" class="headerlink" title="Redis的特性"></a>Redis的特性</h3><ol>
<li>多样的数据类型</li>
<li>持久优化</li>
<li>集群</li>
<li>事务</li>
</ol>
<h3 id="Linux安装Redis"><a href="#Linux安装Redis" class="headerlink" title="Linux安装Redis"></a>Linux安装Redis</h3><ol>
<li>下载安装包</li>
</ol>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201007195230760.png" alt="image-20201007195230760"></p>
<ol start="2">
<li>解压Redis的安装包，程序一般放在/opt目录下。</li>
<li>进入解压后的文件，可以看到我们redis的配置文件</li>
</ol>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014160551048.png" alt="image-20201014160551048"></p>
<ol start="4">
<li>基本的环境安装命令</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++
<span class="token comment">#如果redis的版本是6.0以上的，需要升级gcc到5.3以上</span>
yum -y <span class="token function">install</span> centos-release-scl
yum -y <span class="token function">install</span> devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils
scl <span class="token builtin class-name">enable</span> devtoolset-9 <span class="token function">bash</span>
<span class="token comment">#需要注意的是scl命令启用只是临时的，退出shell或重启就会恢复原系统gcc版本。</span>
<span class="token comment">#如果要长期使用gcc 9.3的话：</span>
<span class="token builtin class-name">echo</span> <span class="token string">"source /opt/rh/devtoolset-9/enable"</span> <span class="token operator">>></span>/etc/profile
<span class="token comment">#这样退出shell重新打开就是新版的gcc了</span>
<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li><p>redis的默认安装路径<code>/usr/local/bin</code></p>
</li>
<li><p>将redis配置文件，复制到我们当前目录下    redis.conf文件</p>
</li>
<li><p>配置redis为后台启动</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cd 到redis.conf文件目录</span>
<span class="token function">vim</span> 复制的redis.conf文件的路径
<span class="token comment">#向下找，修改daemenize no 为 daemonize yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="8">
<li>启动redis</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在/usr/local/bin目录下</span>
redis-server redis.conf文件的地址
redis-server
redis-cli p6379   <span class="token comment">#连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="9">
<li>查看redis的进程是否开启</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> redis <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014165115068.png" alt="image-20201014165115068"></p>
<ol start="10">
<li>关闭redis服务</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">shutdown</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014164917598.png" alt="image-20201014164917598"></p>
<p><a href="https://blog.csdn.net/u011159417/article/details/80085011">Linux安装redis</a></p>
<h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3><p>redis-benchmark是一个压力测试工具！</p>
<p>官方自带的性能测试工具！</p>
<p>redis-benchmark命令参数</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">选项</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>-h</strong></td>
<td align="left">指定服务器主机名</td>
<td align="left">127.0.0.1</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>-p</strong></td>
<td align="left">指定服务器端口</td>
<td align="left">6379</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>-s</strong></td>
<td align="left">指定服务器 socket</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>-c</strong></td>
<td align="left">指定并发连接数</td>
<td align="left">50</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>-n</strong></td>
<td align="left">指定请求数</td>
<td align="left">10000</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>-d</strong></td>
<td align="left">以字节的形式指定 SET/GET 值的数据大小</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>-k</strong></td>
<td align="left">1=keep alive 0=reconnect</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>-r</strong></td>
<td align="left">SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>-P</strong></td>
<td align="left">通过管道传输 <numreq> 请求</numreq></td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><strong>-q</strong></td>
<td align="left">强制退出 redis。仅显示 query/sec 值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><strong>–csv</strong></td>
<td align="left">以 CSV 格式输出</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><strong>-l</strong></td>
<td align="left">生成循环，永久执行测试</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><strong>-t</strong></td>
<td align="left">仅运行以逗号分隔的测试命令列表。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><strong>-I</strong></td>
<td align="left">Idle 模式。仅打开 N 个 idle 连接并等待。</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>简单测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#测试：100个并发连接   100000请求</span>
redis-benchmark -h localhost -p <span class="token number">6379</span> -c <span class="token number">100</span> -n <span class="token number">100000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014171727085.png" alt="image-20201014171727085"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014172606359.png" alt="image-20201014172606359"></p>
<h3 id="基础的知识"><a href="#基础的知识" class="headerlink" title="基础的知识"></a>基础的知识</h3><p>redis一共有16个数据库。</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20201014173309203.png" alt="image-20201014173309203"></p>
<p>默认使用的是第0个</p>
<p>可以使用select进行切换数据库！</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token keyword">select</span> <span class="token number">3</span>  <span class="token comment">#切换数据库</span>
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span> DBSIZE <span class="token comment">#查看数据库大小</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token builtin class-name">set</span> name pty  <span class="token comment">#设置name 属性值</span>
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span> get name   <span class="token comment">#拿到数据库中的name属性值</span>
<span class="token string">"pty"</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span> keys *    <span class="token comment">#查看数据库中的全部key</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span> flushdb   <span class="token comment">#清除当前数据库</span>
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">></span> flushall   <span class="token comment">#清除全部数据库</span>
OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>redis是单线程的</strong></p>
<p>Redis很快，是基于内存操作的，CPU不是Redis性能瓶颈，Redis的瓶颈是机器的内存和网络带宽。</p>
<p><strong>redis是单线程的为什么这么快</strong></p>
<p>速度：CPU&gt;内存&gt;硬盘</p>
<p>redis是将所有的数据全部放在内存中的，多线程cpu上下文会切换，这是一个耗时操作。对于内存系统来说，如果没有上下文切换效率就是最高的，所以单线程去操作效率就是最高的。</p>
<h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作==数据库==、==缓存==和==消息中间件MQ==。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）</p>
<h3 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> name pty  <span class="token comment">#set一个key</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> exists name   <span class="token comment">#判断当前key是否存在，存在则返回1，不存在返回0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> exists name1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> expire name <span class="token number">10</span>  <span class="token comment">#给当前的key设置过期时间，单位是秒</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl name     <span class="token comment">#查看当前key的剩余时间</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> move name <span class="token number">2</span>   <span class="token comment">#移动当前的可以到第二个数据库</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">type</span> name  <span class="token comment">#查看当前key的类型</span>
string
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> del name   <span class="token comment">#删除当前的key,可以同时删除多个key，返回删除的key的数量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更多的redis-key的命令参考官网：<a href="http://www.redis.cn/commands.html">redis官网</a></p>
<h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#####################################</span>
<span class="token comment">#append 追加字符串</span>
<span class="token comment">#strlen 获取列表的长度</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> key1 v1   <span class="token comment">#set一个key</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key1  
<span class="token string">"v1"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> append key1 hah   <span class="token comment">#在key1后面追加字符串，如果key1不存在，就相当于set key1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key1
<span class="token string">"v1hah"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> strlen key1 <span class="token comment">#获取key1的长度</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
<span class="token comment">########################################</span>
<span class="token comment">#incr自增1</span>
<span class="token comment">#decr自减1</span>
<span class="token comment">#incrby 自增指定的数</span>
<span class="token comment">#decrby 自减指定的数</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> views <span class="token number">0</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get views
<span class="token string">"0"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incr views    <span class="token comment">#自增 +1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get views
<span class="token string">"1"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> decr views    <span class="token comment">#自减 -1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get views
<span class="token string">"0"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incrby views <span class="token number">10</span>  <span class="token comment">#自增 +10，自增多少可以自己设置</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get views
<span class="token string">"10"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> decrby views <span class="token number">20</span> <span class="token comment">#自减 -20  自减多少可以自己设置</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -10
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get views
<span class="token string">"-10"</span>
<span class="token comment">###############################</span>
<span class="token comment">#字符串范围 range</span>
<span class="token comment">#截取字符串</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> key1 hello,world
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key1
<span class="token string">"hello,world"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getrange key1 <span class="token number">0</span> <span class="token number">3</span>    <span class="token comment">#截取字符串 [0,3]</span>
<span class="token string">"hell"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getrange key1 <span class="token number">0</span> -1   <span class="token comment">#截取全部字符串，和get key1效果一样</span>
<span class="token string">"hello,world"</span>
<span class="token comment">#################################</span>
<span class="token comment">#setrange 替换字符串</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> key2 abcde
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key2
<span class="token string">"abcde"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setrange key2 <span class="token number">2</span> hahaa  <span class="token comment">#替换指定位置开始的字符串，这里的指定位置和数组一样，即2相当于3</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key2 
<span class="token string">"abhahaa"</span>
<span class="token comment">###########################################</span>
<span class="token comment">#setex(set with expire)  </span>
<span class="token comment">#设置一个key，并为其设置过期时间，和expire差不多，但是setex是在设置key的时候就为key设置过期时间,而expire是在设置完key以后在设置过期时间</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setex name <span class="token number">20</span> pty  <span class="token comment">#设置一个key,并设置20s过期</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl name   <span class="token comment">#查看当前key的剩余时间</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> 
<span class="token comment">#setnx(set if not exist) 设置一个key,如果key不存在则设置，存在则创建失败。</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx key3 hh   <span class="token comment">#设置一个key,因为key3不存在，所以创建成功</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key3
<span class="token string">"hh"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx key3 hah  <span class="token comment">#设置一个key,因为key3已经存在，所以创建失败</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key3
<span class="token string">"hh"</span>
<span class="token comment">#############################</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mset k1 v1 k2 v2 k3 v3  <span class="token comment">#同时设置多个值</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k3"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k1"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k2"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mget k1 k2 k3  <span class="token comment">#同时获取多个值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"v1"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"v2"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v3"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> msetnx k1 v1 k4 v2  <span class="token comment">#同时设置多个值，如果已经存在，则创建失败，这是一个原子性操作，要么同时成功，要么同时失败，因为k1已经存在，所以创建失败，那么k4也没有创建成功。</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token comment">#####################################</span>
<span class="token comment">#getset   先返回key的值，然后再设置key的值</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getset k1 v2   <span class="token comment">#先返回key1原来的值v1，在将k1设置为v2</span>
<span class="token string">"v1"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1
<span class="token string">"v2"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>所有的List命令都是由l开头的。Redis不区分大小写。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">###############################################</span>
<span class="token comment">#Lpush</span>
<span class="token comment">#Rpush</span>
<span class="token comment">#Lrange</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list one <span class="token comment">#将一个值或多个值插入到key的头部（左），这里的list相当于这个列表的名字</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list two
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list three
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1 <span class="token comment">#获取list中指定区间的值，  0 -1 表示获取全部的值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"one"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> <span class="token number">1</span> <span class="token comment">#可以看到后进先出，类似于栈</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpush list <span class="token number">0</span>  <span class="token comment">#将一个值或多个值插入到list的尾部（右）  lpush从左插入，头部，rpush从右插入，尾部</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"one"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"0"</span>
<span class="token comment">#######################################</span>
<span class="token comment">#Lpop</span>
<span class="token comment">#Rpop</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpop list  <span class="token comment">#移出list的第一个元素，从左边移出</span>
<span class="token string">"three"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpop list  <span class="token comment">#移出list的最后一个元素，从右边移出</span>
<span class="token string">"0"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"two"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"one"</span>
<span class="token comment">#######################################</span>
<span class="token comment">#Lindex</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lindex list <span class="token number">1</span>   <span class="token comment">#通过下标获得list的某一个值</span>
<span class="token string">"one"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lindex list <span class="token number">0</span>
<span class="token string">"two"</span>
<span class="token comment">#########################################</span>
Llen
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> Llen list    <span class="token comment">#获取list的长度</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token comment">########################################</span>
<span class="token comment">#移出指定的值</span>
Lrem
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1   <span class="token comment">#可以看到，list中可以存在相同的值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"three"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"two"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"one"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrem list <span class="token number">1</span> one    <span class="token comment">#移出list集中指定个数的value,  移除list中的1个one</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"three"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"two"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrem list <span class="token number">2</span> three   <span class="token comment">#移除list中的2个three</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"two"</span>
<span class="token comment">########################################</span>
<span class="token comment">#Ltrim 修改集合中的元素，只保留指定区间的元素，可以理解为lpop,只不过这个是将指定区间外的都移除</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k4"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k3"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k2"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"k1"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ltrim list <span class="token number">1</span> <span class="token number">2</span>   <span class="token comment">#只保留list集合中区间1到区间2的元素</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1   <span class="token comment">#lrange 0 -1 是获取list的所有值，只返回两条，说明list已经被改变，不再是4条数据</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k3"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k2"</span>
<span class="token comment">#####################################</span>
RpopLpush  <span class="token comment">#移除列表的最后一个元素，并将他移动到一个新的列表的头部（左）</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpoplpush list list1 <span class="token comment">#将list的最后一个元素移到list1的头部，如果list1不存在会自动创建</span>
<span class="token string">"k2"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list1 <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k2"</span>
<span class="token comment">#######################################</span>
<span class="token comment">#Lset  将列表中指定下标的值修改为另一个值   如果列表不存在或者指定下标没有值，则修改失败，类似有更新操作</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> exists list   <span class="token comment">#判断数据库中是否存在list这个key</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lset list <span class="token number">1</span> pty    <span class="token comment">#因为不存在list，所以使用lset修改出错</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR no such key
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list k1    <span class="token comment">#创建list,并且添加值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> <span class="token number">0</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k1"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lset list <span class="token number">1</span> pty   <span class="token comment">#使用lset修改，因为list只有1个值，下标为1的位置没有值，所以修改失败</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR index out of range     <span class="token comment">#超出范围</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lset list <span class="token number">0</span> pty    <span class="token comment">#使用lset修改list中下标为0的值，修改为pty</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> 00
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token comment">##########################################</span>
<span class="token comment">#Linsert  在某个特定的元素的前面或者后面添加一个值</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> Linsert list before pty hello   <span class="token comment">#在list中的pty前面添加一个值 hello</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> Linsert list after pty ok   <span class="token comment">#在list中的pey后面添加一个值 ok</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"ok"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h3><p>set中的值不能重复，List中的值可以重复。set无序不重复集合。</p>
<p>set的命令以s开头</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##############################</span>
<span class="token comment">#Sadd  往set中添加一个元素</span>
<span class="token comment">#Smembers 查看set中的所有值</span>
<span class="token comment">#Sismember 判断一个值是不是在set中，是返回1，不是返回0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset hello  <span class="token comment">#向set中添加一个值</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset pty
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset pty  <span class="token comment">#向set中添加一个重复的值，因为set的值不能重复，所以添加失败</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers myset  <span class="token comment">#查看set中的所有值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hello"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sismember myset pty   <span class="token comment">#判断pty是否在set中，在返回1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sismember myset pet   <span class="token comment">#判断pet是否在set中，不在返回0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token comment">##############################</span>
<span class="token comment">#Scard 获取set中的元素个数</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> scard myset <span class="token comment">#获取myset中的元素个数</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token comment">###############################</span>
<span class="token comment">#Srem 移除set中的特定的值</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srem myset hello   <span class="token comment">#移除set中的特定值，移除myset中的hello</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers myset
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token comment">##################################</span>
<span class="token comment">#Srandmember  在set集合中随机抽取指定个数的元素</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset  <span class="token number">1</span> 
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset  <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset  <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span>  <span class="token comment">#向myset中添加元素，元素个数少，抽取有偶然性</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srandmember myset <span class="token number">1</span>   <span class="token comment">#在set集合中随机抽取一个元素</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"6"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srandmember myset <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srandmember myset <span class="token number">3</span>  <span class="token comment">#在set集合中随机抽取3个元素</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"5"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1"</span>
<span class="token comment">###############################</span>
<span class="token comment">#Spop 在set集合中随机移除指定个数个元素</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> spop myset <span class="token number">1</span>   <span class="token comment">#随机移除一个元素</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> spop myset <span class="token number">3</span>   <span class="token comment">#随机移除三个元素</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"7"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"9"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token comment">###############################</span>
<span class="token comment">#Smov 将一个指定元素元素从一个集合移到另一个集合</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> flushdb
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd set1 <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smove set1 set2 <span class="token number">1</span>   <span class="token comment">#将set1中的1移到set2中，如果set2没有创建会自动创建</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers set2
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span>
<span class="token comment">#############################</span>
<span class="token comment">#Sdiff  返回A B两个集合中，A集合中的和B集合中不同的元素，如果是SDIFF B A，则返回B中与A不同的元素</span>
<span class="token comment">#Sinter 返回A B两个set集合中共有的元素</span>
<span class="token comment">#Sunion 返回A B两个set集合中的所有元素，如果具有相同元素，只显示一个</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd set1 a
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd set1 b
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd set1 c   <span class="token comment">#向set1中添加a,b,c三个元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd set2 c
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd set2 d
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd set2 e   <span class="token comment">#向set2中添加c，d,e三个元素，可以看到，set1和set2具有c这个相同元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">sdiff</span> set1 set2  <span class="token comment">#返回set1和set2中，set1中的特有元素 相当于求差集</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"a"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"b"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sinter set1 set2  <span class="token comment">#返回set1和set2共有元素  相当于求交集</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sunion set1 set2  <span class="token comment">#返回set1和set2所有元素 相当于求并集</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"b"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"c"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"a"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"e"</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"d"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h3><p>每一个key里面又可以存储多个key-value组合，可以理解成类，如Person是一个类，里面包含username,age,class等属性，这里的Person就相当于外面的key,username就是里面的key,value就是属性值。</p>
<p>redis是一个key-value数据库，hash其实就是value里面又是多个key-value</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">############################</span>
<span class="token comment">#Hset 向key中添加 key-value组合，可以同时添加多个key-value</span>
<span class="token comment">#Hget 获取key中指定key的value,只能获取一个</span>
<span class="token comment">#Hmget 获取key中指定key的value,可以同时获取多个</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset hash1 filed1 hello   <span class="token comment">#向hash1中添加key=filed1,value=hello的元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hget hash1 filed1     <span class="token comment">#获取hash1中key=filed1的value</span>
<span class="token string">"hello"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset hash1 filed2 pty filed3 haha <span class="token comment">#同时设置多个key-value</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hmget hash1 filed1 filed2 filed3  <span class="token comment">#同时获取多个key-value</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"haha"</span>
<span class="token comment">#################################</span>
<span class="token comment">#Hdel 删除hash中指定key，可以同时删除多个</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hdel hash1 filed3  <span class="token comment">#删除hash1中的key=filed3</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hgetall hash1   <span class="token comment">#获取hash1中的所有key-value，可以看见filed3没有了</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"filed1"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hello"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"filed2"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token comment">####################################</span>
<span class="token comment">#Hlen  获取hash中key-value的数量</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hlen hash1 
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>  <span class="token comment">#返回的是key-value的数量，像上面的filed1和hello是一个key-value，数量为1。</span>
<span class="token comment">#####################################</span>
<span class="token comment">#Hexists 判断hash中是否存在指定的key，</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hexists hash1 filed1  <span class="token comment">#判断hash1中是否存在filed1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment">#######################################</span>
<span class="token comment">#Hkeys  获取hash中的所有key</span>
<span class="token comment">#Hvals 获取hash中所有的value</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hkeys hash1   <span class="token comment">#获取hash1中所有的key</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"filed1"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"filed2"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hvals hash1   <span class="token comment">#获取hash1中所有的value</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token comment">####################################</span>
<span class="token comment">#Hincrby  给hash中的指定key的值自增指定的数，没有hdecrby hincr hdecr</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset <span class="token builtin class-name">hash</span> field <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hincrby <span class="token builtin class-name">hash</span> field <span class="token number">4</span>  <span class="token comment">#给hash中的field自增+4</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hget <span class="token builtin class-name">hash</span> field
<span class="token string">"6"</span>
<span class="token comment">#######################################</span>
<span class="token comment">#Hsetnx 如果key不存在则创建成功，存在则不成功</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hsetnx <span class="token builtin class-name">hash</span> field1 <span class="token number">1</span>   <span class="token comment">#因为hash中没有field1，创建成功</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hsetnx <span class="token builtin class-name">hash</span> field1 <span class="token number">2</span> <span class="token comment">#因为hash中已经有了field1,创建失败</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上面的命令可以看出来，hash和string的操作很像。hash更适合于对象的存储，string更适合于字符串存储。</p>
<h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><p>在set的基础上增加了一个值  ，set添加数组的时候<code>sadd k1 v1</code> 而zset添加时<code>zadd k1 score1 v1</code></p>
<p>在key-value中间多了一个数字，这个数字用来排序。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">######################</span>
<span class="token comment">#Zadd 向zset中添加数据，并指定一个值，可以根据这个值进行排序。</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd zset1 <span class="token number">1</span> one    <span class="token comment">#向zset1中添加数据，指定score为1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd zset1 <span class="token number">2</span> two <span class="token number">3</span> three
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrange zset1 <span class="token number">0</span> -1  <span class="token comment">#添加多个数据，score为2 3</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"one"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"three"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> 
<span class="token comment">#########################</span>
<span class="token comment">#Zrangebyscore 获取zset中的value，并根据设定的score的值进行排序，升序排序。</span>
<span class="token comment">#Zrevrangebyscore 获取zsetz中的value,根据设定的score的值进行排序，降序排序。</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd salary <span class="token number">2500</span> xh
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd salary <span class="token number">3000</span> xm
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd salary <span class="token number">5000</span> pty
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrangebyscore salary -inf +inf   <span class="token comment">#根据score获取zset的value,score的取值范围为负无穷到正无穷，inf表示无穷大。 inf处的值可以任意修改</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xh"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xm"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrangebyscore salary -inf +inf withscores <span class="token comment">#不仅根据score获取zset中的value，同时还获取相对应的score</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xh"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2500"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"xm"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"3000"</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"5000"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrevrangebyscore salary +inf -inf withscores  <span class="token comment">#降序排序</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"5000"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"xm"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"3000"</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"xh"</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"2500"</span>
<span class="token comment">###################################</span>
<span class="token comment">#Zrem   移除指定的value</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrem salary xh    <span class="token comment">#移除salary中的xh</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrange salary <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xm"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"pty"</span>
<span class="token comment">#####################################</span>
<span class="token comment">#Zcard 获取zset中的数量</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zcard salary   <span class="token comment">#获取salary中的数量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token comment">#######################################</span>
<span class="token comment">#Zcount  获取zset中指定区间的成员数量</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd zet <span class="token number">1</span> hello <span class="token number">2</span> pty <span class="token number">3</span> hahah  
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zcount zet <span class="token number">1</span> <span class="token number">3</span>   <span class="token comment">#获取zet中score为1 - 3的成员数量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zcount zet <span class="token number">1</span> <span class="token number">2</span>    <span class="token comment">#获取zet中score为1 - 2的成员数量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以用来做排行榜。</p>
<h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><h3 id="geospatial-地理位置"><a href="#geospatial-地理位置" class="headerlink" title="geospatial(地理位置)"></a>geospatial(地理位置)</h3><p>朋友的定位，附近的人，打车距离计算……</p>
<p><a href="https://www.redis.net.cn/order/3685.html">文档</a></p>
<blockquote>
<p>Geoadd：将指定的地理空间位置（纬度、经度、名称）添加到指定的<code>key</code>中。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#geoadd  向key中添加指定的经纬度，先写经度，再写纬度。</span>
<span class="token comment">#有效的经度从-180度到180度。有效的纬度从-85.05112878度到85.05112878度。</span>
<span class="token comment">#两级无法直接添加，一般是下载城市数据，通过java程序一次性导入</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geoadd city <span class="token number">116.41</span> <span class="token number">39.90</span> beijing <span class="token number">121.47</span> <span class="token number">31.23</span> shanghai <span class="token number">108.95</span> <span class="token number">34.26</span> xian
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geoadd city <span class="token number">118.77</span> <span class="token number">32.04</span> nanjing
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geoadd city <span class="token number">106.50</span> <span class="token number">29.5</span> chongqing
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Geopos：从<code>key</code>里返回所有给定位置元素的位置（经度和纬度）。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Geopos:获取key中指定位置的经纬度。</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geopos city beijing shanghai xian   <span class="token comment">#获取北京，上海，西安的经纬度</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"116.40999823808670044"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"39.90000009167092543"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"121.47000163793563843"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"31.22999903975783553"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.95000249147415161"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geopos city nanjing  <span class="token comment">#获取南京的经纬度</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.76999884843826294"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Geodist：返回两个给定位置之间的距离</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Geodist:返回两个给定位置之间的距离</span>
<span class="token comment">#如果有一个位置不存在key中，则返回空值</span>
<span class="token comment"># m 表示单位为米。</span>
<span class="token comment"># km 表示单位为千米。</span>
<span class="token comment"># mi 表示单位为英里。</span>
<span class="token comment"># ft 表示单位为英尺。</span>
<span class="token comment">#如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geodist city beijing shanghai   <span class="token comment">#获取北京到上海的距离 没写单位，默认以m为单位</span>
<span class="token string">"1066992.3081"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geodist city beijing shanghai km <span class="token comment">#获取北京到上海的距离，以km为单位</span>
<span class="token string">"1066.9923"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Georadius：已给定的经纬度为中心，找出某一半径内的元素</p>
</blockquote>
<p>范围可以使用以下其中一个单位：</p>
<ul>
<li><strong>m</strong> 表示单位为米。</li>
<li><strong>km</strong> 表示单位为千米。</li>
<li><strong>mi</strong> 表示单位为英里。</li>
<li><strong>ft</strong> 表示单位为英尺。</li>
</ul>
<p>在给定以下可选项时， 命令会返回额外的信息：</p>
<ul>
<li><code>WITHDIST</code>: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致。</li>
<li><code>WITHCOORD</code>: 将位置元素的经度和维度也一并返回。</li>
<li><code>WITHHASH</code>: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</li>
</ul>
<p>命令默认返回未排序的位置元素。 通过以下两个参数， 用户可以指定被返回位置元素的排序方式：</p>
<ul>
<li><code>ASC</code>: 根据中心的位置， 按照从近到远的方式返回位置元素。</li>
<li><code>DESC</code>: 根据中心的位置， 按照从远到近的方式返回位置元素。</li>
<li>count：设置一个数字，可以只获取排序在前的指定数量的元素。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> georadius city <span class="token number">100</span> <span class="token number">35</span> <span class="token number">1000</span> km  
<span class="token comment">#获取以经纬度 100 35为中心，半径为1000km以内的元素，元素必须在key中才能获取</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> georadius city <span class="token number">100</span> <span class="token number">35</span> <span class="token number">1000</span> km count <span class="token number">1</span>  <span class="token comment">#使用count控制获取的数量</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> georadius city <span class="token number">100</span> <span class="token number">35</span> <span class="token number">1000</span> km withdist  <span class="token comment">#获取元素的同时返回元素与中心的直线距离</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"822.9592"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"864.4890"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> georadius city <span class="token number">100</span> <span class="token number">35</span> <span class="token number">1000</span> km withcoord  <span class="token comment">#获取元素同时返回元素的经纬度</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.95000249147415161"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"29.50000115408581536"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Georadiusbymember：找出位于指定范围内的元素，中心点有给定的位置元素</p>
</blockquote>
<p>这个命令与上面的Georadius命令功能差不多，区别在于上面的命令需要自己输入中心点的坐标，而这个命令是给出一个位置元素，以他的经纬度作为中心点。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> georadiusbymember city shanghai <span class="token number">500</span> km   <span class="token comment">#找出以上海为中心，半径为500km以内的元素</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"shanghai"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Geohash：返回一个或多个位置元素的 Geohash 表示</p>
</blockquote>
<p>该命令将返回11个字符的Geohash字符串</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geohash city nanjing <span class="token comment">#返回nanjing的经纬度，并将二维的经纬度转换为一维的字符串</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"wtsqq8twt80"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>Geo底层的实现原理其实就是Zset！我们可以使用Zset命令来操作geo</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrange city <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shanghai"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"beijing"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrem city beijing
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrange city <span class="token number">0</span> -1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shanghai"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geopos beijing
<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h3><p>用来统计基数。</p>
<p>什么是基数？ 基数就是在一个集合中，不重复的数字的数量。如A{1,2,3,4,3,5} 这个集合的基数就是5。</p>
<p>应用场景：在统计访问量的时候，一个人多次访问一个网站，还是算作一个人。这个时候就需要统计基数。</p>
<p>优点：占用的内存是固定的，2^64个不同元素的基数，只需要12kb的内存。</p>
<p>有0.81%的错误率，如果允许错误，可以使用Hyperloglog。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Pfadd 向key中添加元素</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfadd key a b c d e f g h i j k  <span class="token comment">#向key中添加元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfcount key  <span class="token comment">#统计key中的基数</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span> 
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfadd key1 f g h i k m n s <span class="token comment">#向key1中添加元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfcount key1  <span class="token comment">#统计key1中的基数</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfmerge key3 key key1  <span class="token comment">#将key 和 key1的元素合并到key3中。</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfcount key3  <span class="token comment">#统计key3中的基数，key3由key和key1合并而来，应该有19个数，但因为统计的是基数，有5个重复了，所以基数只有14个。</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>Bitmaps 位图，数据结构，都是操作二进制位来进行记录，只有0和1两个状态</p>
<p>统计用户活跃，不活跃，打卡，未打卡等两个状态的，都可以使用Bitmaps</p>
<p>以下以打卡为例子来讲解</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#setbit 向key中添加数据，第一个数字为坐标，第二个数字代表状态，只能为 1或者0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">0</span> <span class="token number">1</span>    <span class="token comment">#设置第一天的状态为1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">1</span> <span class="token number">0</span>   <span class="token comment">#设置第二天的状态为0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">1</span> <span class="token number">3</span>   <span class="token comment">#可以看到当第二个数字不是1或0时报错</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR bit is not an integer or out of range
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">2</span> <span class="token number">0</span>   <span class="token comment">#设置第三天的状态为0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">3</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">4</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">5</span> <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">6</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token comment">#########################################</span>
<span class="token comment">#getbit 查看某一个坐标的状态，是0还是1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getbit sign <span class="token number">6</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getbit sign <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token comment">##########################################</span>
<span class="token comment">#bitcount 统计状态为1的坐标的数量</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> bitcount sign
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>Redis事务本质：一组命令的集合，一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行！</p>
<p>一次性、顺序性、排他性。</p>
<p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会被执行。</p>
<p><strong>Redis单条命令是有原子性的，但是事务不保证原子性！</strong> </p>
<p>redis的事务：</p>
<ul>
<li>开启事务(multi)</li>
<li>命令入队()</li>
<li>执行事务(exec)</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># multi  开启事务</span>
<span class="token comment"># exec  执行事务</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi    <span class="token comment">#开启事务</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 v1   <span class="token comment">#输入一些命令</span>
QUEUED                      <span class="token comment">#可以看到并没有直接返回结果，而是将命令入队</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k2 v2
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k3 v3
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span>    <span class="token comment">#执行事务</span>
<span class="token number">1</span><span class="token punctuation">)</span> OK                    <span class="token comment">#将上述命令的结果按照入队的顺序返回</span>
<span class="token number">2</span><span class="token punctuation">)</span> OK
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v1"</span>
<span class="token number">4</span><span class="token punctuation">)</span> OK
<span class="token comment">#######################################</span>
<span class="token comment">#Discard  放弃事务</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi     <span class="token comment">#开启事务</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 v1   <span class="token comment">#输入命令</span>
QUEUED                      <span class="token comment">#命令入队</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k2 v2
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k3 v3
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> discard  <span class="token comment">#放弃事务</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k3    <span class="token comment">#因为要输入实行事务命令后，入队的命令才回执行。放弃了事务，所以入队的命名没有执行，所有get不到k3</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="监控（watch"><a href="#监控（watch" class="headerlink" title="监控（watch)"></a>监控（watch)</h3><p><strong>悲观锁：</strong></p>
<ul>
<li>很悲观，什么时候都会出现问题，无论做什么都会加锁。</li>
<li>性能低下。</li>
</ul>
<p><strong>乐观锁：</strong></p>
<ul>
<li>乐观，认为什么时候都不会出现错误，所以不会上锁！更新数据的时候去判断一下在此期间是否有人修改过这个数据</li>
</ul>
<p>正常成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> money <span class="token number">50</span>  
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> out <span class="token number">0</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">watch</span> money   <span class="token comment">#监视money字段</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi    <span class="token comment">#开启事务</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> decrby money <span class="token number">10</span>  <span class="token comment">#money自减10</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incrby out <span class="token number">10</span>   <span class="token comment">#money自增10</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span>   <span class="token comment">#执行事务，事务正常结束</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">40</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用多线程修改money的值，<strong>watch可以当做redis的乐观锁操作</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">watch</span> money   <span class="token comment">#监视money</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> decrby money <span class="token number">20</span>   
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incrby out <span class="token number">20</span>
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span>   <span class="token comment">#执行事务，在这一步之前，使用多线程修改了money的值，执行事务后才会执行入队的命令，在执行decrby money 20 命令的时候会比较money的值与开启事务前是否一样，如果不一样执行失败</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> unwatch    <span class="token comment">#如果事务执行失败，先解锁</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">watch</span> money   <span class="token comment">#重新监视money，因为已经修改了money的值（看下面那个程序）,所以money为50</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi     <span class="token comment">#开启事务</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> decrby money <span class="token number">10</span>   
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incrby out <span class="token number">10</span>   
QUEUED
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span>    <span class="token comment">#执行事务   比对监视的值（money）是否发生改变</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">40</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>多线程修改了money的值</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incrby money <span class="token number">10</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>Jedis是Redis官方推荐的java连接开发工具，使用java操作redis的中间件。</p>
<ol>
<li>导入依赖</li>
</ol>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>编码测试</li>
</ol>
<ul>
<li>连接数据库</li>
<li>操作命令</li>
<li>断开连接</li>
</ul>
<p>​    redis的操作命令在jedis中是方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> pty <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建Jedis对象,公网ip，端口号</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"47.94.228.33"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置的密码</span>
        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//执行redis命令。</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">getrange</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">getrange</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="SpringBoot整合redis"><a href="#SpringBoot整合redis" class="headerlink" title="SpringBoot整合redis"></a>SpringBoot整合redis</h3><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><p>在新建springboot项目的时候，在nosql部分勾选redis。或者是直接导入依赖。</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在springboot2.x之后，原来使用的jedis被替换成了lettuce.</p>
<p>jedis：采用的是直连，多个线程操作的话不安全。如果想要避免不安全，使用jedis pool连接池。</p>
<p>lettuce：采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据。</p>
<p>源码分析：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>
<span class="token comment">//ConditionalOnMissingBean 这个注解的意思是如果不存在才生效，意思就是如果我们自己编写了一个redisTemplate，则这个Bean不生效。我们可以自己写一个来redisTemplate来替换官方的</span>
<span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//默认的RedisTemplate 没有过多的设置，redis对象都是需要序列化</span>
     <span class="token comment">//泛型是object object 类型，我们后面需要强制转换&lt;string object></span>
   <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> template<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span> <span class="token comment">//因为String是redis中最常用的类型，所以单独提出了一个bean</span>
<span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span>
   <span class="token class-name">StringRedisTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> template<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2020/10/12/Linux/</url>
    <content><![CDATA[<h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>使用xshell工具在windows系统上连接Linux云服务器</p>
<a id="more"></a>

<ol>
<li>新建连接</li>
</ol>
<p><img src="images/blog/image-20201008124927869.png" alt="image-20201008124927869"></p>
<ol start="2">
<li>建立连接</li>
</ol>
<p><img src="images/blog/image-20201008125328043.png" alt="image-20201008125328043"></p>
<ol start="3">
<li>然后点击会话，输入用户名密码即可连接成功。</li>
</ol>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>使用xftp工具将本地的文件上传到云服务器</p>
<p><img src="images/blog/image-20201008130105924.png" alt="image-20201008130105924"></p>
<h2 id="走进Linux"><a href="#走进Linux" class="headerlink" title="走进Linux"></a>走进Linux</h2><h3 id="开机登录"><a href="#开机登录" class="headerlink" title="开机登录"></a>开机登录</h3><p>开机会启动许多程序，它们在Windows叫做服务，在Linux中叫做守护进程</p>
<p>开机成功后，会显示一个文本登录界面，这就是我们经常看到的登录界面。</p>
<p>在Linux中最高权限账户为root，可以操作一切！</p>
<h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><p><strong>Linux中没有错误就代表操作成功</strong></p>
<p>关机指令为：shutdown</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sync</span> <span class="token comment"># 将数据由内存同步到硬盘中。</span>

<span class="token function">shutdown</span> <span class="token comment"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span>

<span class="token function">shutdown</span> –h <span class="token number">10</span> <span class="token comment"># 这个命令告诉大家，计算机将在10分钟后关机</span>

<span class="token function">shutdown</span> –h now <span class="token comment"># 立马关机</span>

<span class="token function">shutdown</span> –h <span class="token number">20</span>:25 <span class="token comment"># 系统会在今天20:25关机</span>

<span class="token function">shutdown</span> –h +10 <span class="token comment"># 十分钟后关机</span>

<span class="token function">shutdown</span> –r now <span class="token comment"># 系统立马重启</span>

<span class="token function">shutdown</span> –r +10 <span class="token comment"># 系统十分钟后重启</span>

<span class="token function">reboot</span> <span class="token comment"># 就是重启，等同于 shutdown –r now</span>

<span class="token function">halt</span> <span class="token comment"># 关闭系统，等同于shutdown –h now 和 poweroff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：<strong>不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</strong></p>
<h3 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h3><ol>
<li>一切皆文件</li>
<li>根目录 /， 所有的文件都挂载在这个节点下</li>
</ol>
<p>登录系统后，在当前命令窗口下输入命令：</p>
<p><code>ls /</code></p>
<p>就会看到如下图所示：可以查看所有的文件目录</p>
<p><img src="images/blog/image-20201008132435573.png" alt="image-20201008132435573"></p>
<p>树状目录结构：（Linux的一切资源都挂载在这个 / 根节点下）</p>
<p><img src="images/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201008132509.jpg" alt="系统结构目录"></p>
<p><strong>以下是对这些目录的解释：</strong></p>
<ul>
<li><strong>/bin</strong>：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li>
<li><strong>/boot：</strong> 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。<em>不要动</em></li>
<li><strong>/dev ：</strong> dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li>
<li>==<strong>/etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录==。</li>
<li>==<strong>/home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。==</li>
<li><strong>/lib</strong>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。<em>不要动</em></li>
<li><strong>/lost+found</strong>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。<em>存放突然关机的一些文件</em></li>
<li><strong>/media</strong>：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li>
<li><strong>/mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。<em>会把一些本地文件挂载在这个目录下</em></li>
<li>==<strong>/opt</strong>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。==</li>
<li><strong>/proc</strong>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<em>不用管</em></li>
<li>==<strong>/root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。==</li>
<li><strong>/sbin</strong>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li>
<li><strong>/srv</strong>：该目录存放一些服务启动之后需要提取的数据。</li>
<li><strong>/sys</strong>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li>
<li>==<strong>/tmp</strong>：这个目录是用来存放一些临时文件的。<em>用来存放一些临时文件的。用完即丢的文件，可以放在这个目录下，比如说安装包</em>==</li>
<li>==<strong>/usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。==</li>
<li><strong>/usr/bin：</strong> 系统用户使用的应用程序。</li>
<li><strong>/usr/sbin：</strong> 超级用户使用的比较高级的管理程序和系统守护程序。</li>
<li><strong>/usr/src：</strong> 内核源代码默认的放置目录。</li>
<li>==<strong>/var</strong>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。==</li>
<li><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li>
<li>==<strong>www：</strong>存放服务器网站相关的资源，环境，网站的项目==</li>
</ul>
<h2 id="常用的基本命令"><a href="#常用的基本命令" class="headerlink" title="常用的基本命令"></a>常用的基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote>
<p>绝对路径和相对路径</p>
</blockquote>
<p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p>
<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>
<p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p>
<p><strong>绝对路径：</strong></p>
<p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p>
<p><strong>相对路径：</strong></p>
<p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p>
<blockquote>
<p>处理目录的常用命令</p>
</blockquote>
<p>接下来我们就来看几个常见的处理目录的命令吧：</p>
<ul>
<li>ls: 列出目录</li>
<li>cd：切换目录</li>
<li>pwd：显示目前的目录</li>
<li>mkdir：创建一个新的目录</li>
<li>rmdir：删除一个空的目录</li>
<li>cp: 复制文件或目录</li>
<li>rm: 移除文件或目录</li>
<li>mv: 移动文件与目录，或修改文件与目录的名称</li>
</ul>
<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>
<blockquote>
<p>ls （列出目录）</p>
</blockquote>
<p>在Linux系统当中， ls 命令可能是最常被运行的。</p>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-a参数 ：all，查看全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-l ：列出所有的文件，包含文件的属性与权限等等数据，没有隐藏文件；(常用)</li>
</ul>
<p><strong>所有的Linux命令都可以组合使用</strong></p>
<p>将目录下的所有文件列出来(含属性与隐藏档)</p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# ls -al ~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>cd （切换目录）</p>
</blockquote>
<p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">cd 目录名[相对路径或绝对路径]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到用户目录下</span>
<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># cd home  </span>

<span class="token comment"># 使用 mkdir 命令创建 kuangstudy 目录</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir kuangstudy</span>

<span class="token comment"># 进入 kuangstudy 目录</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cd kuangstudy</span>

<span class="token comment"># 回到上一级</span>
<span class="token punctuation">[</span>root@kuangshen kuangstudy<span class="token punctuation">]</span><span class="token comment"># cd ..</span>

<span class="token comment"># 回到根目录</span>
<span class="token punctuation">[</span>root@kuangshen kuangstudy<span class="token punctuation">]</span><span class="token comment"># cd /</span>

<span class="token comment"># 表示回到自己的家目录，即回到 /root 这个目录  </span>
<span class="token punctuation">[</span>root@kuangshen kuangstudy<span class="token punctuation">]</span><span class="token comment"># cd ~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>pwd ( 显示目前所在的目录 )</p>
</blockquote>
<p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen kuangstudy]#pwd [-P]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。</p>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 单纯显示出目前的工作目录</span>
<span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># pwd</span>
/root

<span class="token comment"># 如果是链接，要显示真实地址，可以使用 -P参数</span>
<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># cd bin</span>
<span class="token punctuation">[</span>root@kuangshen bin<span class="token punctuation">]</span><span class="token comment"># pwd -P</span>
/usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>mkdir （创建新目录）</p>
</blockquote>
<p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir [-mp] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！即直接创建<code>test1/test2/test3</code>三层文件夹</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入我们用户目录下</span>
<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># cd /home</span>

<span class="token comment"># 创建一个 test 文件夹</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir test</span>

<span class="token comment"># 创建多层级目录</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir test1/test2/test3/test4</span>
mkdir: cannot create directory ‘test1/test2/test3/test4’:
No such <span class="token function">file</span> or directory  <span class="token comment"># &lt;== 没办法直接创建此目录啊！</span>

<span class="token comment"># 加了这个 -p 的选项，可以自行帮你创建多层目录！</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir -p test1/test2/test3/test4</span>

<span class="token comment"># 创建权限为 rwx--x--x 的目录。</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir -m 711 test2</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
drwxr-xr-x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:55 <span class="token builtin class-name">test</span>
drwxr-xr-x <span class="token number">3</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:56 test1
drwx--x--x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:58 test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>rmdir ( 删除空的目录 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">rmdir [-p] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 看看有多少目录存在？</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls -l</span>
drwxr-xr-x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:55 <span class="token builtin class-name">test</span>
drwxr-xr-x <span class="token number">3</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:56 test1
drwx--x--x <span class="token number">2</span> root root  <span class="token number">4096</span> Mar <span class="token number">12</span> <span class="token number">21</span>:58 test2

<span class="token comment"># 可直接删除掉，没问题</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rmdir test</span>

<span class="token comment"># 因为尚有内容，所以无法删除！</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rmdir test1</span>
rmdir: failed to remove ‘test1’: Directory not empty

<span class="token comment"># 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rmdir -p test1/test2/test3/test4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意：这个 rmdir 仅能删除空的目录，如果下面存在文件，需要先删除文件，递归删除多个目录加上 -p 参数。</strong></p>
<p><strong>可以使用 rm 命令来删除非空目录。</strong></p>
<blockquote>
<p>cp ( 复制文件或目录 )</p>
</blockquote>
<p>语法：     </p>
<p>cp 原来的地方 新的地方！ </p>
<pre class="line-numbers language-none"><code class="language-none">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)
[root@www ~]# cp [options] source1 source2 source3 .... directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>
<li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>
<li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>
<li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li>
<li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>
<li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>
<li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li>
<li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>
<li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cp install.sh  kuangstudy  #拷贝文件至目录  这里是将install.sh 由home拷贝到kuangstudy</span>

<span class="token comment">#如果文件重复，会询问是否覆盖</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cp install.sh  kuangstudy</span>
cp: overwrite ‘kuangstudy/install.sh’? y <span class="token comment"># n不覆盖，y为覆盖</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>rm ( 移除文件或目录 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">rm [-fir] 文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息，强制删除；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rm -i install.sh</span>
rm: remove regular <span class="token function">file</span> ‘install.sh’? y
<span class="token comment"># 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</span>

<span class="token comment"># 尽量不要在服务器上使用 rm -rf /  这个命令会删除系统中的所有文件（该文件夹下的所有东西都被删除），删库跑路就是这么操作的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>mv  ( 移动文件与目录，或修改名称 )</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># mv [-fiu] source destination</span>
<span class="token punctuation">[</span>root@www ~<span class="token punctuation">]</span><span class="token comment"># mv [options] source1 source2 source3 .... directory</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>
<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>
<li>-u ：只更换比较新的文件</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 复制一个文件到当前目录</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cp /root/install.sh /home</span>

<span class="token comment"># 创建一个文件夹 test</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mkdir test</span>

<span class="token comment"># 将复制过来的文件移动到我们创建的目录，并查看</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mv install.sh test</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls</span>
<span class="token builtin class-name">test</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cd test</span>
<span class="token punctuation">[</span>root@kuangshen test<span class="token punctuation">]</span><span class="token comment"># ls</span>
install.sh

<span class="token comment"># 将文件夹重命名，然后再次查看！</span>
<span class="token punctuation">[</span>root@kuangshen test<span class="token punctuation">]</span><span class="token comment"># cd ..</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># mv test mvtest</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls</span>
mvtest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><blockquote>
<p>看懂文件属性</p>
</blockquote>
<p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>
<p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组。</p>
<p><img src="images/blog/image-20201008202333515.png" alt="image-20201008202333515"></p>
<p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p>
<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p>
<ul>
<li>==当为[ <strong>d</strong> ]则是目录==</li>
<li>==当为[ <strong>-</strong> ]则是文件；==</li>
<li>==若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；==</li>
<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li>
<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p>
<p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p>
<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>
<p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p>
<p><img src="images/blog/image-20201008203048944.png" alt="image-20201008203048944"></p>
<p>从左至右用0-9这些数字来表示。</p>
<p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>其中：</p>
<p>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>
<p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p>
<p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>
<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>
<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>
<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>
<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>
<p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。<em>第一个root位置表示属主，第二个root表示属组</em></p>
<blockquote>
<p>修改文件属性</p>
</blockquote>
<p><strong>1、chgrp：更改文件属组</strong></p>
<pre class="line-numbers language-none"><code class="language-none">chgrp [-R] 属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p>
<p>3vS_j:hG/n&lt;,</p>
<p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p>
<pre class="line-numbers language-none"><code class="language-none">chown [–R] 属主名 文件名
chown [-R] 属主名：属组	名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>==<strong>3、chmod：更改文件9个属性（必须要掌握）</strong>==</p>
<pre class="line-numbers language-none"><code class="language-none">chmod [-R] xyz 文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Linux文件属性有两种设置方法，一种是数字(常用的是数字），一种是符号。</p>
<p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p>
<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>
<pre class="line-numbers language-none"><code class="language-none">r:4     w:2         x:1

可读可写不可执行    rw- 6
可读可写可执行      rwx 7
chmod 777  文件赋予所有用户可读可写可执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p>
<ul>
<li>owner = rwx = 4+2+1 = 7</li>
<li>group = rwx = 4+2+1 = 7</li>
<li>others= — = 0+0+0 = 0</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">770</span> filename
<span class="token comment"># 把filename设置权限为rwxrwx---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote>
<p>概述</p>
</blockquote>
<p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li>==cat 由第一行开始显示文件内容 ，==</li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl  显示的时候，顺道输出行号！看代码的时候希望显示行号</li>
<li>more 一页一页的显示文件内容 ==空格表示翻页，enter代表向下看一行 :f可以看到当前的行号==</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！==空格下翻页，上下键代表翻动页面！q命令退出==</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
</ul>
<p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p>
<p>网络配置目录：<code>cd /etc/sysconfig/network-scripts</code></p>
<p><img src="images/blog/image-20201008210213118.png" alt="image-20201008210213118"></p>
<p><strong>使用ifconfig来查看网络配置</strong></p>
<blockquote>
<p>cat 由第一行开始显示文件内容</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">cat [-AbEnTv]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span>
<span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span>
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>tac</p>
</blockquote>
<p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># tac /etc/sysconfig/network-scripts/ifcfg-eth0</span>
<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>nl  显示行号</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">nl [-bnw] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>
<li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>
<li>-w ：行号栏位的占用的位数。</li>
</ul>
<p>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># nl /etc/sysconfig/network-scripts/ifcfg-eth0</span>
<span class="token assign-left variable">1DEVICE</span><span class="token operator">=</span>eth0
<span class="token assign-left variable">2BOOTPROTO</span><span class="token operator">=</span>dhcp
<span class="token assign-left variable">3ONBOOT</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>more  一页一页翻动</p>
</blockquote>
<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter   ：代表向下翻『一行』；</li>
<li>/字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f    ：立刻显示出档名以及目前显示的行数；</li>
<li>q    ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen etc<span class="token punctuation">]</span><span class="token comment"># more /etc/csh.login</span>
<span class="token punctuation">[</span>root@iZ2ze1m5qjg1tjthcel6gcZ etc<span class="token punctuation">]</span><span class="token comment"># more csh.login</span>
<span class="token comment"># /etc/csh.login</span>

<span class="token comment"># System wide environment and startup programs, for login setup</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token variable">$&#123;?PATH&#125;</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uid</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
		setenv <span class="token environment constant">PATH</span> <span class="token string">"/usr/local/sbin:/usr/sbin:/usr/local/bin:/usr/bin"</span>
        <span class="token keyword">else</span>
		setenv <span class="token environment constant">PATH</span> <span class="token string">"/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin"</span>
        endif
<span class="token keyword">else</span>
	<span class="token comment">#add sbin directories to the path</span>
	foreach p <span class="token punctuation">(</span> /usr/local/sbin /usr/sbin <span class="token punctuation">)</span>
		switch <span class="token punctuation">(</span><span class="token string">":<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span>:"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">"*:<span class="token variable">$&#123;p&#125;</span>:*"</span><span class="token builtin class-name">:</span>
			breaksw
		default:
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uid</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
                        	<span class="token builtin class-name">set</span> path <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token variable">$&#123;p&#125;</span> <span class="token variable">$&#123;path<span class="token operator">:</span>q&#125;</span> <span class="token punctuation">)</span>
			<span class="token keyword">else</span>
--More--<span class="token punctuation">(</span><span class="token number">47</span>%<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>less  一页一页翻动，以下实例输出/etc/man.config文件的内容：</p>
</blockquote>
<p>less运行时可以输入的命令有：</p>
<ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>/字串  ：向下搜寻『字串』的功能；</li>
<li>?字串  ：向上搜寻『字串』的功能；</li>
<li>n   ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N   ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q   ：离开 less 这个程序；</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2ze1m5qjg1tjthcel6gcZ etc<span class="token punctuation">]</span><span class="token comment"># less csh.login</span>


<span class="token comment"># /etc/csh.login</span>

<span class="token comment"># System wide environment and startup programs, for login setup</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token variable">$&#123;?PATH&#125;</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uid</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
                setenv <span class="token environment constant">PATH</span> <span class="token string">"/usr/local/sbin:/usr/sbin:/usr/local/bin:/usr/bin"</span>
        <span class="token keyword">else</span>
                setenv <span class="token environment constant">PATH</span> <span class="token string">"/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin"</span>
        endif
<span class="token keyword">else</span>
        <span class="token comment">#add sbin directories to the path</span>
        foreach p <span class="token punctuation">(</span> /usr/local/sbin /usr/sbin <span class="token punctuation">)</span>
                switch <span class="token punctuation">(</span><span class="token string">":<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span>:"</span><span class="token punctuation">)</span>
                <span class="token keyword">case</span> <span class="token string">"*:<span class="token variable">$&#123;p&#125;</span>:*"</span><span class="token builtin class-name">:</span>
                        breaksw
                default:
                        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uid</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">then</span>
                                <span class="token builtin class-name">set</span> path <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token variable">$&#123;p&#125;</span> <span class="token variable">$&#123;path<span class="token operator">:</span>q&#125;</span> <span class="token punctuation">)</span>
                        <span class="token keyword">else</span>
csh.login
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>head  取出文件前面几行</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">head [-n number] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>
<p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen etc]# head -n 20 &#x2F;etc&#x2F;csh.login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<blockquote>
<p>tail  取出文件后面几行</p>
</blockquote>
<p>语法：</p>
<pre class="line-numbers language-none"><code class="language-none">tail [-n number] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
</ul>
<p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen etc<span class="token punctuation">]</span><span class="token comment"># tail -n 20 /etc/csh.login</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<blockquote>
<p>拓展：Linux 链接概念</p>
</blockquote>
<p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为软链接（Symbolic Link）。</p>
<p>情况下，<strong>ln</strong> 命令产生硬链接。</p>
<p><strong>硬连接</strong></p>
<p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，<strong>即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问</strong>。</p>
<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>
<p><strong>软连接</strong> </p>
<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。<strong>软链接文件有类似于 Windows 的快捷方式，如果删除了原文件，那么快捷方式也访问不了了</strong>。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>
<p><strong>测试：</strong></p>
<ul>
<li>创建连接： ln命令 </li>
<li>touch 创建文件</li>
<li>echo 输入字符串</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># cd /home</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># touch f1 # 创建一个测试文件f1</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls</span>
f1
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ln f1 f2     # 创建f1的一个硬连接文件f2 默认是硬链接</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ln -s f1 f3   # 创建f1的一个符号连接文件f3 加个-s参数 创建的是软连接</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># ls -li       # -i参数显示文件的inode节点信息</span>
<span class="token number">397247</span> -rw-r--r-- <span class="token number">2</span> root root     <span class="token number">0</span> Mar <span class="token number">13</span> 00:50 f1
<span class="token number">397247</span> -rw-r--r-- <span class="token number">2</span> root root     <span class="token number">0</span> Mar <span class="token number">13</span> 00:50 f2
<span class="token number">397248</span> lrwxrwxrwx <span class="token number">1</span> root root     <span class="token number">2</span> Mar <span class="token number">13</span> 00:50 f3 -<span class="token operator">></span> f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="images/blog/image-20201008214542041.png" alt="image-20201008214542041"></p>
<p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而软连接文件的 inode 节点不同。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># echo 字符串输出 >> f1 输出到 f1文件</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># echo "I am f1 file" >>f1</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f1</span>
I am f1 <span class="token function">file</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f2</span>
I am f1 <span class="token function">file</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f3</span>
I am f1 <span class="token function">file</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># rm -f f1</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f2</span>
I am f1 <span class="token function">file</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># cat f3</span>
cat: f3: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是软连接 f1 文件无效；</p>
<p>依此您可以做一些相关的测试，可以得到以下全部结论：</p>
<ul>
<li>删除符号连接f3,对f1,f2无影响；</li>
<li>删除硬连接f2，对f1,f3也无影响；</li>
<li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li>
<li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li>
</ul>
<h3 id="vim编译器"><a href="#vim编译器" class="headerlink" title="vim编译器"></a>vim编译器</h3><blockquote>
<p>什么是Vim编辑器</p>
</blockquote>
<p>vim通过一些插件可以实现和IDE一样的查看</p>
<p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。==（查看内容，编辑内容，保存内容）==</p>
<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>
<p>vim 则可以说是程序开发者的一项很好用的工具。</p>
<p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>连 vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>
<p>vim 键盘图：</p>
<p><img src="images/blog/64116-20191222111829090-17043451.gif" alt="vim键盘图"></p>
<blockquote>
<p>三种使用模式</p>
</blockquote>
<p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p>
<p><strong>命令模式：</strong></p>
<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。如果是编辑模式，需要先退出编辑模式。使用ESC</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<p><strong>输入模式：</strong></p>
<p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<p><strong>底线命令模式</strong></p>
<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。光标移动到了最底下，就可以在这里输入一些底线命令了</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<p><img src="images/blog/image-20201008220932366.png" alt="image-20201008220932366"></p>
<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>
<p><img src="images/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201008221127.jpg" alt="vim操作流程"></p>
<blockquote>
<p>完整的演示说明</p>
</blockquote>
<ol>
<li>新建或者编辑文件  <code>vim filename</code></li>
<li>按i a o 进入输入模式，编写内容</li>
<li>编写完成后按ESC退出编辑模式</li>
<li>按:进入底线模式  输入<code>wq</code>保存退出</li>
</ol>
<blockquote>
<p>Vim 按键说明</p>
</blockquote>
<p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p>
<p><strong>第一部分：一般模式（命令模式）可用的光标移动、复制粘贴、搜索替换等</strong></p>
<table>
<thead>
<tr>
<th align="left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td align="left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td align="left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td align="left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td align="left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td align="left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td align="left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td align="left">-</td>
<td>光标移动到非空格符的上一行  配置文件中空格较多使用这个方便</td>
</tr>
<tr>
<td align="left">==n&lt; space&gt;==</td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td>
</tr>
<tr>
<td align="left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td align="left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td align="left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td align="left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td align="left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td align="left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td>
</tr>
<tr>
<td align="left">==n&lt; Enter&gt;==</td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">搜索替换</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">==/word==</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td>
</tr>
<tr>
<td align="left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td align="left">==n==</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td align="left">==N==</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">删除、复制与粘贴</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td align="left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td align="left">dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td align="left">ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td align="left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td align="left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td align="left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td align="left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td align="left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td align="left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td align="left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td>
</tr>
<tr>
<td align="left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td align="left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td align="left">==u==</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td align="left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
</tbody></table>
<p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">进入输入或取代的编辑模式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">==i, I==</td>
<td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">a, A</td>
<td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">o, O</td>
<td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td>
</tr>
<tr>
<td align="left">r, R</td>
<td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td align="left">==[Esc]==</td>
<td>退出编辑模式，回到一般模式中(常用)</td>
</tr>
</tbody></table>
<p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td align="left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td align="left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td align="left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td align="left">==:wq==</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td align="left">ZZ</td>
<td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td align="left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td align="left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td align="left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td align="left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td>
</tr>
<tr>
<td align="left">==:set nu==</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td align="left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<p>以上标红的掌握熟练即可，其余的了解，我们平时使用VIM最多的就是修改下文件内容而已！</p>
<h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><p>一般在公司中，员工用的都不是root账户</p>
<blockquote>
<p>简介</p>
</blockquote>
<p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>
<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>
<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>
<ul>
<li>用户账号的添加、删除与修改。</li>
<li>用户口令的管理。</li>
<li>用户组的管理。</li>
</ul>
<blockquote>
<p>用户账号的管理</p>
</blockquote>
<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>
<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。</p>
<blockquote>
<p>添加账号 useradd</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">useradd 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参数说明：</p>
<ul>
<li><p>选项 :</p>
</li>
<li><ul>
<li>-c comment 指定一段注释性描述。</li>
<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，给用户指定组。</li>
<li>-m　使用者目录如不存在则自动建立。</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
<li><p>用户名 :</p>
</li>
<li><ul>
<li>指定新账号的登录名。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 此命令创建了一个用户kuangshen，其中-m选项用来为登录名kuangshen产生一个主目录 /home/kuangshen</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># useradd -m kuangshen</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在Linux中一切皆文件，这里的添加用户说白了就是在<code>/etc/password</code>文件中写入用户的信息  ,同时更新其他系统文件如/etc/shadow,/etc/grou等。</p>
<blockquote>
<p>删除帐号</p>
</blockquote>
<p>如果一个用户的账号不再使用，可以从系统中删除。</p>
<p>删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>
<p>删除一个已有的用户账号使用userdel命令，其格式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">userdel 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p>
<pre class="line-numbers language-none"><code class="language-none">[root@kuangshen home]# userdel -r kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p>
<blockquote>
<p>修改用户</p>
</blockquote>
<p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p>
<p>修改已有用户的信息使用usermod命令，其格式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">usermod 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p>
<p>例如：</p>
<pre class="line-numbers language-none"><code class="language-none"># usermod -s &#x2F;bin&#x2F;ksh -d &#x2F;home&#x2F;z –g developer kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令将用户kuangshen的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p>
<p>修改完毕之后查看配置文件即可。</p>
<blockquote>
<p>Linux下如何切换用户</p>
</blockquote>
<p><img src="images/blog/image-20201009142632806.png" alt="image-20201009142632806"></p>
<p><img src="images/blog/image-20201009143240133.png" alt="image-20201009143240133"></p>
<p>1.切换用户的命令为：su username 【username是你的用户名哦】</p>
<p>2.从普通用户切换到root用户，还可以使用命令：sudo su</p>
<p>3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p>
<p>4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p>
<p>$表示普通用户    </p>
<p>#表示超级用户，也就是root用户</p>
<p><img src="images/blog/image-20201009143755163.png" alt="image-20201009143755163"></p>
<blockquote>
<p>用户的密码设置</p>
</blockquote>
<p>我们一般通过root创建用户的时候，需要配置密码</p>
<p>在Linux上输入密码是不会显示出来的，正常数据就行了，不是电脑或系统的问题 </p>
<p>超级用户设置密码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> username:
new password
re password   <span class="token comment">#确认密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="images/blog/image-20201009145025270.png" alt="image-20201009145025270"></p>
<p>普通用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Old password:
New password:
Re-enter new password:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="images/blog/image-20201009145220437.png" alt="image-20201009145220437"></p>
<blockquote>
<p>锁定账户</p>
</blockquote>
<p>冻结账户之后，这个账户就不能再登录！</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> -l pty <span class="token comment">#将pty这个用户锁定，锁定之后这个用户就不能再登录</span>
<span class="token function">passwd</span> -d pty <span class="token comment">#清楚pty这个用户的密码，没有密码无法登陆</span>
<span class="token function">passwd</span> -u pty <span class="token comment">#启用已被停止的pty这个用户，让他能再次登录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，<strong>如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建</strong>。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。==组的增加、删除和修改实际上就是对/etc/group文件的更新。==</p>
<blockquote>
<p>增加一个新的用户组使用groupadd命令</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">groupadd 选项 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以使用的选项有：</p>
<ul>
<li>-g GID 指定新用户组的组标识号（GID）。</li>
<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li>
</ul>
<p>实例1：</p>
<pre class="line-numbers language-none"><code class="language-none"># groupadd group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p>
<p>实例2：</p>
<pre class="line-numbers language-none"><code class="language-none"># groupadd -g 101 group2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p>
<p><img src="images/blog/image-20201009172752807.png" alt="image-20201009172752807"></p>
<blockquote>
<p>如果要删除一个已有的用户组，使用groupdel命令</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">groupdel 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>例如：</p>
<pre class="line-numbers language-none"><code class="language-none"># groupdel group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此命令从系统中删除组group1。</p>
<blockquote>
<p>修改用户组的属性使用groupmod命令</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">groupmod 选项 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>常用的选项有：</p>
<ul>
<li>-g GID 为用户组指定新的组标识号。</li>
<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>
<li>-n新用户组 将用户组的名字改为新名字</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none"># 此命令将组group2的组标识号修改为102。
groupmod -g 102 group2

# 将组group2的标识号改为10000，组名修改为group3。
groupmod –g 10000 -n group3 group2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>切换组</p>
</blockquote>
<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>
<p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>
<pre class="line-numbers language-none"><code class="language-none">$ newgrp root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</p>
<blockquote>
<p>/etc/passwd</p>
</blockquote>
<p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>
<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p>
<p>下面分别介绍这些文件的内容。</p>
<p><strong>/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p>
<p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>
<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>
<pre class="line-numbers language-none"><code class="language-none">＃ cat &#x2F;etc&#x2F;passwd

root:x:0:0:Superuser:&#x2F;:
daemon:x:1:1:System daemons:&#x2F;etc:
bin:x:2:2:Owner of system commands:&#x2F;bin:
sys:x:3:3:Owner of system files:&#x2F;usr&#x2F;sys:
adm:x:4:4:System accounting:&#x2F;usr&#x2F;adm:
uucp:x:5:5:UUCP administrator:&#x2F;usr&#x2F;lib&#x2F;uucp:
auth:x:7:21:Authentication administrator:&#x2F;tcb&#x2F;files&#x2F;auth:
cron:x:9:16:Cron daemon:&#x2F;usr&#x2F;spool&#x2F;cron:
listen:x:37:4:Network daemon:&#x2F;usr&#x2F;net&#x2F;nls:
lp:x:71:18:Printer administrator:&#x2F;usr&#x2F;spool&#x2F;lp:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<pre class="line-numbers language-none"><code class="language-none">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pty:x:1000:1000::/home/pty:/bin/bash

<span class="token comment">#pty: 用户名</span>
<span class="token comment">#x：口令（登录密码，我们看不见）</span>
<span class="token comment">#1000：用户标示</span>
<span class="token comment">#1000：组标示</span>
<span class="token comment">#/home/pty 主目录</span>
<span class="token comment">#/bin/bash 登录shell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>登录口令放在/etc/shadow中</p>
<p>用户组的所有信息放在/etc/group中</p>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><blockquote>
<p>概述</p>
</blockquote>
<p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p>
<p>Linux磁盘管理常用命令为 df、du。</p>
<ul>
<li>df ：列出文件系统的整体磁盘使用量</li>
<li>du：检查磁盘空间使用量</li>
</ul>
<blockquote>
<p>df</p>
</blockquote>
<p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token punctuation">[</span>-ahikHTm<span class="token punctuation">]</span> <span class="token punctuation">[</span>目录或文件名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将容量结果以易读的容量格式显示出来</span>
<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># df -h</span>
Filesystem     Size Used Avail Use% Mounted on
devtmpfs       869M     <span class="token number">0</span> 869M   <span class="token number">0</span>% /dev
tmpfs           879M 708K 878M   <span class="token number">1</span>% /dev/shm
tmpfs           879M 496K 878M   <span class="token number">1</span>% /run
tmpfs           879M     <span class="token number">0</span> 879M   <span class="token number">0</span>% /sys/fs/cgroup
/dev/vda1       40G  <span class="token number">6</span>.3G   32G  <span class="token number">17</span>% /
tmpfs           176M     <span class="token number">0</span> 176M   <span class="token number">0</span>% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span>

<span class="token punctuation">[</span>root@kuangshen /<span class="token punctuation">]</span><span class="token comment"># df -h /etc</span>
Filesystem     Size Used Avail Use% Mounted on
/dev/vda1       40G  <span class="token number">6</span>.3G   32G  <span class="token number">17</span>% /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>du</p>
</blockquote>
<p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token punctuation">[</span>-ahskm<span class="token punctuation">]</span> 文件或目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>
<li>-s ：列出总量，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</span>
<span class="token comment"># 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># du</span>
<span class="token number">16</span>./redis
<span class="token number">8</span>./www/.oracle_jre_usage  <span class="token comment"># 包括隐藏文件的目录</span>
<span class="token number">24</span>./www
<span class="token number">48</span>.                        <span class="token comment"># 这个目录(.)所占用的总量</span>
<span class="token comment"># 将文件的容量也列出来</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># du -a</span>
<span class="token number">4</span>./redis/.bash_profile
<span class="token number">4</span>./redis/.bash_logout    
<span class="token punctuation">..</span><span class="token punctuation">..</span>中间省略<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">4</span>./kuangstudy.txt <span class="token comment"># 有文件的列表了</span>
<span class="token number">48</span>.
<span class="token comment"># 检查根目录底下每个目录所占用的容量</span>
<span class="token punctuation">[</span>root@kuangshen home<span class="token punctuation">]</span><span class="token comment"># du -sm /*</span>
<span class="token number">0</span>/bin
<span class="token number">146</span>/boot
<span class="token punctuation">..</span><span class="token punctuation">..</span>.中间省略<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">0</span>/proc
<span class="token punctuation">..</span><span class="token punctuation">..</span>.中间省略<span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token number">1</span>/tmp
<span class="token number">3026</span>/usr  <span class="token comment"># 系统初期最大就是他了啦！</span>
<span class="token number">513</span>/var
<span class="token number">2666</span>/www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通配符 * 来代表每个目录。</p>
<p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>对于我们开发人员来说，其实Linux更多偏向于使用即可</p>
<blockquote>
<p>什么是进程</p>
</blockquote>
<ol>
<li>在Linux中，每一个程序都是由自己的一个进程，每一个进程都有自己的id号</li>
<li>每一个进程都有一个父进程</li>
<li>进程可以有两种存在方式：前台！后台运行！</li>
<li>一般的话服务都是后台运行的，基本的程序都是前台运行的！</li>
</ol>
<blockquote>
<p>命令</p>
</blockquote>
<p><strong>ps</strong>查看当前系统中正在执行的各种进程的信息！</p>
<p>ps-xx:</p>
<ul>
<li>-a 显示当前终端运行的所有进程的信息</li>
<li>-u 以用户的信息显示进程</li>
<li>-x 显示后台运行进程的参数</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ps -aux 查看所有的进程</span>
<span class="token function">ps</span> -aux<span class="token operator">|</span>

<span class="token comment"># |  在Linux中这个叫做管道符    A|B  把A的结果作为输出操作B命令</span>
<span class="token comment"># grep 查找文件中符合条件的字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对我我们来说，这里目前只需要记住一个命令即可  ps-xxx|grep 进程名   查找该进程名的全部信息</p>
<p><strong>ps -ef:可以查看到父进程的信息</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> mysql   <span class="token comment">#看父进程我们一般可以通过目录树结构来查看！</span>

<span class="token comment">#进程树</span>
pstree -pu
	-p  显示父id
	-u  显示用户组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结束进程：杀掉进程，等价于window结束任务</p>
<p>kill-9 进程的id 表示强制结束进程</p>
<p>一般不需要结束进程，但有时候java程序进入死循环可以使用这个杀死程序</p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>安装软件一般有三种方式：rpm、解压缩、yum在线安装！</p>
<h3 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h3><ol>
<li>下载jdk rpm。去Oracle官网下载</li>
<li>使用ftp工具将文件上传到服务器</li>
<li>安装java环境</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检测当前系统是否存在java环境！ java -version</span>
<span class="token comment"># 如果有的话就需要卸载  </span>
<span class="token comment"># rpm -qa|grep jdk    #检测JDK版本信息</span>
<span class="token comment"># rpm -e --nodeps jdk_(jdk版本)</span>

<span class="token comment">#卸载完毕后即可安装jdk</span>
<span class="token comment"># rpm -ivk rpm包   安装jdk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="images/blog/image-20201009195244369.png" alt="image-20201009195244369"></p>
<p><img src="images/blog/image-20201009195752656.png" alt="image-20201009195752656"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看firewall服务状态</span>
systemctl status firewalld

<span class="token comment"># 开启、重启、关闭、firewalld.service服务</span>
<span class="token comment"># 开启</span>
<span class="token function">service</span> firewalld start
<span class="token comment"># 重启</span>
<span class="token function">service</span> firewalld restart
<span class="token comment"># 关闭</span>
<span class="token function">service</span> firewalld stop

<span class="token comment"># 查看防火墙规则</span>
firewall-cmd --list-all    <span class="token comment"># 查看全部信息</span>
firewall-cmd --list-ports  <span class="token comment"># 只看端口信息</span>

<span class="token comment"># 开启端口</span>
开端口命令：firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp --permanent  <span class="token comment">#开启80端口，如果是阿里云需要配置安全组规则</span>
重启防火墙：systemctl restart firewalld.service  <span class="token comment">#开启端口后要重启防火墙</span>

命令含义：
--zone <span class="token comment">#作用域</span>
--add-port<span class="token operator">=</span><span class="token number">80</span>/tcp  <span class="token comment">#添加端口，格式为：端口/通讯协议</span>
--permanent   <span class="token comment">#永久生效，没有此参数重启后失效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h3><ol>
<li><p>在官网下载tomcat文件</p>
</li>
<li><p>解压这个文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf apache-tomcat-9.0.22.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>启动tomcat程序  <code>./xxx.sh</code>脚本即可运行</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行  ./startup.sh</span>
<span class="token comment"># 结束  ./shoutdown.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Docker-yum安装）"><a href="#Docker-yum安装）" class="headerlink" title="Docker(yum安装）"></a>Docker(yum安装）</h3><p>我们现在是在Linux下执行，一定要联网，yum是在线安装！</p>
<blockquote>
<p>安装</p>
</blockquote>
<ol>
<li>安装我们的准备环境（安装gcc)</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> 包名    <span class="token comment">#yum install 安装命令  -y 所有的提示都为y</span>
yum -y <span class="token function">install</span> gcc
yum -y <span class="token function">install</span> gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>卸载docker旧版本</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove docker <span class="token punctuation">\</span>
          docker-client <span class="token punctuation">\</span>
          docker-client-latest <span class="token punctuation">\</span>
          docker-common <span class="token punctuation">\</span>
          docker-latest <span class="token punctuation">\</span>
          docker-latest-logrotate <span class="token punctuation">\</span>
          docker-logrotate <span class="token punctuation">\</span>
          docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>安装需要的软件包</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>设置stable镜像仓库</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  <span class="token comment">#阿里云镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="5">
<li>更新yum软件包索引</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="6">
<li>安装Docker CE</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="7">
<li>启动docker</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="8">
<li>测试</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker version    <span class="token comment">#查看docker版本号</span>
 
docker run hello-world  <span class="token comment"># 跑hello-world程序</span>
 
docker images   <span class="token comment">#查看docker镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>前端设计开发</title>
    <url>/2020/10/12/%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="1-1基本标签"><a href="#1-1基本标签" class="headerlink" title="1.1基本标签"></a>1.1基本标签</h3><ul>
<li><p>h 标签 ：标题，一共有六级，从h1到h6</p>
</li>
<li><p>p 标签： 段落</p>
</li>
<li><p>br 标签：换行</p>
</li>
<li><p>文本格式化标签</p>
<a id="more"></a>

<ul>
<li>strong：粗体</li>
<li>em： 斜体</li>
<li>ins：下划线</li>
<li>del： 删除线</li>
</ul>
</li>
<li><p>img：图像标签，用来定义一个图像，其中img标签中有一些属性：</p>
<ul>
<li>src：图片的路径，可以是本地的图片，也可以是网上的图片。本地的路径可以写相对路径也可以写绝对路径，推荐使用相对路径。</li>
<li>alt：图片的替代文本，当图片不能够显示的时候会显示出alt中的值</li>
<li>title：当图片显示的时候，把鼠标放在图片上面会显示出title中的值</li>
<li>height、width：设置图片的高度或宽度，单位是像素(px)，推荐只设置一个，如果只设置宽度（高度），那么另一个就会等比例的放大缩小；如果设置了两个，就会使图像失真。</li>
</ul>
</li>
<li><p>a 标签：超链接标签，从一个页面跳到另一个页面  </p>
<ul>
<li>href：跳转页面的url地址，可以是绝对路径也可以是相对路径</li>
<li>target：用于指定链接页面的打开方式，其中_self为默认值，在当前页面打开， _blank在新窗口中打开页面</li>
<li>在href的值中使用 # 来进行占位，表示这是一个空链接。 <code>&lt;a href=&quot;#&quot;/&gt;</code>。</li>
<li>如果在href里面的地址是一个文件湖畔这压缩包，会下载这个文件。</li>
<li>网页中的各种元素，如文本、图像、表格、音频、视频等都可以添加超链接。</li>
<li>锚点连接：当我们点击链接，可以快速定位到页面中的某个位置，可以用来做书签<ul>
<li>找到目标位置标签，为其添加一个id属性=xxx,如<code>&lt;h1 id=two&gt;第二集介绍&lt;/h1&gt;</code></li>
<li>在链接文本的href属性中，设置属性值为 **#名字 **的形式，如<code>&lt;a href=&quot;#two&quot;&gt;第二集&lt;/a&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>table 标签：表格标签，表格主要用于显示、展示数据。</p>
<ul>
<li>tr 标签用于定义表格中的行，必须嵌套在table标签中。</li>
<li>td 标签用于定义表格中的单元格，必须嵌套在tr 标签中，td中的文本就是表格的数据</li>
<li>th 标签表示html表格的表头部分，th标签的文本会加粗居中显示。一般第一行的文本会用th而不是td。</li>
<li>thead：用于定义头部，没有什么显示，只是为了更好区分表格的结构，thead内部必须拥有tr标签。</li>
<li>tbody：用于定义表格的主题，主要用于放数据本体。</li>
<li>下面是table标签的一些属性，要写在table标签内，后期会使用css来修改这些样式<ul>
<li>align：设置表格的位置：居中，靠左对齐，靠右对齐….</li>
<li>border：设置表格边框</li>
<li>cellpadding：设置文字与单元边沿的距离，可以理解为设置单元格的长度</li>
<li>cellspacing：设置单元格之前的空白</li>
<li>width、height：设置表格的宽度或高度。</li>
<li>caption: 设置表格的标题</li>
<li>rowspan:纵向合并单元格，rowspan=”xxx”，填写合并单元格的数量，同时将被合并的单元格td删掉。</li>
<li>colspan:横向合并单元格，colspan=”xxx”，填写合并单元格的数量，同时将被合并的单元格td删掉。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>pty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>刘德华<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>列表标签</p>
<ul>
<li>无序列表：<code>&lt;ul&gt;</code>，一般以项目符号呈现列表项，列表项使用<code>&lt;li&gt;</code>标签定义。<ul>
<li>ul标签中只能饿嵌套 li 标签，不能直接输入文字或者使用其他标签。</li>
<li>li 标签相当于一个容器，里面可以输入文字或使用其他标签。</li>
</ul>
</li>
<li>有序列表：<code>&lt;ol&gt;</code>，有排列顺序的列表，其各个列表项会按照一定的顺序排列，列表项用<code>&lt;li&gt;</code>标签定义。<ul>
<li>ol标签中只能饿嵌套 li 标签，不能直接输入文字或者使用其他标签。</li>
<li>li 标签相当于一个容器，里面可以输入文字或使用其他标签。</li>
</ul>
</li>
<li>自定义列表：<code>&lt;dl&gt;</code>，用于定义描述列表，这个与<code>&lt;dt&gt;</code>(定义项目/名字)和<code>&lt;dd&gt;</code>(描述每一个项目/名字)一起使用<ul>
<li>dl 里面只能出现dt 和dd</li>
<li>dt和dd个数没有限制，经常是一个dt对应多个dd。</li>
</ul>
</li>
</ul>
</li>
<li><p>表单标签</p>
<ul>
<li>表单域：使用form标签来定义表单域，form会把他范围内的表单元素信息提交给服务器</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;form action="url地址：表单数据提交的服务器地址" method="提交方式：get/post" name="表单域名称"
      各种表单元素控件
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>表单元素控件：</p>
<ul>
<li>input：input包含一个type属性值，可以设置不同的type属性值来指定不同的控件类型。<ul>
<li>text：文本框，可以输入任何文字。</li>
<li>password：密码框，输入的文字会被掩盖，看不到真实内容。</li>
<li>radio：单选框，实现多选一，单选框的选项需要有相同的name属性值才能够实现多选一。</li>
<li>checkbox：复选框，实现多选效果 ，复选框也需要相同的name属性值。</li>
<li>checked：用于复选框和单选框，设置这个属性后，被设置的属性在加载的时候就会选中。<code>checked=&quot;checked&quot;</code></li>
<li>submit：提交按钮，会把表单域的信息提交给服务器，可以使用value修改按钮里面的值。</li>
<li>reset：重置按钮，还原表单元素初始的默认状态，可以使用value修改按钮里面的值。</li>
<li>button：普通按钮，后期结合js,可以作为js的启动按钮。</li>
<li>file：文件域，上传文件使用的。</li>
<li>label：用于绑定一个表单元素，当点击label标签内的文本时，浏览器会自动将焦点转到或者选择对应的表单元素上，用来增加用户体验。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token comment">&lt;!--label标签的for属性值应与input标签的id属性值相同,将本来放在外面的文本使用label标签包围--></span>

		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>select表单元素：如果有多个选项让用户选择，并且想要节约空间，我们可以使用<select>标签定义下拉列表</select></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
----------------------------------------------------------------------------------------
			籍贯：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>湖南<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>湖北<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><ul>
<li>select中至少包含一对<option></option></li>
<li>在<option>中定义selected=”selected”是，当前选项为默认选中项。</option></li>
</ul>
</li>
<li><p>textarea表单元素：当输入的文字很多的时候，文本框<input type="text">不在适用，这时候应该使用textarea标签，常用于评论，留言。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		文本内容
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
-------------------------------------------------------------------------------------
	留言板：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈
		哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>cols=”每行中输入的字符数”，row=”显示的行数”，在实际开发中使用css样式来改变大小</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-2标签属性的注意点"><a href="#1-2标签属性的注意点" class="headerlink" title="1.2标签属性的注意点"></a>1.2标签属性的注意点</h3><ol>
<li>一个标签可以有多个属性，属性必须写在标签名的后面</li>
<li>属性之间不分先后顺序，但必须使用空格间隔</li>
<li>属性采取键值对的格式，即<code>key=&quot;value&quot;</code>。</li>
</ol>
<h3 id="1-3-绝对路径和相对路径"><a href="#1-3-绝对路径和相对路径" class="headerlink" title="1.3 绝对路径和相对路径"></a>1.3 绝对路径和相对路径</h3><ul>
<li><p>相对路径：以引用文件所在的文件夹为基础，而建立出的目录路径。</p>
<table>
<thead>
<tr>
<th>../</th>
<th>上一级路径</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>下一级路径</td>
</tr>
</tbody></table>
</li>
</ul>
<ul>
<li>绝对路径：指这个文件的绝对位置，直接到达目标位置，通常是以盘符开始的路径</li>
</ul>
<h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><h3 id="css语法规范"><a href="#css语法规范" class="headerlink" title="css语法规范"></a>css语法规范</h3><p>css由两个主要的部分构成：选择器以及一条或多条声明。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">选择器 <span class="token punctuation">&#123;</span>
	样式一<span class="token punctuation">;</span>
	样式二<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token comment">#样式使用键值对的方式  key:value,选择器用于指定给哪个标签设置样式，花括号里面是该对象设置的具体样式。</span>
<span class="token comment">#多个键值对之间使用分号（;）间隔</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><h5 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h5><p>标签选择器是指用HTML标签名作为选择器，按照标签名称分类，为页面中的某一类标签指定统一的CSS样式。</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">标签名&#123;
	属性1: 属性值1;
	属性2: 属性值2;
	属性3: 属性值3;
	属性4: 属性值4;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><p>实现差异化选择，比如说只要修改p标签里面的其中几个。</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">.类名&#123;
	属性1: 属性值1;
	属性2: 属性值2;
	属性3: 属性值3;
	属性4: 属性值4;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：</p>
<ul>
<li>类选择器使用<code>.</code>进行标识，后面紧跟类名（我们自己定义的，不要使用html标签作为类名）。</li>
<li>使用<code>class</code>为标签添加类名，多个标签可以具有相同的类名，相当于给标签分了一个组。</li>
<li>不要使用纯数字、中文等命名（纯数字好像不起作用）。</li>
</ul>
<h5 id="类选择器–多类名"><a href="#类选择器–多类名" class="headerlink" title="类选择器–多类名"></a>类选择器–多类名</h5><p>一个标签具有多个类，相当于一个标签具有多个分组</p>
<p>多类名定义格式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>标签名 <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"类名1 类名2 类名3 ..."</span><span class="token operator">></span>xxx<span class="token operator">&lt;</span>/div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>在标签class属性中写多个类名。</li>
<li>多个类名之前使用空格分开。</li>
<li>这个标签就会具有两个类的样式</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
		<span class="token selector">.font12</span><span class="token punctuation">&#123;</span>
			<span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token selector">.red</span><span class="token punctuation">&#123;</span>
			<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red font12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--同时具有red类和font12两个类的样式--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h5><p>id选择器可以为标有特定id的html标签指定特有的样式。</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">#id名&#123;
		属性1: 属性值1;
		属性2: 属性值2;
		属性3: 属性值3;
		属性4: 属性值4;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>id选择器使用<code>#</code>来标识，后面紧跟id名（自定义，不要使用html标签名作为id名）</li>
<li>使用id属性为标签设置id名，id名是唯一的，两个标签是不能拥有相同的id。类似于身份证号。</li>
<li>类选择器在修改样式的时候使用的最多，id选择器一般用于页面唯一性的元素上，经常和js搭配使用。li>
</ul>
<h5 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h5><p>通配符选择器选取页面中所有标签</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">*&#123;
	属性1: 属性值1;
	属性2: 属性值2;
	属性3: 属性值3;
	属性4: 属性值4;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>通配符选择器使用<code>*</code>来标识，可以选择页面中的所有标签</li>
</ul>
<h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><p>复合选择器由两个及以上的基础选择器通过不同方式组合在一起。</p>
<h5 id="后代选择器（重要）"><a href="#后代选择器（重要）" class="headerlink" title="后代选择器（重要）"></a>后代选择器（重要）</h5><p>后代选择器可以选择父元素里面的后代元素。</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">元素1 元素2<span class="token punctuation">&#123;</span>样式声明<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>选择元素1里面的元素2进行修改</li>
<li>两个元素中间使用<strong>空格</strong>隔开</li>
<li>元素1为父元素，元素2为后代元素。</li>
<li>元素1和元素2可以为任意的基础选择器</li>
</ul>
<h5 id="子元素选择器（重要）"><a href="#子元素选择器（重要）" class="headerlink" title="子元素选择器（重要）"></a>子元素选择器（重要）</h5><p>选择父元素中的子元素（只选择子元素)</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">元素<span class="token operator"><span class="token file-descriptor important">1</span>></span>元素2<span class="token punctuation">&#123;</span>样式声明<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>只选择父元素里面的子元素，不会选择孙子元素（子元素的子元素），这是和后代选择器不同的地方。</li>
<li>两个元素之间使用&gt;隔开。</li>
<li>修改的是元素2而不是元素1。</li>
</ul>
<h5 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h5><p>并集选择器可以选择多组标签，并为他们定义相同的样式，通常用于集体声明。</p>
<p>语法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">元素1,元素2<span class="token punctuation">&#123;</span>样式声明<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>选择元素1和元素2一起进行修改。</li>
<li>两个元素之间使用逗号隔开，逗号可以理解成和的意思。</li>
<li>任何形式的选择器都可以作为并集选择器的一部分，比如上面说的子元素选择器和后代选择器。</li>
</ul>
<h3 id="css字体属性"><a href="#css字体属性" class="headerlink" title="css字体属性"></a>css字体属性</h3><p>字体属性用于定义字体、大小、粗细、文字样式…..</p>
<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>使用font-family属性定义文本的字体。</p>
<p>语法：</p>
<pre><code>        选择器&#123;
            font-family:字体1,字体2 ;
        &#125;</code></pre>
<ul>
<li>font-family后面可以填写多种字体，各种字体之间必须使用英文状态下的逗号隔开。</li>
<li>如果写了多种字体，会优先使用第一种字体，如果没有安装这种字体，就会去使用第二种，以此类推。</li>
<li>一般来说，如果有空格隔开的多个单词组成的字体名称，使用引号将其括起来，单双引号均可。</li>
<li>开发中通常是直接给body设置字体。</li>
</ul>
<h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><p>使用font-size属性定义字体大小</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	font-size: xxpx;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>px(像素)大小似乎我们网页的最常用的单位。</li>
<li>不同浏览器的默认字体大小不一致，尽量给字体设置一个准确值。</li>
<li>通常直接给body设置字体大小。</li>
</ul>
<h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><p>使用font-weight属性设置文本字体的粗细。</p>
<p>语法：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	font-weight: normal/bold/直接写数字;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>常用的有三种表现形式 normal/bold/直接写数字，推荐直接写数字。</li>
<li>normal相当于直接写数字的 400，是默认的粗细。</li>
<li>bold定义粗体，相当于直接写数字的700。</li>
<li>直接写数字来设置字体的粗细，后面不用加px，如<code>font-weight: 700</code>。</li>
</ul>
<h4 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h4><p>语法</p>
<pre><code>    选择器&#123;
        font-style: normal/italic
    &#125;</code></pre>
<ul>
<li>nomal为正常样式。</li>
<li>italic为斜体。</li>
</ul>
<h4 id="字体的复合属性"><a href="#字体的复合属性" class="headerlink" title="字体的复合属性"></a>字体的复合属性</h4><p>上面我们学了css如何定义字体属性，但是如果使用上面的格式代码太冗长了，因此我们通常将上述属性写在一起。</p>
<p>语法</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	font: font-style font-weight font-size/line-height font-family;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>复合属性其实就是简写的方式。</li>
<li>使用font属性时，必须按照上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开。</li>
<li>不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性。否则font将不起作用。</li>
</ul>
<h3 id="css文本属性"><a href="#css文本属性" class="headerlink" title="css文本属性"></a>css文本属性</h3><p>css Text(文本)属性可以定义文本的外观，比如文本的颜色，对齐文本，装饰文本，文本缩进，行间距等等。</p>
<h4 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h4><p>color属性用于定义文本的颜色</p>
<p>语法</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	color: 预定义的颜色值/十六进制/RGB代码
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>预定义的颜色值 即一些颜色的英文名，如red,blue,green。</li>
<li>十六进制 #FF0000,#FF6600  使用6位十六进制的数来表示。</li>
<li>RGB代码  rgb(255,0,0)</li>
<li>这些颜色不需要记，开发中使用取色器来取色，最常用的是十六进制表示。</li>
</ul>
<h4 id="对齐文本"><a href="#对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h4><p>text-align属性用于设置元素文本内容的水平对齐方式（左对齐，居中对齐，右对齐）</p>
<pre><code>选择器&#123;
    text-align: left/center/right
&#125;</code></pre>
<ul>
<li>left 左对齐 默认</li>
<li>center 居中对齐</li>
<li>right 右对齐</li>
</ul>
<h4 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h4><p>text-decoration属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	text-decoration: none/underline/overline/line-through
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>none 没有装饰线 默认值  <em>最常用</em></p>
</li>
<li><p>underline 下划线 ，a标签自带下划线 <em>常用</em></p>
</li>
<li><p>overline 上划线 <em>几乎不用</em></p>
</li>
<li><p>line-through 删除线  <em>不常用</em></p>
<h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4></li>
</ul>
<p>text-indent属性用来指定文本的第一行的缩进，通常是将段落的首行缩进。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	text-indent: xxxem;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>em是一个相对单位，就是当前一个字体的大小。如果当前字体没有设置大小，就会按照父元素的文字大小。</li>
<li>段落首行缩进两个字，<code>text-indent: 2em</code>，不管字体有多大，都是缩进两个字符。</li>
</ul>
<h4 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h4><p>line-height属性用国语设置行间的距离（行高），可以控制文字与行之间的距离。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">选择器&#123;
	line-height: xxxpx;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="css的引入方式"><a href="#css的引入方式" class="headerlink" title="css的引入方式"></a>css的引入方式</h3><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>内部样式表是写到html页面内部，将所有的css代码抽取出来，单独放到一个<style>标签中。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
	<span class="token selector">a</span><span class="token punctuation">&#123;</span>
		<span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token selector">p</span><span class="token punctuation">&#123;</span>
		<span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>可以控制整个页面的样式。</li>
</ul>
<h4 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h4><p>行内样式表是在元素标签内部的style属性中设定css样式，适合于修改简单的样式。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>style其实就是标签的属性。</li>
<li>可以控制当前的标签的样式。</li>
</ul>
<h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>样式单独写到css文件中，之后把css文件引入到HTML页面中使用。开发中使用最多的就是这种。</p>
<p>引入外部样式表分为两步：</p>
<ol>
<li>新建一个后缀名为.css的样式文件，把所有的css代码都放入从文件中。</li>
<li>在html中使用<link>标签引入css文件。</li>
</ol>
<h3 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h3><h4 id="快速生成HTML结构语法"><a href="#快速生成HTML结构语法" class="headerlink" title="快速生成HTML结构语法"></a>快速生成HTML结构语法</h4><ol>
<li>生成标签，直接输入标签名+tab键即可，比如div 然后tab键，就可以生成<div> </div>。</li>
<li>如果想要同时生成多个相同标签，加上*就可以了，如div * 3 +tab,就可以快速生成3个div。</li>
<li>如果是有父子关系的标签，可以用&gt;,比如 ul&gt;li +tab就可以了。</li>
<li>如果是有兄弟关系的标签，可以用+ 比如div+p  tab。</li>
<li>如果生成带有类名或者id名的标签，直接写 标签名.类名 或者 标签名#id名 tab键就可以了。</li>
<li>如果生成的div的类名是有顺序的，可以用自增符号$ 如.demo$*5  生成5个div标签，class为demo1-demo5。</li>
<li>如果想要在生成的标签内部写内容可以用{}。</li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--  div+tab  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--  p*5 tab  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- ul>li*5 tab--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- div+p tab--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- .demo   p#two tab--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- div.demo$*5 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- div&#123;hahah&#125;*5 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hahah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="快速生成CSS样式"><a href="#快速生成CSS样式" class="headerlink" title="快速生成CSS样式"></a>快速生成CSS样式</h4><p>采取简写形式即可。</p>
<ol>
<li>比如w200 按tab可以生成width:200px;</li>
<li>td 按 tab可以生成text-decoration: none;</li>
</ol>
</style></p>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2022/05/29/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h2><h3 id="三种常见模式："><a href="#三种常见模式：" class="headerlink" title="三种常见模式："></a>三种常见模式：</h3><ul>
<li><p>正常模式</p>
<p>在正常模式下，我们可以使用快捷键。</p>
</li>
<li><p>插入模式/编辑模式</p>
<p>在这个模式下，程序猿可以输入内容。</p>
</li>
<li><p>命令行模式</p>
<p>在这个模式中，可以提供相关指令。</p>
<a id="more"></a>

</li>
</ul>
<h3 id="快捷键使用练习："><a href="#快捷键使用练习：" class="headerlink" title="快捷键使用练习："></a>快捷键使用练习：</h3><ul>
<li>yy：拷贝当前行</li>
<li>5yy：拷贝当前5行</li>
<li>dd：删除当前行</li>
<li>5dd：删除当前行向下的5行</li>
<li>在文件中查找某个单词：命令行输入 /（查找内容），按n查找下一个,N向上查找</li>
<li>设置文件行号：set nu，取消文件行号：set nonu</li>
<li>编辑文件，正常模式下使用快捷键到达文档最末行：G，最首行：gg</li>
<li>撤销输入：在正常模式下输入u</li>
<li>编辑文件，光标移动到某行：shift+g<ul>
<li>显示行号：set nu</li>
<li>输入行号这个数</li>
<li>输入shift+g</li>
</ul>
</li>
</ul>
<h2 id="关机、重启和用户登录注销"><a href="#关机、重启和用户登录注销" class="headerlink" title="关机、重启和用户登录注销"></a>关机、重启和用户登录注销</h2><ul>
<li>shutdown -h now：表示立即关机</li>
<li>shutdown -h 1：表示1分钟后关机</li>
<li>shutdown -r now：立即重启</li>
<li>halt：直接使用，关机</li>
<li>reboot：重启</li>
<li>sync：把内存的数据同步到磁盘上，<strong>当我们关机或者重启时，都应该先执行一下sync，防止数据丢失</strong>。</li>
<li>logout：注销用户，<strong>在图形运行级别无效，在运行级别3有效</strong>。</li>
</ul>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>用户，组，家目录。</p>
<ol>
<li>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</li>
<li>Linux的用户需要至少要属于一个组。</li>
</ol>
<ul>
<li>添加用户：useradd [选项] 用户名。</li>
<li>cd：表示change directory，切换目录。</li>
<li>当创建用户成功后，会自动的创建和用户同名的家目录。</li>
<li>也可以通过useradd -d 指定目录 新的用户名。</li>
<li>指定/修改密码：passwd 用户名</li>
<li>删除用户，保留家目录：userdel 用户名，<strong>一般保留家目录，因为干过的活要留着</strong>。</li>
<li>删除用户以及家目录：userdel -r 用户名</li>
<li>查询用户信息：id 用户名</li>
<li>切换用户：su - 切换用户名，<strong>从权限高切换到权限低的用户不需要输密码</strong>。</li>
<li>返回切换前的用户：exit</li>
<li>查看当前用户/登录用户：who am i</li>
<li>用户组：类似于角色，系统可以对有共性的多个用户进行统一的管理。</li>
<li>增加组：groupadd 组名</li>
<li>删除组：groupdel 组名</li>
<li>增加用户时直接加上组：useradd -g 用户组 用户名</li>
<li>修改用户组：usermod -g 用户组 用户名</li>
</ul>
<ol start="3">
<li>/etc/passwd 文件</li>
</ol>
<ul>
<li>用户（user）的配置文件，记录用户的各种信息。</li>
<li>每行的含义：用户名：口令：用户标识号：注释性描述：主目录：登录shell</li>
</ul>
<ol start="4">
<li>/etc/shadow 文件</li>
</ol>
<ul>
<li>口令配置文件</li>
<li>每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</li>
</ul>
<ol start="5">
<li>/etc/group 文件</li>
</ol>
<ul>
<li>组（group）的配置文件，记录Linux包含的组的信息。</li>
<li>每行含义：组名：口令：组标识号：组内用户列表</li>
</ul>
<h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><ul>
<li><p>pwd：Print Working Directory，显示当前工作目录的绝对路径。</p>
</li>
<li><p>ls：-a：显示当前目录所有的文件和目录，包括隐藏的；-l：以列表的方式显示信息。</p>
</li>
<li><p>cd：cd ~：回到自己的家目录；cd ..：回到当前目录的上一级目录。</p>
</li>
<li><p>mkdir：创建目录；-p：创建多级目录。</p>
</li>
<li><p>rmdir：删除空目录。rmdir不能删除非空的目录。如果需要删除非空的目录，需要使用rm -rf。</p>
</li>
<li><p>touch：创建空文件。可以一次性创建多个文件</p>
</li>
<li><p>cp：拷贝文件到指定目录；-r：递归复制整个文件夹。强制覆盖不提示的方法：cp命令改为\cp</p>
</li>
<li><p>rm：移除文件或目录；-r：递归删除整个文件夹；-f：强制删除不提示。</p>
</li>
<li><p>mv：移动文件与目录或重命名，两种功能！</p>
</li>
<li><p>cat：查看文件内容。只能浏览文件，而不能修改文件。-n：显示行号。结尾加上 | more：分页显示，不会全部一下显示完。</p>
</li>
<li><p>more：是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more还内置了很多快捷键：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>空白键（Space）</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>Enter</td>
<td>向下翻一行</td>
</tr>
<tr>
<td>q</td>
<td>立刻离开more，不再显示该文件内容</td>
</tr>
<tr>
<td>Ctrl + F</td>
<td>向下滚动一屏</td>
</tr>
<tr>
<td>Ctrl + B</td>
<td>返回上一屏</td>
</tr>
<tr>
<td>=</td>
<td>输出当前行的行号</td>
</tr>
<tr>
<td>：f</td>
<td>输出文件名和当前行的行号</td>
</tr>
</tbody></table>
</li>
<li><p>less：用来分屏查看文件内容，与more相似，但是更强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容。<strong>对于显示大型文件具有较高的效率。</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>操作</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>空白键（Space）</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>[pagedown]</td>
<td>向下翻一行</td>
</tr>
<tr>
<td>[pageup]</td>
<td>向上翻动一页</td>
</tr>
<tr>
<td>/字串</td>
<td>向下搜寻字串的功能；n向下找，N向上找</td>
</tr>
<tr>
<td>？子串</td>
<td>向上搜寻字串的功能；n向上找，N向下找   （n正向）</td>
</tr>
<tr>
<td>q</td>
<td>离开less这个程序</td>
</tr>
</tbody></table>
<ul>
<li><code>&gt;</code>指令：输出重定向。如果不存在会创建文件，否则会将原来的文件内容覆盖。</li>
<li><code>&gt;&gt;</code>指令：追加。如果不存在会创建文件，否则不会覆盖原来的文件内容，而是追加到文件的尾部。</li>
<li>cat是查看，echo是写入，echo （内容） &gt;&gt; 文件</li>
<li>cal：显示当前月日历。</li>
<li>echo：输出内容到控制台。</li>
<li>head：显示文件的开头部分。-n 5：看前面5行内容。</li>
<li>tail：输出文件中尾部的内容。-n 5：看后面5行内容。-f：时事追踪该文档的所有更新</li>
<li>ln -s :建立软连接 </li>
<li>history: 查看历史指令</li>
</ul>
<h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><ul>
<li>date：显示当前日期和时间</li>
<li>date “+%Y”：显示当前年份</li>
<li>date “+%d”：显示当前月份</li>
<li>date “+%Y-%m-%d %H:%M:%S”：显示年-月-日 时：分：秒</li>
<li>设置日期：date -s 字符串时间</li>
<li>cal：查看日历指令；cal 年份：显示某一年一整年的日历</li>
</ul>
<h2 id="搜索查找"><a href="#搜索查找" class="headerlink" title="搜索查找"></a>搜索查找</h2><ul>
<li>find：从指定目录向下递归的遍历其各个子目录，将满足条件的文件或者目录显示在终端。<ul>
<li>find (搜索范围) -name (文件名)：按照指定的文件名查找模式查找文件。</li>
<li>find (搜索范围) -user (用户名)：按照指定的用户名查找模式查找文件。</li>
<li>find (搜索范围) -size (+多少/-多少/多少)：按照指定的文件大小查找模式查找文件（大于多少/小于多少/等于多少）</li>
<li><strong>查询 /目录下所有.txt的文件</strong>：find / -name *.txt</li>
<li>根据文件名删除文件：<code>find . -name 文件名 | xargs rm -rf</code></li>
</ul>
</li>
<li>locate： locate (搜索文件)<ul>
<li>可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</li>
<li>在第一次运行之前，<strong>必须使用updatedb指令创建locate数据库</strong>。</li>
</ul>
</li>
<li>grep：过滤查找，表示将前一个命令的处理结果输出传递给后面的命令处理。经常跟管道一起使用。<ul>
<li>grep [选项] 查找内容 源文件</li>
<li>-n：显示匹配行及行号。</li>
<li>-i：忽略大小写字母。</li>
<li><code>cat hello.txt | grep &quot;yes&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h2><ul>
<li>gzip/gunzip：压缩文件/解压<ul>
<li>gzip (文件)：压缩为.gz文件，原来文件不保留。</li>
<li>gunzip (文件)：解压缩，同样也不保留源文件。</li>
</ul>
</li>
<li>zip/unzip：压缩文件/解压<ul>
<li>zip [选项] (压缩后文件xxx.zip) (将要压缩的文件)</li>
<li>unzip [选项] (要解压的文件xxx.zip)</li>
<li>zip -r：递归压缩，即压缩目录</li>
<li>unzip -d (目录)：指定解压后的文件的存放目录</li>
</ul>
</li>
<li>tar：打包指令，最后打包后的文件是.tar.gz的文件<ul>
<li>tar [选项] xxx.tar.gz (打包的内容)</li>
<li>-c：产生.tar打包文件</li>
<li>-v：显示详细信息</li>
<li>-f：指定压缩后的文件名</li>
<li>-z：打包同时压缩</li>
<li>-x：解压.tar文件</li>
<li>压缩：tar -zcvf (压缩后文件名) (要压缩的文件)</li>
<li>解压：tar -zxvf (要解压的文件)</li>
<li>解压到指定目录：tar -zxvf (要解压的文件) -C (指定目录)，指定解压到的目录要存在。</li>
</ul>
</li>
</ul>
<h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><p>在Linux中每个用户必须属于一个组，不能独立于组外。每个文件有所有者、所在组、其他组概念</p>
<ol>
<li>所有者</li>
<li>所在组</li>
<li>其他组</li>
<li>改变用户所在组</li>
</ol>
<ul>
<li>文件/目录所有者：<ul>
<li>一般为文件的创建者，谁创建了该文件，就自然的称为该文件的所有者。</li>
<li>查看文件所有者：ls -ahl</li>
<li>修改文件所有者：chown (用户名) (文件名)</li>
<li>文件所在组不一定是文件所有者。</li>
</ul>
</li>
<li>组的创建<ul>
<li>groupadd (组名)</li>
</ul>
</li>
<li>文件/目录所在组<ul>
<li>修改文件所在组：chgrp (组名) (文件名)</li>
</ul>
</li>
<li>其他组<ul>
<li>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</li>
</ul>
</li>
<li>改变用户所在组<ul>
<li>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在的组</li>
<li>改变用户所在组：usermod -g 组名 用户名</li>
<li>改变用户登录的初始目录：usermod -d 目录名 用户名</li>
</ul>
</li>
</ul>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-rw-r--r--.  1 zwj  root       0 4月   5 18:20 apple.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第0位是符号类型</p>
<ul>
<li><p>文件类型：</p>
<ul>
<li>-：普通类型</li>
<li>d：目录</li>
<li>l：软连接  相当于快捷方式</li>
<li>c：字符设备【键盘、鼠标等】</li>
<li>b：块文件【硬盘】</li>
</ul>
</li>
<li><p>rw-：表示文件所有者权限（rw，读写）(第1-3位)</p>
</li>
<li><p>r–：表示文件所在组的用户的权限（r，只有读的权限）（第4-6位）</p>
</li>
<li><p>r–：表示文件其他组的用户的权限（r，只有读的权限）（第7-9位）</p>
</li>
<li><p>1：如果是文件，表示硬连接的数；如果是目录则表示该目录的子目录个数</p>
</li>
<li><p>zwj：文件所有者</p>
</li>
<li><p>root：文件所在组</p>
</li>
<li><p>0：文件的大小，0个字节；如果是目录，则统一为4096</p>
</li>
<li><p>July 1 13：40：文件最后的修改时间</p>
</li>
<li><p>apple.txt：文件名</p>
</li>
</ul>
<ul>
<li><p>rwx作用到文件：</p>
<ul>
<li>r：read，可读。读取查看。</li>
<li>w：write，可以修改。但不代表可以删除该文件。删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件。</li>
<li>x：execute，可执行。可以被执行。</li>
</ul>
</li>
<li><p>rwx作用到目录：</p>
<ul>
<li>r：可以读取，ls查看目录内容。</li>
<li>w：可以修改，目录内创建+删除+重命名目录。</li>
<li>x：可执行，可以进入该目录。</li>
</ul>
</li>
<li><p>修改权限 chmod</p>
<ul>
<li>修改文件或者目录的权限</li>
<li>u：所有者；g：所在组；o：其他人；a：所有人（u、g、o的总和）</li>
<li>chmod u=rwx，g=rx，o=x 文件目录名：分别权限</li>
<li>chmod o+w 文件目录名：给其他人都增加写的权限</li>
<li>chmod a-x 文件目录名：给所有的用户都减掉执行权限</li>
</ul>
</li>
<li><p>通过数字变更权限</p>
<ul>
<li>规则：r=4 w=2 x=1 rwx=4+2+1=7</li>
<li>chmod u=rwx，g=rx，o=x 文件目录名 <strong>等价于</strong> chmod 751 文件目录名</li>
</ul>
</li>
<li><p>修改文件所有者 chown</p>
<ul>
<li>chown newowner file：改变文件的所有者</li>
<li>chown newowner：newgroup file：改变文件的所有者和所在组</li>
<li>-R：如果是目录，则使其下所有子文件或目录递归生效</li>
</ul>
</li>
<li><p>修改文件所在组 chgrp</p>
<ul>
<li>chgrp newgroup file：改变文件的所有组</li>
<li>-R：如果是目录，则使其下所</li>
</ul>
</li>
</ul>
<h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><ul>
<li><p>rond任务调度：crontab进行定时任务调度</p>
<ul>
<li>crontab [选项]</li>
<li>-e：编辑crontab定时任务</li>
<li>-l：查询crontab任务</li>
<li>-r：删除当前用户所有的crontab任务</li>
<li>service crond restart：重启任务调度</li>
<li>当保存退出后就生效了</li>
</ul>
<p><strong>快速入门</strong></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"># 设置任务调度文件： 
/etc/crontab

#设置个人任务调度,执行crontab -e命令，接着输入任务到调度文件，如：
*/1 * * * * ls -l /etc/ > /tmp/to.txt     #每个* 之前有空格
意思是每小时的每分钟执行 ls -l /etc/ > /tmp/to.txt 命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>项目</th>
<th>含义</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>第一个“*”</td>
<td>一小时当中的第几分钟</td>
<td>0-59</td>
</tr>
<tr>
<td>第二个“*”</td>
<td>一天当中的第几小时</td>
<td>0-23</td>
</tr>
<tr>
<td>第三个“*”</td>
<td>一个月当中的第几天</td>
<td>1-31</td>
</tr>
<tr>
<td>第四个“*”</td>
<td>一年当中的第几月</td>
<td>1-12</td>
</tr>
<tr>
<td>第五个“*”</td>
<td>一周当中的星期几</td>
<td>0-7（0和7都代表星期日）</td>
</tr>
</tbody></table>
</li>
<li><p>特殊符号说明</p>
<ul>
<li><code>*</code>：代表任何时间。比如第一个<code>*</code>就代表一小时中每分钟都执行一次的意思。</li>
<li><code>,</code>：代表不连续的时间。比如“0 8,12,16 * * *命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令。</li>
<li><code>-</code>：代表连续的时间范围。比如“0 5 * * 1-6命令”，代表在周一到周六的凌晨5点0分执行命令。</li>
<li><code>*/n</code>：代表每隔多久执行一次。比如“*/10 * * * * 命令”，代表每隔10分钟就执行一遍命令。</li>
</ul>
<p>** 特定时间执行任务案例</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>时间</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>45 22 * * * 命令</td>
<td>22点45分执行命令</td>
</tr>
<tr>
<td>0 17 * * 1 命令</td>
<td>每周一的17点执行</td>
</tr>
<tr>
<td>0 5 1,15 * * 命令</td>
<td>每月的1号和15号的5点执行</td>
</tr>
<tr>
<td>40 4 * * 1-5 命令</td>
<td>每周一到周五的4点40执行</td>
</tr>
<tr>
<td>*/10 4 * * * 命令</td>
<td>每天的4点每隔10分钟执行</td>
</tr>
<tr>
<td>0 0 1,15 * 1 命令</td>
<td>每月1号和15号、周一的零点执行，星期和几号最好不要同时出现</td>
</tr>
</tbody></table>
<h3 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h3><blockquote>
<ol>
<li>at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行。</li>
<li>默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</li>
<li>at命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</li>
<li>在使用at命令的时候，一定要保证atd进程的启动，可以使用相关指令来查看</li>
<li>ps -ef | grep atd //可以检测atd是否在运行    ps - ef 可以查看所有运行的进程</li>
</ol>
</blockquote>
<ul>
<li>atq：查看当前任务</li>
<li>atrm: 删除已经设置的任务，atrm 任务编号</li>
</ul>
<p><strong>案例</strong></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"># 两分钟后把时间写到xx.log
at now + 2 minutes  回车
at> date > /home/xx.log   输入完按两次 Ctrl+D

#两天后的下午5点执行 /bin/li/home
at 5pm + 2 days   回车
at> /bin/ls/home  输入完按两次 Ctrl+D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><blockquote>
<p>Linux来说无论有几个分区，分给哪一个目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分。</p>
<p>Linux采用了一种叫做“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p>
</blockquote>
<ul>
<li><p>硬盘说明</p>
<ul>
<li>Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</li>
<li>lsblk -f：查看当前系统的分区和挂载情况。（list block）</li>
<li>lsblk: 查看系统分区情况</li>
</ul>
</li>
<li><p>新增硬盘的操作</p>
<ul>
<li>虚拟机添加硬盘</li>
<li>分区：fdsk  /dev/sdb（sdb是新增加的硬盘的名字)</li>
<li>格式化：mkfs -t ext4 /dev/sdb1  (sdb1是刚才分区的名字)</li>
<li>挂载：新建目录：mkdir /home/newdisk；挂载：mount /dev/sdb1 /home/newdisk , ==将sdb1挂载到 /home/newdisk目录下，这样保存到 /home/newdisk目录下的文件就保存到 sdb1硬盘中==</li>
<li>设置可以自动挂载（永久挂载）：重启系统后，仍然可以挂载。vim etc/fstab 增加挂载信息。mount -a：生效</li>
<li>取消挂载：unmount /dev/sdb1</li>
</ul>
</li>
<li><p>磁盘情况查询：</p>
<ul>
<li>查询系统整体磁盘使用情况：df -h 、  df -l</li>
<li>查询指定目录的磁盘占用情况：du -h /目录，默认为当前目录<ul>
<li>-s：指定目录占用大小汇总</li>
<li>-h：带计量单位</li>
<li>-a：含文件</li>
<li>–max-depth=1：子目录深度</li>
<li>-c：列出明细的同时，增加汇总值</li>
</ul>
</li>
</ul>
</li>
<li><p>磁盘情况-工作实用指令</p>
<ol>
<li>统计/home文件夹下文件的个数：<code>ls -l /home | grep &quot;^-&quot; | wc -l</code>  <strong>wc的功能是进行统计，“^-” 是正则表达式，以-开头的</strong></li>
<li>统计/home文件夹下目录的个数：<code>ls -l /home | grep &quot;^d&quot; | wc -l</code></li>
<li>统计/home文件夹下文件的个数，包括子文件夹里的：<code>ls -lR /home | grep &quot;^-&quot; | wc -l</code></li>
<li>统计文件夹下目录的个数，包括子文件夹里的：<code>ls -lR /home | grep &quot;^d&quot; | wc -l</code></li>
<li>以树状显示目录结构：首先安装tree指令：yum install tree，tree</li>
</ol>
</li>
</ul>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><ul>
<li>指定固定IP：直接修改配置文件来指定IP，并可以连接到外网，编辑：vim /etc/sysconfig/network-scripts/ifcfg-eth33。修改如下只<ul>
<li>BOOTPROTO=static  <em>静态分配</em></li>
<li>IPADDR= 192.168.200.139  <em>ip地址</em></li>
<li>GETWAY=192.168.200.2<em>网关</em></li>
<li>DNS1=192.168.200.2 <em>域名解析器</em></li>
<li>重启网络服务 （service network restart)  或重启系统生效(reboot)</li>
</ul>
</li>
<li>设置主机名 : vim/etc/hostname</li>
<li>查看主机名:hostname</li>
<li>设置ip和主机名的映射关系<ul>
<li>windows:  C:\windows\System2\drivers\etc\hosts，添加映射关系</li>
<li>linux：在etc/hosts 文件中添加</li>
</ul>
</li>
</ul>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul>
<li><p>在Linux中，每个执行的<strong>程序（代码）</strong>都称为一个进程。每个进程都分配一个ID号</p>
</li>
<li><p>每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器。</p>
</li>
<li><p>每个进程都可能以两种方式存在：前台和后台</p>
<ul>
<li>前台进程：用户目前的屏幕上可以进行操作的。</li>
<li>后台进程：实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</li>
</ul>
</li>
<li><p>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中，直到关机才结束。</p>
</li>
<li><p>显示系统执行的进程</p>
<ul>
<li>ps：查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数。PID：进程识别号；TTY：终端机号；TIME：此进程所消耗的CPU时间；CMD：正在执行的命令或进程名</li>
<li>ps -a：显示当前终端的所有进程信息。</li>
<li>ps -u：以用户的格式显示进程信息。</li>
<li>ps -x：显示后台进程运行的参数。</li>
<li>ps -axu | grep xxx：过滤得到xxx的信息。</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">System V展示风格

USER:用户名称

PID:进程号

%CPU:进程占用CPU的百分比

%MEM:进程占用物理内存的百分比

VSZ:进程占用的虚拟内存大小（单位:KB)

RSS:进程占用的物理内存大小(单位:KB)

TT:终端名称,缩写

STAT:进程状态，其中S-睡眠,s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等

STARTED:进程的启动时间

TIME:CPU时间，即进程使用CPU的总时间

COMMAND:启动进程所用的命令和参数，如果过长会被截断显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>ps -ef：以全格式显示当前所有的进程，查看进程的父进程。</li>
<li>-e：显示所有进程。</li>
<li>-f：全格式。</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">UID:用户ID

PID:进程ID

PPID:父进程ID

C: CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低;数值越小，表明进程是IO密集型运算，执行优先级会提高

STIME:进程启动的时间

TTY:完整的终端名称

TIME:CPU时间

CMD:启动进程所用的命令和参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>终止进程</p>
<ul>
<li>kill [选项] 进程号：通过进程号杀死进程</li>
<li>killall 进程名称：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</li>
<li>-9：表示强迫进程立刻停止</li>
<li>案例1：踢掉非法用户：kill 进程号</li>
<li>案例2：终止远程登录服务sshd，在适当时候再次重启sshd服务  :kill sshd对应的进程号， 重启： /bin/systemctl start sshd.service</li>
<li>案例3：终止多个gedit编辑器：killall 进程名称</li>
<li>案例4：强制杀掉一个终端：kill -9 进程号</li>
</ul>
</li>
<li><p>查看进程树：pstree [选项]</p>
<ul>
<li>-p：显示进程的PID</li>
<li>-u：显示进程的所属用户</li>
</ul>
</li>
</ul>
<h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><ul>
<li><p>service管理指令：service 服务名 [start | stop | restart | reload | status]</p>
</li>
<li><p>在CentOS7.0之后，不再使用service，而是systemctl</p>
</li>
<li><p>查看防火墙情况：</p>
<ul>
<li>service iptables status</li>
<li>systemctl status firewalld（7.0之后的版本）</li>
</ul>
</li>
<li><p>运行级别：通常使用3和5，3是无图形界面，5有图形化界面</p>
<ul>
<li>查看或修改默认级别：vim /etc/inittab</li>
<li>systemctl get-default 查看当前的运行级别</li>
<li>systemctl set-default TARGENT.target 设置当前运行级别为3</li>
</ul>
</li>
<li><p>chkconfig：可以给每个服务的各个运行级别设置自启动/关闭</p>
<ul>
<li>查看xxx服务：chkconfig –list | grep xxx</li>
<li>查看服务的状态：chkconfig 服务名 –list</li>
<li>给服务的运行级别设置自启动：chkconfig –level 5 服务名 on/off</li>
<li>要所有运行级别关闭或开启：chkconfig 服务名 on/off</li>
</ul>
</li>
<li><p>systemctl管理指令</p>
<ul>
<li>基本语法:systemctl [start | stop | restart | status]服务名</li>
<li>systemctl指令管理的服务在/usr/lib/systemd/system查看</li>
<li>systemctl设置服务的自启动状态</li>
<li>systemctl list-unit-files [l grep 服务名](查看服务开机启动状态, grep可以进行过滤)</li>
<li>systemctl enable服务名(设置服务开机启动)</li>
<li>systemctl disable 服务名(关闭服务开机启动)</li>
<li>systemctl is-enabled服务名(查询某个服务是否是自启动的)</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">systemctl status firewalld   #查看firewalld的状况
systemctl stop firewalld   #关闭防火墙
systemctl start firewalld #重启防火墙

#以上命令指示临时生效，当系统重启后还是回归以前的配置
#如果需要永久生效，使用systemctl [enable|disable] 服务名   进行修改 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>windows 在 cmd下使用 telnet ip  端口号 可以连接端口</li>
</ul>
</li>
<li><p>端口设置</p>
<ul>
<li>打开端口：<code>firewall-cmd --permanent --add-port=端口号/协议</code>  如：<code>firewall-cmd --permanent --add-port=111/tcp</code></li>
<li>关闭端口：<code>firewall-cmd --permanent --remove-port-端口号/协议</code>   如：<code>frewall-cmd --permanent --remove-port=111/tcp</code></li>
<li>重新载入之后上面的操作才能够生效：<code>firewall-cmd --reload</code></li>
<li>查询端口是否开放： <code>firewall-cmd --query-port=端口号/协议</code></li>
<li>查看开放的所有端口：<code>firewall-cmd --zone=public --list-ports</code></li>
</ul>
</li>
</ul>
<h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><blockquote>
<p>top和ps命令很相似。它们都用来显示正在执行的进程。top和ps最大的不同之处在于top在执行一段时间可以更新正在运行的进程。</p>
</blockquote>
<ul>
<li>top [选项]<ul>
<li>-d 秒数：指定top命令每隔几秒更新。默认是3秒。</li>
<li>-i：使top不显示任何闲置或者僵死进程。</li>
<li>-p：通过指定监控进程ID来仅仅监控某个进程的状态。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">PID：进程号 

USER：进程所有者的用户名 ( 该 process 所属的使用者 )

PR：进程的优先级别 ( Priority 的简写，程序的优先执行顺序，越小越早被执行 )

NI：进程的优先级别数值 ( Nice 的简写，与 Priority 有关，也是越小越早被执行 )

VIRT：进程占用的虚拟内存值。

RES：进程占用的物理内存值。

SHR：进程使用的共享内存值。

S：进程的状态，其中S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值是负数。

%CPU：该进程占用的CPU使用率。

%MEM：该进程占用的物理内存和总内存的百分比。

TIME＋：该进程启动后占用的总的CPU时间 ( CPU 使用时间的累加 )

Command：进程启动的启动命令名称，如果这一行显示不下，进程会有一个完整的命令行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>交互操作说明：(在top界面按下对应的选型)<ul>
<li>P：以CPU使用率排序，默认就是此项</li>
<li>M：以内存的使用率排序</li>
<li>N：以PID排序</li>
<li>q：退出top</li>
</ul>
</li>
<li>案例1：监控特定用户：==top查看进程；u输入用户名。==</li>
<li>案例2：终止指定的进程：==top查看进程；k输入要结束的进程号。==</li>
<li>案例3：指定系统状态更新的时间（每隔10秒自动更新，默认是3秒）：top -d 10</li>
</ul>
<h2 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h2><ul>
<li>netstat [选项]<ul>
<li>-an：按一定顺序排列输出</li>
<li>-p：显示哪个进程在调用</li>
</ul>
</li>
</ul>
<h2 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h2><blockquote>
<p>rpm用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成只有.RPM扩展名的文件。RPM是RedHat Package Manager( RedHat软件包管理工具)的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。</p>
<p>Linux的分发版本都有采用(suse,redhat, centos等等），可以算是公认的行业标准了.</p>
</blockquote>
<ul>
<li>rpm包的查询指令：<ul>
<li>rpm -qa：查询所安装的所有rpm软件包</li>
<li>rpm -qa | more</li>
<li>rpm -qa | grep xx</li>
<li>rpm -q xx：查询xx软件包是否安装</li>
<li>rpm -qi xx：查询软件包信息</li>
<li>rpm -ql xx：查询软件包中的文件</li>
<li>rpm -qf 文件全路径名：查询文件所属的软件包</li>
</ul>
</li>
<li>卸载rpm包：rpm -e 软件包名称<ul>
<li>删除时可能会发生依赖错误，忽视依赖强制删除的方法：rpm -e –nodeps 软件包名称</li>
</ul>
</li>
<li>安装rpm包：rpm -ivh 软件包全路径名称<ul>
<li>i=install：安装</li>
<li>v=verbose：提示</li>
<li>h=hash：进度条</li>
</ul>
</li>
</ul>
<h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><blockquote>
<p>Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p>
</blockquote>
<ul>
<li>yum list | grep xx：查询yum服务器是否有需要安装的软件</li>
<li>yum install xx：安装指定的yum包</li>
<li>yum -y remove xx：卸载指定的yum包</li>
</ul>
<h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><ol>
<li><p>使用windows下载jdk1.8的压缩包，使用xftp传输给linux  <em>通常保存到/opt/xxx下</em></p>
</li>
<li><p>使用 <code>tar -zxvf xxx</code>解压文件</p>
</li>
<li><p>将压缩文件移动到<code>/usr/local/xxx</code>文件夹下,<em>最好先在usr/local下创建文件夹，再使用mv移动文件夹</em></p>
</li>
<li><p>配置环境变量 ：<code>vim /etc/profile</code>,添加如下命令:</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">export JAVA_HOME=/usr/local/java/jdk1.8.0_321    #jdk1.8.0_321为你自己的文件夹名字
export PATH=$JAVA_HOME/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>使用<code>source /etc/profile</code>让刚才配置的环境变量生效</p>
</li>
<li><p>使用<code>echo $PATH</code>可以查看配置的环境变量是否生效</p>
</li>
</ol>
<h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><blockquote>
<p>Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便裕兴程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。</p>
</blockquote>
<h3 id="Shell脚本的执行方式："><a href="#Shell脚本的执行方式：" class="headerlink" title="Shell脚本的执行方式："></a>Shell脚本的执行方式：</h3><ul>
<li>脚本格式要求：<ul>
<li>脚本以#!/bin/bash 开头</li>
<li>脚本需要有可执行权限</li>
</ul>
</li>
<li>脚本的常用执行方式：<ul>
<li>方式1（输入脚本的绝对路径或相对路径）<ul>
<li>首先要赋予xx.sh脚本的+x权限：chmod 744 myShell.sh</li>
<li>执行脚本：./myShell.sh</li>
</ul>
</li>
<li>方式2（sh+脚本）：<ul>
<li>说明：不用赋予+x权限，直接执行即可</li>
<li>sh ./myShell.sh</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="shell的变量"><a href="#shell的变量" class="headerlink" title="shell的变量"></a>shell的变量</h3><ul>
<li><p>shell变量的介绍</p>
<ul>
<li>Linux Shell的变量分为，系统变量和用户自定义变量</li>
<li>系统变量：<code>$HOME</code>、<code>$PWD</code>、<code>$SHELL</code>、<code>$USER</code>等等</li>
<li>显示当前shell中所有变量：set</li>
</ul>
</li>
<li><p>shell变量的定义</p>
<ul>
<li><p>基本语法</p>
<p>定义变量：变量名=值，**=两边不能有空格**</p>
<p>撤销变量：unset 变量名</p>
<p>声明静态变量：readonly 变量，注意：不能unset</p>
<p>输出变量： $变量名</p>
</li>
</ul>
</li>
<li><p>定义变量的规则</p>
<ul>
<li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头</li>
<li>等号两侧不能有空格</li>
<li>变量名称一般习惯为大写</li>
</ul>
</li>
<li><p>将命令的返回值赋给变量</p>
<ul>
<li>A=`date`，使用反引号，运行里面的命令，并把结果返回给变量A</li>
<li>A=$(date)等价于上面</li>
</ul>
</li>
</ul>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ul>
<li><p>基本语法</p>
<ul>
<li><p>export 变量名=变量值：将shell变量输出为环境变量/全局变量</p>
</li>
<li><p>source 配置文件：让修改后的配置文件信息立即生效</p>
</li>
<li><p>echo $变量名：查询环境变量的值</p>
</li>
<li><p>多行注释：</p>
<pre class="line-numbers language-none"><code class="language-none">:&lt;&lt;!
需要注释的内容
!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



</li>
</ul>
</li>
</ul>
<h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><blockquote>
<p>当我们执行一个shell脚本时，如果希望获取到命令行的参数信息就可以使用到位置参数变量。比如： ./myshell.sh 100 200，这个就是一个执行shell的命令行，可以在myshell脚本中传参100，200。</p>
</blockquote>
<ul>
<li>基本语法：<ul>
<li><code>$n</code>：n为数字，<code>$0</code>代表命令本身，<code>$1-$9</code>代表第一到第九个参数，10以上的参数需要用大括号包含，如<code>$&#123;10&#125;</code></li>
<li><code>$*</code>：这个变量代表命令行中所有的参数，<code>$*</code>把所有的参数看成一个整体</li>
<li><code>$@</code>：这个变量也代表命令行中所有的参数，不过<code>$@</code>把每个参数区分对待</li>
<li><code>$#</code>：这个变量代表命令行中所有参数的个数</li>
</ul>
</li>
</ul>
<h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><ul>
<li>shell设计者事先已经定义好的变量，可以直接在shell脚本中使用</li>
<li>基本语法：<ul>
<li><code>$$</code>：当前进程的进程号（PID）</li>
<li><code>$!</code>：后台运行的最后一个进程的进程号（PID）</li>
<li><code>$?</code>：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确。</li>
<li>后台运行：./myShell.sh &amp;</li>
</ul>
</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li>在Shell中进行各种运算操作</li>
<li>“<code>$</code>((运算式))”或“<code>$</code>[运算时]”</li>
<li>expr m + n，注意expr运算符间要有空格</li>
<li>expr m - n</li>
<li>expr <code>\*</code> / %，乘，除，取余</li>
</ul>
<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ul>
<li>基本语法：[ condition ]，<strong>注意condition前后有空格！</strong></li>
<li>非空返回true，可使用$?验证（0为true，&gt;1为false）</li>
<li>两个整数比较<ul>
<li>=：字符串比较</li>
<li>-lt：小于</li>
<li>-le：小于等于</li>
<li>-eq：等于</li>
<li>-gt：大于</li>
<li>-ge：大于等于</li>
<li>-ne：不等于</li>
</ul>
</li>
<li>按照文件权限进行判断<ul>
<li>-r：有读的权限</li>
<li>-w：有写的权限</li>
<li>-x：有执行的权限</li>
</ul>
</li>
<li>按照文件类型进行判断<ul>
<li>-f：文件存在并且是一个常规的文件</li>
<li>-e：文件存在</li>
<li>-d：文件存在并且是一个目录</li>
</ul>
</li>
</ul>
<h3 id="流程控制if语句"><a href="#流程控制if语句" class="headerlink" title="流程控制if语句"></a>流程控制if语句</h3><ul>
<li><p>if判断基本语法：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ 条件判断式 ]
then
	代码
fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>或者：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ 条件判断式 ]

 then
	程序
elif [ 条件判断式 ]
then
	程序
fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



</li>
</ul>
<h3 id="流程控制case语句"><a href="#流程控制case语句" class="headerlink" title="流程控制case语句"></a>流程控制case语句</h3><ul>
<li><p>case语句基本语法：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">case $变量名 in

“值1”)

	如果变量的值等于值1，则执行程序1

;;

“值2”)

	如果变量的值等于值2，则执行程序2

;;

…省略其他分支…

*)

如果变量的值都不是以上的值，则执行此程序

;;

esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="流程控制for循环"><a href="#流程控制for循环" class="headerlink" title="流程控制for循环"></a>流程控制for循环</h3><ul>
<li><p>for循环基本语法1：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for 变量 in 值1 值2 值3…

 do

 程序

 done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



</li>
</ul>
<ul>
<li><p>for循环基本语法2</p>
<pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">for ((初始值;循环控制条件;变量变化))

 do

 程序

 done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



</li>
</ul>
<h3 id="流程控制while循环"><a href="#流程控制while循环" class="headerlink" title="流程控制while循环"></a>流程控制while循环</h3><ul>
<li><p>while循环基本语法1：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">while [ 条件判断式 ]     #条件判断和括号之间有空格

 do

 程序

 done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



</li>
</ul>
<h3 id="read读取控制台的输入"><a href="#read读取控制台的输入" class="headerlink" title="read读取控制台的输入"></a>read读取控制台的输入</h3><ul>
<li>read [选项] (参数)</li>
<li>-p：指定读取值时的提示符</li>
<li>-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了。</li>
<li>参数：变量：指定读取值的变量名</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li><p>系统函数</p>
<ul>
<li>basename：<strong>返回完整路径最后/的部分，常用于获取文件名</strong><ul>
<li>basename [pathname] [suffix]</li>
<li>basename [string] [suffix]</li>
<li>basename命令会删掉所有的前缀包括最后一个/</li>
<li>选项：suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉</li>
</ul>
</li>
<li>dirname：返回完整路径最后/的前面的部分，常用于返回路径部分<ul>
<li>dirname 文件绝对路径：从给定的包含绝对路径的文件名中出去文件名（非目录部分），然后返回剩下的路径（目录部分）</li>
</ul>
</li>
<li><strong>反正两个系统函数都不要最后一个/</strong></li>
</ul>
</li>
<li><p>自定义函数</p>
<ul>
<li><p>基本语法：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">function funname()

&#123;

 Action;

 [return int;]

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>调用直接写函数名：funname（不用写括号），然后在后面写参数</p>
</li>
</ul>
</li>
</ul>
<h1 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h1><blockquote>
<p>日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件相关信息、各种服务相关信息等。这些信息有些非常敏感，所以在 Linux 中这些日志文件只有 root 用户可以读取。<br>日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击时攻击者留下的痕迹。<br>可以这样理解日志是用来记录重大事件的工具。</p>
</blockquote>
<ul>
<li><blockquote>
<ul>
<li>基本介绍<br>日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件相关信息、各种服务相关信息等。这些信息有些非常敏感，所以在 Linux 中这些日志文件只有 root 用户可以读取。<br>日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击时攻击者留下的痕迹。<br>可以这样理解日志是用来记录重大事件的工具。</li>
<li>系统常用的日志<br>/var/log/ 目录就是系统日志文件的保存位置</li>
</ul>
<table>
<thead>
<tr>
<th align="center">日志文件</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/var/log/boot.log</td>
<td align="center">系统启动日志</td>
</tr>
<tr>
<td align="center">/var/log/cron</td>
<td align="center">记录与系统定时任务相关的日志</td>
</tr>
<tr>
<td align="center">/var/log/cups/</td>
<td align="center">记录打印信息的曰志</td>
</tr>
<tr>
<td align="center">/var/log/dmesg</td>
<td align="center">记录了系统在开机时内核自检的信总。也可以使用 dmesg 命令直接查看内核自检信息</td>
</tr>
<tr>
<td align="center">/var/log/btmp</td>
<td align="center">记录错误登陆的日志。这个文件是二进制文件，不能直接用Vi查看，而要使用 lastb 命令查看</td>
</tr>
<tr>
<td align="center">/var/log/lasllog</td>
<td align="center">记录系统中所有用户最后一次的登录时间的曰志。这个文件也是二进制文件。不能直接用Vi查看，而要使用lastlog命令查看</td>
</tr>
<tr>
<td align="center">/var/log/mailog</td>
<td align="center">记录邮件信息的日志</td>
</tr>
<tr>
<td align="center">/var/log/message</td>
<td align="center">记录系统里要佶息的日志.这个日志文件中会记录 Linux 系统的绝大多数重要信息。如果系统出现问题，首先要检查的应该就是这个日志文件</td>
</tr>
<tr>
<td align="center">/var/log/secure</td>
<td align="center">记录验证和授权方面的倍息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh 的登录、su 切换用户，sudo 授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td>
</tr>
<tr>
<td align="center">/var/log/wtmp</td>
<td align="center">永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件。同样，这个文件也是二进制文件.不能直接用Vi查看，而要使用 last 命令查看</td>
</tr>
<tr>
<td align="center">/var/tun/ulmp</td>
<td align="center">记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。同样，这个文件不能直接用Vi查看，而要使用 w、who、users 等命令查看</td>
</tr>
<tr>
<td align="center">除系统默认的日志之外，采用 RPM 包方式安装的系统服务也会默认把日志记录在 /var/log/ 目录中（源码包安装的服务日志存放在源码包指定的目录中）。不过这些日志不是由 rsyslogd 服务来记录和管理的，而是各个服务使用自己的日志管理文档来记录自身的日志。以下介绍的日志目录在你的 Linux 上不一定存在，只有安装了相应的服务，日志才会出现。</td>
<td align="center"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">日志文件</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/var/log/httpd/</td>
<td align="center">RPM 包安装的apache取务的默认日志目录</td>
</tr>
<tr>
<td align="center">/var/log/mail/</td>
<td align="center">RPM 包安装的邮件服务的额外日志因录</td>
</tr>
<tr>
<td align="center">/var/log/samba/</td>
<td align="center">RPM色安装的Samba服务的日志目录</td>
</tr>
<tr>
<td align="center">/var/log/sssd/</td>
<td align="center">守护进程安全服务目录</td>
</tr>
</tbody></table>
</blockquote>
<ul>
<li><strong>日志管理服务 rsyslogd</strong></li>
</ul>
<blockquote>
<p>CentOS 7.6日志服务是 rsyslogd，CentOS 6.x 日志服务是 syslogd，rsyslogd 功能更强大。rsyslogd 的使用、日志文件的格式，和 syslogd 服务兼容的。</p>
<ul>
<li>查询 Linux 中的 rsyslogd 服务是否启动<ul>
<li>ps aux | grep “rsyslog” | grep -v “grep”</li>
</ul>
</li>
<li>查询 rsyslogd 服务的自启动状态<ul>
<li>systemctl list-unit-files | grep rsyslog</li>
</ul>
</li>
<li>配置文件：/etc/rsyslog.conf<ul>
<li>编辑文件时的格式：*.*，其中第一个 * 代表日志类型，第二个 * 代表日志类别</li>
</ul>
</li>
</ul>
<blockquote>
<blockquote>
<table>
<thead>
<tr>
<th align="center">日志类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">auth</td>
<td align="center">安全和认证相关消息，pam 产生的日志（不推荐使用 authpriv 替代）</td>
</tr>
<tr>
<td align="center">authpirv</td>
<td align="center">安全和认证相关信息，ssh、ftp 等登录信息的验证信息（私有的）</td>
</tr>
<tr>
<td align="center">cron</td>
<td align="center">系统定时任务 crond 和 at 产生的日志</td>
</tr>
<tr>
<td align="center">daemon</td>
<td align="center">和各个守护进程相关的日志</td>
</tr>
<tr>
<td align="center">ftp</td>
<td align="center">ftp 守护进程产生的日志</td>
</tr>
<tr>
<td align="center">kern</td>
<td align="center">内核产生的日志（不是用户进程产生的）</td>
</tr>
<tr>
<td align="center">lpr</td>
<td align="center">打印产生的日志</td>
</tr>
<tr>
<td align="center">mail</td>
<td align="center">邮件收发信息</td>
</tr>
<tr>
<td align="center">news</td>
<td align="center">与新闻服务器相关的日志</td>
</tr>
<tr>
<td align="center">syslog</td>
<td align="center">有syslogd服务产生的日志信息（虽然服务名称已经改了 rsyslogd 服务，但是很多配置都还是沿用了 syslogd 的，这里并没有修改服务名）</td>
</tr>
<tr>
<td align="center">user</td>
<td align="center">用户等级类别的日志信息</td>
</tr>
<tr>
<td align="center">uucp</td>
<td align="center">uucp 子系统的日志信息，uucp 时早期 Linux 系统进行数据传递的协议，后来也经常用在新闻组服务中</td>
</tr>
<tr>
<td align="center">local0-local7</td>
<td align="center">为本地使用预留的服务</td>
</tr>
</tbody></table>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<table>
<thead>
<tr>
<th align="center">日志级别</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">debug</td>
<td align="center">一般的调试信息说明，日志通信最多</td>
</tr>
<tr>
<td align="center">info</td>
<td align="center">基本的通知信息</td>
</tr>
<tr>
<td align="center">notice</td>
<td align="center">普通信息，但是有一定的重要性</td>
</tr>
<tr>
<td align="center">warning</td>
<td align="center">警告信息，但是还不会影响到服务或系统的运行</td>
</tr>
<tr>
<td align="center">err</td>
<td align="center">错误信息，一般达到 err 等级的信息已经可以影响到服务或系统的运行了</td>
</tr>
<tr>
<td align="center">crit</td>
<td align="center">严重错误信息，比 err 等级还要严重，系统或整个软件不能正常工作</td>
</tr>
<tr>
<td align="center">alert</td>
<td align="center">需要立刻修改的信息，比 crit 还要严重，必须立即采取行动</td>
</tr>
<tr>
<td align="center">emerg</td>
<td align="center">内核崩溃等重要信息，系统已经无法使用了</td>
</tr>
<tr>
<td align="center">none</td>
<td align="center">什么都不记录</td>
</tr>
<tr>
<td align="center">注意：日志级别从上到下，级别从低到高，记录信息越来越少，优先处理的等级就越高，危害就越大。</td>
<td align="center"></td>
</tr>
</tbody></table>
</blockquote>
</blockquote>
<ul>
<li><p>由日志服务 rsyslogd 记录的日志文件，日志文件的格式包含以下4列：</p>
<ul>
<li>事件产生的时间</li>
<li>发生事件的服务器的主机名</li>
<li>产生事件的服务名或程序名</li>
<li>事件的具体信息</li>
</ul>
</li>
<li><p>日志管理服务应用实例</p>
<p>在 /etc/rsyslog.conf 中添加一个日志文件 /var/log/hsp.log，当有事件发送时，该文件会接收到信息并保存。</p>
<ul>
<li>在 /etc/rsyslog.conf 文件中增加如下命令</li>
</ul>
</li>
</ul>
<blockquote>
<blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span>                         <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>hsp<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
</blockquote>
<ul>
<li>新建 /var/log/hsp.log 文件，重启系统，再查看该文件内容。</li>
</ul>
</blockquote>
<ul>
<li><strong>日志轮替</strong></li>
</ul>
<blockquote>
<ul>
<li><p>基本介绍</p>
<ul>
<li>日志是重要的系统文件，记录和保存了系统中所有的重要事件。但是日志文件也需要进行定期的维护，因为日志文件是不断增长的，如果完全不进行日志维护，而任由其随意递增，那么用不了多久，我们的硬盘就会被写满。</li>
<li>日志维护的最主要的工作就是把旧的日志文件删除，从而腾出空间保存新的日志文件。这项工作如果靠管理员手工来完成，那其实是非常烦琐的，而且也容易忘记。那么 Linux 系统是否可以自动完成日志的轮替工作呢？</li>
<li>logrotate 就是用来进行日志轮替（也叫日志转储）的，也就是把旧的日志文件移动并改名，同时创建一个新的空日志文件用来记录新日志，当旧日志文件超出保存的范围时就删除。</li>
</ul>
</li>
<li><p>日志轮替文件的命名规则</p>
<ul>
<li>日志轮替最主要的作用就是把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存的范围时就删除。那么，旧的日志文件改名之后，如何命名呢？主要依靠 /etc/logrotate.conf 配置文件中的“dateext”参数。</li>
<li>如果配置文件中有“dateext”参数，那么日志会用日期来作为日志文件的后缀，如“secure-20130605”。这样日志文件名不会重叠，也就不需要对日志文件进行改名，只需要保存指定的日志个数，删除多余的日志文件即可。</li>
<li>如果配置文件中没有“dateext”参数，那么日志文件就需要进行改名了。当第一次进行日志轮替时，当前的“secure”日志会自动改名为“secure.1”，然后新建“secure”日志，用来保存新的日志；当第二次进行日志轮替时，“secure.1”会自动改名为“secure.2”，当前的“secure”日志会自动改名为“secure.1”，然后也会新建“secure”日志，用来保存新的日志；以此类推。</li>
</ul>
</li>
<li><p>配置文件：/etc/logrotate.conf</p>
<p>可以设置全局的日志轮替规则，当然也可以单独给某个日志文件指定策略。</p>
<p>在这个配置文件中，主要分为三部分：</p>
<ul>
<li>第一部分是默认设置，如果需要转储的日志文件没有特殊配置，则遵循默认设置的参数；</li>
<li>第二部分是读取 /etc/logrotate.d/ 目录中的日志轮替的子配置文件，也就是说，在 /etc/logrotate.d/ 目录中的所有符合语法规则的子配置文件也会进行日志轮替；</li>
<li>第三部分是对 wtmp 和 btmp 日志文件的轮替进行设定，如果此设定和默认参数冲突，则当前设定生效（如 wtmp 的当前参数设定的轮替时间是每月，而默认参数的轮替时间是每周，则对 wtmp 这个日志文件来说，轮替时间是每月，当前的设定参数生效）。</li>
</ul>
</li>
<li><p>logrotate 配置文件的主要参数</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">daily</td>
<td align="center">日志的轮替周期是毎天</td>
</tr>
<tr>
<td align="center">weekly</td>
<td align="center">日志的轮替周期是每周</td>
</tr>
<tr>
<td align="center">monthly</td>
<td align="center">日志的轮控周期是每月</td>
</tr>
<tr>
<td align="center">rotate 数宇</td>
<td align="center">保留的日志文件的个数。0指没有备份</td>
</tr>
<tr>
<td align="center">compress</td>
<td align="center">当进行日志轮替时，对旧的日志进行压缩</td>
</tr>
<tr>
<td align="center">create mode owner group</td>
<td align="center">建立新日志，同时指定新日志的权限与所有者和所属组。如 create 0600 root utmp</td>
</tr>
<tr>
<td align="center">mail address</td>
<td align="center">当进行日志轮替时.输出内存通过邮件发送到指定的邮件地址</td>
</tr>
<tr>
<td align="center">missingok</td>
<td align="center">如果日志不存在，则忽略该日志的警告信息</td>
</tr>
<tr>
<td align="center">nolifempty</td>
<td align="center">如果曰志为空文件，則不进行日志轮替</td>
</tr>
<tr>
<td align="center">minsize 大小</td>
<td align="center">日志轮替的最小值。也就是日志一定要达到这个最小值才会进行轮持，否则就算时间达到也不进行轮替</td>
</tr>
<tr>
<td align="center">size 大小</td>
<td align="center">日志只有大于指定大小才进行日志轮替，而不是按照时间轮替，如 size 100k</td>
</tr>
<tr>
<td align="center">dateext</td>
<td align="center">使用日期作为日志轮替文件的后缀，如 secure-20130605</td>
</tr>
<tr>
<td align="center">sharedscripts</td>
<td align="center">在此关键宇之后的脚本只执行一次</td>
</tr>
<tr>
<td align="center">prerotate/cndscript</td>
<td align="center">在日志轮替之前执行脚本命令。endscript 标识 prerotate 脚本结束</td>
</tr>
<tr>
<td align="center">postrolaie/endscripl</td>
<td align="center">在日志轮替之后执行脚本命令。endscripi 标识 postrotate 脚本结束</td>
</tr>
</tbody></table>
<ul>
<li><p>把自己的日志加入日志轮替</p>
<p>如果有些日志默认没有加入日志轮替（比如源码包安装的服务的日志，或者自己添加的日志），那么这些日志默认是不会进行日志轮替的，这样当然不符合我们对日志的管理要求。如果需要把这些日志也加入日志轮替，那该如何操作呢？</p>
<p>这里有两种方法：</p>
<ul>
<li>第一种方法是直接在 /etc/logrotate.conf 配置文件中写入该日志的轮替策略，从而把日志加入轮替；</li>
<li>第二种方法是在 /etc/logrotate.d/ 目录中新建立该日志的轮替文件，在该轮替文件中写入正确的轮替策略，因为该目录中的文件都会被包含到主配置文件中，所以也可以把日志加入轮替。<br>推荐第二种方法，因为系统中需要轮替的日志非常多，如果全部直接写入 /etc/logrotate.conf 配置文件，那么这个文件的可管理性就会非常差，不利于此文件的维护。</li>
</ul>
</li>
<li><p>日志轮替服务应用实例</p>
<p>对于自己设置的 /var/log/hsp.log 日志，不是系统默认日志，而是通过 /etc/rsyslog.conf 配置文件自己生成的日志，所以默认这个日志是不会进行轮替的。如果需要把这个日志加入。就采用第二种方法，在 /etc/logrotate.d/ 目录中建立此日志的轮替文件。</p>
<ul>
<li>先创建 /etc/logrotate.d/hsplog 轮替文件</li>
<li>在文件中写入命令，即事先约定好的日志轮替规则</li>
</ul>
</li>
</ul>
<blockquote>
<blockquote>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>hsp<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">&#123;</span>
     missingok
     daily
     copytruncate
     rotate <span class="token number">7</span>
     nolifempty
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
</blockquote>
<ul>
<li>日志轮替机制原理<ul>
<li>logrotate 在很多 Linux 发行版上都是默认安装的。系统会定时运行 logrotate，一般是每天一次。系统是这么实现按天执行的。crond 会每天定时执行 /etc/cron.daily 目录下的脚本，而这个目录下有个文件叫 logrotate。logrotate 通过这个文件依赖定时任务执行的。</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><strong>查看内存日志</strong></li>
</ul>
<blockquote>
<ul>
<li>基本介绍<br>日志管理工具 journalctl 是CentOS 7上专有的日志管理工具，该工具是从 message 这个文件里读取信息。Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用 journalctl 一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是 /etc/systemd/journald.conf</li>
<li>journalctl 用法<ul>
<li>查看所有日志（默认情况下 ，只保存本次启动的日志）：journalctl</li>
<li>查看内核日志（不显示应用日志）：journalctl -k</li>
<li>查看系统本次启动的日志：journalctl -b</li>
<li>实时滚动显示最新日志：journalctl -f</li>
<li>显示尾部的最新10行日志：journalctl -n </li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>EasyExcel处理Excel</title>
    <url>/2022/05/29/EasyExcel%E5%A4%84%E7%90%86Excel/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="实现写操作"><a href="#实现写操作" class="headerlink" title="实现写操作"></a>实现写操作</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于easyexcel是对poi的一个封装，因此低版本的还需要引入poi的依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelProperty</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoData</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//设置exccel表头名称，使用@ExcelProperty注解</span>

    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"学生编号"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sno<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"学生姓名"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sname<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="实现写操作-1"><a href="#实现写操作-1" class="headerlink" title="实现写操作"></a>实现写操作</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEasyExcel</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//实现excel写操作</span>

        <span class="token comment">//1.设置写入文件地址和名称</span>
        <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token string">"F:\\write.xlsx"</span><span class="token punctuation">;</span>

        <span class="token comment">//2.调用easyexcal</span>
        <span class="token comment">//write方法中两个参数：第一个参数文件路径名称，第二个参数文件实体类class</span>
        <span class="token comment">//sheet是excel表格底下的分类</span>
        <span class="token comment">//dowrite需要传入一个列表</span>
        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token class-name">DemoData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"学生列表1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoData</span><span class="token punctuation">></span></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoData</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">DemoData</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            data<span class="token punctuation">.</span><span class="token function">setSno</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            data<span class="token punctuation">.</span><span class="token function">setSname</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span>  list<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>sheet就是这个</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220422141638360.png" alt="image-20220422141638360"></p>
<h1 id="实现读操作"><a href="#实现读操作" class="headerlink" title="实现读操作"></a>实现读操作</h1><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelProperty</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoData1</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//表示sno对应的是excel表格中的第一列</span>
    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sno<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sname<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 监听器
 */</span>
<span class="token comment">//继承AnalysisEventListener类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelListener</span> <span class="token keyword">extends</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoData1</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//一行一行的读取excel的内容</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">DemoData1</span> demoData1<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token operator">+</span>demoData1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//读取表头</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeHeadMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headMap<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表头"</span><span class="token operator">+</span>headMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//读取完成之后执行的操作</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEasyExcel1</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">//定义读取的文件的路径</span>
        <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token string">"F:\\write.xlsx"</span><span class="token punctuation">;</span>

        <span class="token comment">//第一个参数是文件路径名</span>
        <span class="token comment">//第二个是实体类的类信息</span>
        <span class="token comment">//第三个是监听器</span>
        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token class-name">DemoData1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ExcelListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>JMeter压力测试</title>
    <url>/2022/05/29/Jemeter/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h2><p>JMeter 依赖于JDK，所以必须确保当前计算机上已经安装了 JDK，并且配置了环境变量。</p>
<p>Apache Jmeter官网下载，地址：<a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182402429.png" alt="image-20220520182402429"></p>
<p>解压缩即可使用，目录结构如下</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182426302.png" alt="image-20220520182426302"></p>
<p>其中的 bin 目录就是执行的脚本，其中包含启动脚本</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182445106.png" alt="image-20220520182445106"></p>
<p>双击即可运行，但是有两点注意</p>
<ul>
<li>启动时速度比较慢，要耐心等待。</li>
<li>启动后终端（黑窗口）不能关闭，否则 JMeter 也跟着关闭。</li>
</ul>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182502234.png" alt="image-20220520182502234"></p>
<h2 id="修改中文"><a href="#修改中文" class="headerlink" title="修改中文"></a>修改中文</h2><p>默认 JMeter 的语言是英文，需要设置</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182516753.png" alt="image-20220520182516753"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182538054.png" alt="image-20220520182538054"></p>
<p>上面的配置只能保证本次运行是中文，如果要永久中文，需要修改 JMeter 的配置文件。</p>
<p>打开 JMeter 文件夹，在 bin 目录中找到 <strong>jmeter.properties</strong>，添加下面配置：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">language</span><span class="token punctuation">=</span><span class="token attr-value">zh_CN</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182555036.png" alt="image-20220520182555036"></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>在测试计划上点鼠标右键，选择「添加 &gt; 线程（用户） &gt; 线程组」</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182612199.png" alt="image-20220520182612199"></p>
<p>在新增的线程组中，填写线程信息</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182622262.png" alt="image-20220520182622262"></p>
<p>在线程组这里点鼠标右键，添加 http 请求</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182635810.png" alt="image-20220520182635810"></p>
<p>编写取样器内容</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182646501.png" alt="image-20220520182646501"></p>
<p>添加监听报告</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182658504.png" alt="image-20220520182658504"></p>
<p>汇总报告结果</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182716297.png" alt="image-20220520182716297"></p>
<p>添加监听结果树</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182815816.png" alt="image-20220520182815816"></p>
<p>察看结果树</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220520182731253.png" alt="image-20220520182731253"></p>
]]></content>
  </entry>
  <entry>
    <title>Linux无法ping通外网的问题</title>
    <url>/2022/05/29/Linux%E6%97%A0%E6%B3%95ping%E9%80%9A%E5%A4%96%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>今天重新装了一个Linux系统，下载东西的时候报出如下错误:</p>
<p><code>Cannot find a valid baseurl for repo: base/7/x86_64</code></p>
<a id="more"></a>

<p>然后使用ping命令发现无法ping通外网</p>
<p>需要设置一下DNS信息</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">vim /etc/resolv.conf

在里面加入如下配置
nameserver=8.8.8.8
nameserver=8.8.4.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>docker启动mysql</title>
    <url>/2022/05/29/docker%E5%90%AF%E5%8A%A8mysql/</url>
    <content><![CDATA[<a id="more"></a>



<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">
docker run -d mysql:latest             以后台的方式运行 mysql 版本的镜像，生成一个容器。
    --name mysql                           容器名为 mysql
    -e MYSQL_ROOT_PASSWORD&#x3D;123456          设置登陆密码为 123456，登陆用户为 root
    -p 3306:3306                           将容器内部 3306 端口映射到 主机的 3306 端口，即通过 主机的 3306 可以访问容器的 3306 端口
    -v &#x2F;usr&#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql    将容器的 日志文件夹 挂载到 主机的相应位置
    -v &#x2F;usr&#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql   将容器的 数据文件夹 挂载到 主机的相应位置
    -v &#x2F;usr&#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d   将容器的 自定义配置文件夹 挂载到主机的相应位置
    
【查看容器是否启动：】
docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -v &#x2F;usr&#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql -v &#x2F;usr&#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;usr&#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d mysql:8.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>





<p><strong>在启动mysql的时候需要挂载数据卷，否则如果容器被删除，那么数据库中的数据将全部丢失，这是一个很严重的问题，可以使用 -v 挂载数据卷到宿主机。其次由于没有配置数据库，因此数据库的默认编码是<code>latin1</code>，这时如果插入中文数据会报错，因此我们需要修改配置。使用<code> SHOW VARIABLES LIKE &#39;character%&#39;</code>可以查看编码设置。</strong></p>
<p><strong>上面的命令已经挂载了数据卷，-v  ：前面的是宿主机的路径，后面是容器的路径。我们在宿主机的conf目录下创建my.cnf文件，然后将下面代码复制到my.cnf文件即可</strong></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[client]
default_character_set&#x3D;utf8
[mysqld]
collation_server &#x3D; utf8_general_ci
character_set_server &#x3D; utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>docker安装elasticsearch</title>
    <url>/2022/05/29/docker%E5%AE%89%E8%A3%85elasticsearch/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>我安装的是7.6.2版本，可以到<code>hub.docker.com</code>上查看支持的版本</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull elasticsearch:7.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="启动Elasticsearch"><a href="#启动Elasticsearch" class="headerlink" title="启动Elasticsearch"></a>启动Elasticsearch</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name elascticsearch -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS&#x3D;&quot;-Xms64m -Xmx512m&quot; -e &quot;discover.type&#x3D;single-node&quot; elasticsearch:7.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>9300端口是使用tcp客户端连接使用的端口；9200端口是通过http协议连接es使用的端口；</li>
<li>-e ES_JAVA_OPTS=”-Xms64m -Xmx512m” 是配置内存大小，如果不配置，我的虚拟机因为内存小，会变得很卡</li>
<li>-e “discover.type=single-node” 单节点启动</li>
</ul>
<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">firewall-cmd --permanent --add-port&#x3D;9200&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>





<h1 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h1><h2 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>kibana和Elasticsearch的关系类似于navicat和mysql的关系。kibana可以查看Elasticsearch中的数据，并且提供一些语法提示。</p>
<p><strong>安装的kibana版本需要和Elasticsearch的版本一致</strong></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull kibana:7.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="启动kibana"><a href="#启动kibana" class="headerlink" title="启动kibana"></a>启动kibana</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name kibana -p 5601:5601 kibana:7.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="将kibana和Elasticsearch进行关联"><a href="#将kibana和Elasticsearch进行关联" class="headerlink" title="将kibana和Elasticsearch进行关联"></a>将kibana和Elasticsearch进行关联</h2><p>由于kibana和elasticsearch是运行在docker中的，因此两个之间是相互独立的，没有关联，由于Elasticsearch的9200端口和宿主机的9200端口进行了映射，因此我们可以通过宿主机的9200找到Elasticsearch。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#进入kibana
docker exec -it kibana:7.6.2

#进入config文件夹
cd config

#修改kibana.yml,注意没有vim指令
vi kibana.yml
#将elasticsearch.hosts 修改为当前的主机号和端口号
elasticsearch.hosts: [ &quot;http:&#x2F;&#x2F;192.168.217.4:9200&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="重启kibana"><a href="#重启kibana" class="headerlink" title="重启kibana"></a>重启kibana</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker restart kibana<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="开放端口-1"><a href="#开放端口-1" class="headerlink" title="开放端口"></a>开放端口</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">firewall-cmd --permanent --add-port&#x3D;5601&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>





<h1 id="一键启动kibana和Elasticsearch"><a href="#一键启动kibana和Elasticsearch" class="headerlink" title="一键启动kibana和Elasticsearch"></a>一键启动kibana和Elasticsearch</h1><h2 id="编写composs"><a href="#编写composs" class="headerlink" title="编写composs"></a>编写composs</h2><p>当我们重新启动一个kibana的容器，都需要重新将他与elasticsearch关联起来。</p>
<p>同时两个服务也是需要一同启动的因此我们编写一个compose，同时启动两个服务，并且写好配置，将kibana的kibana.yml与宿主机的配置文件进行关联，这样就不需要每次都修改kibana内部的文件。</p>
<h3 id="复制kibana配置文件"><a href="#复制kibana配置文件" class="headerlink" title="复制kibana配置文件"></a>复制kibana配置文件</h3><p>将配置文件复制到宿主机</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#创建文件夹
mkdir &#x2F;opt&#x2F;es-kibana
cd &#x2F;opt&#x2F;es-kibana
#复制文件
docker cp kibana:&#x2F;usr&#x2F;share&#x2F;kibana&#x2F;config&#x2F;kibana.yml &#x2F;opt&#x2F;es-kibana
#修改文件内容，因为下面配置了compose，所以可以直接写网络名称
elasticsearch.hosts: [ &quot;http:&#x2F;&#x2F;elasticsearch:9200&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="编写Compose文件"><a href="#编写Compose文件" class="headerlink" title="编写Compose文件"></a>编写Compose文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#编写文件
vim docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.3"</span>													<span class="token comment">#指定语法的版本格式</span>
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">plugin</span><span class="token punctuation">:</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">es</span><span class="token punctuation">:</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>														<span class="token comment">#定义服务</span>
   <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>												<span class="token comment">#服务名称</span>
     <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.6.2									<span class="token comment">#镜像</span>
     <span class="token key atrule">ports</span><span class="token punctuation">:</span>														<span class="token comment">#端口映射</span>
        <span class="token punctuation">-</span> <span class="token string">"9200:9200"</span>
        <span class="token punctuation">-</span> <span class="token string">"9300:9300"</span>
     <span class="token key atrule">networks</span><span class="token punctuation">:</span>                                                  <span class="token comment">#网络</span>
        <span class="token punctuation">-</span> <span class="token string">"es"</span>
     <span class="token key atrule">environment</span><span class="token punctuation">:</span>												<span class="token comment">#容器内部环境变量</span>
        <span class="token punctuation">-</span> <span class="token string">"discovery.type=single-node"</span>
        <span class="token punctuation">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms64m -Xmx512m"</span>
     <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> data<span class="token punctuation">:</span>/usr/share/elasticsearch/data                    <span class="token comment">#挂载数据卷</span>
        <span class="token punctuation">-</span> config<span class="token punctuation">:</span>/usr/share/elasticsearch/config
        <span class="token punctuation">-</span> plugin<span class="token punctuation">:</span>/usr/share/elasticsearch/plugins

   <span class="token key atrule">kibana</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> kibana<span class="token punctuation">:</span>7.6.2
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">"5601:5601"</span> 
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">"es"</span> 
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> /opt/kibana_config/kibana.yml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.0&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose

chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose

docker-compose -v <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#在 docker-compose.yml的当前路径下
docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/05/29/docker%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<hr>
<h2 id="title-docker基本命令"><a href="#title-docker基本命令" class="headerlink" title="title:docker基本命令"></a>title:docker基本命令</h2><a id="more"></a>

<h1 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h1><ul>
<li>docker pull：拉取镜像</li>
<li>docker images：查看安装的镜像</li>
<li>docker rmi：删除镜像</li>
<li>docker push：推送镜像到远程服务器</li>
<li>docker save ：将镜像导出到磁盘    <code>docker save -o nginx.tar nginx:latest</code>   将nginx:latest 镜像导出到磁盘,文件名叫nginx.tar</li>
<li>docker load：将本地文件加载进docker <code>docker load -i nginx.tar</code>   将nginx.tar 加载进docker</li>
</ul>
<h1 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h1><ul>
<li>docker run：创建并运行容器<ul>
<li><code>docker run --name mn-p 80:80 -d nginx</code></li>
<li>– name：给容器起一个名字</li>
<li>-p 端口映射，左边是宿主机端口，右边是容器端口</li>
<li>-d 后台运行容器</li>
<li>nginx 镜像名称</li>
</ul>
</li>
<li>docker pause: 让容器从运行到暂停</li>
<li>docker unpause： 从暂停到运行</li>
<li>docker start：从停止到运行</li>
<li>docker stop：容器从运行到停止</li>
<li>docker ps：查看所有运行的容器及状态<ul>
<li>-a：可以看到被停止的容器信息</li>
</ul>
</li>
<li>docker logs：查看容器运行的日志<ul>
<li>-f  持续查看日志，和linux中的tail一样，会显示最新的日志</li>
</ul>
</li>
<li>docker exec：进入容器执行命令<ul>
<li><code>docker exec -it mn bash</code></li>
<li>-it：给当前进入的容器创建一个标准输入输出端，允许我们与容器交互</li>
<li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li>
</ul>
</li>
<li>docker rm：删除指定容器<ul>
<li>-f：强制删除容器</li>
</ul>
</li>
<li>docker cp 容器名称 容器内路径 宿主机路径 ：复制容器内的文件到宿主机上</li>
<li>docker export 容器名称 &gt; 名称.tar：将容器导出为一个tar归档文件</li>
<li>cat 名称.tar | docker import -镜像用户/镜像名:镜像版本号: 从tar包中的内容创建一个新的文件系统再导入为镜像</li>
</ul>
<h1 id="数据卷命令"><a href="#数据卷命令" class="headerlink" title="数据卷命令"></a>数据卷命令</h1><ul>
<li>docker volume create： 创建数据卷</li>
<li>docker volume ls： 查看所有数据卷</li>
<li>docker volume inspact：查看某个数据卷具体信息，mountpoint为挂载点</li>
<li>docker volume rm：删除某个指定的数据卷</li>
<li>docker volume prune：删除没使用的数据卷</li>
</ul>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220504221503531.png" alt="image-20220504221503531"></p>
<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><blockquote>
<p>docker compose 可以基于compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容易</p>
<p>compose文件是一个文本文件，通过指定定义集群中的每个容器如何运行</p>
</blockquote>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220505210454160.png" alt="image-20220505210454160"></p>
]]></content>
  </entry>
  <entry>
    <title>Docker安装Rabbitmq</title>
    <url>/2022/05/29/docker%E5%AE%89%E8%A3%85rabbitmq/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><p><code>docker pull rabbitmq:3.8.8</code>   后面不选择版本默认是最新版</p>
<p><img src="/.com//desktop\blog\图片\image-20220412175244314.png" alt="image-20220412175244314"></p>
<h1 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name&#x3D;rabbitmq -p 15672:15672 -p 5672:5672 rabbitmq:3.8.8
-d 表示后台启动
--name 给容器起个名字，这样后面可以根据名字操作容器
-p 映射端口
rabbitmq:3.8.8 如果没写后面的版本号，会默认启动最新版，没有最新版会下载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">firewall-cmd --permanent -add-p&#x3D;15672&#x2F;tcp
filewall-cmd --permanent -add-p&#x3D;5672&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>开放服务器5672、15672两个端口</strong></p>
<h1 id="安装web管理页面"><a href="#安装web管理页面" class="headerlink" title="安装web管理页面"></a>安装web管理页面</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#进入rabbitmq容器
docker exec -it rabbitmq &#x2F;bin&#x2F;bash
#启动插件
rabbitmq-plugins enable rabbitmq_management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>此时可以使用服务器ip:15672 进行访问，默认用户名密码都为guest</strong></p>
<h1 id="安装延时插件"><a href="#安装延时插件" class="headerlink" title="安装延时插件"></a>安装延时插件</h1><ol>
<li><p>下载插件：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases">下载地址</a></p>
</li>
<li><p>将插件传输到linux系统中，我是使用xftp上传到 /opt目录下</p>
</li>
<li><p>安装插件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将插件拷贝到容器
docker cp &#x2F;opt&#x2F;rabbitmq_delayed_message_exchange-3.8.0.ez  rabbitmq:&#x2F;plugins   #前面是插件在linux中的地址，后面的rabbitmq是容器的名字
# 进入容器内部
docker exec -it rabbitmq &#x2F;bin&#x2F;bash  #rabbimq是容器名字
# 进入plugins
cd plugins
# 安装插件
rabbitmq-plugins enable rabbitmq_delayed_message_exchange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>进入管理页面，看到type有<code>x-delayed-message</code>则成功安装延时插件</p>
</li>
</ol>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220412180709472.png" alt="image-20220412180709472"></p>
]]></content>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/05/29/git/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><blockquote>
<p>Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点， 将文档的状态作为更新记录保存起来，也可以在任何时间点， 将更新记录恢复回来。</p>
</blockquote>
<h1 id="Git工作机制"><a href="#Git工作机制" class="headerlink" title="Git工作机制"></a>Git工作机制</h1><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423163817744.png" alt="image-20220423163817744"></p>
<p><strong>代码托管中心是基于网络服务器的远程代码仓库，我们一般简单称为远程库，如gitee，github</strong></p>
<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><table>
<thead>
<tr>
<th><strong>命令名称</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>git config –global user.name 用户名</td>
<td>设置用户签名</td>
</tr>
<tr>
<td>git config –global user.email 邮箱</td>
<td>设置用户签名</td>
</tr>
<tr>
<td><strong>git init</strong></td>
<td><strong>初始化本地库</strong></td>
</tr>
<tr>
<td><strong>git status</strong></td>
<td><strong>查看本地库状态</strong></td>
</tr>
<tr>
<td><strong>git add 文件名</strong></td>
<td><strong>添加到暂存区</strong></td>
</tr>
<tr>
<td><strong>git commit m “ 日志信息 “ 文件名</strong></td>
<td><strong>提交到本地库</strong></td>
</tr>
<tr>
<td><strong>git reflog</strong></td>
<td><strong>查看历史记录</strong></td>
</tr>
<tr>
<td><strong>git log</strong></td>
<td><strong>查看历史记录，详细信息</strong></td>
</tr>
<tr>
<td><strong>git reset hard 版本号</strong></td>
<td><strong>版本穿梭</strong></td>
</tr>
</tbody></table>
<h1 id="Git使用前配置"><a href="#Git使用前配置" class="headerlink" title="Git使用前配置"></a>Git使用前配置</h1><blockquote>
<p>在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p>
<ol>
<li><p>配置提交人姓名：git config –global user.name “提交人姓名” # (对当前系统用户有效)</p>
</li>
<li><p>配置提交人邮箱：git config –global user.email  “提交人邮箱” # (对当前系统用户有效)</p>
<p>作用：识别开发人员，与登良github的账户无关</p>
</li>
<li><p>查看git配置信息：git config –list</p>
</li>
</ol>
<p>注意<br>1.如果要对配置信息进行修改，重复上述命令即可。</p>
<ol start="2">
<li>配置只需要执行一次。</li>
</ol>
<p><strong>自己 <code>C:\Users\Augenestern</code> 下有个 <code>.gitconfig</code> 文件，打开里面就是我们设置的用户签名</strong></p>
</blockquote>
<h1 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h1><ul>
<li>初始化本地库：<code>git init</code><ul>
<li>git定位到要操作的文件目录，输入<code>git init</code>,生成一个.git的隐藏文件夹</li>
</ul>
</li>
<li>查看本地库状态：<code>git status</code><ul>
<li><code>git status</code>后有红色的表示该文件未被添加到暂存区</li>
</ul>
</li>
<li>添加暂存区：<code>git add 文件名</code><ul>
<li>添加成功后，<code>git status</code>会用绿色显示文件名</li>
<li>使用<code>git rm --cached 文件名</code>删除暂存区文件，只是删除暂存区，工作区文件还在</li>
<li>使用<code>git rm -r --cached .</code>清空暂存区文件</li>
</ul>
</li>
<li>提交本地库：<code>git commit -m &quot;日志信息&quot; 文件名</code><ul>
<li>提交之后，<code>git status</code>无文件显示</li>
</ul>
</li>
<li>查看历史版本：<code>git reflog</code>  查看版本信息  <code>git log</code>  查看版本详细信息</li>
<li>版本穿梭：<code>git reset --hard 版本号</code><ul>
<li>可以将版本恢复到指定版本号的版本</li>
</ul>
</li>
</ul>
<h2 id="图文讲解"><a href="#图文讲解" class="headerlink" title="图文讲解"></a>图文讲解</h2><p><strong>设置用户签名</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423165805821.png" alt="image-20220423165805821"></p>
<p><strong>初始化本地库</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423165848541.png" alt="image-20220423165848541"></p>
<p><strong>查看本地库状态</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423165926361.png" alt="image-20220423165926361"></p>
<p><strong>新增文件后查看状态</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423165958038.png" alt="image-20220423165958038"></p>
<p><strong>添加暂存区</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170017367.png" alt="image-20220423170017367"></p>
<p><strong>提交本地库</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170032291.png" alt="image-20220423170032291"></p>
<p><strong>修改文件</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170116877.png" alt="image-20220423170116877"></p>
<p><strong>查看历史版本</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170213186.png" alt="image-20220423170213186"></p>
<p><strong>版本穿梭</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170235756.png" alt="image-20220423170235756"></p>
<p><strong>版本切换原理</strong></p>
<p>Git 切换版本，底层其实是移动的HEAD 指针</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423170324500.png" alt="image-20220423170324500"></p>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><blockquote>
<ul>
<li>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支</li>
<li>使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行</li>
<li>对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本</li>
</ul>
<p>分支的好处是同时并行推进多个功能开发，提高开发效率。</p>
<p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</p>
</blockquote>
<h1 id="分支常用命令"><a href="#分支常用命令" class="headerlink" title="分支常用命令"></a>分支常用命令</h1><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git branch 分支名</td>
<td>创建分支</td>
</tr>
<tr>
<td>git branch -v</td>
<td>查看分支</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换分支</td>
</tr>
<tr>
<td>git merge 分支名</td>
<td>把指定的分支合并到当前分支上</td>
</tr>
</tbody></table>
<h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><ul>
<li><p>查看分支：<code>git branch -v</code></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423171330263.png" alt="image-20220423171330263"></p>
</li>
<li><p>创建分支：<code>git branch 分支名</code></p>
</li>
</ul>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423171405996.png" alt="image-20220423171405996"></p>
<ul>
<li><p>切换分支：<code>git checkout 分支名</code></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423171442859.png" alt="image-20220423171442859"></p>
</li>
<li><p>修改分支</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423171507205.png" alt="image-20220423171507205"></p>
</li>
<li><p>合并分支：<code>git merge 分支名</code></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423173526151.png" alt="image-20220423173526151"></p>
</li>
<li><blockquote>
<p>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。</p>
<p>有两套完全不同的修改。 Git无法替我们决定使用哪一个。必须 人为决定新代码内容。</p>
</blockquote>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/4e603c5ffb3f4383a1082cade9b10a4d.png" alt="在这里插入图片描述"></p>
</li>
</ul>
<p>head 到 == 之前是主分支的代码，== 到 hot-fix 之前是hot-fix的代码，删除掉不需要保留的代码即可，同时删除三个标志位</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/0db79fb0322441b8bbed5c0434e07066.png" alt="在这里插入图片描述"></p>
<h1 id="Git团队协作"><a href="#Git团队协作" class="headerlink" title="Git团队协作"></a>Git团队协作</h1><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183055973.png" alt="image-20220423183055973"></p>
<h1 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h1><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183132491.png" alt="image-20220423183132491"></p>
<h1 id="Git和github"><a href="#Git和github" class="headerlink" title="Git和github"></a>Git和github</h1><h2 id="远程库操作"><a href="#远程库操作" class="headerlink" title="远程库操作"></a>远程库操作</h2><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git remote -v</td>
<td>查看当前所有远程地址别名</td>
</tr>
<tr>
<td>git remote add 别名 远程地址</td>
<td>起别名</td>
</tr>
<tr>
<td>git push 别名 分支</td>
<td>推送本地分支上的内容克隆到本地</td>
</tr>
<tr>
<td>git clone 远程地址</td>
<td>将远程仓库的内容克隆到本地</td>
</tr>
<tr>
<td>git pull 远程库地址别名 远程分支名</td>
<td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td>
</tr>
</tbody></table>
<h2 id="推送到github步骤"><a href="#推送到github步骤" class="headerlink" title="推送到github步骤"></a>推送到github步骤</h2><p><strong>创建远程库</strong></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183208786.png" alt="image-20220423183208786"></p>
<p><strong>起别名</strong>：<code>git remote add 别名 远程地址</code></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183629968.png" alt="image-20220423183629968"></p>
<p><strong>推送到远程库</strong>：<code>git push 别名 分支</code></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220423183701561.png" alt="image-20220423183701561"></p>
]]></content>
  </entry>
  <entry>
    <title>mapperLocations属性通配符的使用</title>
    <url>/2022/05/29/mapperLocations%E5%B1%9E%E6%80%A7%E9%80%9A%E9%85%8D%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>示例：</strong></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">mybatis:
  mapper-locations:
    - classpath:mapper/*.xml
    - classpath*:com/**/mapper/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>*<em>注意：在classpath后面的</em>必不可少，缺少型号的话后面的通配符不起作用。**</p>
<p>** 可以表示任意多级目录，如上述文件可以查到 ：[com/pty/mall/tiny/mapper/PmsBrandMapper.xml]</p>
<p>*表示多个任意字符</p>
<p>缺少classpath后面的*会报一下错误</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span><span class="token class-name">MyBatisSystemException</span><span class="token operator">:</span> nested exception is org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span><span class="token class-name">PersistenceException</span><span class="token operator">:</span> 
### <span class="token class-name">Error</span> querying database<span class="token punctuation">.</span>  <span class="token class-name">Cause</span><span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">IllegalArgumentException</span><span class="token operator">:</span> <span class="token class-name">Mapped</span> <span class="token class-name">Statements</span> collection does not contain value <span class="token keyword">for</span> framework<span class="token punctuation">.</span>system<span class="token punctuation">.</span>dao<span class="token punctuation">.</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span>getNextUserId_MySQL
### <span class="token class-name">Cause</span><span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">IllegalArgumentException</span><span class="token operator">:</span> <span class="token class-name">Mapped</span> <span class="token class-name">Statements</span> collection does not contain value <span class="token keyword">for</span> framework<span class="token punctuation">.</span>system<span class="token punctuation">.</span>dao<span class="token punctuation">.</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span>getNextUserId_MySQL
	at org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span><span class="token class-name">MyBatisExceptionTranslator</span><span class="token punctuation">.</span><span class="token function">translateExceptionIfPossible</span><span class="token punctuation">(</span><span class="token class-name">MyBatisExceptionTranslator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">75</span><span class="token punctuation">)</span>
	at org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span><span class="token class-name">SqlSessionTemplate</span>$<span class="token class-name">SqlSessionInterceptor</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">371</span><span class="token punctuation">)</span>
	at com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$<span class="token class-name">Proxy18</span><span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>
	at org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span><span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">163</span><span class="token punctuation">)</span>
	at com<span class="token punctuation">.</span>huaxin<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">.</span><span class="token class-name">BaseDaoImpl</span><span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">BaseDaoImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">298</span><span class="token punctuation">)</span>
	at com<span class="token punctuation">.</span>huaxin<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>system<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">.</span><span class="token class-name">UserDaoImpl</span><span class="token punctuation">.</span><span class="token function">getNextUserId</span><span class="token punctuation">(</span><span class="token class-name">UserDaoImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">41</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>redis配置</title>
    <url>/2022/05/29/redis%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"># 修改触发生成RDB文件的条件,表示900s内有一个key被就修改，就执行bgsave，如果是save "" 表示禁用RDB
save 900 1
save 300 10
save 60 10000

#RDB文件名称
dbfilename dump.rdb

#rdb文件保存的目录,默认当前目录
dir ./

#是否压缩，建议不开启，压缩会消耗cpu
rdbcompression yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">#是否开启AOF功能，默认是no
appendonly yes

#AOF文件的名称
appendfilename "appendonly.aof"

#表示每执行一次写命令，立即记录到AOF文件
appendfsync always

# 写命令执行完先放入aof缓冲区，每隔一秒将缓冲区文件写入到aof文件，默认方案
appendfsync everysec

#写命令执行完先放入aof缓冲区，由系统决定何时将缓冲区内容写回磁盘
appendfsync no

#AOF文件比上次文件增长超过多少百分比则触发重写
auto-aof-rewrite-percentage 100

#aof文件体积最小多大以上才触发重写
auto-aof-rewrite-min-size 64mb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h1><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><blockquote>
<p>本次实验准备3个实例，1主2从,主从需要开启rdb</p>
</blockquote>
<p>先创建3个文件夹</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入&#x2F;tmp目录
cd &#x2F;tmp
# 创建目录
mkdir 7001 7002 7003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>将redis.conf文件复制到这三个目录,前提是先将redis-6.2.4也放到当前目录，否则需要修改下redis的路径。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 方式一：逐个拷贝
cp redis-6.2.4&#x2F;redis.conf 7001
cp redis-6.2.4&#x2F;redis.conf 7002
cp redis-6.2.4&#x2F;redis.conf 7003

# 方式二：管道组合命令，一键拷贝
echo 7001 7002 7003 | xargs -t -n 1 cp redis-6.2.4&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>修改3个实例的端口号和RDB文件保存的地址,</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sed -i -e &#39;s&#x2F;6379&#x2F;7001&#x2F;g&#39; -e &#39;s&#x2F;dir .\&#x2F;&#x2F;dir \&#x2F;tmp\&#x2F;7001\&#x2F;&#x2F;g&#39; 7001&#x2F;redis.conf
sed -i -e &#39;s&#x2F;6379&#x2F;7002&#x2F;g&#39; -e &#39;s&#x2F;dir .\&#x2F;&#x2F;dir \&#x2F;tmp\&#x2F;7002\&#x2F;&#x2F;g&#39; 7002&#x2F;redis.conf
sed -i -e &#39;s&#x2F;6379&#x2F;7003&#x2F;g&#39; -e &#39;s&#x2F;dir .\&#x2F;&#x2F;dir \&#x2F;tmp\&#x2F;7003\&#x2F;&#x2F;g&#39; 7003&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>修改每个实例的ip信息，如果不是虚拟机，可以不做这个操作</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 逐一执行
sed -i &#39;1a replica-announce-ip 192.168.150.101&#39; 7001&#x2F;redis.conf
sed -i &#39;1a replica-announce-ip 192.168.150.101&#39; 7002&#x2F;redis.conf
sed -i &#39;1a replica-announce-ip 192.168.150.101&#39; 7003&#x2F;redis.conf
# 或者一键修改
printf &#39;%s\n&#39; 7001 7002 7003 | xargs -I&#123;&#125; -t sed -i &#39;1a replica-announce-ip 192.168.150.101&#39; &#123;&#125;&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 第1个
redis-server 7001&#x2F;redis.conf
# 第2个
redis-server 7002&#x2F;redis.conf
# 第3个
redis-server 7003&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="开启主从"><a href="#开启主从" class="headerlink" title="开启主从"></a>开启主从</h2><p>在三个实例还没有任何关系，要配置主从可以使用replicaof 或者slaveof（5.0以前）命令。</p>
<p>有临时和永久两种模式：</p>
<ul>
<li><p>修改配置文件（永久生效）</p>
<ul>
<li>在redis.conf中添加一行配置：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li>
</ul>
</li>
<li><p>使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">slaveof &lt;masterip&gt; &lt;masterport&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<p><strong><font color="red">注意</font></strong>：在5.0以后新增命令replicaof，与salveof效果一致。</p>
<p>通过redis-cli命令连接7002，执行下面命令：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 连接 7002
redis-cli -p 7002
# 执行slaveof
slaveof 192.168.150.101 7001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>其他结点操作一样。</p>
<p><strong>在主节点中使用info replication 可以查看从节点的状态</strong></p>
<h1 id="哨兵集群"><a href="#哨兵集群" class="headerlink" title="哨兵集群"></a>哨兵集群</h1><blockquote>
<p>哨兵可以实现监控、故障转移、通知等功能</p>
<p>配置3个哨兵结点</p>
</blockquote>
<h2 id="创建实例-1"><a href="#创建实例-1" class="headerlink" title="创建实例"></a>创建实例</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入&#x2F;tmp目录
cd &#x2F;tmp
# 创建目录
mkdir s1 s2 s3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>在s1 s2 s3目录里面创建sentinel.conf文件</p>
<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">port 27001
sentinel announce-ip 192.168.217.4
sentinel monitor mymaster 192.168.217.4 2
sentinel down-after-milliseconds mymaster 5000
sentinel failover-timeout mymaster 60000
dir "/tmp/s1"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解读：</p>
<ul>
<li><p><code>port 27001</code>：是当前sentinel实例的端口</p>
</li>
<li><pre><code>sentinel monitor mymaster 192.168.150.101 7001 2
<pre class="line-numbers language-none"><code class="language-none">
  ：指定主节点信息

  - &#96;mymaster&#96;：主节点名称，自定义，任意写
  - &#96;192.168.150.101 7001&#96;：主节点的ip和端口
  - &#96;2&#96;：选举master时的quorum值

然后将s1&#x2F;sentinel.conf文件拷贝到s2、s3两个目录中（在&#x2F;tmp目录执行下列命令）：

&#96;&#96;&#96;sh
# 方式一：逐个拷贝
cp s1&#x2F;sentinel.conf s2
cp s1&#x2F;sentinel.conf s3
# 方式二：管道组合命令，一键拷贝
echo s2 s3 | xargs -t -n 1 cp s1&#x2F;sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre>
</li>
</ul>
<p>修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sed -i -e &#39;s&#x2F;27001&#x2F;27002&#x2F;g&#39; -e &#39;s&#x2F;s1&#x2F;s2&#x2F;g&#39; s2&#x2F;sentinel.conf
sed -i -e &#39;s&#x2F;27001&#x2F;27003&#x2F;g&#39; -e &#39;s&#x2F;s1&#x2F;s3&#x2F;g&#39; s3&#x2F;sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 第1个
redis-sentinel s1&#x2F;sentinel.conf
# 第2个
redis-sentinel s2&#x2F;sentinel.conf
# 第3个
redis-sentinel s3&#x2F;sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="springboot整合哨兵集群"><a href="#springboot整合哨兵集群" class="headerlink" title="springboot整合哨兵集群"></a>springboot整合哨兵集群</h2><p>引入redis的starter依赖</p>
<p>配置yml文件，<strong>只需要配置哨兵集群的信息，不需要配置redis实例的信息，因为客户端是通过找哨兵结点，然后获取实例的地址，这样当发生故障转移的时候，客户端仍然知道需要去哪里获取数据</strong></p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">master</span><span class="token punctuation">:</span> mymaster   <span class="token comment"># 指定master名称</span>
      <span class="token key atrule">nodes</span><span class="token punctuation">:</span>   <span class="token comment">#指定redis-sentinel集群信息</span>
        <span class="token punctuation">-</span> 192.168.217.4<span class="token punctuation">:</span><span class="token number">27001</span>
        <span class="token punctuation">-</span> 192.168.217.4<span class="token punctuation">:</span><span class="token number">27002</span>
        <span class="token punctuation">-</span> 192.168.217.4<span class="token punctuation">:</span><span class="token number">27003</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>配置读写分离</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220518161857091.png" alt="image-20220518161857091"></p>
<h1 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h1><blockquote>
<p>主从和哨兵可以解决高可用、高并发读的问题，但是仍然有两个问题没有解决：</p>
<ul>
<li>海量数据存储问题</li>
<li>高并发写的问题</li>
</ul>
</blockquote>
<p>分片集群特征：</p>
<ul>
<li>集群中有多个master，每个master保存不同数据</li>
<li>每个master都可以有多个slave结点</li>
<li>master之前通过ping监测彼此健康状态</li>
<li>客户端请求可以访问集群任意节点，最终都会被转发到正确结点</li>
</ul>
<h2 id="创建实例-2"><a href="#创建实例-2" class="headerlink" title="创建实例"></a>创建实例</h2><blockquote>
<p>此处创建6个实例，7001 7002 7003为master，8001 8002 8003为slave</p>
</blockquote>
<p>创建目录</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建目录
mkdir 7001 7002 7003 8001 8002 8003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>自己创建一个新的redis.conf文件</p>
<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">port 6379
<span class="token comment"># 开启集群功能</span>
cluster-enabled yes
<span class="token comment"># 集群的配置文件名称，不需要我们创建，由redis自己维护</span>
cluster-config-file /tmp/6379/nodes.conf
<span class="token comment"># 节点心跳失败的超时时间</span>
cluster-node-timeout 5000
<span class="token comment"># 持久化文件存放目录</span>
dir /tmp/6379
<span class="token comment"># 绑定地址</span>
bind 0.0.0.0
<span class="token comment"># 让redis后台运行</span>
daemonize yes
<span class="token comment"># 注册的实例ip</span>
replica-announce-ip 192.168.217.4
<span class="token comment"># 保护模式</span>
protected-mode no
<span class="token comment"># 数据库数量</span>
databases 1
<span class="token comment"># 日志</span>
logfile /tmp/6379/run.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>将文件拷贝到每个目录下</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 进入&#x2F;tmp目录
cd &#x2F;tmp
# 执行拷贝
echo 7001 7002 7003 8001 8002 8003 | xargs -t -n 1 cp redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 修改配置文件
printf &#39;%s\n&#39; 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t sed -i &#39;s&#x2F;6379&#x2F;&#123;&#125;&#x2F;g&#39; &#123;&#125;&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h2><p>因为配置了后台启动，所以可以直接启动服务</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 一键启动所有服务
printf &#39;%s\n&#39; 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-server &#123;&#125;&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>如果要关闭所有进程：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">printf &#39;%s\n&#39; 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><blockquote>
<p>虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联,我们需要执行命令来创建集群.</p>
</blockquote>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">redis-cli --cluster create --cluster-replicas 1 192.168.217.4:7001 192.168.217.4:7002 192.168.217.4:7003 192.168.217.4:8001 192.168.217.4:8002 192.168.217.4:8003<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>命令说明：</p>
<ul>
<li><code>redis-cli --cluster</code>或者<code>./redis-trib.rb</code>：代表集群操作命令</li>
<li><code>create</code>：代表是创建集群</li>
<li><code>--replicas 1</code>或者<code>--cluster-replicas 1</code> ：指定集群中每个master的副本个数为1，此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master</li>
</ul>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220518165636805.png" alt="image-20220518165636805"></p>
<p>通过命令可以查看集群状态：<code>redis-cli -p 7001 cluster nodes</code>,端口可以是集群中的任意一个结点</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220518165535210.png" alt="image-20220518165535210"></p>
<h2 id="给集群添加一个结点"><a href="#给集群添加一个结点" class="headerlink" title="给集群添加一个结点"></a>给集群添加一个结点</h2><p>重新创建一个实例，然后将集群的配置文件放到目录下，修改好路径，启动实例。</p>
<p>使用<code>redis-cli --cluster add-node 要添加结点的ip端口号  集群中任意一个结点ip端口号</code>将结点添加到集群中。</p>
<h2 id="分配插槽"><a href="#分配插槽" class="headerlink" title="分配插槽"></a>分配插槽</h2><p>使用<code>redis-cli --cluster reshard 集群任意一个ip端口</code>分配插槽，根据提示信息即可完成</p>
<h2 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h2><p>master宕机后，会自动完成故障转移。</p>
<p>在一个slave结点中，使用<code>cluster failover</code>命令可以实现手动故障转移，他的master会变成slave，他自己变成master</p>
<h2 id="springboot整合分片集群"><a href="#springboot整合分片集群" class="headerlink" title="springboot整合分片集群"></a>springboot整合分片集群</h2><blockquote>
<p>1.引入redis的starter依赖</p>
<p>2.配置yml文件</p>
<p>3.配置读写分离</p>
</blockquote>
<p>引入依赖</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>配置yml文件</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">cluster</span><span class="token punctuation">:</span>
      <span class="token key atrule">nodes</span><span class="token punctuation">:</span>   
        <span class="token punctuation">-</span> 192.168.217.4<span class="token punctuation">:</span>2<span class="token punctuation">:</span><span class="token number">7001</span>
        <span class="token punctuation">-</span> 192.168.217.4<span class="token punctuation">:</span>2<span class="token punctuation">:</span><span class="token number">7002</span>
        <span class="token punctuation">-</span> 192.168.217.4<span class="token punctuation">:</span>2<span class="token punctuation">:</span><span class="token number">7003</span>
        <span class="token punctuation">-</span> 192.168.217.4<span class="token punctuation">:</span>2<span class="token punctuation">:</span><span class="token number">8001</span>
        <span class="token punctuation">-</span> 192.168.217.4<span class="token punctuation">:</span>2<span class="token punctuation">:</span><span class="token number">8002</span>
        <span class="token punctuation">-</span> 192.168.217.4<span class="token punctuation">:</span>2<span class="token punctuation">:</span><span class="token number">8003</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>配置读写分离</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">LettuceClientConfigurationBuilderCustomizer</span> <span class="token function">clientConfigurationBuilderCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> clientConfigurationBuilder <span class="token operator">-></span> clientConfigurationBuilder<span class="token punctuation">.</span><span class="token function">readFrom</span><span class="token punctuation">(</span><span class="token class-name">ReadFrom</span><span class="token punctuation">.</span>REPLICA_PREFERRED<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>redis黑马</title>
    <url>/2022/05/29/redis%20%E9%BB%91%E9%A9%AC/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="String命名方式"><a href="#String命名方式" class="headerlink" title="String命名方式"></a>String命名方式</h4><p><img src="/.com//blog\java复习\image-20220305145240506.png" alt="image-20220305145240506"></p>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p><img src="/.com//blog\java复习\image-20220305145458174.png" alt="image-20220305145458174"></p>
<p><img src="/.com//blog\java复习\image-20220305150210040.png" alt="image-20220305150210040"></p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><img src="/.com//blog\java复习\image-20220305153327413.png" alt="image-20220305153327413"></p>
<p><img src="/.com//blog\java复习\image-20220305154418649.png" alt="image-20220305154418649"></p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><img src="/.com//blog\java复习\image-20220305155510456.png" alt="image-20220305155510456"></p>
<p><img src="/.com//blog\java复习\image-20220305160246063.png" alt=" "></p>
<p><strong>==用于随机推送==</strong></p>
<p><img src="/.com//blog\java复习\image-20220305160742714.png" alt="image-20220305160742714"></p>
<h3 id="sorted-set-zset"><a href="#sorted-set-zset" class="headerlink" title="sorted_set(zset)"></a>sorted_set(zset)</h3><p><img src="/.com//blog\java复习\image-20220305162453500.png" alt="image-20220305162453500"></p>
<p><img src="/.com//blog\java复习\image-20220305162845435.png" alt="image-20220305162845435"></p>
<p><img src="/.com//blog\java复习\image-20220305163730760.png" alt="image-20220305163730760"></p>
<p><strong>做排行榜</strong></p>
<p><img src="/.com//blog\java复习\image-20220305170913560.png" alt="image-20220305170913560"></p>
<h2 id="高级数据类型"><a href="#高级数据类型" class="headerlink" title="高级数据类型"></a>高级数据类型</h2><h3 id="bitmaps"><a href="#bitmaps" class="headerlink" title="bitmaps"></a>bitmaps</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305215551318.png" alt="image-20220305215551318"></p>
<h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p><strong>应用场景：在统计访问量的时候，一个人多次访问一个网站，还是算作一个人。这个时候就需要统计基数。</strong></p>
<p>==占用的内存是固定的，2^64个不同元素的基数，只需要12kb的内存。==</p>
<p><img src="/.com//blog\java复习\image-20220306102643155.png" alt="image-20220306102643155"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306102839532.png" alt="image-20220306102839532"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306103049254.png" alt="image-20220306103049254"></p>
<h3 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h3><p><strong>只能计算水平，不能计算垂直距离，如果你在山下，他在山上，可能距离只有几百米。</strong></p>
<p><img src="/.com//blog\java复习\image-20220306103528145.png" alt="image-20220306103528145"></p>
<p><img src="/.com//blog\java复习\image-20220306103748591.png" alt="image-20220306103748591"></p>
<h2 id="服务器的配置"><a href="#服务器的配置" class="headerlink" title="服务器的配置"></a>服务器的配置</h2><p><img src="/.com//blog\java复习\image-20220305214048604.png" alt="image-20220305214048604"></p>
<p><strong>日志级别开发期设置为verbose即可，生产环境中配置为notice，简化日志输出量，降低写日志IO的频率</strong></p>
<p><img src="/.com//blog\java复习\image-20220305214235538.png" alt="image-20220305214235538"></p>
<p>单位是秒</p>
<p><img src="/.com//blog\java复习\image-20220305214350250.png" alt="image-20220305214350250"></p>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p><img src="/.com//blog\java复习\image-20220305174451622.png" alt="image-20220305174451622"></p>
<h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><h4 id="save指令"><a href="#save指令" class="headerlink" title="save指令"></a>save指令</h4><p>使用<code>save</code>命令手动执行保存操作，会生成一个叫<code>dump.rdb</code>的文件来保存快照信息</p>
<p><img src="/.com//blog\java复习\image-20220305174849937.png" alt="image-20220305174849937"></p>
<p><strong><code>save</code>指令的执行会阻塞当前redis服务器，知道当前rdb过程完成为止，有可能会造成上时间阻塞，线上环境不建议使用</strong></p>
<h4 id="bgsave指令"><a href="#bgsave指令" class="headerlink" title="bgsave指令"></a>bgsave指令</h4><p><img src="/.com//blog\java复习\image-20220305175814214.png" alt="image-20220305175814214"></p>
<p>提交保存命令，有服务器后台决定什么时候保存，不是马上保存</p>
<h4 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h4><p><img src="/.com//blog\java复习\image-20220305180017057.png" alt="image-20220305180017057"></p>
<p><img src="/.com//blog\java复习\image-20220305180026755.png" alt="image-20220305180026755"></p>
<p><img src="/.com//blog\java复习\image-20220305180600421.png" alt="image-20220305180600421"></p>
<h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p><img src="/.com//blog\java复习\image-20220305180951059.png" alt="image-20220305180951059"></p>
<p><img src="/.com//blog\java复习\image-20220305181055702.png" alt="image-20220305181055702"></p>
<p><img src="/.com//blog\java复习\image-20220305181326611.png" alt="image-20220305181326611"></p>
<p><img src="/.com//blog\java复习\image-20220305181842686.png" alt="image-20220305181842686"></p>
<p><img src="/.com//blog\java复习\image-20220305181941904.png" alt="image-20220305181941904"></p>
<p><img src="/.com//blog\java复习\image-20220305182455183.png" alt="image-20220305182455183"></p>
<p><img src="/.com//blog\java复习\image-20220305182937777.png" alt="image-20220305182937777"></p>
<p><img src="/.com//blog\java复习\image-20220305183043020.png" alt="image-20220305183043020"></p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305183124698.png" alt="image-20220305183124698"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305183517150.png" alt="image-20220305183517150"></p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><img src="/.com//blog\java复习\image-20220305203544777.png" alt="image-20220305203544777"></p>
<p><strong>加入事务的命令暂时进入到任务队列中，并没有立即执行，只有执行exec命令才开始执行</strong></p>
<p><img src="/.com//blog\java复习\image-20220305203944796.png" alt="image-20220305203944796"></p>
<p><img src="/.com//blog\java复习\image-20220305204337363.png" alt="image-20220305204337363"></p>
<p><img src="/.com//blog\java复习\image-20220305204549831.png" alt="image-20220305204549831"></p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305204811840.png" alt="image-20220305204811840"></p>
<p><strong>在事务之前添加watch，不能在开启事务之后再添加watch</strong></p>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><img src="/.com//blog\java复习\image-20220305205411064.png" alt="image-20220305205411064"></p>
<p><strong>必须锁同一个对象</strong></p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><img src="/.com//blog\java复习\image-20220305205943153.png" alt="image-20220305205943153"></p>
<p><img src="/.com//blog\java复习\image-20220305210015123.png" alt="image-20220305210015123"></p>
<h2 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h2><p><strong>过期数据：</strong>设置了有效期但是已经超时的数据</p>
<p><img src="/.com//blog\java复习\image-20220305211027639.png" alt="image-20220305211027639"></p>
<p><img src="/.com//blog\java复习\image-20220305211205516.png" alt="image-20220305211205516"></p>
<p><img src="/.com//blog\java复习\image-20220305212158883.png" alt="image-20220305212158883"></p>
<p><img src="/.com//blog\java复习\image-20220305212252768.png" alt="image-20220305212252768"></p>
<p><strong>redis内部使用了惰性删除和定期删除</strong></p>
<h3 id="逐出算法"><a href="#逐出算法" class="headerlink" title="逐出算法"></a>逐出算法</h3><p><img src="/.com//blog\java复习\image-20220305212527850.png" alt="image-20220305212527850"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220305212626026.png" alt="image-20220305212626026"></p>
<p><img src="/.com//blog\java复习\image-20220305212931160.png" alt="image-20220305212931160"></p>
<p><img src="/.com//blog\java复习\image-20220305213138141.png" alt=" "></p>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p><img src="/.com//blog\java复习\image-20220306104858862.png" alt="image-20220306104858862"></p>
<p><img src="/.com//blog\java复习\image-20220306105058615.png" alt="image-20220306105058615"></p>
<p><img src="/.com//blog\java复习\image-20220306105153719.png" alt="image-20220306105153719"></p>
<p><img src="/.com//blog\java复习\image-20220306105912646.png" alt="image-20220306105912646"></p>
<h3 id="主从复制的工作流程"><a href="#主从复制的工作流程" class="headerlink" title="主从复制的工作流程"></a>主从复制的工作流程</h3><p><img src="/.com//blog\java复习\image-20220306110202558.png" alt="image-20220306110202558"></p>
<h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><p><img src="/.com//blog\java复习\image-20220306110504327.png" alt="image-20220306110504327"></p>
<p><img src="/.com//blog\java复习\image-20220306111313162.png" alt="image-20220306111313162"></p>
<h4 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h4><p><img src="/.com//blog\java复习\image-20220306111841231.png" alt="image-20220306111841231"></p>
<p><img src="/.com//blog\java复习\image-20220306112310778.png" alt="image-20220306112310778"></p>
<p><img src="/.com//blog\java复习\image-20220306112547878.png" alt="image-20220306112547878"></p>
<h4 id="命令传播阶段"><a href="#命令传播阶段" class="headerlink" title="命令传播阶段"></a>命令传播阶段</h4><p><img src="/.com//blog\java复习\image-20220306112817915.png" alt="image-20220306112817915"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306113039939.png" alt="image-20220306113039939"></p>
<p><img src="/.com//blog\java复习\image-20220306113445015.png" alt="image-20220306113445015"></p>
<p><img src="/.com//blog\java复习\image-20220306113621935.png" alt="image-20220306113621935"></p>
<p><img src="/.com//blog\java复习\image-20220306113656411.png" alt="image-20220306113656411"></p>
<p><img src="/.com//blog\java复习\image-20220306114227118.png" alt="image-20220306114227118"></p>
<p><img src="/.com//blog\java复习\image-20220306114520969.png" alt="image-20220306114520969"></p>
<p><img src="/.com//blog\java复习\image-20220306114806850.png" alt="image-20220306114806850"></p>
<h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p><img src="/.com//blog\java复习\image-20220306120410301.png" alt="image-20220306120410301"></p>
<p><img src="/.com//blog\java复习\image-20220306120502893.png" alt="image-20220306120502893"></p>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p><img src="/.com//blog\java复习\image-20220306153648226.png" alt="image-20220306153648226"></p>
<p><img src="/.com//blog\java复习\image-20220306154156940.png" alt="image-20220306154156940"></p>
<p><img src="/.com//blog\java复习\image-20220306154218457.png" alt="image-20220306154218457"></p>
<h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><ul>
<li>请求数量较高</li>
<li>主从之间数据吞吐量较大，数据同步操作频度较高</li>
</ul>
<p><img src="/.com//blog\java复习\image-20220306155730705.png" alt="image-20220306155730705"></p>
<p><strong>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统，避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题，用户直接查询事先被预热的缓存数据。</strong></p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><img src="/.com//blog\java复习\image-20220306160005562.png" alt="image-20220306160005562"></p>
<p><img src="/.com//blog\java复习\image-20220306160056409.png" alt="image-20220306160056409"></p>
<p><img src="/.com//blog\java复习\image-20220306160221880.png" alt="image-20220306160221880"></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220306160330647.png" alt="image-20220306160330466"></p>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><img src="/.com//blog\java复习\image-20220306160852994.png" alt="image-20220306160852994"></p>
<p><img src="/.com//blog\java复习\image-20220306160922045.png" alt="image-20220306160922045"></p>
<p><img src="/.com//blog\java复习\image-20220306160958459.png" alt="image-20220306160958459"></p>
<p><img src="/.com//blog\java复习\image-20220306161158132.png" alt="image-20220306161158132"></p>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><img src="/.com//blog\java复习\image-20220306161223740.png" alt="image-20220306161223740"></p>
<p><img src="/.com//blog\java复习\image-20220306161306116.png" alt="image-20220306161306116"></p>
<p><img src="/.com//blog\java复习\image-20220306161347227.png" alt="image-20220306161347227"></p>
<p><img src="/.com//blog\java复习\image-20220306161425855.png" alt="image-20220306161425855"></p>
<p><img src="/.com//blog\java复习\image-20220306161809827.png" alt="image-20220306161809827"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/05/29/%E4%BD%BF%E7%94%A8%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%AF%B9hashmap%E7%9A%84%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<hr>
<h2 id="title：使用优先队列实现对hashmap的排序"><a href="#title：使用优先队列实现对hashmap的排序" class="headerlink" title="title：使用优先队列实现对hashmap的排序"></a>title：使用优先队列实现对hashmap的排序</h2><a id="more"></a>

<h1 id="根据hashmap的value值进行排序"><a href="#根据hashmap的value值进行排序" class="headerlink" title="根据hashmap的value值进行排序"></a>根据hashmap的value值进行排序</h1><blockquote>
<p>在一些场景下，我们使用hashmap进行统计，然后根据hashmap中value的值进行排序</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//模拟数据</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
        <span class="token comment">//创建优先队列并设置排序规则， </span>
        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span>  queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-></span>  e2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> e1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//将map的Entry加入到优先队列中</span>
        queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//获取到优先队列的长度，由于下面使用poll来拿到栈顶元素，使用poll方法后长度会减1，因此循环次数需要固定</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//优先队列使用堆来维护的，因此不能够直接遍历优先队列，你会发现直接遍历取出来的值不一定是按顺序</span>
        <span class="token comment">//这里需要使用取出栈顶元素，取出一个元素后，优先队列会自动维护堆</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>


    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="根据hashmap的key值进行排序"><a href="#根据hashmap的key值进行排序" class="headerlink" title="根据hashmap的key值进行排序"></a>根据hashmap的key值进行排序</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//和上面不同的是这里排序规则是比较key的</span>
        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span>  queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-></span>  e1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>windows端口命</title>
    <url>/2022/05/29/window%E7%AB%AF%E5%8F%A3%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<a id="more"></a>

<p>在控制台输入<code>netstat</code> 可以查看所有端口占用情况</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503110733768.png" alt="image-20220503110733768"></p>
<p>输入<code>netstat -ano</code>可以查看所有端口占用详细信息，包括父进程的pid</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503110720513.png" alt="image-20220503110720513"></p>
<p>输入<code>netstat -ano|findstr &quot;端口号&quot;</code>可以查看到具体的端口占用情况，有点类似于linux的 <code>grep</code></p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503110919357.png" alt="image-20220503110919357"></p>
<p>使用<code>tasklist</code>可以查看所有进程的情况</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503111010735.png" alt="image-20220503111010735"></p>
<p>使用<code>tasklist|findstr &quot;进程号&quot;</code>可以查看具体进程的情况</p>
<p><img src="https://pety.oss-cn-shenzhen.aliyuncs.com/img/image-20220503111115078.png" alt="image-20220503111115078"></p>
<p>使用<code>taskkill /pid 进程号</code>可以杀死一个进程</p>
<p>使用<code>taskkill /F /pid 进程号</code>可以强制杀死一个进程</p>
]]></content>
  </entry>
  <entry>
    <title>docker安装redis</title>
    <url>/2022/05/29/docker%E5%AE%89%E8%A3%85redis/</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>首先在宿主机创建一个redis目录，然后将默认的redis.conf文件复制到该目录下。如果没有，可以使用下面提供的配置。然后修改redis.conf目录下的配置，主要修改：<code>bind</code>，注释或者改为允许连接的ip地址，一般设置为0.0.0.0；<code>requirepass</code> 设置密码；·<code>daemonize</code>修改为no，不是后台启动，否则与docker run -d 冲突。</strong></p>
<p><strong>然后使用下面的命令启动redis</strong></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -p6379:6379 --name redis -v &#x2F;usr&#x2F;mydata&#x2F;redis&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf -v &#x2F;us
r&#x2F;mydata&#x2F;redis&#x2F;data:&#x2F;data -d redis:6.2.6 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>redis-server /etc/redis/redis.conf</code>表示读取redis.conf文件启动redis，由于容器内的redis.conf文件和宿主机的关联起来，因此读取的是宿主机的配置文件。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Redis configuration file example.

#

# Note that in order to read the configuration file, Redis must be

# started with the file path as first argument:

#

# .&#x2F;redis-server &#x2F;path&#x2F;to&#x2F;redis.conf

 

# Note on units: when memory size is needed, it is possible to specify

# it in the usual form of 1k 5GB 4M and so forth:

#

# 1k &#x3D;&gt; 1000 bytes

# 1kb &#x3D;&gt; 1024 bytes

# 1m &#x3D;&gt; 1000000 bytes

# 1mb &#x3D;&gt; 1024*1024 bytes

# 1g &#x3D;&gt; 1000000000 bytes

# 1gb &#x3D;&gt; 1024*1024*1024 bytes

#

# units are case insensitive so 1GB 1Gb 1gB are all the same.

 

################################## INCLUDES ###################################

 

# Include one or more other config files here.  This is useful if you

# have a standard template that goes to all Redis servers but also need

# to customize a few per-server settings.  Include files can include

# other files, so use this wisely.

#

# Notice option &quot;include&quot; won&#39;t be rewritten by command &quot;CONFIG REWRITE&quot;

# from admin or Redis Sentinel. Since Redis always uses the last processed

# line as value of a configuration directive, you&#39;d better put includes

# at the beginning of this file to avoid overwriting config change at runtime.

#

# If instead you are interested in using includes to override configuration

# options, it is better to use include as the last line.

#

# include &#x2F;path&#x2F;to&#x2F;local.conf

# include &#x2F;path&#x2F;to&#x2F;other.conf

 

################################## MODULES #####################################

 

# Load modules at startup. If the server is not able to load modules

# it will abort. It is possible to use multiple loadmodule directives.

#

# loadmodule &#x2F;path&#x2F;to&#x2F;my_module.so

# loadmodule &#x2F;path&#x2F;to&#x2F;other_module.so

 

################################## NETWORK #####################################

 

# By default, if no &quot;bind&quot; configuration directive is specified, Redis listens

# for connections from all the network interfaces available on the server.

# It is possible to listen to just one or multiple selected interfaces using

# the &quot;bind&quot; configuration directive, followed by one or more IP addresses.

#

# Examples:

#

# bind 192.168.1.100 10.0.0.1

# bind 127.0.0.1 ::1

#

# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the

# internet, binding to all the interfaces is dangerous and will expose the

# instance to everybody on the internet. So by default we uncomment the

# following bind directive, that will force Redis to listen only into

# the IPv4 loopback interface address (this means Redis will be able to

# accept connections only from clients running into the same computer it

# is running).

#

# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES

# JUST COMMENT THE FOLLOWING LINE.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#bind 127.0.0.1

 

# Protected mode is a layer of security protection, in order to avoid that

# Redis instances left open on the internet are accessed and exploited.

#

# When protected mode is on and if:

#

# 1) The server is not binding explicitly to a set of addresses using the

#    &quot;bind&quot; directive.

# 2) No password is configured.

#

# The server only accepts connections from clients connecting from the

# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain

# sockets.

#

# By default protected mode is enabled. You should disable it only if

# you are sure you want clients from other hosts to connect to Redis

# even if no authentication is configured, nor a specific set of interfaces

# are explicitly listed using the &quot;bind&quot; directive.

protected-mode no

 

# Accept connections on the specified port, default is 6379 (IANA #815344).

# If port 0 is specified Redis will not listen on a TCP socket.

port 6379

 

# TCP listen() backlog.

#

# In high requests-per-second environments you need an high backlog in order

# to avoid slow clients connections issues. Note that the Linux kernel

# will silently truncate it to the value of &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn so

# make sure to raise both the value of somaxconn and tcp_max_syn_backlog

# in order to get the desired effect.

tcp-backlog 511

 

# Unix socket.

#

# Specify the path for the Unix socket that will be used to listen for

# incoming connections. There is no default, so Redis will not listen

# on a unix socket when not specified.

#

# unixsocket &#x2F;tmp&#x2F;redis.sock

# unixsocketperm 700

 

# Close the connection after a client is idle for N seconds (0 to disable)

timeout 0

 

# TCP keepalive.

#

# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence

# of communication. This is useful for two reasons:

#

# 1) Detect dead peers.

# 2) Take the connection alive from the point of view of network

#    equipment in the middle.

#

# On Linux, the specified value (in seconds) is the period used to send ACKs.

# Note that to close the connection the double of the time is needed.

# On other kernels the period depends on the kernel configuration.

#

# A reasonable value for this option is 300 seconds, which is the new

# Redis default starting with Redis 3.2.1.

tcp-keepalive 300

 

################################# GENERAL #####################################

 

# By default Redis does not run as a daemon. Use &#39;yes&#39; if you need it.

# Note that Redis will write a pid file in &#x2F;var&#x2F;run&#x2F;redis.pid when daemonized.

daemonize no

 

# If you run Redis from upstart or systemd, Redis can interact with your

# supervision tree. Options:

#   supervised no      - no supervision interaction

#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode

#   supervised systemd - signal systemd by writing READY&#x3D;1 to $NOTIFY_SOCKET

#   supervised auto    - detect upstart or systemd method based on

#                        UPSTART_JOB or NOTIFY_SOCKET environment variables

# Note: these supervision methods only signal &quot;process is ready.&quot;

#       They do not enable continuous liveness pings back to your supervisor.

supervised no

 

# If a pid file is specified, Redis writes it where specified at startup

# and removes it at exit.

#

# When the server runs non daemonized, no pid file is created if none is

# specified in the configuration. When the server is daemonized, the pid file

# is used even if not specified, defaulting to &quot;&#x2F;var&#x2F;run&#x2F;redis.pid&quot;.

#

# Creating a pid file is best effort: if Redis is not able to create it

# nothing bad happens, the server will start and run normally.

pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid

 

# Specify the server verbosity level.

# This can be one of:

# debug (a lot of information, useful for development&#x2F;testing)

# verbose (many rarely useful info, but not a mess like the debug level)

# notice (moderately verbose, what you want in production probably)

# warning (only very important &#x2F; critical messages are logged)

loglevel notice

 

# Specify the log file name. Also the empty string can be used to force

# Redis to log on the standard output. Note that if you use standard

# output for logging but daemonize, logs will be sent to &#x2F;dev&#x2F;null

logfile &quot;&quot;

 

# To enable logging to the system logger, just set &#39;syslog-enabled&#39; to yes,

# and optionally update the other syslog parameters to suit your needs.

# syslog-enabled no

 

# Specify the syslog identity.

# syslog-ident redis

 

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.

# syslog-facility local0

 

# Set the number of databases. The default database is DB 0, you can select

# a different one on a per-connection basis using SELECT &lt;dbid&gt; where

# dbid is a number between 0 and &#39;databases&#39;-1

databases 16

 

# By default Redis shows an ASCII art logo only when started to log to the

# standard output and if the standard output is a TTY. Basically this means

# that normally a logo is displayed only in interactive sessions.

#

# However it is possible to force the pre-4.0 behavior and always show a

# ASCII art logo in startup logs by setting the following option to yes.

always-show-logo yes

 

################################ SNAPSHOTTING  ################################

#

# Save the DB on disk:

#

#   save &lt;seconds&gt; &lt;changes&gt;

#

#   Will save the DB if both the given number of seconds and the given

#   number of write operations against the DB occurred.

#

#   In the example below the behaviour will be to save:

#   after 900 sec (15 min) if at least 1 key changed

#   after 300 sec (5 min) if at least 10 keys changed

#   after 60 sec if at least 10000 keys changed

#

#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.

#

#   It is also possible to remove all the previously configured save

#   points by adding a save directive with a single empty string argument

#   like in the following example:

#

#   save &quot;&quot;

 

save 900 1

save 300 10

save 60 10000

 

# By default Redis will stop accepting writes if RDB snapshots are enabled

# (at least one save point) and the latest background save failed.

# This will make the user aware (in a hard way) that data is not persisting

# on disk properly, otherwise chances are that no one will notice and some

# disaster will happen.

#

# If the background saving process will start working again Redis will

# automatically allow writes again.

#

# However if you have setup your proper monitoring of the Redis server

# and persistence, you may want to disable this feature so that Redis will

# continue to work as usual even if there are problems with disk,

# permissions, and so forth.

stop-writes-on-bgsave-error yes

 

# Compress string objects using LZF when dump .rdb databases?

# For default that&#39;s set to &#39;yes&#39; as it&#39;s almost always a win.

# If you want to save some CPU in the saving child set it to &#39;no&#39; but

# the dataset will likely be bigger if you have compressible values or keys.

rdbcompression yes

 

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.

# This makes the format more resistant to corruption but there is a performance

# hit to pay (around 10%) when saving and loading RDB files, so you can disable it

# for maximum performances.

#

# RDB files created with checksum disabled have a checksum of zero that will

# tell the loading code to skip the check.

rdbchecksum yes

 

# The filename where to dump the DB

dbfilename dump.rdb

 

# The working directory.

#

# The DB will be written inside this directory, with the filename specified

# above using the &#39;dbfilename&#39; configuration directive.

#

# The Append Only File will also be created inside this directory.

#

# Note that you must specify a directory here, not a file name.

dir .&#x2F;

 

################################# REPLICATION #################################

 

# Master-Replica replication. Use replicaof to make a Redis instance a copy of

# another Redis server. A few things to understand ASAP about Redis replication.

#

#   +------------------+      +---------------+

#   |      Master      | ---&gt; |    Replica    |

#   | (receive writes) |      |  (exact copy) |

#   +------------------+      +---------------+

#

# 1) Redis replication is asynchronous, but you can configure a master to

#    stop accepting writes if it appears to be not connected with at least

#    a given number of replicas.

# 2) Redis replicas are able to perform a partial resynchronization with the

#    master if the replication link is lost for a relatively small amount of

#    time. You may want to configure the replication backlog size (see the next

#    sections of this file) with a sensible value depending on your needs.

# 3) Replication is automatic and does not need user intervention. After a

#    network partition replicas automatically try to reconnect to masters

#    and resynchronize with them.

#

# replicaof &lt;masterip&gt; &lt;masterport&gt;

 

# If the master is password protected (using the &quot;requirepass&quot; configuration

# directive below) it is possible to tell the replica to authenticate before

# starting the replication synchronization process, otherwise the master will

# refuse the replica request.

#

# masterauth &lt;master-password&gt;

 

# When a replica loses its connection with the master, or when the replication

# is still in progress, the replica can act in two different ways:

#

# 1) if replica-serve-stale-data is set to &#39;yes&#39; (the default) the replica will

#    still reply to client requests, possibly with out of date data, or the

#    data set may just be empty if this is the first synchronization.

#

# 2) if replica-serve-stale-data is set to &#39;no&#39; the replica will reply with

#    an error &quot;SYNC with master in progress&quot; to all the kind of commands

#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,

#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,

#    COMMAND, POST, HOST: and LATENCY.

#

replica-serve-stale-data yes

 

# You can configure a replica instance to accept writes or not. Writing against

# a replica instance may be useful to store some ephemeral data (because data

# written on a replica will be easily deleted after resync with the master) but

# may also cause problems if clients are writing to it because of a

# misconfiguration.

#

# Since Redis 2.6 by default replicas are read-only.

#

# Note: read only replicas are not designed to be exposed to untrusted clients

# on the internet. It&#39;s just a protection layer against misuse of the instance.

# Still a read only replica exports by default all the administrative commands

# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve

# security of read only replicas using &#39;rename-command&#39; to shadow all the

# administrative &#x2F; dangerous commands.

replica-read-only yes

 

# Replication SYNC strategy: disk or socket.

#

# -------------------------------------------------------

# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY

# -------------------------------------------------------

#

# New replicas and reconnecting replicas that are not able to continue the replication

# process just receiving differences, need to do what is called a &quot;full

# synchronization&quot;. An RDB file is transmitted from the master to the replicas.

# The transmission can happen in two different ways:

#

# 1) Disk-backed: The Redis master creates a new process that writes the RDB

#                 file on disk. Later the file is transferred by the parent

#                 process to the replicas incrementally.

# 2) Diskless: The Redis master creates a new process that directly writes the

#              RDB file to replica sockets, without touching the disk at all.

#

# With disk-backed replication, while the RDB file is generated, more replicas

# can be queued and served with the RDB file as soon as the current child producing

# the RDB file finishes its work. With diskless replication instead once

# the transfer starts, new replicas arriving will be queued and a new transfer

# will start when the current one terminates.

#

# When diskless replication is used, the master waits a configurable amount of

# time (in seconds) before starting the transfer in the hope that multiple replicas

# will arrive and the transfer can be parallelized.

#

# With slow disks and fast (large bandwidth) networks, diskless replication

# works better.

repl-diskless-sync no

 

# When diskless replication is enabled, it is possible to configure the delay

# the server waits in order to spawn the child that transfers the RDB via socket

# to the replicas.

#

# This is important since once the transfer starts, it is not possible to serve

# new replicas arriving, that will be queued for the next RDB transfer, so the server

# waits a delay in order to let more replicas arrive.

#

# The delay is specified in seconds, and by default is 5 seconds. To disable

# it entirely just set it to 0 seconds and the transfer will start ASAP.

repl-diskless-sync-delay 5

 

# Replicas send PINGs to server in a predefined interval. It&#39;s possible to change

# this interval with the repl_ping_replica_period option. The default value is 10

# seconds.

#

# repl-ping-replica-period 10

 

# The following option sets the replication timeout for:

#

# 1) Bulk transfer I&#x2F;O during SYNC, from the point of view of replica.

# 2) Master timeout from the point of view of replicas (data, pings).

# 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).

#

# It is important to make sure that this value is greater than the value

# specified for repl-ping-replica-period otherwise a timeout will be detected

# every time there is low traffic between the master and the replica.

#

# repl-timeout 60

 

# Disable TCP_NODELAY on the replica socket after SYNC?

#

# If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and

# less bandwidth to send data to replicas. But this can add a delay for

# the data to appear on the replica side, up to 40 milliseconds with

# Linux kernels using a default configuration.

#

# If you select &quot;no&quot; the delay for data to appear on the replica side will

# be reduced but more bandwidth will be used for replication.

#

# By default we optimize for low latency, but in very high traffic conditions

# or when the master and replicas are many hops away, turning this to &quot;yes&quot; may

# be a good idea.

repl-disable-tcp-nodelay no

 

# Set the replication backlog size. The backlog is a buffer that accumulates

# replica data when replicas are disconnected for some time, so that when a replica

# wants to reconnect again, often a full resync is not needed, but a partial

# resync is enough, just passing the portion of data the replica missed while

# disconnected.

#

# The bigger the replication backlog, the longer the time the replica can be

# disconnected and later be able to perform a partial resynchronization.

#

# The backlog is only allocated once there is at least a replica connected.

#

# repl-backlog-size 1mb

 

# After a master has no longer connected replicas for some time, the backlog

# will be freed. The following option configures the amount of seconds that

# need to elapse, starting from the time the last replica disconnected, for

# the backlog buffer to be freed.

#

# Note that replicas never free the backlog for timeout, since they may be

# promoted to masters later, and should be able to correctly &quot;partially

# resynchronize&quot; with the replicas: hence they should always accumulate backlog.

#

# A value of 0 means to never release the backlog.

#

# repl-backlog-ttl 3600

 

# The replica priority is an integer number published by Redis in the INFO output.

# It is used by Redis Sentinel in order to select a replica to promote into a

# master if the master is no longer working correctly.

#

# A replica with a low priority number is considered better for promotion, so

# for instance if there are three replicas with priority 10, 100, 25 Sentinel will

# pick the one with priority 10, that is the lowest.

#

# However a special priority of 0 marks the replica as not able to perform the

# role of master, so a replica with priority of 0 will never be selected by

# Redis Sentinel for promotion.

#

# By default the priority is 100.

replica-priority 100

 

# It is possible for a master to stop accepting writes if there are less than

# N replicas connected, having a lag less or equal than M seconds.

#

# The N replicas need to be in &quot;online&quot; state.

#

# The lag in seconds, that must be &lt;&#x3D; the specified value, is calculated from

# the last ping received from the replica, that is usually sent every second.

#

# This option does not GUARANTEE that N replicas will accept the write, but

# will limit the window of exposure for lost writes in case not enough replicas

# are available, to the specified number of seconds.

#

# For example to require at least 3 replicas with a lag &lt;&#x3D; 10 seconds use:

#

# min-replicas-to-write 3

# min-replicas-max-lag 10

#

# Setting one or the other to 0 disables the feature.

#

# By default min-replicas-to-write is set to 0 (feature disabled) and

# min-replicas-max-lag is set to 10.

 

# A Redis master is able to list the address and port of the attached

# replicas in different ways. For example the &quot;INFO replication&quot; section

# offers this information, which is used, among other tools, by

# Redis Sentinel in order to discover replica instances.

# Another place where this info is available is in the output of the

# &quot;ROLE&quot; command of a master.

#

# The listed IP and address normally reported by a replica is obtained

# in the following way:

#

#   IP: The address is auto detected by checking the peer address

#   of the socket used by the replica to connect with the master.

#

#   Port: The port is communicated by the replica during the replication

#   handshake, and is normally the port that the replica is using to

#   listen for connections.

#

# However when port forwarding or Network Address Translation (NAT) is

# used, the replica may be actually reachable via different IP and port

# pairs. The following two options can be used by a replica in order to

# report to its master a specific set of IP and port, so that both INFO

# and ROLE will report those values.

#

# There is no need to use both the options if you need to override just

# the port or the IP address.

#

# replica-announce-ip 5.5.5.5

# replica-announce-port 1234

 

################################## SECURITY ###################################

 

# Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other

# commands.  This might be useful in environments in which you do not trust

# others with access to the host running redis-server.

#

# This should stay commented out for backward compatibility and because most

# people do not need auth (e.g. they run their own servers).

#

# Warning: since Redis is pretty fast an outside user can try up to

# 150k passwords per second against a good box. This means that you should

# use a very strong password otherwise it will be very easy to break.

#

# requirepass foobared

 

# Command renaming.

#

# It is possible to change the name of dangerous commands in a shared

# environment. For instance the CONFIG command may be renamed into something

# hard to guess so that it will still be available for internal-use tools

# but not available for general clients.

#

# Example:

#

# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52

#

# It is also possible to completely kill a command by renaming it into

# an empty string:

#

# rename-command CONFIG &quot;&quot;

#

# Please note that changing the name of commands that are logged into the

# AOF file or transmitted to replicas may cause problems.

 

################################### CLIENTS ####################################

 

# Set the max number of connected clients at the same time. By default

# this limit is set to 10000 clients, however if the Redis server is not

# able to configure the process file limit to allow for the specified limit

# the max number of allowed clients is set to the current file limit

# minus 32 (as Redis reserves a few file descriptors for internal uses).

#

# Once the limit is reached Redis will close all the new connections sending

# an error &#39;max number of clients reached&#39;.

#

# maxclients 10000

 

############################## MEMORY MANAGEMENT ################################

 

# Set a memory usage limit to the specified amount of bytes.

# When the memory limit is reached Redis will try to remove keys

# according to the eviction policy selected (see maxmemory-policy).

#

# If Redis can&#39;t remove keys according to the policy, or if the policy is

# set to &#39;noeviction&#39;, Redis will start to reply with errors to commands

# that would use more memory, like SET, LPUSH, and so on, and will continue

# to reply to read-only commands like GET.

#

# This option is usually useful when using Redis as an LRU or LFU cache, or to

# set a hard memory limit for an instance (using the &#39;noeviction&#39; policy).

#

# WARNING: If you have replicas attached to an instance with maxmemory on,

# the size of the output buffers needed to feed the replicas are subtracted

# from the used memory count, so that network problems &#x2F; resyncs will

# not trigger a loop where keys are evicted, and in turn the output

# buffer of replicas is full with DELs of keys evicted triggering the deletion

# of more keys, and so forth until the database is completely emptied.

#

# In short... if you have replicas attached it is suggested that you set a lower

# limit for maxmemory so that there is some free RAM on the system for replica

# output buffers (but this is not needed if the policy is &#39;noeviction&#39;).

#

# maxmemory &lt;bytes&gt;

 

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory

# is reached. You can select among five behaviors:

#

# volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.

# allkeys-lru -&gt; Evict any key using approximated LRU.

# volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set.

# allkeys-lfu -&gt; Evict any key using approximated LFU.

# volatile-random -&gt; Remove a random key among the ones with an expire set.

# allkeys-random -&gt; Remove a random key, any key.

# volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)

# noeviction -&gt; Don&#39;t evict anything, just return an error on write operations.

#

# LRU means Least Recently Used

# LFU means Least Frequently Used

#

# Both LRU, LFU and volatile-ttl are implemented using approximated

# randomized algorithms.

#

# Note: with any of the above policies, Redis will return an error on write

#       operations, when there are no suitable keys for eviction.

#

#       At the date of writing these commands are: set setnx setex append

#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd

#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby

#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby

#       getset mset msetnx exec sort

#

# The default is:

#

# maxmemory-policy noeviction

 

# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated

# algorithms (in order to save memory), so you can tune it for speed or

# accuracy. For default Redis will check five keys and pick the one that was

# used less recently, you can change the sample size using the following

# configuration directive.

#

# The default of 5 produces good enough results. 10 Approximates very closely

# true LRU but costs more CPU. 3 is faster but not very accurate.

#

# maxmemory-samples 5

 

# Starting from Redis 5, by default a replica will ignore its maxmemory setting

# (unless it is promoted to master after a failover or manually). It means

# that the eviction of keys will be just handled by the master, sending the

# DEL commands to the replica as keys evict in the master side.

#

# This behavior ensures that masters and replicas stay consistent, and is usually

# what you want, however if your replica is writable, or you want the replica to have

# a different memory setting, and you are sure all the writes performed to the

# replica are idempotent, then you may change this default (but be sure to understand

# what you are doing).

#

# Note that since the replica by default does not evict, it may end using more

# memory than the one set via maxmemory (there are certain buffers that may

# be larger on the replica, or data structures may sometimes take more memory and so

# forth). So make sure you monitor your replicas and make sure they have enough

# memory to never hit a real out-of-memory condition before the master hits

# the configured maxmemory setting.

#

# replica-ignore-maxmemory yes

 

############################# LAZY FREEING ####################################

 

# Redis has two primitives to delete keys. One is called DEL and is a blocking

# deletion of the object. It means that the server stops processing new commands

# in order to reclaim all the memory associated with an object in a synchronous

# way. If the key deleted is associated with a small object, the time needed

# in order to execute the DEL command is very small and comparable to most other

# O(1) or O(log_N) commands in Redis. However if the key is associated with an

# aggregated value containing millions of elements, the server can block for

# a long time (even seconds) in order to complete the operation.

#

# For the above reasons Redis also offers non blocking deletion primitives

# such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and

# FLUSHDB commands, in order to reclaim memory in background. Those commands

# are executed in constant time. Another thread will incrementally free the

# object in the background as fast as possible.

#

# DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.

# It&#39;s up to the design of the application to understand when it is a good

# idea to use one or the other. However the Redis server sometimes has to

# delete keys or flush the whole database as a side effect of other operations.

# Specifically Redis deletes objects independently of a user call in the

# following scenarios:

#

# 1) On eviction, because of the maxmemory and maxmemory policy configurations,

#    in order to make room for new data, without going over the specified

#    memory limit.

# 2) Because of expire: when a key with an associated time to live (see the

#    EXPIRE command) must be deleted from memory.

# 3) Because of a side effect of a command that stores data on a key that may

#    already exist. For example the RENAME command may delete the old key

#    content when it is replaced with another one. Similarly SUNIONSTORE

#    or SORT with STORE option may delete existing keys. The SET command

#    itself removes any old content of the specified key in order to replace

#    it with the specified string.

# 4) During replication, when a replica performs a full resynchronization with

#    its master, the content of the whole database is removed in order to

#    load the RDB file just transferred.

#

# In all the above cases the default is to delete objects in a blocking way,

# like if DEL was called. However you can configure each case specifically

# in order to instead release memory in a non-blocking way like if UNLINK

# was called, using the following configuration directives:

 

lazyfree-lazy-eviction no

lazyfree-lazy-expire no

lazyfree-lazy-server-del no

replica-lazy-flush no

 

############################## APPEND ONLY MODE ###############################

 

# By default Redis asynchronously dumps the dataset on disk. This mode is

# good enough in many applications, but an issue with the Redis process or

# a power outage may result into a few minutes of writes lost (depending on

# the configured save points).

#

# The Append Only File is an alternative persistence mode that provides

# much better durability. For instance using the default data fsync policy

# (see later in the config file) Redis can lose just one second of writes in a

# dramatic event like a server power outage, or a single write if something

# wrong with the Redis process itself happens, but the operating system is

# still running correctly.

#

# AOF and RDB persistence can be enabled at the same time without problems.

# If the AOF is enabled on startup Redis will load the AOF, that is the file

# with the better durability guarantees.

#

# Please check http:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;persistence for more information.

 

appendonly no

 

# The name of the append only file (default: &quot;appendonly.aof&quot;)

 

appendfilename &quot;appendonly.aof&quot;

 

# The fsync() call tells the Operating System to actually write data on disk

# instead of waiting for more data in the output buffer. Some OS will really flush

# data on disk, some other OS will just try to do it ASAP.

#

# Redis supports three different modes:

#

# no: don&#39;t fsync, just let the OS flush the data when it wants. Faster.

# always: fsync after every write to the append only log. Slow, Safest.

# everysec: fsync only one time every second. Compromise.

#

# The default is &quot;everysec&quot;, as that&#39;s usually the right compromise between

# speed and data safety. It&#39;s up to you to understand if you can relax this to

# &quot;no&quot; that will let the operating system flush the output buffer when

# it wants, for better performances (but if you can live with the idea of

# some data loss consider the default persistence mode that&#39;s snapshotting),

# or on the contrary, use &quot;always&quot; that&#39;s very slow but a bit safer than

# everysec.

#

# More details please check the following article:

# http:&#x2F;&#x2F;antirez.com&#x2F;post&#x2F;redis-persistence-demystified.html

#

# If unsure, use &quot;everysec&quot;.

 

# appendfsync always

appendfsync everysec

# appendfsync no

 

# When the AOF fsync policy is set to always or everysec, and a background

# saving process (a background save or AOF log background rewriting) is

# performing a lot of I&#x2F;O against the disk, in some Linux configurations

# Redis may block too long on the fsync() call. Note that there is no fix for

# this currently, as even performing fsync in a different thread will block

# our synchronous write(2) call.

#

# In order to mitigate this problem it&#39;s possible to use the following option

# that will prevent fsync() from being called in the main process while a

# BGSAVE or BGREWRITEAOF is in progress.

#

# This means that while another child is saving, the durability of Redis is

# the same as &quot;appendfsync none&quot;. In practical terms, this means that it is

# possible to lose up to 30 seconds of log in the worst scenario (with the

# default Linux settings).

#

# If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as

# &quot;no&quot; that is the safest pick from the point of view of durability.

 

no-appendfsync-on-rewrite no

 

# Automatic rewrite of the append only file.

# Redis is able to automatically rewrite the log file implicitly calling

# BGREWRITEAOF when the AOF log size grows by the specified percentage.

#

# This is how it works: Redis remembers the size of the AOF file after the

# latest rewrite (if no rewrite has happened since the restart, the size of

# the AOF at startup is used).

#

# This base size is compared to the current size. If the current size is

# bigger than the specified percentage, the rewrite is triggered. Also

# you need to specify a minimal size for the AOF file to be rewritten, this

# is useful to avoid rewriting the AOF file even if the percentage increase

# is reached but it is still pretty small.

#

# Specify a percentage of zero in order to disable the automatic AOF

# rewrite feature.

 

auto-aof-rewrite-percentage 100

auto-aof-rewrite-min-size 64mb

 

# An AOF file may be found to be truncated at the end during the Redis

# startup process, when the AOF data gets loaded back into memory.

# This may happen when the system where Redis is running

# crashes, especially when an ext4 filesystem is mounted without the

# data&#x3D;ordered option (however this can&#39;t happen when Redis itself

# crashes or aborts but the operating system still works correctly).

#

# Redis can either exit with an error when this happens, or load as much

# data as possible (the default now) and start if the AOF file is found

# to be truncated at the end. The following option controls this behavior.

#

# If aof-load-truncated is set to yes, a truncated AOF file is loaded and

# the Redis server starts emitting a log to inform the user of the event.

# Otherwise if the option is set to no, the server aborts with an error

# and refuses to start. When the option is set to no, the user requires

# to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart

# the server.

#

# Note that if the AOF file will be found to be corrupted in the middle

# the server will still exit with an error. This option only applies when

# Redis will try to read more data from the AOF file but not enough bytes

# will be found.

aof-load-truncated yes

 

# When rewriting the AOF file, Redis is able to use an RDB preamble in the

# AOF file for faster rewrites and recoveries. When this option is turned

# on the rewritten AOF file is composed of two different stanzas:

#

#   [RDB file][AOF tail]

#

# When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot;

# string and loads the prefixed RDB file, and continues loading the AOF

# tail.

aof-use-rdb-preamble yes

 

################################ LUA SCRIPTING  ###############################

 

# Max execution time of a Lua script in milliseconds.

#

# If the maximum execution time is reached Redis will log that a script is

# still in execution after the maximum allowed time and will start to

# reply to queries with an error.

#

# When a long running script exceeds the maximum execution time only the

# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be

# used to stop a script that did not yet called write commands. The second

# is the only way to shut down the server in the case a write command was

# already issued by the script but the user doesn&#39;t want to wait for the natural

# termination of the script.

#

# Set it to 0 or a negative value for unlimited execution without warnings.

lua-time-limit 5000

 

################################ REDIS CLUSTER  ###############################

 

# Normal Redis instances can&#39;t be part of a Redis Cluster; only nodes that are

# started as cluster nodes can. In order to start a Redis instance as a

# cluster node enable the cluster support uncommenting the following:

#

# cluster-enabled yes

 

# Every cluster node has a cluster configuration file. This file is not

# intended to be edited by hand. It is created and updated by Redis nodes.

# Every Redis Cluster node requires a different cluster configuration file.

# Make sure that instances running in the same system do not have

# overlapping cluster configuration file names.

#

# cluster-config-file nodes-6379.conf

 

# Cluster node timeout is the amount of milliseconds a node must be unreachable

# for it to be considered in failure state.

# Most other internal time limits are multiple of the node timeout.

#

# cluster-node-timeout 15000

 

# A replica of a failing master will avoid to start a failover if its data

# looks too old.

#

# There is no simple way for a replica to actually have an exact measure of

# its &quot;data age&quot;, so the following two checks are performed:

#

# 1) If there are multiple replicas able to failover, they exchange messages

#    in order to try to give an advantage to the replica with the best

#    replication offset (more data from the master processed).

#    Replicas will try to get their rank by offset, and apply to the start

#    of the failover a delay proportional to their rank.

#

# 2) Every single replica computes the time of the last interaction with

#    its master. This can be the last ping or command received (if the master

#    is still in the &quot;connected&quot; state), or the time that elapsed since the

#    disconnection with the master (if the replication link is currently down).

#    If the last interaction is too old, the replica will not try to failover

#    at all.

#

# The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform

# the failover if, since the last interaction with the master, the time

# elapsed is greater than:

#

#   (node-timeout * replica-validity-factor) + repl-ping-replica-period

#

# So for example if node-timeout is 30 seconds, and the replica-validity-factor

# is 10, and assuming a default repl-ping-replica-period of 10 seconds, the

# replica will not try to failover if it was not able to talk with the master

# for longer than 310 seconds.

#

# A large replica-validity-factor may allow replicas with too old data to failover

# a master, while a too small value may prevent the cluster from being able to

# elect a replica at all.

#

# For maximum availability, it is possible to set the replica-validity-factor

# to a value of 0, which means, that replicas will always try to failover the

# master regardless of the last time they interacted with the master.

# (However they&#39;ll always try to apply a delay proportional to their

# offset rank).

#

# Zero is the only value able to guarantee that when all the partitions heal

# the cluster will always be able to continue.

#

# cluster-replica-validity-factor 10

 

# Cluster replicas are able to migrate to orphaned masters, that are masters

# that are left without working replicas. This improves the cluster ability

# to resist to failures as otherwise an orphaned master can&#39;t be failed over

# in case of failure if it has no working replicas.

#

# Replicas migrate to orphaned masters only if there are still at least a

# given number of other working replicas for their old master. This number

# is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica

# will migrate only if there is at least 1 other working replica for its master

# and so forth. It usually reflects the number of replicas you want for every

# master in your cluster.

#

# Default is 1 (replicas migrate only if their masters remain with at least

# one replica). To disable migration just set it to a very large value.

# A value of 0 can be set but is useful only for debugging and dangerous

# in production.

#

# cluster-migration-barrier 1

 

# By default Redis Cluster nodes stop accepting queries if they detect there

# is at least an hash slot uncovered (no available node is serving it).

# This way if the cluster is partially down (for example a range of hash slots

# are no longer covered) all the cluster becomes, eventually, unavailable.

# It automatically returns available as soon as all the slots are covered again.

#

# However sometimes you want the subset of the cluster which is working,

# to continue to accept queries for the part of the key space that is still

# covered. In order to do so, just set the cluster-require-full-coverage

# option to no.

#

# cluster-require-full-coverage yes

 

# This option, when set to yes, prevents replicas from trying to failover its

# master during master failures. However the master can still perform a

# manual failover, if forced to do so.

#

# This is useful in different scenarios, especially in the case of multiple

# data center operations, where we want one side to never be promoted if not

# in the case of a total DC failure.

#

# cluster-replica-no-failover no

 

# In order to setup your cluster make sure to read the documentation

# available at http:&#x2F;&#x2F;redis.io web site.

 

########################## CLUSTER DOCKER&#x2F;NAT support  ########################

 

# In certain deployments, Redis Cluster nodes address discovery fails, because

# addresses are NAT-ted or because ports are forwarded (the typical case is

# Docker and other containers).

#

# In order to make Redis Cluster working in such environments, a static

# configuration where each node knows its public address is needed. The

# following two options are used for this scope, and are:

#

# * cluster-announce-ip

# * cluster-announce-port

# * cluster-announce-bus-port

#

# Each instruct the node about its address, client port, and cluster message

# bus port. The information is then published in the header of the bus packets

# so that other nodes will be able to correctly map the address of the node

# publishing the information.

#

# If the above options are not used, the normal Redis Cluster auto-detection

# will be used instead.

#

# Note that when remapped, the bus port may not be at the fixed offset of

# clients port + 10000, so you can specify any port and bus-port depending

# on how they get remapped. If the bus-port is not set, a fixed offset of

# 10000 will be used as usually.

#

# Example:

#

# cluster-announce-ip 10.1.1.5

# cluster-announce-port 6379

# cluster-announce-bus-port 6380

 

################################## SLOW LOG ###################################

 

# The Redis Slow Log is a system to log queries that exceeded a specified

# execution time. The execution time does not include the I&#x2F;O operations

# like talking with the client, sending the reply and so forth,

# but just the time needed to actually execute the command (this is the only

# stage of command execution where the thread is blocked and can not serve

# other requests in the meantime).

#

# You can configure the slow log with two parameters: one tells Redis

# what is the execution time, in microseconds, to exceed in order for the

# command to get logged, and the other parameter is the length of the

# slow log. When a new command is logged the oldest one is removed from the

# queue of logged commands.

 

# The following time is expressed in microseconds, so 1000000 is equivalent

# to one second. Note that a negative number disables the slow log, while

# a value of zero forces the logging of every command.

slowlog-log-slower-than 10000

 

# There is no limit to this length. Just be aware that it will consume memory.

# You can reclaim memory used by the slow log with SLOWLOG RESET.

slowlog-max-len 128

 

################################ LATENCY MONITOR ##############################

 

# The Redis latency monitoring subsystem samples different operations

# at runtime in order to collect data related to possible sources of

# latency of a Redis instance.

#

# Via the LATENCY command this information is available to the user that can

# print graphs and obtain reports.

#

# The system only logs operations that were performed in a time equal or

# greater than the amount of milliseconds specified via the

# latency-monitor-threshold configuration directive. When its value is set

# to zero, the latency monitor is turned off.

#

# By default latency monitoring is disabled since it is mostly not needed

# if you don&#39;t have latency issues, and collecting data has a performance

# impact, that while very small, can be measured under big load. Latency

# monitoring can easily be enabled at runtime using the command

# &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.

latency-monitor-threshold 0

 

############################# EVENT NOTIFICATION ##############################

 

# Redis can notify Pub&#x2F;Sub clients about events happening in the key space.

# This feature is documented at http:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;notifications

#

# For instance if keyspace events notification is enabled, and a client

# performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two

# messages will be published via Pub&#x2F;Sub:

#

# PUBLISH __keyspace@0__:foo del

# PUBLISH __keyevent@0__:del foo

#

# It is possible to select the events that Redis will notify among a set

# of classes. Every class is identified by a single character:

#

#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.

#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.

#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...

#  $     String commands

#  l     List commands

#  s     Set commands

#  h     Hash commands

#  z     Sorted set commands

#  x     Expired events (events generated every time a key expires)

#  e     Evicted events (events generated when a key is evicted for maxmemory)

#  A     Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.

#

#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed

#  of zero or multiple characters. The empty string means that notifications

#  are disabled.

#

#  Example: to enable list and generic events, from the point of view of the

#           event name, use:

#

#  notify-keyspace-events Elg

#

#  Example 2: to get the stream of the expired keys subscribing to channel

#             name __keyevent@0__:expired use:

#

  notify-keyspace-events Ex

#

#  By default all notifications are disabled because most users don&#39;t need

#  this feature and the feature has some overhead. Note that if you don&#39;t

#  specify at least one of K or E, no events will be delivered.

#notify-keyspace-events &quot;&quot;

 

############################### ADVANCED CONFIG ###############################

 

# Hashes are encoded using a memory efficient data structure when they have a

# small number of entries, and the biggest entry does not exceed a given

# threshold. These thresholds can be configured using the following directives.

hash-max-ziplist-entries 512

hash-max-ziplist-value 64

 

# Lists are also encoded in a special way to save a lot of space.

# The number of entries allowed per internal list node can be specified

# as a fixed maximum size or a maximum number of elements.

# For a fixed maximum size, use -5 through -1, meaning:

# -5: max size: 64 Kb  &lt;-- not recommended for normal workloads

# -4: max size: 32 Kb  &lt;-- not recommended

# -3: max size: 16 Kb  &lt;-- probably not recommended

# -2: max size: 8 Kb   &lt;-- good

# -1: max size: 4 Kb   &lt;-- good

# Positive numbers mean store up to _exactly_ that number of elements

# per list node.

# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),

# but if your use case is unique, adjust the settings as necessary.

list-max-ziplist-size -2

 

# Lists may also be compressed.

# Compress depth is the number of quicklist ziplist nodes from *each* side of

# the list to *exclude* from compression.  The head and tail of the list

# are always uncompressed for fast push&#x2F;pop operations.  Settings are:

# 0: disable all list compression

# 1: depth 1 means &quot;don&#39;t start compressing until after 1 node into the list,

#    going from either the head or tail&quot;

#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]

#    [head], [tail] will always be uncompressed; inner nodes will compress.

# 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]

#    2 here means: don&#39;t compress head or head-&gt;next or tail-&gt;prev or tail,

#    but compress all nodes between them.

# 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]

# etc.

list-compress-depth 0

 

# Sets have a special encoding in just one case: when a set is composed

# of just strings that happen to be integers in radix 10 in the range

# of 64 bit signed integers.

# The following configuration setting sets the limit in the size of the

# set in order to use this special memory saving encoding.

set-max-intset-entries 512

 

# Similarly to hashes and lists, sorted sets are also specially encoded in

# order to save a lot of space. This encoding is only used when the length and

# elements of a sorted set are below the following limits:

zset-max-ziplist-entries 128

zset-max-ziplist-value 64

 

# HyperLogLog sparse representation bytes limit. The limit includes the

# 16 bytes header. When an HyperLogLog using the sparse representation crosses

# this limit, it is converted into the dense representation.

#

# A value greater than 16000 is totally useless, since at that point the

# dense representation is more memory efficient.

#

# The suggested value is ~ 3000 in order to have the benefits of

# the space efficient encoding without slowing down too much PFADD,

# which is O(N) with the sparse encoding. The value can be raised to

# ~ 10000 when CPU is not a concern, but space is, and the data set is

# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.

hll-sparse-max-bytes 3000

 

# Streams macro node max size &#x2F; items. The stream data structure is a radix

# tree of big nodes that encode multiple items inside. Using this configuration

# it is possible to configure how big a single node can be in bytes, and the

# maximum number of items it may contain before switching to a new node when

# appending new stream entries. If any of the following settings are set to

# zero, the limit is ignored, so for instance it is possible to set just a

# max entires limit by setting max-bytes to 0 and max-entries to the desired

# value.

stream-node-max-bytes 4096

stream-node-max-entries 100

 

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in

# order to help rehashing the main Redis hash table (the one mapping top-level

# keys to values). The hash table implementation Redis uses (see dict.c)

# performs a lazy rehashing: the more operation you run into a hash table

# that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the

# server is idle the rehashing is never complete and some more memory is used

# by the hash table.

#

# The default is to use this millisecond 10 times every second in order to

# actively rehash the main dictionaries, freeing memory when possible.

#

# If unsure:

# use &quot;activerehashing no&quot; if you have hard latency requirements and it is

# not a good thing in your environment that Redis can reply from time to time

# to queries with 2 milliseconds delay.

#

# use &quot;activerehashing yes&quot; if you don&#39;t have such hard requirements but

# want to free memory asap when possible.

activerehashing yes

 

# The client output buffer limits can be used to force disconnection of clients

# that are not reading data from the server fast enough for some reason (a

# common reason is that a Pub&#x2F;Sub client can&#39;t consume messages as fast as the

# publisher can produce them).

#

# The limit can be set differently for the three different classes of clients:

#

# normal -&gt; normal clients including MONITOR clients

# replica  -&gt; replica clients

# pubsub -&gt; clients subscribed to at least one pubsub channel or pattern

#

# The syntax of every client-output-buffer-limit directive is the following:

#

# client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;

#

# A client is immediately disconnected once the hard limit is reached, or if

# the soft limit is reached and remains reached for the specified number of

# seconds (continuously).

# So for instance if the hard limit is 32 megabytes and the soft limit is

# 16 megabytes &#x2F; 10 seconds, the client will get disconnected immediately

# if the size of the output buffers reach 32 megabytes, but will also get

# disconnected if the client reaches 16 megabytes and continuously overcomes

# the limit for 10 seconds.

#

# By default normal clients are not limited because they don&#39;t receive data

# without asking (in a push way), but just after a request, so only

# asynchronous clients may create a scenario where data is requested faster

# than it can read.

#

# Instead there is a default limit for pubsub and replica clients, since

# subscribers and replicas receive data in a push fashion.

#

# Both the hard or the soft limit can be disabled by setting them to zero.

client-output-buffer-limit normal 0 0 0

client-output-buffer-limit replica 256mb 64mb 60

client-output-buffer-limit pubsub 32mb 8mb 60

 

# Client query buffers accumulate new commands. They are limited to a fixed

# amount by default in order to avoid that a protocol desynchronization (for

# instance due to a bug in the client) will lead to unbound memory usage in

# the query buffer. However you can configure it here if you have very special

# needs, such us huge multi&#x2F;exec requests or alike.

#

# client-query-buffer-limit 1gb

 

# In the Redis protocol, bulk requests, that are, elements representing single

# strings, are normally limited ot 512 mb. However you can change this limit

# here.

#

# proto-max-bulk-len 512mb

 

# Redis calls an internal function to perform many background tasks, like

# closing connections of clients in timeout, purging expired keys that are

# never requested, and so forth.

#

# Not all tasks are performed with the same frequency, but Redis checks for

# tasks to perform according to the specified &quot;hz&quot; value.

#

# By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when

# Redis is idle, but at the same time will make Redis more responsive when

# there are many keys expiring at the same time, and timeouts may be

# handled with more precision.

#

# The range is between 1 and 500, however a value over 100 is usually not

# a good idea. Most users should use the default of 10 and raise this up to

# 100 only in environments where very low latency is required.

hz 10

 

# Normally it is useful to have an HZ value which is proportional to the

# number of clients connected. This is useful in order, for instance, to

# avoid too many clients are processed for each background task invocation

# in order to avoid latency spikes.

#

# Since the default HZ value by default is conservatively set to 10, Redis

# offers, and enables by default, the ability to use an adaptive HZ value

# which will temporary raise when there are many connected clients.

#

# When dynamic HZ is enabled, the actual configured HZ will be used as

# as a baseline, but multiples of the configured HZ value will be actually

# used as needed once more clients are connected. In this way an idle

# instance will use very little CPU time while a busy instance will be

# more responsive.

dynamic-hz yes

 

# When a child rewrites the AOF file, if the following option is enabled

# the file will be fsync-ed every 32 MB of data generated. This is useful

# in order to commit the file to the disk more incrementally and avoid

# big latency spikes.

aof-rewrite-incremental-fsync yes

 

# When redis saves RDB file, if the following option is enabled

# the file will be fsync-ed every 32 MB of data generated. This is useful

# in order to commit the file to the disk more incrementally and avoid

# big latency spikes.

rdb-save-incremental-fsync yes

 

# Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good

# idea to start with the default settings and only change them after investigating

# how to improve the performances and how the keys LFU change over time, which

# is possible to inspect via the OBJECT FREQ command.

#

# There are two tunable parameters in the Redis LFU implementation: the

# counter logarithm factor and the counter decay time. It is important to

# understand what the two parameters mean before changing them.

#

# The LFU counter is just 8 bits per key, it&#39;s maximum value is 255, so Redis

# uses a probabilistic increment with logarithmic behavior. Given the value

# of the old counter, when a key is accessed, the counter is incremented in

# this way:

#

# 1. A random number R between 0 and 1 is extracted.

# 2. A probability P is calculated as 1&#x2F;(old_value*lfu_log_factor+1).

# 3. The counter is incremented only if R &lt; P.

#

# The default lfu-log-factor is 10. This is a table of how the frequency

# counter changes with a different number of accesses with different

# logarithmic factors:

#

# +--------+------------+------------+------------+------------+------------+

# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |

# +--------+------------+------------+------------+------------+------------+

# | 0      | 104        | 255        | 255        | 255        | 255        |

# +--------+------------+------------+------------+------------+------------+

# | 1      | 18         | 49         | 255        | 255        | 255        |

# +--------+------------+------------+------------+------------+------------+

# | 10     | 10         | 18         | 142        | 255        | 255        |

# +--------+------------+------------+------------+------------+------------+

# | 100    | 8          | 11         | 49         | 143        | 255        |

# +--------+------------+------------+------------+------------+------------+

#

# NOTE: The above table was obtained by running the following commands:

#

#   redis-benchmark -n 1000000 incr foo

#   redis-cli object freq foo

#

# NOTE 2: The counter initial value is 5 in order to give new objects a chance

# to accumulate hits.

#

# The counter decay time is the time, in minutes, that must elapse in order

# for the key counter to be divided by two (or decremented if it has a value

# less &lt;&#x3D; 10).

#

# The default value for the lfu-decay-time is 1. A Special value of 0 means to

# decay the counter every time it happens to be scanned.

#

# lfu-log-factor 10

# lfu-decay-time 1

 

########################### ACTIVE DEFRAGMENTATION #######################

#

# WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested

# even in production and manually tested by multiple engineers for some

# time.

#

# What is active defragmentation?

# -------------------------------

#

# Active (online) defragmentation allows a Redis server to compact the

# spaces left between small allocations and deallocations of data in memory,

# thus allowing to reclaim back memory.

#

# Fragmentation is a natural process that happens with every allocator (but

# less so with Jemalloc, fortunately) and certain workloads. Normally a server

# restart is needed in order to lower the fragmentation, or at least to flush

# away all the data and create it again. However thanks to this feature

# implemented by Oran Agra for Redis 4.0 this process can happen at runtime

# in an &quot;hot&quot; way, while the server is running.

#

# Basically when the fragmentation is over a certain level (see the

# configuration options below) Redis will start to create new copies of the

# values in contiguous memory regions by exploiting certain specific Jemalloc

# features (in order to understand if an allocation is causing fragmentation

# and to allocate it in a better place), and at the same time, will release the

# old copies of the data. This process, repeated incrementally for all the keys

# will cause the fragmentation to drop back to normal values.

#

# Important things to understand:

#

# 1. This feature is disabled by default, and only works if you compiled Redis

#    to use the copy of Jemalloc we ship with the source code of Redis.

#    This is the default with Linux builds.

#

# 2. You never need to enable this feature if you don&#39;t have fragmentation

#    issues.

#

# 3. Once you experience fragmentation, you can enable this feature when

#    needed with the command &quot;CONFIG SET activedefrag yes&quot;.

#

# The configuration parameters are able to fine tune the behavior of the

# defragmentation process. If you are not sure about what they mean it is

# a good idea to leave the defaults untouched.

 

# Enabled active defragmentation

# activedefrag yes

 

# Minimum amount of fragmentation waste to start active defrag

# active-defrag-ignore-bytes 100mb

 

# Minimum percentage of fragmentation to start active defrag

# active-defrag-threshold-lower 10

 

# Maximum percentage of fragmentation at which we use maximum effort

# active-defrag-threshold-upper 100

 

# Minimal effort for defrag in CPU percentage

# active-defrag-cycle-min 5

 

# Maximal effort for defrag in CPU percentage

# active-defrag-cycle-max 75

 

# Maximum number of set&#x2F;hash&#x2F;zset&#x2F;list fields that will be processed from

# the main dictionary scan

# active-defrag-max-scan-fields 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
</search>
